#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FerretVehicle

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "CommonInput_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass FerretVehicle.FerretVehicle_C
// 0x0480 (0x16F0 - 0x1270)
class AFerretVehicle_C final : public AFortAthenaFerretVehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        AudioSpark;                                        // 0x1278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BoostMeter;                                        // 0x1280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioTaxi;                                         // 0x1288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioDive;                                         // 0x1290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioWind1P;                                       // 0x1298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioMovementDistant;                              // 0x12A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioMovementClose;                                // 0x12A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Plane_Boost_FX;                                  // 0x12B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Plane_SpeedFX;                                   // 0x12B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PropellerBlur;                                     // 0x12C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_WingTrail_BR;                                    // 0x12C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_WingTrail_UR;                                    // 0x12D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_WingTrail_BL;                                    // 0x12D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_WingTrail_UL;                                    // 0x12E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_CollisionBodies;                                // 0x12E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Reticle;                                           // 0x12F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortCollisionAudioComponent*           FortCollisionAudioSuspension;                      // 0x12F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OverlapVolume;                                     // 0x1300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortCollisionAudioComponent*           FortCollisionAudioImpacts;                         // 0x1308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Rumble_00CC94A74BB57FC31202F688686E09B7; // 0x1310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Track1_00CC94A74BB57FC31202F688686E09B7; // 0x1314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_00CC94A74BB57FC31202F688686E09B7; // 0x1318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1319[0x7];                                     // 0x1319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x1320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostTimeline_Backwards_CB6F0329482DC4F10358FA906489BBA6; // 0x1328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostTimeline_Rumble_CB6F0329482DC4F10358FA906489BBA6; // 0x132C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostTimeline_Track1_CB6F0329482DC4F10358FA906489BBA6; // 0x1330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BoostTimeline__Direction_CB6F0329482DC4F10358FA906489BBA6; // 0x1334(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1335[0x3];                                     // 0x1335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BoostTimeline;                                     // 0x1338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnDeathSound;                                      // 0x1340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PassengerPawn;                                     // 0x1348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         ImpulsePower;                                      // 0x1350(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         RearVectorThreshold;                               // 0x1370(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                ImpulseVector;                                     // 0x1390(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139C[0x4];                                     // 0x139C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPickup*>                    AttachedPickups;                                   // 0x13A0(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	class AFortPickup*                            FortPickup;                                        // 0x13B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         MaxPickups;                                        // 0x13B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentPickups;                                    // 0x13BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWorldItemDefinition*               ObjectReference;                                   // 0x13C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      DrivingPlayerController;                           // 0x13C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurningAmount;                                     // 0x13D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13D4[0x4];                                     // 0x13D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        DriverPawn;                                        // 0x13D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CorrectiveImpulse;                                 // 0x13E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13EC[0x4];                                     // 0x13EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         RumbleMultipier;                                   // 0x13F0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortPlayerPawn*                        LastDriver;                                        // 0x1410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinVelocityToLaunch;                               // 0x1418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxLaunchVelocity;                                 // 0x141C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchAngle;                                       // 0x1420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1424[0x4];                                     // 0x1424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawnAthena*                  LastHitPlayer;                                     // 0x1428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchMultiplier;                                  // 0x1430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1434[0x4];                                     // 0x1434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         HitMinusZImpulseMultiplier;                        // 0x1438(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HitMinusLateralImpulseMultiplier;                  // 0x1458(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HitMinusMaxImpulseVelocity;                        // 0x1478(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         HealthToDestroyProp;                               // 0x1498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreHitLastDriver;                               // 0x149C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PassengerIsInstigator;                             // 0x149D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149E[0x2];                                     // 0x149E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   DoorMesh;                                          // 0x14A0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         CanLaunchPlayer;                                   // 0x14A8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class APlayerController*                      PassengerPlayerController;                         // 0x14C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LaunchCharacterExtraVelocity;                      // 0x14D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchCharacterVelocityScalar;                     // 0x14DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        BounceOverlapPawn;                                 // 0x14E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  BounceOverlapController;                           // 0x14E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalBounceJumpHeight;                             // 0x14F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceHeight;                                      // 0x14F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_PlayerLaunched;                                 // 0x14F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   LaunchForceFeedback;                               // 0x1500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AFortPlayerPawn*>                Passengers;                                        // 0x1508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AFortPlayerPawn*>                BounceIgnoreList;                                  // 0x1518(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Debug_NoCameraShake;                               // 0x1528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1529[0x3];                                     // 0x1529(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoostCameraOffsetLerpStart;                        // 0x152C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Boost;                                             // 0x1530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostRumbleValue;                                  // 0x1534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ResetBoostFX;                                      // 0x1538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1539[0x3];                                     // 0x1539(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DestructionAngle;                                  // 0x153C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PropDamageAmount;                                  // 0x1540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1544[0x4];                                     // 0x1544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             OnBoostSound;                                      // 0x1548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ColorKickBoostScale;                               // 0x1550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BounceVector;                                      // 0x1554(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactLocation;                                    // 0x1560(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_156C[0x4];                                     // 0x156C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ActorToDestroy;                                    // 0x1570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TrailsActive;                                      // 0x1578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1579[0x7];                                     // 0x1579(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 VehicleHitActor;                                   // 0x1580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        BoostIncreaseAudioComp;                            // 0x1588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               InWaterFX;                                         // 0x1590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UnobstructedBounceVelocity;                        // 0x1598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ObstructedBounceVelocity;                          // 0x159C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        InWaterLoop;                                       // 0x15A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        HonkAudioComp;                                     // 0x15A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            GE_EnterTurret;                                    // 0x15B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_GrantWeapon;                                    // 0x15B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_BlockWeaponFire;                                // 0x15C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TrailsOn;                                          // 0x15C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15C9[0x7];                                     // 0x15C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReticleRelativeTransform;                          // 0x15D0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               BoostMeterMID;                                     // 0x1600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrakingCameraForwardDistance;                      // 0x1608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrakingCameraFOV;                                  // 0x160C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostingCameraFOV;                                 // 0x1610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostingCameraForwardDistance;                     // 0x1614(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostReversePlayRate;                              // 0x1618(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraShakeSpeedCurvePow;                          // 0x161C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalizedSpeed;                                   // 0x1620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShakeAmount;                                       // 0x1624(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AmplitudeMin;                                      // 0x1628(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AmplitudeMax;                                      // 0x162C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenShakeFrequencyMin;                           // 0x1630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenShakeFrequencyMax;                           // 0x1634(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShakeFrequency;                                    // 0x1638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CamerShakeAmplitude;                               // 0x163C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenShakeYawFrequencyMultipier;                  // 0x1640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostScreenshakeBias;                              // 0x1644(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostTImelineAlpha;                                // 0x1648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostLerpFromDistance;                             // 0x164C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostLerpFromFOV;                                  // 0x1650(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1654[0x4];                                     // 0x1654(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_FerretWeapon_C*                      PlaneWeapon;                                       // 0x1658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SoundOnOverheat;                                   // 0x1660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnSmashSound;                                      // 0x1668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               DamagedEffect;                                     // 0x1670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SavedHeadlightValueForMID;                         // 0x1678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SavedDamageValueForMID;                            // 0x167C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostTimeValueForMID;                              // 0x1680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1684[0x4];                                     // 0x1684(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortQuestItemDefinition*               QuestDefinition;                                   // 0x1688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   QuestObjBackendName;                               // 0x1690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    QuestObjStat;                                      // 0x1698(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UMaterialInterface*                     Biplane_Material_Index1;                           // 0x16A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Biplane_Material_Index0;                           // 0x16B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        DestructionFX;                                     // 0x16B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  PlayerWhoDamagedStormwing;                         // 0x16C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DamagerTimer;                                      // 0x16C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  BiplaneTag;                                        // 0x16D0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_FerretVehicle(int32 EntryPoint);
	void LightningSpark(class FName EventName, float EmitterTime, const struct FVector& Location, const struct FVector& Velocity);
	void SetHeadlightState(EFortDayPhase CurrentDayPhase, EFortDayPhase PreviousDayPhase, bool bAtCreation);
	void HideQuickBarForAbility(bool Hide);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void CanHitLastDriver();
	void OnCollisionHitEffects(const struct FVector& HitLocation, const struct FVector& HitNormalImpulse, const struct FVector& HitFrictionImpulse, const struct FVector& HitNormal, class AActor* HitActor, EPhysicalSurface HitSurfaceType);
	void DamageEventTimedOut();
	void PedalForceFeedback();
	void ReceiveDestroyed();
	void GunOverheat();
	void ChangeOutMaterials();
	void K2_ApplyCosmeticWrap(const class UAthenaItemWrapDefinition* LoadedWrap);
	void OnDamagePlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnPawnEnterVehicle(class AFortPlayerPawn* PlayerPawn, int32 SeatIdx);
	void OnHoldExitStopped(class AFortPawn* ExitingPawn);
	void OnHoldExitStarted(class AFortPawn* ExitingPawn, const float ExitDuration);
	void OnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	void OnPawnExitVehicle(class AFortPlayerPawn* PlayerPawn, class FName ExitSocketName);
	void PawnHitByVehicle(class AFortPawn* Pawn, const struct FVector& ImpactPoint, const struct FVector& ImpactNormal, const struct FVector& LaunchVector);
	void OnDamaged(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FGameplayEffectContextHandle& EffectContext, class AController* EventInstigator, class AActor* DamageCauser);
	void WeaponFired(EDualWeaponHand Hand, bool bPersistantFire);
	void SmashedThroughBuildingPiece(const struct FVector& ImpactPoint, const struct FVector& ImpactNormal);
	void Start_Stop_Engine_Audio(bool Starting);
	void Update_Damage_State(float Damage);
	void StartDriverCameraShake();
	void StopDriverCameraShake();
	void OnLanding();
	void OnEngineStart();
	void BrakeCameraReverse();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnEngineStop();
	void OnStopTick();
	void ReceiveBeginPlay();
	void PowerSlideEnd_1();
	void PowerSlideBegin_1();
	void EBrakeEnd_1();
	void EBrakeBegin_1();
	void OnSpringCompression_1();
	void CheckWater();
	void OnExitedWaterVolume(const struct FVector& WaterSurfacePoint);
	void OnEnteredWaterVolume(const struct FVector& WaterSurfacePoint);
	void Handle_Spring_Compression_Audio();
	void StartBoostRumble();
	void ReverseBoostTimeline();
	void BoostBegin();
	void DestroyCooldown();
	void UpdateBoostRumble();
	void BndEvt__SkeletalMesh_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BoostEnd();
	void LocalPassengerADS(bool IsADS);
	void BoostCameraReverse();
	void BoostRumbleEnd();
	void BoostTimeline__UpdateFunc();
	void BoostTimeline__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void UserConstructionScript();
	void OnRep_ImpulseVector();
	void AttachWeaponToCart(int32 Selection);
	void PlayHapticsOnHit(float HitMagnitude, bool Grind);
	void OnRep_CorrectiveImpulse();
	TArray<class FName> GetVehicleSeatActionNames(class AFortPlayerPawn* PlayerPawn, const ECommonInputType OverrideInputType);
	TArray<class FText> GetVehicleSeatLabels(class AFortPlayerPawn* PlayerPawn, const ECommonInputType OverrideInputType);
	TArray<class FText> GetVehicleSeatActionLabels(class AFortPlayerPawn* PlayerPawn, const ECommonInputType OverrideInputType);
	void OnRep_ImpactLocation();
	void DestroyOrDamageBuildingPiece(class ABuildingActor* BuildingActor, bool CheckForHealth, class UClass* GameplayEffectClass, float DestroyThreshold);
	void SendHeadlightValueToMaterials(float Param_SavedHeadlightValueForMID);
	void SendDamageValueToMaterials(float Param_SavedDamageValueForMID);
	void SendBoostTimeToMaterials(float Param_BoostTimeValueForMID);
	void QuestUpdate(class AFortPlayerPawn* FortPlayerPawn);

	class FName GetVehicleSeatPrimaryAction(class AFortPlayerPawn* FortPlayerPawn) const;
	void GetIconPlacement(class AActor* SelfActor, struct FVector* OutLocation, struct FVector* OutExtents) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FerretVehicle_C">();
	}
	static class AFerretVehicle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFerretVehicle_C>();
	}
};
static_assert(alignof(AFerretVehicle_C) == 0x000010, "Wrong alignment on AFerretVehicle_C");
static_assert(sizeof(AFerretVehicle_C) == 0x0016F0, "Wrong size on AFerretVehicle_C");
static_assert(offsetof(AFerretVehicle_C, UberGraphFrame) == 0x001270, "Member 'AFerretVehicle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, AudioSpark) == 0x001278, "Member 'AFerretVehicle_C::AudioSpark' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BoostMeter) == 0x001280, "Member 'AFerretVehicle_C::BoostMeter' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, AudioTaxi) == 0x001288, "Member 'AFerretVehicle_C::AudioTaxi' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, AudioDive) == 0x001290, "Member 'AFerretVehicle_C::AudioDive' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, AudioWind1P) == 0x001298, "Member 'AFerretVehicle_C::AudioWind1P' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, AudioMovementDistant) == 0x0012A0, "Member 'AFerretVehicle_C::AudioMovementDistant' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, AudioMovementClose) == 0x0012A8, "Member 'AFerretVehicle_C::AudioMovementClose' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, P_Plane_Boost_FX) == 0x0012B0, "Member 'AFerretVehicle_C::P_Plane_Boost_FX' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, P_Plane_SpeedFX) == 0x0012B8, "Member 'AFerretVehicle_C::P_Plane_SpeedFX' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, PropellerBlur) == 0x0012C0, "Member 'AFerretVehicle_C::PropellerBlur' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, P_WingTrail_BR) == 0x0012C8, "Member 'AFerretVehicle_C::P_WingTrail_BR' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, P_WingTrail_UR) == 0x0012D0, "Member 'AFerretVehicle_C::P_WingTrail_UR' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, P_WingTrail_BL) == 0x0012D8, "Member 'AFerretVehicle_C::P_WingTrail_BL' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, P_WingTrail_UL) == 0x0012E0, "Member 'AFerretVehicle_C::P_WingTrail_UL' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, SM_CollisionBodies) == 0x0012E8, "Member 'AFerretVehicle_C::SM_CollisionBodies' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, Reticle) == 0x0012F0, "Member 'AFerretVehicle_C::Reticle' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, FortCollisionAudioSuspension) == 0x0012F8, "Member 'AFerretVehicle_C::FortCollisionAudioSuspension' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, OverlapVolume) == 0x001300, "Member 'AFerretVehicle_C::OverlapVolume' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, FortCollisionAudioImpacts) == 0x001308, "Member 'AFerretVehicle_C::FortCollisionAudioImpacts' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, Timeline_0_Rumble_00CC94A74BB57FC31202F688686E09B7) == 0x001310, "Member 'AFerretVehicle_C::Timeline_0_Rumble_00CC94A74BB57FC31202F688686E09B7' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, Timeline_0_Track1_00CC94A74BB57FC31202F688686E09B7) == 0x001314, "Member 'AFerretVehicle_C::Timeline_0_Track1_00CC94A74BB57FC31202F688686E09B7' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, Timeline_0__Direction_00CC94A74BB57FC31202F688686E09B7) == 0x001318, "Member 'AFerretVehicle_C::Timeline_0__Direction_00CC94A74BB57FC31202F688686E09B7' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, Timeline_0) == 0x001320, "Member 'AFerretVehicle_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BoostTimeline_Backwards_CB6F0329482DC4F10358FA906489BBA6) == 0x001328, "Member 'AFerretVehicle_C::BoostTimeline_Backwards_CB6F0329482DC4F10358FA906489BBA6' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BoostTimeline_Rumble_CB6F0329482DC4F10358FA906489BBA6) == 0x00132C, "Member 'AFerretVehicle_C::BoostTimeline_Rumble_CB6F0329482DC4F10358FA906489BBA6' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BoostTimeline_Track1_CB6F0329482DC4F10358FA906489BBA6) == 0x001330, "Member 'AFerretVehicle_C::BoostTimeline_Track1_CB6F0329482DC4F10358FA906489BBA6' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BoostTimeline__Direction_CB6F0329482DC4F10358FA906489BBA6) == 0x001334, "Member 'AFerretVehicle_C::BoostTimeline__Direction_CB6F0329482DC4F10358FA906489BBA6' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BoostTimeline) == 0x001338, "Member 'AFerretVehicle_C::BoostTimeline' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, OnDeathSound) == 0x001340, "Member 'AFerretVehicle_C::OnDeathSound' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, PassengerPawn) == 0x001348, "Member 'AFerretVehicle_C::PassengerPawn' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, ImpulsePower) == 0x001350, "Member 'AFerretVehicle_C::ImpulsePower' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, RearVectorThreshold) == 0x001370, "Member 'AFerretVehicle_C::RearVectorThreshold' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, ImpulseVector) == 0x001390, "Member 'AFerretVehicle_C::ImpulseVector' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, AttachedPickups) == 0x0013A0, "Member 'AFerretVehicle_C::AttachedPickups' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, FortPickup) == 0x0013B0, "Member 'AFerretVehicle_C::FortPickup' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, MaxPickups) == 0x0013B8, "Member 'AFerretVehicle_C::MaxPickups' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, CurrentPickups) == 0x0013BC, "Member 'AFerretVehicle_C::CurrentPickups' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, ObjectReference) == 0x0013C0, "Member 'AFerretVehicle_C::ObjectReference' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, DrivingPlayerController) == 0x0013C8, "Member 'AFerretVehicle_C::DrivingPlayerController' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, TurningAmount) == 0x0013D0, "Member 'AFerretVehicle_C::TurningAmount' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, DriverPawn) == 0x0013D8, "Member 'AFerretVehicle_C::DriverPawn' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, CorrectiveImpulse) == 0x0013E0, "Member 'AFerretVehicle_C::CorrectiveImpulse' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, RumbleMultipier) == 0x0013F0, "Member 'AFerretVehicle_C::RumbleMultipier' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, LastDriver) == 0x001410, "Member 'AFerretVehicle_C::LastDriver' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, MinVelocityToLaunch) == 0x001418, "Member 'AFerretVehicle_C::MinVelocityToLaunch' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, MaxLaunchVelocity) == 0x00141C, "Member 'AFerretVehicle_C::MaxLaunchVelocity' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, LaunchAngle) == 0x001420, "Member 'AFerretVehicle_C::LaunchAngle' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, LastHitPlayer) == 0x001428, "Member 'AFerretVehicle_C::LastHitPlayer' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, LaunchMultiplier) == 0x001430, "Member 'AFerretVehicle_C::LaunchMultiplier' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, HitMinusZImpulseMultiplier) == 0x001438, "Member 'AFerretVehicle_C::HitMinusZImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, HitMinusLateralImpulseMultiplier) == 0x001458, "Member 'AFerretVehicle_C::HitMinusLateralImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, HitMinusMaxImpulseVelocity) == 0x001478, "Member 'AFerretVehicle_C::HitMinusMaxImpulseVelocity' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, HealthToDestroyProp) == 0x001498, "Member 'AFerretVehicle_C::HealthToDestroyProp' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, IgnoreHitLastDriver) == 0x00149C, "Member 'AFerretVehicle_C::IgnoreHitLastDriver' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, PassengerIsInstigator) == 0x00149D, "Member 'AFerretVehicle_C::PassengerIsInstigator' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, DoorMesh) == 0x0014A0, "Member 'AFerretVehicle_C::DoorMesh' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, CanLaunchPlayer) == 0x0014A8, "Member 'AFerretVehicle_C::CanLaunchPlayer' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, PassengerPlayerController) == 0x0014C8, "Member 'AFerretVehicle_C::PassengerPlayerController' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, LaunchCharacterExtraVelocity) == 0x0014D0, "Member 'AFerretVehicle_C::LaunchCharacterExtraVelocity' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, LaunchCharacterVelocityScalar) == 0x0014DC, "Member 'AFerretVehicle_C::LaunchCharacterVelocityScalar' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BounceOverlapPawn) == 0x0014E0, "Member 'AFerretVehicle_C::BounceOverlapPawn' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BounceOverlapController) == 0x0014E8, "Member 'AFerretVehicle_C::BounceOverlapController' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, FinalBounceJumpHeight) == 0x0014F0, "Member 'AFerretVehicle_C::FinalBounceJumpHeight' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BounceHeight) == 0x0014F4, "Member 'AFerretVehicle_C::BounceHeight' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, GE_PlayerLaunched) == 0x0014F8, "Member 'AFerretVehicle_C::GE_PlayerLaunched' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, LaunchForceFeedback) == 0x001500, "Member 'AFerretVehicle_C::LaunchForceFeedback' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, Passengers) == 0x001508, "Member 'AFerretVehicle_C::Passengers' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BounceIgnoreList) == 0x001518, "Member 'AFerretVehicle_C::BounceIgnoreList' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, Debug_NoCameraShake) == 0x001528, "Member 'AFerretVehicle_C::Debug_NoCameraShake' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BoostCameraOffsetLerpStart) == 0x00152C, "Member 'AFerretVehicle_C::BoostCameraOffsetLerpStart' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, Boost) == 0x001530, "Member 'AFerretVehicle_C::Boost' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BoostRumbleValue) == 0x001534, "Member 'AFerretVehicle_C::BoostRumbleValue' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, ResetBoostFX) == 0x001538, "Member 'AFerretVehicle_C::ResetBoostFX' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, DestructionAngle) == 0x00153C, "Member 'AFerretVehicle_C::DestructionAngle' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, PropDamageAmount) == 0x001540, "Member 'AFerretVehicle_C::PropDamageAmount' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, OnBoostSound) == 0x001548, "Member 'AFerretVehicle_C::OnBoostSound' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, ColorKickBoostScale) == 0x001550, "Member 'AFerretVehicle_C::ColorKickBoostScale' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BounceVector) == 0x001554, "Member 'AFerretVehicle_C::BounceVector' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, ImpactLocation) == 0x001560, "Member 'AFerretVehicle_C::ImpactLocation' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, ActorToDestroy) == 0x001570, "Member 'AFerretVehicle_C::ActorToDestroy' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, TrailsActive) == 0x001578, "Member 'AFerretVehicle_C::TrailsActive' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, VehicleHitActor) == 0x001580, "Member 'AFerretVehicle_C::VehicleHitActor' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BoostIncreaseAudioComp) == 0x001588, "Member 'AFerretVehicle_C::BoostIncreaseAudioComp' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, InWaterFX) == 0x001590, "Member 'AFerretVehicle_C::InWaterFX' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, UnobstructedBounceVelocity) == 0x001598, "Member 'AFerretVehicle_C::UnobstructedBounceVelocity' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, ObstructedBounceVelocity) == 0x00159C, "Member 'AFerretVehicle_C::ObstructedBounceVelocity' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, InWaterLoop) == 0x0015A0, "Member 'AFerretVehicle_C::InWaterLoop' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, HonkAudioComp) == 0x0015A8, "Member 'AFerretVehicle_C::HonkAudioComp' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, GE_EnterTurret) == 0x0015B0, "Member 'AFerretVehicle_C::GE_EnterTurret' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, GE_GrantWeapon) == 0x0015B8, "Member 'AFerretVehicle_C::GE_GrantWeapon' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, GE_BlockWeaponFire) == 0x0015C0, "Member 'AFerretVehicle_C::GE_BlockWeaponFire' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, TrailsOn) == 0x0015C8, "Member 'AFerretVehicle_C::TrailsOn' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, ReticleRelativeTransform) == 0x0015D0, "Member 'AFerretVehicle_C::ReticleRelativeTransform' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BoostMeterMID) == 0x001600, "Member 'AFerretVehicle_C::BoostMeterMID' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BrakingCameraForwardDistance) == 0x001608, "Member 'AFerretVehicle_C::BrakingCameraForwardDistance' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BrakingCameraFOV) == 0x00160C, "Member 'AFerretVehicle_C::BrakingCameraFOV' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BoostingCameraFOV) == 0x001610, "Member 'AFerretVehicle_C::BoostingCameraFOV' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BoostingCameraForwardDistance) == 0x001614, "Member 'AFerretVehicle_C::BoostingCameraForwardDistance' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BoostReversePlayRate) == 0x001618, "Member 'AFerretVehicle_C::BoostReversePlayRate' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, CameraShakeSpeedCurvePow) == 0x00161C, "Member 'AFerretVehicle_C::CameraShakeSpeedCurvePow' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, NormalizedSpeed) == 0x001620, "Member 'AFerretVehicle_C::NormalizedSpeed' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, ShakeAmount) == 0x001624, "Member 'AFerretVehicle_C::ShakeAmount' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, AmplitudeMin) == 0x001628, "Member 'AFerretVehicle_C::AmplitudeMin' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, AmplitudeMax) == 0x00162C, "Member 'AFerretVehicle_C::AmplitudeMax' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, ScreenShakeFrequencyMin) == 0x001630, "Member 'AFerretVehicle_C::ScreenShakeFrequencyMin' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, ScreenShakeFrequencyMax) == 0x001634, "Member 'AFerretVehicle_C::ScreenShakeFrequencyMax' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, ShakeFrequency) == 0x001638, "Member 'AFerretVehicle_C::ShakeFrequency' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, CamerShakeAmplitude) == 0x00163C, "Member 'AFerretVehicle_C::CamerShakeAmplitude' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, ScreenShakeYawFrequencyMultipier) == 0x001640, "Member 'AFerretVehicle_C::ScreenShakeYawFrequencyMultipier' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BoostScreenshakeBias) == 0x001644, "Member 'AFerretVehicle_C::BoostScreenshakeBias' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BoostTImelineAlpha) == 0x001648, "Member 'AFerretVehicle_C::BoostTImelineAlpha' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BoostLerpFromDistance) == 0x00164C, "Member 'AFerretVehicle_C::BoostLerpFromDistance' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BoostLerpFromFOV) == 0x001650, "Member 'AFerretVehicle_C::BoostLerpFromFOV' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, PlaneWeapon) == 0x001658, "Member 'AFerretVehicle_C::PlaneWeapon' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, SoundOnOverheat) == 0x001660, "Member 'AFerretVehicle_C::SoundOnOverheat' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, OnSmashSound) == 0x001668, "Member 'AFerretVehicle_C::OnSmashSound' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, DamagedEffect) == 0x001670, "Member 'AFerretVehicle_C::DamagedEffect' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, SavedHeadlightValueForMID) == 0x001678, "Member 'AFerretVehicle_C::SavedHeadlightValueForMID' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, SavedDamageValueForMID) == 0x00167C, "Member 'AFerretVehicle_C::SavedDamageValueForMID' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BoostTimeValueForMID) == 0x001680, "Member 'AFerretVehicle_C::BoostTimeValueForMID' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, QuestDefinition) == 0x001688, "Member 'AFerretVehicle_C::QuestDefinition' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, QuestObjBackendName) == 0x001690, "Member 'AFerretVehicle_C::QuestObjBackendName' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, QuestObjStat) == 0x001698, "Member 'AFerretVehicle_C::QuestObjStat' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, Biplane_Material_Index1) == 0x0016A8, "Member 'AFerretVehicle_C::Biplane_Material_Index1' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, Biplane_Material_Index0) == 0x0016B0, "Member 'AFerretVehicle_C::Biplane_Material_Index0' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, DestructionFX) == 0x0016B8, "Member 'AFerretVehicle_C::DestructionFX' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, PlayerWhoDamagedStormwing) == 0x0016C0, "Member 'AFerretVehicle_C::PlayerWhoDamagedStormwing' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, DamagerTimer) == 0x0016C8, "Member 'AFerretVehicle_C::DamagerTimer' has a wrong offset!");
static_assert(offsetof(AFerretVehicle_C, BiplaneTag) == 0x0016D0, "Member 'AFerretVehicle_C::BiplaneTag' has a wrong offset!");

}

