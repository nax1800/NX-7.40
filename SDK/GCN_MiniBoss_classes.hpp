#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GCN_MiniBoss

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GCN_MiniBoss.GCN_MiniBoss_C
// 0x0160 (0x0588 - 0x0428)
class AGCN_MiniBoss_C final : public AFortGameplayCueNotify_Looping
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0428(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortMiniMapComponent*                  MiniMapCrosshair;                                  // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TC_NPCCharacterTypeMiniBoss1P;                     // 0x0438(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_NPCCharacterTypeMiniBoss4P;                     // 0x0458(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                           FourP_Color;                                       // 0x0478(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           OneP_Color;                                        // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FLinearColor>        VectorParameters;                                  // 0x0498(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<class FName, float>                      ScalarParameters;                                  // 0x04E8(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<class FString, class UParticleSystem*>   ElementalParticlesMap;                             // 0x0538(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void ExecuteUbergraph_GCN_MiniBoss(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void SetMiniBossGCNColors();
	bool OnRemove(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	bool OnActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OverwriteElementalParticles(class AEnemyPawn_Parent_C* Enemy_Pawn_Parent);
	void SetMiniBossVisibility(bool Visible);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GCN_MiniBoss_C">();
	}
	static class AGCN_MiniBoss_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGCN_MiniBoss_C>();
	}
};
static_assert(alignof(AGCN_MiniBoss_C) == 0x000008, "Wrong alignment on AGCN_MiniBoss_C");
static_assert(sizeof(AGCN_MiniBoss_C) == 0x000588, "Wrong size on AGCN_MiniBoss_C");
static_assert(offsetof(AGCN_MiniBoss_C, UberGraphFrame) == 0x000428, "Member 'AGCN_MiniBoss_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGCN_MiniBoss_C, MiniMapCrosshair) == 0x000430, "Member 'AGCN_MiniBoss_C::MiniMapCrosshair' has a wrong offset!");
static_assert(offsetof(AGCN_MiniBoss_C, TC_NPCCharacterTypeMiniBoss1P) == 0x000438, "Member 'AGCN_MiniBoss_C::TC_NPCCharacterTypeMiniBoss1P' has a wrong offset!");
static_assert(offsetof(AGCN_MiniBoss_C, TC_NPCCharacterTypeMiniBoss4P) == 0x000458, "Member 'AGCN_MiniBoss_C::TC_NPCCharacterTypeMiniBoss4P' has a wrong offset!");
static_assert(offsetof(AGCN_MiniBoss_C, FourP_Color) == 0x000478, "Member 'AGCN_MiniBoss_C::FourP_Color' has a wrong offset!");
static_assert(offsetof(AGCN_MiniBoss_C, OneP_Color) == 0x000488, "Member 'AGCN_MiniBoss_C::OneP_Color' has a wrong offset!");
static_assert(offsetof(AGCN_MiniBoss_C, VectorParameters) == 0x000498, "Member 'AGCN_MiniBoss_C::VectorParameters' has a wrong offset!");
static_assert(offsetof(AGCN_MiniBoss_C, ScalarParameters) == 0x0004E8, "Member 'AGCN_MiniBoss_C::ScalarParameters' has a wrong offset!");
static_assert(offsetof(AGCN_MiniBoss_C, ElementalParticlesMap) == 0x000538, "Member 'AGCN_MiniBoss_C::ElementalParticlesMap' has a wrong offset!");

}

