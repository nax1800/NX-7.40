#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeBundleLockedReasonDisplay

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function ChallengeBundleLockedReasonDisplay.ChallengeBundleLockedReasonDisplay_C.ExecuteUbergraph_ChallengeBundleLockedReasonDisplay
// 0x0004 (0x0004 - 0x0000)
struct ChallengeBundleLockedReasonDisplay_C_ExecuteUbergraph_ChallengeBundleLockedReasonDisplay final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundleLockedReasonDisplay_C_ExecuteUbergraph_ChallengeBundleLockedReasonDisplay) == 0x000004, "Wrong alignment on ChallengeBundleLockedReasonDisplay_C_ExecuteUbergraph_ChallengeBundleLockedReasonDisplay");
static_assert(sizeof(ChallengeBundleLockedReasonDisplay_C_ExecuteUbergraph_ChallengeBundleLockedReasonDisplay) == 0x000004, "Wrong size on ChallengeBundleLockedReasonDisplay_C_ExecuteUbergraph_ChallengeBundleLockedReasonDisplay");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_ExecuteUbergraph_ChallengeBundleLockedReasonDisplay, EntryPoint) == 0x000000, "Member 'ChallengeBundleLockedReasonDisplay_C_ExecuteUbergraph_ChallengeBundleLockedReasonDisplay::EntryPoint' has a wrong offset!");

// Function ChallengeBundleLockedReasonDisplay.ChallengeBundleLockedReasonDisplay_C.SetLockReason
// 0x0028 (0x0028 - 0x0000)
struct ChallengeBundleLockedReasonDisplay_C_SetLockReason final
{
public:
	struct FFortChallengeBundleInfoLockedReason   InValue;                                           // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(ChallengeBundleLockedReasonDisplay_C_SetLockReason) == 0x000008, "Wrong alignment on ChallengeBundleLockedReasonDisplay_C_SetLockReason");
static_assert(sizeof(ChallengeBundleLockedReasonDisplay_C_SetLockReason) == 0x000028, "Wrong size on ChallengeBundleLockedReasonDisplay_C_SetLockReason");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_SetLockReason, InValue) == 0x000000, "Member 'ChallengeBundleLockedReasonDisplay_C_SetLockReason::InValue' has a wrong offset!");

// Function ChallengeBundleLockedReasonDisplay.ChallengeBundleLockedReasonDisplay_C.UpdateLockReasonDisplay
// 0x0080 (0x0080 - 0x0000)
struct ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay final
{
public:
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_GetTimespanValue_Result;                  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  K2Node_DynamicCast_AsFort_Player_Controller;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_FormatLockedReason_ReturnValue;           // 0x0020(0x0018)()
	class FText                                   CallFunc_FormatLockedReason_ReturnValue1;          // 0x0038(0x0018)()
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0050(0x0018)()
	class FText                                   CallFunc_TextToUpper_ReturnValue1;                 // 0x0068(0x0018)()
};
static_assert(alignof(ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay) == 0x000008, "Wrong alignment on ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay");
static_assert(sizeof(ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay) == 0x000080, "Wrong size on ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay, CallFunc_GetOwningPlayer_ReturnValue) == 0x000000, "Member 'ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay, CallFunc_GetTimespanValue_Result) == 0x000008, "Member 'ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay::CallFunc_GetTimespanValue_Result' has a wrong offset!");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay, K2Node_DynamicCast_AsFort_Player_Controller) == 0x000010, "Member 'ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay::K2Node_DynamicCast_AsFort_Player_Controller' has a wrong offset!");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay, CallFunc_FormatLockedReason_ReturnValue) == 0x000020, "Member 'ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay::CallFunc_FormatLockedReason_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay, CallFunc_FormatLockedReason_ReturnValue1) == 0x000038, "Member 'ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay::CallFunc_FormatLockedReason_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay, CallFunc_TextToUpper_ReturnValue) == 0x000050, "Member 'ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay, CallFunc_TextToUpper_ReturnValue1) == 0x000068, "Member 'ChallengeBundleLockedReasonDisplay_C_UpdateLockReasonDisplay::CallFunc_TextToUpper_ReturnValue1' has a wrong offset!");

// Function ChallengeBundleLockedReasonDisplay.ChallengeBundleLockedReasonDisplay_C.SetTimespanSource
// 0x0058 (0x0058 - 0x0000)
struct ChallengeBundleLockedReasonDisplay_C_SetTimespanSource final
{
public:
	TScriptInterface<class IFortTimespanDataSource> Value;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue1;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Source)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue2;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue3;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeBundleLockedReasonDisplay_C_SetTimespanSource) == 0x000008, "Wrong alignment on ChallengeBundleLockedReasonDisplay_C_SetTimespanSource");
static_assert(sizeof(ChallengeBundleLockedReasonDisplay_C_SetTimespanSource) == 0x000058, "Wrong size on ChallengeBundleLockedReasonDisplay_C_SetTimespanSource");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_SetTimespanSource, Value) == 0x000000, "Member 'ChallengeBundleLockedReasonDisplay_C_SetTimespanSource::Value' has a wrong offset!");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_SetTimespanSource, CallFunc_Conv_InterfaceToObject_ReturnValue) == 0x000010, "Member 'ChallengeBundleLockedReasonDisplay_C_SetTimespanSource::CallFunc_Conv_InterfaceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_SetTimespanSource, CallFunc_Conv_InterfaceToObject_ReturnValue1) == 0x000018, "Member 'ChallengeBundleLockedReasonDisplay_C_SetTimespanSource::CallFunc_Conv_InterfaceToObject_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_SetTimespanSource, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'ChallengeBundleLockedReasonDisplay_C_SetTimespanSource::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_SetTimespanSource, K2Node_CreateDelegate_OutputDelegate) == 0x000024, "Member 'ChallengeBundleLockedReasonDisplay_C_SetTimespanSource::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_SetTimespanSource, CallFunc_Conv_InterfaceToObject_ReturnValue2) == 0x000038, "Member 'ChallengeBundleLockedReasonDisplay_C_SetTimespanSource::CallFunc_Conv_InterfaceToObject_ReturnValue2' has a wrong offset!");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_SetTimespanSource, CallFunc_IsValid_ReturnValue1) == 0x000040, "Member 'ChallengeBundleLockedReasonDisplay_C_SetTimespanSource::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_SetTimespanSource, CallFunc_Conv_InterfaceToObject_ReturnValue3) == 0x000048, "Member 'ChallengeBundleLockedReasonDisplay_C_SetTimespanSource::CallFunc_Conv_InterfaceToObject_ReturnValue3' has a wrong offset!");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_SetTimespanSource, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000050, "Member 'ChallengeBundleLockedReasonDisplay_C_SetTimespanSource::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function ChallengeBundleLockedReasonDisplay.ChallengeBundleLockedReasonDisplay_C.HandleTick
// 0x0008 (0x0008 - 0x0000)
struct ChallengeBundleLockedReasonDisplay_C_HandleTick final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundleLockedReasonDisplay_C_HandleTick) == 0x000008, "Wrong alignment on ChallengeBundleLockedReasonDisplay_C_HandleTick");
static_assert(sizeof(ChallengeBundleLockedReasonDisplay_C_HandleTick) == 0x000008, "Wrong size on ChallengeBundleLockedReasonDisplay_C_HandleTick");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_HandleTick, Source) == 0x000000, "Member 'ChallengeBundleLockedReasonDisplay_C_HandleTick::Source' has a wrong offset!");

// Function ChallengeBundleLockedReasonDisplay.ChallengeBundleLockedReasonDisplay_C.GetTimeSpanValue
// 0x0020 (0x0020 - 0x0000)
struct ChallengeBundleLockedReasonDisplay_C_GetTimeSpanValue final
{
public:
	struct FTimespan                              Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_GetValue_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeBundleLockedReasonDisplay_C_GetTimeSpanValue) == 0x000008, "Wrong alignment on ChallengeBundleLockedReasonDisplay_C_GetTimeSpanValue");
static_assert(sizeof(ChallengeBundleLockedReasonDisplay_C_GetTimeSpanValue) == 0x000020, "Wrong size on ChallengeBundleLockedReasonDisplay_C_GetTimeSpanValue");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_GetTimeSpanValue, Result) == 0x000000, "Member 'ChallengeBundleLockedReasonDisplay_C_GetTimeSpanValue::Result' has a wrong offset!");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_GetTimeSpanValue, CallFunc_Conv_InterfaceToObject_ReturnValue) == 0x000008, "Member 'ChallengeBundleLockedReasonDisplay_C_GetTimeSpanValue::CallFunc_Conv_InterfaceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_GetTimeSpanValue, CallFunc_GetValue_ReturnValue) == 0x000010, "Member 'ChallengeBundleLockedReasonDisplay_C_GetTimeSpanValue::CallFunc_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleLockedReasonDisplay_C_GetTimeSpanValue, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'ChallengeBundleLockedReasonDisplay_C_GetTimeSpanValue::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

