#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ShoppingCartVehicleSK

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CommonInput_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ShoppingCartVehicleSK.ShoppingCartVehicleSK_C
// 0x0360 (0x1018 - 0x0CB8)
class AShoppingCartVehicleSK_C final : public AFortAthenaSKPushVehicle
{
public:
	uint8                                         Pad_CB8[0x8];                                      // 0x0CB8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0CC0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          BulletCollision;                                   // 0x0CC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          PawnStepUpCollision_Bottom;                        // 0x0CD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OverlapTrigger;                                    // 0x0CD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          PawnStepUpCollision;                               // 0x0CE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioWind;                                         // 0x0CE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Shopping_Cart_Vehicle_WheelDust;                 // 0x0CF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortCollisionAudioComponent*           FortCollisionAudio;                                // 0x0CF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioScrape;                                       // 0x0D00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioInAir;                                        // 0x0D08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioSkid;                                         // 0x0D10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioCoast;                                        // 0x0D18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioMovement;                                     // 0x0D20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnDeathSound;                                      // 0x0D28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PassengerPawn;                                     // 0x0D30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         ImpulsePower;                                      // 0x0D38(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         RearVectorThreshold;                               // 0x0D58(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                ImpulseVector;                                     // 0x0D78(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D84[0x4];                                      // 0x0D84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPickup*>                    AttachedPickups;                                   // 0x0D88(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	class AFortPickup*                            FortPickup;                                        // 0x0D98(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         MaxPickups;                                        // 0x0DA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentPickups;                                    // 0x0DA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWorldItemDefinition*               ObjectReference;                                   // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      DrivingPlayerController;                           // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurningAmount;                                     // 0x0DB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DBC[0x4];                                      // 0x0DBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraShake*                           CameraShake;                                       // 0x0DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_RocketLauncher_Generic_Athena_C*     BoundRocket;                                       // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        DriverPawn;                                        // 0x0DD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CorrectiveImpulse;                                 // 0x0DD8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DE4[0x4];                                      // 0x0DE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraShake*                           CoastingCameraShake;                               // 0x0DE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalizedSpeed;                                   // 0x0DF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenShakeFrequencyMin;                           // 0x0DF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenShakeFrequencyMax;                           // 0x0DF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenShakeYawFrequencyMultipier;                  // 0x0DFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AmplitudeMin;                                      // 0x0E00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AmplitudeMax;                                      // 0x0E04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAirSmoothed;                                     // 0x0E08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraShakeSpeedCurvePow;                          // 0x0E0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmoothedSpringCompression;                         // 0x0E10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E14[0x4];                                      // 0x0E14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ScreenShakeMult;                                   // 0x0E18(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         RumbleMultipier;                                   // 0x0E38(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         RumbleMulti;                                       // 0x0E58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SparksRumbleMulti;                                 // 0x0E5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCoastingCameraShake;                              // 0x0E60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E61[0x3];                                      // 0x0E61(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SprintAmplitude;                                   // 0x0E64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        LastDriver;                                        // 0x0E68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZImpulseMultiplier;                                // 0x0E70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinVelocityToLaunch;                               // 0x0E74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxLaunchVelocity;                                 // 0x0E78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchAngle;                                       // 0x0E7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawnAthena*                  LastHitPlayer;                                     // 0x0E80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchMultiplier;                                  // 0x0E88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E8C[0x4];                                      // 0x0E8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         HitMinusZImpulseMultiplier;                        // 0x0E90(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HitMinusLateralImpulseMultiplier;                  // 0x0EB0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HitMinusMaxImpulseVelocity;                        // 0x0ED0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         HealthToDestroyProp;                               // 0x0EF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreHitLastDriver;                               // 0x0EF4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PassengerIsInstigator;                             // 0x0EF5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EF6[0x2];                                      // 0x0EF6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   DoorMesh;                                          // 0x0EF8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         CanLaunchPlayer;                                   // 0x0F00(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         PassengerCameraShakeMultiplier;                    // 0x0F20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F24[0x4];                                      // 0x0F24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraShake*                           PassengerCameraShake;                              // 0x0F28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      PassengerPlayerController;                         // 0x0F30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestItemDefinition*               QuestItem;                                         // 0x0F38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ObjBackendName;                                    // 0x0F40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    ObjStat;                                           // 0x0F48(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UParticleSystemComponent*               InWaterFX;                                         // 0x0F58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 GCParamsEmpty;                                     // 0x0F60(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ExecuteUbergraph_ShoppingCartVehicleSK(int32 EntryPoint);
	void CanHitLastDriver();
	void StopDriverCameraShake();
	void StopCoastCameraShake();
	void StartDriverCameraShake();
	void StartDriverRumble();
	void StopDriverRumble();
	void OnIsSprintingChanged();
	void OnIsCoastingChanged();
	void OnStopTick();
	void PawnHitByVehicle(class AFortPawn* Pawn, const struct FVector& ImpactPoint, const struct FVector& ImpactNormal, const struct FVector& LaunchVector);
	void CheckWater();
	void OnExitedWaterVolume(const struct FVector& WaterSurfacePoint);
	void OnEnteredWaterVolume(const struct FVector& WaterSurfacePoint);
	void OnSpringCompression();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Update_Damage_State(float Damage);
	void OnDamaged(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FGameplayEffectContextHandle& EffectContext, class AController* EventInstigator, class AActor* DamageCauser);
	void OnPawnExitVehicle(class AFortPlayerPawn* PlayerPawn, class FName ExitSocketName);
	void RocketSpawned();
	void OnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	void OnPawnEnterVehicle(class AFortPlayerPawn* PlayerPawn, int32 SeatIdx);
	void PedalForceFeedback();
	void ReceiveTick(float DeltaSeconds);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void UpdateMovementCosmeticParameters();
	void DropItems();
	void AttachToCart();
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ApplyImpulse();
	void OnCollisionHitEffects(const struct FVector& HitLocation, const struct FVector& HitNormalImpulse, const struct FVector& HitFrictionImpulse, const struct FVector& HitNormal, class AActor* HitActor, EPhysicalSurface HitSurfaceType);
	void UserConstructionScript();
	void OnRep_ImpulseVector();
	void AttachWeaponToCart(int32 Selection);
	void PlayHapticsOnHit(float HitMagnitude);
	void OnRep_CorrectiveImpulse();
	void IsLocalPlayerRiding(bool* Result);
	void UpdateDynamicCameraShake();
	TArray<class FName> GetVehicleSeatActionNames(class AFortPlayerPawn* PlayerPawn, const ECommonInputType OverrideInputType);
	TArray<class FText> GetVehicleSeatLabels(class AFortPlayerPawn* PlayerPawn, const ECommonInputType OverrideInputType);
	TArray<class FText> GetVehicleSeatActionLabels(class AFortPlayerPawn* PlayerPawn, const ECommonInputType OverrideInputType);

	class FName GetVehicleSeatPrimaryAction(class AFortPlayerPawn* FortPlayerPawn) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ShoppingCartVehicleSK_C">();
	}
	static class AShoppingCartVehicleSK_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AShoppingCartVehicleSK_C>();
	}
};
static_assert(alignof(AShoppingCartVehicleSK_C) == 0x000008, "Wrong alignment on AShoppingCartVehicleSK_C");
static_assert(sizeof(AShoppingCartVehicleSK_C) == 0x001018, "Wrong size on AShoppingCartVehicleSK_C");
static_assert(offsetof(AShoppingCartVehicleSK_C, UberGraphFrame) == 0x000CC0, "Member 'AShoppingCartVehicleSK_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, BulletCollision) == 0x000CC8, "Member 'AShoppingCartVehicleSK_C::BulletCollision' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, PawnStepUpCollision_Bottom) == 0x000CD0, "Member 'AShoppingCartVehicleSK_C::PawnStepUpCollision_Bottom' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, OverlapTrigger) == 0x000CD8, "Member 'AShoppingCartVehicleSK_C::OverlapTrigger' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, PawnStepUpCollision) == 0x000CE0, "Member 'AShoppingCartVehicleSK_C::PawnStepUpCollision' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, AudioWind) == 0x000CE8, "Member 'AShoppingCartVehicleSK_C::AudioWind' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, P_Shopping_Cart_Vehicle_WheelDust) == 0x000CF0, "Member 'AShoppingCartVehicleSK_C::P_Shopping_Cart_Vehicle_WheelDust' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, FortCollisionAudio) == 0x000CF8, "Member 'AShoppingCartVehicleSK_C::FortCollisionAudio' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, AudioScrape) == 0x000D00, "Member 'AShoppingCartVehicleSK_C::AudioScrape' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, AudioInAir) == 0x000D08, "Member 'AShoppingCartVehicleSK_C::AudioInAir' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, AudioSkid) == 0x000D10, "Member 'AShoppingCartVehicleSK_C::AudioSkid' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, AudioCoast) == 0x000D18, "Member 'AShoppingCartVehicleSK_C::AudioCoast' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, AudioMovement) == 0x000D20, "Member 'AShoppingCartVehicleSK_C::AudioMovement' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, OnDeathSound) == 0x000D28, "Member 'AShoppingCartVehicleSK_C::OnDeathSound' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, PassengerPawn) == 0x000D30, "Member 'AShoppingCartVehicleSK_C::PassengerPawn' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, ImpulsePower) == 0x000D38, "Member 'AShoppingCartVehicleSK_C::ImpulsePower' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, RearVectorThreshold) == 0x000D58, "Member 'AShoppingCartVehicleSK_C::RearVectorThreshold' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, ImpulseVector) == 0x000D78, "Member 'AShoppingCartVehicleSK_C::ImpulseVector' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, AttachedPickups) == 0x000D88, "Member 'AShoppingCartVehicleSK_C::AttachedPickups' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, FortPickup) == 0x000D98, "Member 'AShoppingCartVehicleSK_C::FortPickup' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, MaxPickups) == 0x000DA0, "Member 'AShoppingCartVehicleSK_C::MaxPickups' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, CurrentPickups) == 0x000DA4, "Member 'AShoppingCartVehicleSK_C::CurrentPickups' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, ObjectReference) == 0x000DA8, "Member 'AShoppingCartVehicleSK_C::ObjectReference' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, DrivingPlayerController) == 0x000DB0, "Member 'AShoppingCartVehicleSK_C::DrivingPlayerController' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, TurningAmount) == 0x000DB8, "Member 'AShoppingCartVehicleSK_C::TurningAmount' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, CameraShake) == 0x000DC0, "Member 'AShoppingCartVehicleSK_C::CameraShake' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, BoundRocket) == 0x000DC8, "Member 'AShoppingCartVehicleSK_C::BoundRocket' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, DriverPawn) == 0x000DD0, "Member 'AShoppingCartVehicleSK_C::DriverPawn' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, CorrectiveImpulse) == 0x000DD8, "Member 'AShoppingCartVehicleSK_C::CorrectiveImpulse' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, CoastingCameraShake) == 0x000DE8, "Member 'AShoppingCartVehicleSK_C::CoastingCameraShake' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, NormalizedSpeed) == 0x000DF0, "Member 'AShoppingCartVehicleSK_C::NormalizedSpeed' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, ScreenShakeFrequencyMin) == 0x000DF4, "Member 'AShoppingCartVehicleSK_C::ScreenShakeFrequencyMin' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, ScreenShakeFrequencyMax) == 0x000DF8, "Member 'AShoppingCartVehicleSK_C::ScreenShakeFrequencyMax' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, ScreenShakeYawFrequencyMultipier) == 0x000DFC, "Member 'AShoppingCartVehicleSK_C::ScreenShakeYawFrequencyMultipier' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, AmplitudeMin) == 0x000E00, "Member 'AShoppingCartVehicleSK_C::AmplitudeMin' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, AmplitudeMax) == 0x000E04, "Member 'AShoppingCartVehicleSK_C::AmplitudeMax' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, InAirSmoothed) == 0x000E08, "Member 'AShoppingCartVehicleSK_C::InAirSmoothed' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, CameraShakeSpeedCurvePow) == 0x000E0C, "Member 'AShoppingCartVehicleSK_C::CameraShakeSpeedCurvePow' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, SmoothedSpringCompression) == 0x000E10, "Member 'AShoppingCartVehicleSK_C::SmoothedSpringCompression' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, ScreenShakeMult) == 0x000E18, "Member 'AShoppingCartVehicleSK_C::ScreenShakeMult' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, RumbleMultipier) == 0x000E38, "Member 'AShoppingCartVehicleSK_C::RumbleMultipier' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, RumbleMulti) == 0x000E58, "Member 'AShoppingCartVehicleSK_C::RumbleMulti' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, SparksRumbleMulti) == 0x000E5C, "Member 'AShoppingCartVehicleSK_C::SparksRumbleMulti' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, bCoastingCameraShake) == 0x000E60, "Member 'AShoppingCartVehicleSK_C::bCoastingCameraShake' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, SprintAmplitude) == 0x000E64, "Member 'AShoppingCartVehicleSK_C::SprintAmplitude' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, LastDriver) == 0x000E68, "Member 'AShoppingCartVehicleSK_C::LastDriver' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, ZImpulseMultiplier) == 0x000E70, "Member 'AShoppingCartVehicleSK_C::ZImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, MinVelocityToLaunch) == 0x000E74, "Member 'AShoppingCartVehicleSK_C::MinVelocityToLaunch' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, MaxLaunchVelocity) == 0x000E78, "Member 'AShoppingCartVehicleSK_C::MaxLaunchVelocity' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, LaunchAngle) == 0x000E7C, "Member 'AShoppingCartVehicleSK_C::LaunchAngle' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, LastHitPlayer) == 0x000E80, "Member 'AShoppingCartVehicleSK_C::LastHitPlayer' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, LaunchMultiplier) == 0x000E88, "Member 'AShoppingCartVehicleSK_C::LaunchMultiplier' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, HitMinusZImpulseMultiplier) == 0x000E90, "Member 'AShoppingCartVehicleSK_C::HitMinusZImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, HitMinusLateralImpulseMultiplier) == 0x000EB0, "Member 'AShoppingCartVehicleSK_C::HitMinusLateralImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, HitMinusMaxImpulseVelocity) == 0x000ED0, "Member 'AShoppingCartVehicleSK_C::HitMinusMaxImpulseVelocity' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, HealthToDestroyProp) == 0x000EF0, "Member 'AShoppingCartVehicleSK_C::HealthToDestroyProp' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, IgnoreHitLastDriver) == 0x000EF4, "Member 'AShoppingCartVehicleSK_C::IgnoreHitLastDriver' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, PassengerIsInstigator) == 0x000EF5, "Member 'AShoppingCartVehicleSK_C::PassengerIsInstigator' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, DoorMesh) == 0x000EF8, "Member 'AShoppingCartVehicleSK_C::DoorMesh' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, CanLaunchPlayer) == 0x000F00, "Member 'AShoppingCartVehicleSK_C::CanLaunchPlayer' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, PassengerCameraShakeMultiplier) == 0x000F20, "Member 'AShoppingCartVehicleSK_C::PassengerCameraShakeMultiplier' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, PassengerCameraShake) == 0x000F28, "Member 'AShoppingCartVehicleSK_C::PassengerCameraShake' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, PassengerPlayerController) == 0x000F30, "Member 'AShoppingCartVehicleSK_C::PassengerPlayerController' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, QuestItem) == 0x000F38, "Member 'AShoppingCartVehicleSK_C::QuestItem' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, ObjBackendName) == 0x000F40, "Member 'AShoppingCartVehicleSK_C::ObjBackendName' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, ObjStat) == 0x000F48, "Member 'AShoppingCartVehicleSK_C::ObjStat' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, InWaterFX) == 0x000F58, "Member 'AShoppingCartVehicleSK_C::InWaterFX' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, GCParamsEmpty) == 0x000F60, "Member 'AShoppingCartVehicleSK_C::GCParamsEmpty' has a wrong offset!");

}

