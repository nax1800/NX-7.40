#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GCNL_EdgeOfStorm

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function GCNL_EdgeOfStorm.GCNL_EdgeOfStorm_C.ExecuteUbergraph_GCNL_EdgeOfStorm
// 0x00A0 (0x00A0 - 0x0000)
struct GCNL_EdgeOfStorm_C_ExecuteUbergraph_GCNL_EdgeOfStorm final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_EdgeOfStorm;                    // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0014(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GCNL_EdgeOfStorm_C_ExecuteUbergraph_GCNL_EdgeOfStorm) == 0x000004, "Wrong alignment on GCNL_EdgeOfStorm_C_ExecuteUbergraph_GCNL_EdgeOfStorm");
static_assert(sizeof(GCNL_EdgeOfStorm_C_ExecuteUbergraph_GCNL_EdgeOfStorm) == 0x0000A0, "Wrong size on GCNL_EdgeOfStorm_C_ExecuteUbergraph_GCNL_EdgeOfStorm");
static_assert(offsetof(GCNL_EdgeOfStorm_C_ExecuteUbergraph_GCNL_EdgeOfStorm, EntryPoint) == 0x000000, "Member 'GCNL_EdgeOfStorm_C_ExecuteUbergraph_GCNL_EdgeOfStorm::EntryPoint' has a wrong offset!");
static_assert(offsetof(GCNL_EdgeOfStorm_C_ExecuteUbergraph_GCNL_EdgeOfStorm, Temp_bool_Has_Been_Initd_Variable) == 0x000004, "Member 'GCNL_EdgeOfStorm_C_ExecuteUbergraph_GCNL_EdgeOfStorm::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(GCNL_EdgeOfStorm_C_ExecuteUbergraph_GCNL_EdgeOfStorm, K2Node_CustomEvent_EdgeOfStorm) == 0x000008, "Member 'GCNL_EdgeOfStorm_C_ExecuteUbergraph_GCNL_EdgeOfStorm::K2Node_CustomEvent_EdgeOfStorm' has a wrong offset!");
static_assert(offsetof(GCNL_EdgeOfStorm_C_ExecuteUbergraph_GCNL_EdgeOfStorm, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000014, "Member 'GCNL_EdgeOfStorm_C_ExecuteUbergraph_GCNL_EdgeOfStorm::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(GCNL_EdgeOfStorm_C_ExecuteUbergraph_GCNL_EdgeOfStorm, Temp_bool_IsClosed_Variable) == 0x00009C, "Member 'GCNL_EdgeOfStorm_C_ExecuteUbergraph_GCNL_EdgeOfStorm::Temp_bool_IsClosed_Variable' has a wrong offset!");

// Function GCNL_EdgeOfStorm.GCNL_EdgeOfStorm_C.Activated
// 0x000C (0x000C - 0x0000)
struct GCNL_EdgeOfStorm_C_Activated final
{
public:
	struct FVector                                EdgeOfStorm;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GCNL_EdgeOfStorm_C_Activated) == 0x000004, "Wrong alignment on GCNL_EdgeOfStorm_C_Activated");
static_assert(sizeof(GCNL_EdgeOfStorm_C_Activated) == 0x00000C, "Wrong size on GCNL_EdgeOfStorm_C_Activated");
static_assert(offsetof(GCNL_EdgeOfStorm_C_Activated, EdgeOfStorm) == 0x000000, "Member 'GCNL_EdgeOfStorm_C_Activated::EdgeOfStorm' has a wrong offset!");

// Function GCNL_EdgeOfStorm.GCNL_EdgeOfStorm_C.OnActive
// 0x00C8 (0x00C8 - 0x0000)
struct GCNL_EdgeOfStorm_C_OnActive final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GCNL_EdgeOfStorm_C_OnActive) == 0x000008, "Wrong alignment on GCNL_EdgeOfStorm_C_OnActive");
static_assert(sizeof(GCNL_EdgeOfStorm_C_OnActive) == 0x0000C8, "Wrong size on GCNL_EdgeOfStorm_C_OnActive");
static_assert(offsetof(GCNL_EdgeOfStorm_C_OnActive, MyTarget) == 0x000000, "Member 'GCNL_EdgeOfStorm_C_OnActive::MyTarget' has a wrong offset!");
static_assert(offsetof(GCNL_EdgeOfStorm_C_OnActive, Parameters) == 0x000008, "Member 'GCNL_EdgeOfStorm_C_OnActive::Parameters' has a wrong offset!");
static_assert(offsetof(GCNL_EdgeOfStorm_C_OnActive, ReturnValue) == 0x0000C0, "Member 'GCNL_EdgeOfStorm_C_OnActive::ReturnValue' has a wrong offset!");

// Function GCNL_EdgeOfStorm.GCNL_EdgeOfStorm_C.OnExecute
// 0x00C8 (0x00C8 - 0x0000)
struct GCNL_EdgeOfStorm_C_OnExecute final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GCNL_EdgeOfStorm_C_OnExecute) == 0x000008, "Wrong alignment on GCNL_EdgeOfStorm_C_OnExecute");
static_assert(sizeof(GCNL_EdgeOfStorm_C_OnExecute) == 0x0000C8, "Wrong size on GCNL_EdgeOfStorm_C_OnExecute");
static_assert(offsetof(GCNL_EdgeOfStorm_C_OnExecute, MyTarget) == 0x000000, "Member 'GCNL_EdgeOfStorm_C_OnExecute::MyTarget' has a wrong offset!");
static_assert(offsetof(GCNL_EdgeOfStorm_C_OnExecute, Parameters) == 0x000008, "Member 'GCNL_EdgeOfStorm_C_OnExecute::Parameters' has a wrong offset!");
static_assert(offsetof(GCNL_EdgeOfStorm_C_OnExecute, ReturnValue) == 0x0000C0, "Member 'GCNL_EdgeOfStorm_C_OnExecute::ReturnValue' has a wrong offset!");

// Function GCNL_EdgeOfStorm.GCNL_EdgeOfStorm_C.OnRemove
// 0x00C8 (0x00C8 - 0x0000)
struct GCNL_EdgeOfStorm_C_OnRemove final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GCNL_EdgeOfStorm_C_OnRemove) == 0x000008, "Wrong alignment on GCNL_EdgeOfStorm_C_OnRemove");
static_assert(sizeof(GCNL_EdgeOfStorm_C_OnRemove) == 0x0000C8, "Wrong size on GCNL_EdgeOfStorm_C_OnRemove");
static_assert(offsetof(GCNL_EdgeOfStorm_C_OnRemove, MyTarget) == 0x000000, "Member 'GCNL_EdgeOfStorm_C_OnRemove::MyTarget' has a wrong offset!");
static_assert(offsetof(GCNL_EdgeOfStorm_C_OnRemove, Parameters) == 0x000008, "Member 'GCNL_EdgeOfStorm_C_OnRemove::Parameters' has a wrong offset!");
static_assert(offsetof(GCNL_EdgeOfStorm_C_OnRemove, ReturnValue) == 0x0000C0, "Member 'GCNL_EdgeOfStorm_C_OnRemove::ReturnValue' has a wrong offset!");

}

