#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Node

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function Node.Node_C.ExecuteUbergraph_Node
// 0x0008 (0x0008 - 0x0000)
struct Node_C_ExecuteUbergraph_Node final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Node_C_ExecuteUbergraph_Node) == 0x000004, "Wrong alignment on Node_C_ExecuteUbergraph_Node");
static_assert(sizeof(Node_C_ExecuteUbergraph_Node) == 0x000008, "Wrong size on Node_C_ExecuteUbergraph_Node");
static_assert(offsetof(Node_C_ExecuteUbergraph_Node, EntryPoint) == 0x000000, "Member 'Node_C_ExecuteUbergraph_Node::EntryPoint' has a wrong offset!");
static_assert(offsetof(Node_C_ExecuteUbergraph_Node, K2Node_Event_IsDesignTime) == 0x000004, "Member 'Node_C_ExecuteUbergraph_Node::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function Node.Node_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct Node_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Node_C_PreConstruct) == 0x000001, "Wrong alignment on Node_C_PreConstruct");
static_assert(sizeof(Node_C_PreConstruct) == 0x000001, "Wrong size on Node_C_PreConstruct");
static_assert(offsetof(Node_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'Node_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function Node.Node_C.SetHighContrastMode
// 0x0001 (0x0001 - 0x0000)
struct Node_C_SetHighContrastMode final
{
public:
	bool                                          ActivateHighContrast;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Node_C_SetHighContrastMode) == 0x000001, "Wrong alignment on Node_C_SetHighContrastMode");
static_assert(sizeof(Node_C_SetHighContrastMode) == 0x000001, "Wrong size on Node_C_SetHighContrastMode");
static_assert(offsetof(Node_C_SetHighContrastMode, ActivateHighContrast) == 0x000000, "Member 'Node_C_SetHighContrastMode::ActivateHighContrast' has a wrong offset!");

// Function Node.Node_C.SetSelectedState
// 0x0018 (0x0018 - 0x0000)
struct Node_C_SetSelectedState final
{
public:
	bool                                          Param_Selected;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable1;                               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable3;                               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select1_Default;                            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Node_C_SetSelectedState) == 0x000008, "Wrong alignment on Node_C_SetSelectedState");
static_assert(sizeof(Node_C_SetSelectedState) == 0x000018, "Wrong size on Node_C_SetSelectedState");
static_assert(offsetof(Node_C_SetSelectedState, Param_Selected) == 0x000000, "Member 'Node_C_SetSelectedState::Param_Selected' has a wrong offset!");
static_assert(offsetof(Node_C_SetSelectedState, Temp_byte_Variable) == 0x000001, "Member 'Node_C_SetSelectedState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Node_C_SetSelectedState, Temp_byte_Variable1) == 0x000002, "Member 'Node_C_SetSelectedState::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(Node_C_SetSelectedState, Temp_bool_Variable) == 0x000003, "Member 'Node_C_SetSelectedState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Node_C_SetSelectedState, Temp_byte_Variable2) == 0x000004, "Member 'Node_C_SetSelectedState::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(Node_C_SetSelectedState, Temp_byte_Variable3) == 0x000005, "Member 'Node_C_SetSelectedState::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(Node_C_SetSelectedState, Temp_bool_Variable1) == 0x000006, "Member 'Node_C_SetSelectedState::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(Node_C_SetSelectedState, K2Node_Select_Default) == 0x000007, "Member 'Node_C_SetSelectedState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Node_C_SetSelectedState, K2Node_Select1_Default) == 0x000008, "Member 'Node_C_SetSelectedState::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(Node_C_SetSelectedState, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'Node_C_SetSelectedState::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

}

