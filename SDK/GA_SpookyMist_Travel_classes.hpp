#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_SpookyMist_Travel

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_SpookyMist_Travel.GA_SpookyMist_Travel_C
// 0x0100 (0x0A38 - 0x0938)
class UGA_SpookyMist_Travel_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0938(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AFortPawn*                              Target;                                            // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawnAthena*                  PlayerPawn;                                        // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorLocation;                                     // 0x0950(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TravelToLocation;                                  // 0x095C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TravelTime;                                        // 0x0968(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GravityScale;                                      // 0x096C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RestoreGrav;                                       // 0x0970(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0978(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         MovementStrength;                                  // 0x0988(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_98C[0x4];                                      // 0x098C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           DashAnimation;                                     // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             DashSoundCue;                                      // 0x0998(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cooldown;                                          // 0x09A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A4[0x4];                                      // 0x09A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GC_Burst;                                          // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         DashCooldown;                                      // 0x09B0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DashStrength;                                      // 0x09D0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DashDuration;                                      // 0x09F0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           CheckIfColliding;                                  // 0x0A10(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOnCooldown;                                      // 0x0A18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A19[0x7];                                      // 0x0A19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OverlappingActor;                                  // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OverlappingActors;                                 // 0x0A28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            GC_Wobble;                                         // 0x0A2C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Traveling_;                                        // 0x0A34(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_GA_SpookyMist_Travel(int32 EntryPoint);
	void DestroyObjects();
	void On_DBNO();
	void CheckIfStillColliding();
	void K2_OnEndAbility(bool bWasCancelled);
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);
	void EventReceived_76DD035A4216DFB29C5E0DB3261B6CD8(const struct FGameplayEventData& Payload);
	void Triggered_BA1318F5441CE862ADFAB5BA78450BAF(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_BA1318F5441CE862ADFAB5BA78450BAF(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_BA1318F5441CE862ADFAB5BA78450BAF(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void OnFinish_7DCB8EEB464593BB57421A868DAD3B3E();
	void HandlePawnDetachRC();
	void SetDashStartEndAndDirection(struct FVector* StartPoint, struct FVector* EndPoint, struct FVector* Direction);
	void PlayerCapsuleSizes(float* Radius, float* HalfHeight);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_SpookyMist_Travel_C">();
	}
	static class UGA_SpookyMist_Travel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_SpookyMist_Travel_C>();
	}
};
static_assert(alignof(UGA_SpookyMist_Travel_C) == 0x000008, "Wrong alignment on UGA_SpookyMist_Travel_C");
static_assert(sizeof(UGA_SpookyMist_Travel_C) == 0x000A38, "Wrong size on UGA_SpookyMist_Travel_C");
static_assert(offsetof(UGA_SpookyMist_Travel_C, UberGraphFrame) == 0x000938, "Member 'UGA_SpookyMist_Travel_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, Target) == 0x000940, "Member 'UGA_SpookyMist_Travel_C::Target' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, PlayerPawn) == 0x000948, "Member 'UGA_SpookyMist_Travel_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, ActorLocation) == 0x000950, "Member 'UGA_SpookyMist_Travel_C::ActorLocation' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, TravelToLocation) == 0x00095C, "Member 'UGA_SpookyMist_Travel_C::TravelToLocation' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, TravelTime) == 0x000968, "Member 'UGA_SpookyMist_Travel_C::TravelTime' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, GravityScale) == 0x00096C, "Member 'UGA_SpookyMist_Travel_C::GravityScale' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, RestoreGrav) == 0x000970, "Member 'UGA_SpookyMist_Travel_C::RestoreGrav' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, ObjectTypes) == 0x000978, "Member 'UGA_SpookyMist_Travel_C::ObjectTypes' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, MovementStrength) == 0x000988, "Member 'UGA_SpookyMist_Travel_C::MovementStrength' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, DashAnimation) == 0x000990, "Member 'UGA_SpookyMist_Travel_C::DashAnimation' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, DashSoundCue) == 0x000998, "Member 'UGA_SpookyMist_Travel_C::DashSoundCue' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, Cooldown) == 0x0009A0, "Member 'UGA_SpookyMist_Travel_C::Cooldown' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, GC_Burst) == 0x0009A8, "Member 'UGA_SpookyMist_Travel_C::GC_Burst' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, DashCooldown) == 0x0009B0, "Member 'UGA_SpookyMist_Travel_C::DashCooldown' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, DashStrength) == 0x0009D0, "Member 'UGA_SpookyMist_Travel_C::DashStrength' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, DashDuration) == 0x0009F0, "Member 'UGA_SpookyMist_Travel_C::DashDuration' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, CheckIfColliding) == 0x000A10, "Member 'UGA_SpookyMist_Travel_C::CheckIfColliding' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, IsOnCooldown) == 0x000A18, "Member 'UGA_SpookyMist_Travel_C::IsOnCooldown' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, OverlappingActor) == 0x000A20, "Member 'UGA_SpookyMist_Travel_C::OverlappingActor' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, OverlappingActors) == 0x000A28, "Member 'UGA_SpookyMist_Travel_C::OverlappingActors' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, GC_Wobble) == 0x000A2C, "Member 'UGA_SpookyMist_Travel_C::GC_Wobble' has a wrong offset!");
static_assert(offsetof(UGA_SpookyMist_Travel_C, Traveling_) == 0x000A34, "Member 'UGA_SpookyMist_Travel_C::Traveling_' has a wrong offset!");

}

