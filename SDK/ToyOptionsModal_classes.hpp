#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ToyOptionsModal

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ToyOptionsModal.ToyOptionsModal_C
// 0x0078 (0x04E8 - 0x0470)
class UToyOptionsModal_C final : public UFortMatchmakingKnobsModal
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0470(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Out;                                               // 0x0478(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       In;                                                // 0x0480(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 ConfirmSelectionShine;                             // 0x0488(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ULightbox_C*                            Lightbox;                                          // 0x0490(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          ModalContent;                                      // 0x0498(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_ItemInfo;                                  // 0x04A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Text_ItemDescription;                              // 0x04A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Text_ItemName;                                     // 0x04B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class FString>                         DebugOptions;                                      // 0x04B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UObject*>                        ListItems;                                         // 0x04C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class USoundBase*                             Open_Menu_Sound;                                   // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Close_Menu_Sound;                                  // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ToyOptionsModal(int32 EntryPoint);
	void OnDeactivated();
	void InitForOptionsComponent(class UFortActorOptionsComponent* OptionsComponent);
	void HandleCancelClicked();
	void BndEvt__AcceptButton_K2Node_ComponentBoundEvent_2_CommonButtonClicked__DelegateSignature(class UCommonButton* Button);
	void Close();
	void OnInputModeChanged(bool bUsingGamepad);
	void OnActivated();
	void SetItemInfo(const class FText& ItemName, const class FText& ItemDescription);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ToyOptionsModal_C">();
	}
	static class UToyOptionsModal_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UToyOptionsModal_C>();
	}
};
static_assert(alignof(UToyOptionsModal_C) == 0x000008, "Wrong alignment on UToyOptionsModal_C");
static_assert(sizeof(UToyOptionsModal_C) == 0x0004E8, "Wrong size on UToyOptionsModal_C");
static_assert(offsetof(UToyOptionsModal_C, UberGraphFrame) == 0x000470, "Member 'UToyOptionsModal_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UToyOptionsModal_C, Out) == 0x000478, "Member 'UToyOptionsModal_C::Out' has a wrong offset!");
static_assert(offsetof(UToyOptionsModal_C, In) == 0x000480, "Member 'UToyOptionsModal_C::In' has a wrong offset!");
static_assert(offsetof(UToyOptionsModal_C, ConfirmSelectionShine) == 0x000488, "Member 'UToyOptionsModal_C::ConfirmSelectionShine' has a wrong offset!");
static_assert(offsetof(UToyOptionsModal_C, Lightbox) == 0x000490, "Member 'UToyOptionsModal_C::Lightbox' has a wrong offset!");
static_assert(offsetof(UToyOptionsModal_C, ModalContent) == 0x000498, "Member 'UToyOptionsModal_C::ModalContent' has a wrong offset!");
static_assert(offsetof(UToyOptionsModal_C, SizeBox_ItemInfo) == 0x0004A0, "Member 'UToyOptionsModal_C::SizeBox_ItemInfo' has a wrong offset!");
static_assert(offsetof(UToyOptionsModal_C, Text_ItemDescription) == 0x0004A8, "Member 'UToyOptionsModal_C::Text_ItemDescription' has a wrong offset!");
static_assert(offsetof(UToyOptionsModal_C, Text_ItemName) == 0x0004B0, "Member 'UToyOptionsModal_C::Text_ItemName' has a wrong offset!");
static_assert(offsetof(UToyOptionsModal_C, DebugOptions) == 0x0004B8, "Member 'UToyOptionsModal_C::DebugOptions' has a wrong offset!");
static_assert(offsetof(UToyOptionsModal_C, ListItems) == 0x0004C8, "Member 'UToyOptionsModal_C::ListItems' has a wrong offset!");
static_assert(offsetof(UToyOptionsModal_C, Open_Menu_Sound) == 0x0004D8, "Member 'UToyOptionsModal_C::Open_Menu_Sound' has a wrong offset!");
static_assert(offsetof(UToyOptionsModal_C, Close_Menu_Sound) == 0x0004E0, "Member 'UToyOptionsModal_C::Close_Menu_Sound' has a wrong offset!");

}

