#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ParentBuildingContainerBlueprint

#include "Basic.hpp"

#include "DayPhaseFloats_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ParentBuildingContainerBlueprint.ParentBuildingContainerBlueprint_C
// 0x00E0 (0x0E20 - 0x0D40)
class AParentBuildingContainerBlueprint_C final : public ABuildingContainer
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0D40(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          DebugWind;                                         // 0x0D48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D49[0x7];                                      // 0x0D49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             IntenseWindMaterialsForPreview;                    // 0x0D50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UStaticMeshComponent*                   Wind_Intensity_Debug_Mesh;                         // 0x0D60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             OriginalMaterials;                                 // 0x0D68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UMaterialInstanceDynamic*               Debug_TempMaterial;                                // 0x0D78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DebugWindYaw;                                      // 0x0D80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Debug_Wind_Intensity;                              // 0x0D84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Set_Max_Actor_Scale;                               // 0x0D88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D89[0x3];                                      // 0x0D89(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Max_Scale;                                         // 0x0D8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Disable_TOD_Lights_and_Material_Emissive_Values;   // 0x0D90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Disable_Static_Mesh_Shadow_Casting_When_Lights_Are_Active; // 0x0D91(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Use_An_Alternate_Shadow_Mesh_When_The_Light_is_On_; // 0x0D92(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D93[0x5];                                      // 0x0D93(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            AlternateShadowStaticMesh;                         // 0x0D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Animate_Emissive_and_Lights_Over_Time;             // 0x0DA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA1[0x7];                                      // 0x0DA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   CodeControlled_EmissiveColor;                      // 0x0DA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                 CodeControlled_LightConeOpacity;                   // 0x0DB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FDayPhaseFloats                        Light_Intensity_Over_Time_of_Day_;                 // 0x0DC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Day_Phase_Transition_Length;                       // 0x0DD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDayPhaseFloats                        Emissive_Intensity_Over_Time_of_Day;               // 0x0DDC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Volumetric_Light_Scattering_Intensity;             // 0x0DEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cast_Volumetric_Shadows;                           // 0x0DF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Animate_Lights_With_A_Curve_Minus_Disables_time_of_day_light_controls; // 0x0DF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Animate_Mesh_MID_Emissive_Value_with_a_Curve_Minus_Disables_time_of_day_light_controls; // 0x0DF2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DF3[0x5];                                      // 0x0DF3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            LightAnimationCurve;                               // 0x0DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CodeControlled_Animation_Curve_Animation_Length;   // 0x0E00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CodeControlled_NumberOfMaterials;                  // 0x0E04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 NewVar_0;                                          // 0x0E08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         Random_Time_Scale_Percent;                         // 0x0E18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CodeControlled_CurrentPlayLength;                  // 0x0E1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ParentBuildingContainerBlueprint(int32 EntryPoint);
	void OnBounceAnimationUpdate(const struct FFortBounceData& Data);
	void Loop_Animation_Curve();
	void OnSetSearched();
	void OnDayPhaseChanged(EFortDayPhase CurrentDayPhase, EFortDayPhase PreviousDayPhase, bool bAtCreation);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void GetTimeOfDayBlueprintDefaultVariables(struct FTimeOfDayBlueprintDefaultVariables* OutVariables);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ParentBuildingContainerBlueprint_C">();
	}
	static class AParentBuildingContainerBlueprint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AParentBuildingContainerBlueprint_C>();
	}
};
static_assert(alignof(AParentBuildingContainerBlueprint_C) == 0x000008, "Wrong alignment on AParentBuildingContainerBlueprint_C");
static_assert(sizeof(AParentBuildingContainerBlueprint_C) == 0x000E20, "Wrong size on AParentBuildingContainerBlueprint_C");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, UberGraphFrame) == 0x000D40, "Member 'AParentBuildingContainerBlueprint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, DebugWind) == 0x000D48, "Member 'AParentBuildingContainerBlueprint_C::DebugWind' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, IntenseWindMaterialsForPreview) == 0x000D50, "Member 'AParentBuildingContainerBlueprint_C::IntenseWindMaterialsForPreview' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, Wind_Intensity_Debug_Mesh) == 0x000D60, "Member 'AParentBuildingContainerBlueprint_C::Wind_Intensity_Debug_Mesh' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, OriginalMaterials) == 0x000D68, "Member 'AParentBuildingContainerBlueprint_C::OriginalMaterials' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, Debug_TempMaterial) == 0x000D78, "Member 'AParentBuildingContainerBlueprint_C::Debug_TempMaterial' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, DebugWindYaw) == 0x000D80, "Member 'AParentBuildingContainerBlueprint_C::DebugWindYaw' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, Debug_Wind_Intensity) == 0x000D84, "Member 'AParentBuildingContainerBlueprint_C::Debug_Wind_Intensity' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, Set_Max_Actor_Scale) == 0x000D88, "Member 'AParentBuildingContainerBlueprint_C::Set_Max_Actor_Scale' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, Max_Scale) == 0x000D8C, "Member 'AParentBuildingContainerBlueprint_C::Max_Scale' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, Disable_TOD_Lights_and_Material_Emissive_Values) == 0x000D90, "Member 'AParentBuildingContainerBlueprint_C::Disable_TOD_Lights_and_Material_Emissive_Values' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, Disable_Static_Mesh_Shadow_Casting_When_Lights_Are_Active) == 0x000D91, "Member 'AParentBuildingContainerBlueprint_C::Disable_Static_Mesh_Shadow_Casting_When_Lights_Are_Active' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, Use_An_Alternate_Shadow_Mesh_When_The_Light_is_On_) == 0x000D92, "Member 'AParentBuildingContainerBlueprint_C::Use_An_Alternate_Shadow_Mesh_When_The_Light_is_On_' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, AlternateShadowStaticMesh) == 0x000D98, "Member 'AParentBuildingContainerBlueprint_C::AlternateShadowStaticMesh' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, Animate_Emissive_and_Lights_Over_Time) == 0x000DA0, "Member 'AParentBuildingContainerBlueprint_C::Animate_Emissive_and_Lights_Over_Time' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, CodeControlled_EmissiveColor) == 0x000DA8, "Member 'AParentBuildingContainerBlueprint_C::CodeControlled_EmissiveColor' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, CodeControlled_LightConeOpacity) == 0x000DB8, "Member 'AParentBuildingContainerBlueprint_C::CodeControlled_LightConeOpacity' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, Light_Intensity_Over_Time_of_Day_) == 0x000DC8, "Member 'AParentBuildingContainerBlueprint_C::Light_Intensity_Over_Time_of_Day_' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, Day_Phase_Transition_Length) == 0x000DD8, "Member 'AParentBuildingContainerBlueprint_C::Day_Phase_Transition_Length' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, Emissive_Intensity_Over_Time_of_Day) == 0x000DDC, "Member 'AParentBuildingContainerBlueprint_C::Emissive_Intensity_Over_Time_of_Day' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, Volumetric_Light_Scattering_Intensity) == 0x000DEC, "Member 'AParentBuildingContainerBlueprint_C::Volumetric_Light_Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, Cast_Volumetric_Shadows) == 0x000DF0, "Member 'AParentBuildingContainerBlueprint_C::Cast_Volumetric_Shadows' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, Animate_Lights_With_A_Curve_Minus_Disables_time_of_day_light_controls) == 0x000DF1, "Member 'AParentBuildingContainerBlueprint_C::Animate_Lights_With_A_Curve_Minus_Disables_time_of_day_light_controls' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, Animate_Mesh_MID_Emissive_Value_with_a_Curve_Minus_Disables_time_of_day_light_controls) == 0x000DF2, "Member 'AParentBuildingContainerBlueprint_C::Animate_Mesh_MID_Emissive_Value_with_a_Curve_Minus_Disables_time_of_day_light_controls' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, LightAnimationCurve) == 0x000DF8, "Member 'AParentBuildingContainerBlueprint_C::LightAnimationCurve' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, CodeControlled_Animation_Curve_Animation_Length) == 0x000E00, "Member 'AParentBuildingContainerBlueprint_C::CodeControlled_Animation_Curve_Animation_Length' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, CodeControlled_NumberOfMaterials) == 0x000E04, "Member 'AParentBuildingContainerBlueprint_C::CodeControlled_NumberOfMaterials' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, NewVar_0) == 0x000E08, "Member 'AParentBuildingContainerBlueprint_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, Random_Time_Scale_Percent) == 0x000E18, "Member 'AParentBuildingContainerBlueprint_C::Random_Time_Scale_Percent' has a wrong offset!");
static_assert(offsetof(AParentBuildingContainerBlueprint_C, CodeControlled_CurrentPlayLength) == 0x000E1C, "Member 'AParentBuildingContainerBlueprint_C::CodeControlled_CurrentPlayLength' has a wrong offset!");

}

