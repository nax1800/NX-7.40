#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FogPlane

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FogPlane.BP_FogPlane_C
// 0x0030 (0x0360 - 0x0330)
class ABP_FogPlane_C final : public AActor
{
public:
	class UStaticMeshComponent*                   FogPlane;                                          // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TilingAmount;                                      // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         PanningSpeed;                                      // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Texture;                                           // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material;                                          // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Invert_;                                           // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FogPlane_C">();
	}
	static class ABP_FogPlane_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FogPlane_C>();
	}
};
static_assert(alignof(ABP_FogPlane_C) == 0x000008, "Wrong alignment on ABP_FogPlane_C");
static_assert(sizeof(ABP_FogPlane_C) == 0x000360, "Wrong size on ABP_FogPlane_C");
static_assert(offsetof(ABP_FogPlane_C, FogPlane) == 0x000330, "Member 'ABP_FogPlane_C::FogPlane' has a wrong offset!");
static_assert(offsetof(ABP_FogPlane_C, DefaultSceneRoot) == 0x000338, "Member 'ABP_FogPlane_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_FogPlane_C, TilingAmount) == 0x000340, "Member 'ABP_FogPlane_C::TilingAmount' has a wrong offset!");
static_assert(offsetof(ABP_FogPlane_C, PanningSpeed) == 0x000344, "Member 'ABP_FogPlane_C::PanningSpeed' has a wrong offset!");
static_assert(offsetof(ABP_FogPlane_C, Texture) == 0x000348, "Member 'ABP_FogPlane_C::Texture' has a wrong offset!");
static_assert(offsetof(ABP_FogPlane_C, Material) == 0x000350, "Member 'ABP_FogPlane_C::Material' has a wrong offset!");
static_assert(offsetof(ABP_FogPlane_C, Invert_) == 0x000358, "Member 'ABP_FogPlane_C::Invert_' has a wrong offset!");

}

