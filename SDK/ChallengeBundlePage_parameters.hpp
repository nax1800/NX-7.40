#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeBundlePage

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ChallengeBundlePage.ChallengeBundlePage_C.ExecuteUbergraph_ChallengeBundlePage
// 0x0060 (0x0060 - 0x0000)
struct ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortTimerTimespanDataSource*           CallFunc_ConstructTimespanSource_NewObject;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button2;                // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button1;                // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button;                 // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HandleBack_Passthrough;                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortUINavigationManager*               CallFunc_GetUINavigationManager_ReturnValue;       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMobileGame_ReturnValue;                 // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IFortTimespanDataSource> CallFunc_SetTimespanSource_Value_CastInput;        // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage");
static_assert(sizeof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage) == 0x000060, "Wrong size on ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, EntryPoint) == 0x000000, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::EntryPoint' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, CallFunc_ConstructTimespanSource_NewObject) == 0x000008, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::CallFunc_ConstructTimespanSource_NewObject' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, Temp_byte_Variable) == 0x000010, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, Temp_byte_Variable1) == 0x000011, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, K2Node_ComponentBoundEvent_Button2) == 0x000018, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::K2Node_ComponentBoundEvent_Button2' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, K2Node_ComponentBoundEvent_Button1) == 0x000020, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::K2Node_ComponentBoundEvent_Button1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, K2Node_ComponentBoundEvent_Button) == 0x000028, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, CallFunc_HandleBack_Passthrough) == 0x000030, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::CallFunc_HandleBack_Passthrough' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, CallFunc_GetUINavigationManager_ReturnValue) == 0x000038, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::CallFunc_GetUINavigationManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, CallFunc_IsMobileGame_ReturnValue) == 0x000040, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::CallFunc_IsMobileGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, CallFunc_SetTimespanSource_Value_CastInput) == 0x000048, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::CallFunc_SetTimespanSource_Value_CastInput' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, Temp_bool_Variable) == 0x000058, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage, K2Node_Select_Default) == 0x000059, "Member 'ChallengeBundlePage_C_ExecuteUbergraph_ChallengeBundlePage::K2Node_Select_Default' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.BndEvt__PanelButton_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ChallengeBundlePage_C_BndEvt__PanelButton_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_BndEvt__PanelButton_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_BndEvt__PanelButton_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(ChallengeBundlePage_C_BndEvt__PanelButton_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on ChallengeBundlePage_C_BndEvt__PanelButton_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(ChallengeBundlePage_C_BndEvt__PanelButton_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'ChallengeBundlePage_C_BndEvt__PanelButton_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.BndEvt__PageNextButton_K2Node_ComponentBoundEvent_18_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ChallengeBundlePage_C_BndEvt__PageNextButton_K2Node_ComponentBoundEvent_18_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_BndEvt__PageNextButton_K2Node_ComponentBoundEvent_18_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_BndEvt__PageNextButton_K2Node_ComponentBoundEvent_18_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(ChallengeBundlePage_C_BndEvt__PageNextButton_K2Node_ComponentBoundEvent_18_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on ChallengeBundlePage_C_BndEvt__PageNextButton_K2Node_ComponentBoundEvent_18_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(ChallengeBundlePage_C_BndEvt__PageNextButton_K2Node_ComponentBoundEvent_18_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'ChallengeBundlePage_C_BndEvt__PageNextButton_K2Node_ComponentBoundEvent_18_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.BndEvt__PagePreviousButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ChallengeBundlePage_C_BndEvt__PagePreviousButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_BndEvt__PagePreviousButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_BndEvt__PagePreviousButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(ChallengeBundlePage_C_BndEvt__PagePreviousButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on ChallengeBundlePage_C_BndEvt__PagePreviousButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(ChallengeBundlePage_C_BndEvt__PagePreviousButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'ChallengeBundlePage_C_BndEvt__PagePreviousButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.UpdateBundle
// 0x0238 (0x0238 - 0x0000)
struct ChallengeBundlePage_C_UpdateBundle final
{
public:
	bool                                          HideHeader;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortFrontEndContext*                   CallFunc_GetContext_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGlobalUIContext*                   CallFunc_GetContext_ReturnValue1;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInZone_ReturnValue;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable3;                               // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGlobalUIContext*                   CallFunc_GetContext_ReturnValue2;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable4;                               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInZone_ReturnValue1;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable5;                               // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortChallengeBundleInfo*               CallFunc_GetChallengeBundleInfo_ReturnValue;       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedCount_OutTotalAchievedCount;   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedCount_OutTotalRequiredCount;   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAchievedCount_OutAchievedPercent;      // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAchievedCount_OutThresholdPercent;     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRewardThresholdAchieved_ReturnValue;    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasSiblingBundles_ReturnValue;            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable3;                               // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortChallengeBundleInfo*               CallFunc_GetChallengeBundleInfo_ReturnValue1;      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortItem*                              CallFunc_GetVaultedItemToPreview_ReturnValue;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select1_Default;                            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortChallengeBundleInfoLockedReason   CallFunc_IsUnlocked_LockedReason;                  // 0x0078(0x0028)()
	bool                                          CallFunc_IsUnlocked_ReturnValue;                   // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OwnsBattlePass_ReturnValue;               // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select2_Default;                            // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A3[0x5];                                       // 0x00A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortChallengeBundleItemDefinition*     CallFunc_GetBundleDefinition_ReturnValue;          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumVisibleQuests_ReturnValue;          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetRewardCompletionThreshold_ReturnValue; // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetDisplayName_ReturnValue;               // 0x00B8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00D0(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0110(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0128(0x0010)(ZeroConstructor, ReferenceParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData1;             // 0x0138(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0178(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array1;                           // 0x0190(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue1;                      // 0x01A8(0x0018)()
	class FText                                   K2Node_Select3_Default;                            // 0x01C0(0x0018)()
	class UFortItem*                              CallFunc_GetRewardItem_ReturnValue;                // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumInStack_ReturnValue;                // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemDefinition*                    CallFunc_GetItemDefinitionBP_ReturnValue;          // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortItemQuantityPair                  CallFunc_MakeItemQuantityPair_ReturnValue;         // 0x01F0(0x0040)()
	bool                                          CallFunc_SetItemQuantityPairToRepresent_ReturnValue; // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeBundlePage_C_UpdateBundle) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_UpdateBundle");
static_assert(sizeof(ChallengeBundlePage_C_UpdateBundle) == 0x000238, "Wrong size on ChallengeBundlePage_C_UpdateBundle");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, HideHeader) == 0x000000, "Member 'ChallengeBundlePage_C_UpdateBundle::HideHeader' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, Temp_bool_Variable) == 0x000001, "Member 'ChallengeBundlePage_C_UpdateBundle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, Temp_byte_Variable) == 0x000002, "Member 'ChallengeBundlePage_C_UpdateBundle::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, Temp_byte_Variable1) == 0x000003, "Member 'ChallengeBundlePage_C_UpdateBundle::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetContext_ReturnValue) == 0x000008, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, Temp_byte_Variable2) == 0x000010, "Member 'ChallengeBundlePage_C_UpdateBundle::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetContext_ReturnValue1) == 0x000018, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetContext_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_IsInZone_ReturnValue) == 0x000020, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_IsInZone_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_BooleanOR_ReturnValue) == 0x000021, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, Temp_byte_Variable3) == 0x000022, "Member 'ChallengeBundlePage_C_UpdateBundle::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, Temp_bool_Variable1) == 0x000023, "Member 'ChallengeBundlePage_C_UpdateBundle::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, Temp_bool_Variable2) == 0x000024, "Member 'ChallengeBundlePage_C_UpdateBundle::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetContext_ReturnValue2) == 0x000028, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetContext_ReturnValue2' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, Temp_byte_Variable4) == 0x000030, "Member 'ChallengeBundlePage_C_UpdateBundle::Temp_byte_Variable4' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_IsInZone_ReturnValue1) == 0x000031, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_IsInZone_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, Temp_byte_Variable5) == 0x000032, "Member 'ChallengeBundlePage_C_UpdateBundle::Temp_byte_Variable5' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetChallengeBundleInfo_ReturnValue) == 0x000038, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetChallengeBundleInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetAchievedCount_OutTotalAchievedCount) == 0x000040, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetAchievedCount_OutTotalAchievedCount' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetAchievedCount_OutTotalRequiredCount) == 0x000044, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetAchievedCount_OutTotalRequiredCount' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetAchievedCount_OutAchievedPercent) == 0x000048, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetAchievedCount_OutAchievedPercent' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetAchievedCount_OutThresholdPercent) == 0x00004C, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetAchievedCount_OutThresholdPercent' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_IsRewardThresholdAchieved_ReturnValue) == 0x000050, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_IsRewardThresholdAchieved_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_Conv_BoolToInt_ReturnValue) == 0x000054, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_Conv_BoolToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_HasSiblingBundles_ReturnValue) == 0x000058, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_HasSiblingBundles_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, K2Node_Select_Default) == 0x000059, "Member 'ChallengeBundlePage_C_UpdateBundle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, Temp_bool_Variable3) == 0x00005A, "Member 'ChallengeBundlePage_C_UpdateBundle::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetChallengeBundleInfo_ReturnValue1) == 0x000060, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetChallengeBundleInfo_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetVaultedItemToPreview_ReturnValue) == 0x000068, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetVaultedItemToPreview_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, K2Node_Select1_Default) == 0x000070, "Member 'ChallengeBundlePage_C_UpdateBundle::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_IsUnlocked_LockedReason) == 0x000078, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_IsUnlocked_LockedReason' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_IsUnlocked_ReturnValue) == 0x0000A0, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_IsUnlocked_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_OwnsBattlePass_ReturnValue) == 0x0000A1, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_OwnsBattlePass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, K2Node_Select2_Default) == 0x0000A2, "Member 'ChallengeBundlePage_C_UpdateBundle::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetBundleDefinition_ReturnValue) == 0x0000A8, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetBundleDefinition_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetNumVisibleQuests_ReturnValue) == 0x0000B0, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetNumVisibleQuests_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetRewardCompletionThreshold_ReturnValue) == 0x0000B4, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetRewardCompletionThreshold_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetDisplayName_ReturnValue) == 0x0000B8, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, K2Node_MakeStruct_FormatArgumentData) == 0x0000D0, "Member 'ChallengeBundlePage_C_UpdateBundle::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_TextToUpper_ReturnValue) == 0x000110, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, K2Node_MakeArray_Array) == 0x000128, "Member 'ChallengeBundlePage_C_UpdateBundle::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, K2Node_MakeStruct_FormatArgumentData1) == 0x000138, "Member 'ChallengeBundlePage_C_UpdateBundle::K2Node_MakeStruct_FormatArgumentData1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_Format_ReturnValue) == 0x000178, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, K2Node_MakeArray_Array1) == 0x000190, "Member 'ChallengeBundlePage_C_UpdateBundle::K2Node_MakeArray_Array1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0001A0, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_Format_ReturnValue1) == 0x0001A8, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_Format_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, K2Node_Select3_Default) == 0x0001C0, "Member 'ChallengeBundlePage_C_UpdateBundle::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetRewardItem_ReturnValue) == 0x0001D8, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetRewardItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetNumInStack_ReturnValue) == 0x0001E0, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetNumInStack_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_GetItemDefinitionBP_ReturnValue) == 0x0001E8, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_GetItemDefinitionBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_MakeItemQuantityPair_ReturnValue) == 0x0001F0, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_MakeItemQuantityPair_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_SetItemQuantityPairToRepresent_ReturnValue) == 0x000230, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_SetItemQuantityPairToRepresent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateBundle, CallFunc_Not_PreBool_ReturnValue) == 0x000231, "Member 'ChallengeBundlePage_C_UpdateBundle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.UpdateQuests
// 0x001A (0x001A - 0x0000)
struct ChallengeBundlePage_C_UpdateQuests final
{
public:
	bool                                          bHasQuestsToClaim;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateQuestList_HasClaimableQuests;       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateQuestList_HasClaimableQuests1;      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateQuestList_HasClaimableQuests2;      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateQuestList_HasClaimableQuests3;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue1;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateQuestList_HasClaimableQuests4;      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue2;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateQuestList_HasClaimableQuests5;      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue3;                   // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateQuestList_HasClaimableQuests6;      // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue4;                   // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateQuestList_HasClaimableQuests7;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue5;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateQuestList_HasClaimableQuests8;      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue6;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateQuestList_HasClaimableQuests9;      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateQuestList_HasClaimableQuests10;     // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue7;                   // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue8;                   // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue9;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_UpdateQuests) == 0x000001, "Wrong alignment on ChallengeBundlePage_C_UpdateQuests");
static_assert(sizeof(ChallengeBundlePage_C_UpdateQuests) == 0x00001A, "Wrong size on ChallengeBundlePage_C_UpdateQuests");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, bHasQuestsToClaim) == 0x000000, "Member 'ChallengeBundlePage_C_UpdateQuests::bHasQuestsToClaim' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, Temp_byte_Variable) == 0x000001, "Member 'ChallengeBundlePage_C_UpdateQuests::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, Temp_byte_Variable1) == 0x000002, "Member 'ChallengeBundlePage_C_UpdateQuests::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, Temp_bool_Variable) == 0x000003, "Member 'ChallengeBundlePage_C_UpdateQuests::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_UpdateQuestList_HasClaimableQuests) == 0x000004, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_UpdateQuestList_HasClaimableQuests' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_UpdateQuestList_HasClaimableQuests1) == 0x000005, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_UpdateQuestList_HasClaimableQuests1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_UpdateQuestList_HasClaimableQuests2) == 0x000006, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_UpdateQuestList_HasClaimableQuests2' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_BooleanOR_ReturnValue) == 0x000007, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_UpdateQuestList_HasClaimableQuests3) == 0x000008, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_UpdateQuestList_HasClaimableQuests3' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_BooleanOR_ReturnValue1) == 0x000009, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_BooleanOR_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_UpdateQuestList_HasClaimableQuests4) == 0x00000A, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_UpdateQuestList_HasClaimableQuests4' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_BooleanOR_ReturnValue2) == 0x00000B, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_BooleanOR_ReturnValue2' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_UpdateQuestList_HasClaimableQuests5) == 0x00000C, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_UpdateQuestList_HasClaimableQuests5' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_BooleanOR_ReturnValue3) == 0x00000D, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_BooleanOR_ReturnValue3' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_UpdateQuestList_HasClaimableQuests6) == 0x00000E, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_UpdateQuestList_HasClaimableQuests6' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_BooleanOR_ReturnValue4) == 0x00000F, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_BooleanOR_ReturnValue4' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_UpdateQuestList_HasClaimableQuests7) == 0x000010, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_UpdateQuestList_HasClaimableQuests7' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_BooleanOR_ReturnValue5) == 0x000011, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_BooleanOR_ReturnValue5' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_UpdateQuestList_HasClaimableQuests8) == 0x000012, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_UpdateQuestList_HasClaimableQuests8' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_BooleanOR_ReturnValue6) == 0x000013, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_BooleanOR_ReturnValue6' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_UpdateQuestList_HasClaimableQuests9) == 0x000014, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_UpdateQuestList_HasClaimableQuests9' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_UpdateQuestList_HasClaimableQuests10) == 0x000015, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_UpdateQuestList_HasClaimableQuests10' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_BooleanOR_ReturnValue7) == 0x000016, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_BooleanOR_ReturnValue7' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_BooleanOR_ReturnValue8) == 0x000017, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_BooleanOR_ReturnValue8' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, CallFunc_BooleanOR_ReturnValue9) == 0x000018, "Member 'ChallengeBundlePage_C_UpdateQuests::CallFunc_BooleanOR_ReturnValue9' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuests, K2Node_Select_Default) == 0x000019, "Member 'ChallengeBundlePage_C_UpdateQuests::K2Node_Select_Default' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.RegisterEventListeners
// 0x0040 (0x0040 - 0x0000)
struct ChallengeBundlePage_C_RegisterEventListeners final
{
public:
	TDelegate<void(bool* bPassThrough)>           K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	struct FDataTableRowHandle                    K2Node_MakeStruct_DataTableRowHandle;              // 0x0010(0x0010)(NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate1;             // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	class UFortGlobalUIContext*                   CallFunc_GetContext_ReturnValue;                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestManager*                      CallFunc_GetQuestManager_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_RegisterEventListeners) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_RegisterEventListeners");
static_assert(sizeof(ChallengeBundlePage_C_RegisterEventListeners) == 0x000040, "Wrong size on ChallengeBundlePage_C_RegisterEventListeners");
static_assert(offsetof(ChallengeBundlePage_C_RegisterEventListeners, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'ChallengeBundlePage_C_RegisterEventListeners::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_RegisterEventListeners, K2Node_MakeStruct_DataTableRowHandle) == 0x000010, "Member 'ChallengeBundlePage_C_RegisterEventListeners::K2Node_MakeStruct_DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_RegisterEventListeners, K2Node_CreateDelegate_OutputDelegate1) == 0x000020, "Member 'ChallengeBundlePage_C_RegisterEventListeners::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_RegisterEventListeners, CallFunc_GetContext_ReturnValue) == 0x000030, "Member 'ChallengeBundlePage_C_RegisterEventListeners::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_RegisterEventListeners, CallFunc_GetQuestManager_ReturnValue) == 0x000038, "Member 'ChallengeBundlePage_C_RegisterEventListeners::CallFunc_GetQuestManager_ReturnValue' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.CreateQuestWidget
// 0x0038 (0x0038 - 0x0000)
struct ChallengeBundlePage_C_CreateQuestWidget final
{
public:
	class UFortQuestItem*                         Quest;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestItemDefinition*               QuestDefinition;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelWidget*                           Panel;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortChallengeBundleInfo*               CallFunc_GetChallengeBundleInfo_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UChallengeQuestWidget_C*                CallFunc_Create_ReturnValue;                       // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_CreateQuestWidget) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_CreateQuestWidget");
static_assert(sizeof(ChallengeBundlePage_C_CreateQuestWidget) == 0x000038, "Wrong size on ChallengeBundlePage_C_CreateQuestWidget");
static_assert(offsetof(ChallengeBundlePage_C_CreateQuestWidget, Quest) == 0x000000, "Member 'ChallengeBundlePage_C_CreateQuestWidget::Quest' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_CreateQuestWidget, QuestDefinition) == 0x000008, "Member 'ChallengeBundlePage_C_CreateQuestWidget::QuestDefinition' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_CreateQuestWidget, Panel) == 0x000010, "Member 'ChallengeBundlePage_C_CreateQuestWidget::Panel' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_CreateQuestWidget, CallFunc_GetChallengeBundleInfo_ReturnValue) == 0x000018, "Member 'ChallengeBundlePage_C_CreateQuestWidget::CallFunc_GetChallengeBundleInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_CreateQuestWidget, CallFunc_GetOwningPlayer_ReturnValue) == 0x000020, "Member 'ChallengeBundlePage_C_CreateQuestWidget::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_CreateQuestWidget, CallFunc_Create_ReturnValue) == 0x000028, "Member 'ChallengeBundlePage_C_CreateQuestWidget::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_CreateQuestWidget, CallFunc_AddChild_ReturnValue) == 0x000030, "Member 'ChallengeBundlePage_C_CreateQuestWidget::CallFunc_AddChild_ReturnValue' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.HandleBack
// 0x0028 (0x0028 - 0x0000)
struct ChallengeBundlePage_C_HandleBack final
{
public:
	bool                                          PassThrough;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortHUDContext*                        CallFunc_GetContext_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortGlobalUIContext*                   CallFunc_GetContext_ReturnValue1;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInZone_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortUIManagerWidget_NUI*               CallFunc_GetUIManagerWidget_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_HandleBack) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_HandleBack");
static_assert(sizeof(ChallengeBundlePage_C_HandleBack) == 0x000028, "Wrong size on ChallengeBundlePage_C_HandleBack");
static_assert(offsetof(ChallengeBundlePage_C_HandleBack, PassThrough) == 0x000000, "Member 'ChallengeBundlePage_C_HandleBack::PassThrough' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_HandleBack, CallFunc_GetContext_ReturnValue) == 0x000008, "Member 'ChallengeBundlePage_C_HandleBack::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_HandleBack, CallFunc_GetContext_ReturnValue1) == 0x000010, "Member 'ChallengeBundlePage_C_HandleBack::CallFunc_GetContext_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_HandleBack, CallFunc_IsInZone_ReturnValue) == 0x000018, "Member 'ChallengeBundlePage_C_HandleBack::CallFunc_IsInZone_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_HandleBack, CallFunc_GetUIManagerWidget_ReturnValue) == 0x000020, "Member 'ChallengeBundlePage_C_HandleBack::CallFunc_GetUIManagerWidget_ReturnValue' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.Play Intro
// 0x0008 (0x0008 - 0x0000)
struct ChallengeBundlePage_C_Play_Intro final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_Play_Intro) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_Play_Intro");
static_assert(sizeof(ChallengeBundlePage_C_Play_Intro) == 0x000008, "Wrong size on ChallengeBundlePage_C_Play_Intro");
static_assert(offsetof(ChallengeBundlePage_C_Play_Intro, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'ChallengeBundlePage_C_Play_Intro::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.Initial Reset
// 0x0008 (0x0008 - 0x0000)
struct ChallengeBundlePage_C_Initial_Reset final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_Initial_Reset) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_Initial_Reset");
static_assert(sizeof(ChallengeBundlePage_C_Initial_Reset) == 0x000008, "Wrong size on ChallengeBundlePage_C_Initial_Reset");
static_assert(offsetof(ChallengeBundlePage_C_Initial_Reset, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'ChallengeBundlePage_C_Initial_Reset::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.UpdateQuestList
// 0x00B8 (0x00B8 - 0x0000)
struct ChallengeBundlePage_C_UpdateQuestList final
{
public:
	EChallengeBundleQuestVisualStyle              Visual_Style;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelWidget*                           Panel;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelWidget*                           Container;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasClaimableQuests;                                // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasQueststoClaim;                                  // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortChallengeBundleInfo*               CallFunc_GetChallengeBundleInfo_ReturnValue;       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortGlobalUIContext*                   CallFunc_GetContext_ReturnValue;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestManager*                      CallFunc_GetQuestManager_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UFortQuestItem*>                 CallFunc_GetQuests_OwnedQuests;                    // 0x0050(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<class UFortQuestItemDefinition*>       CallFunc_GetQuests_UnownedQuests;                  // 0x0060(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortQuestItemDefinition*               CallFunc_Array_Get_Item;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestItem*                         CallFunc_Array_Get_Item1;                          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortQuestItemDefinition*               CallFunc_GetQuestDefinitionBP_ReturnValue;         // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortQuestState                               CallFunc_GetQuestState_ReturnValue;                // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue3;                // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeBundlePage_C_UpdateQuestList) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_UpdateQuestList");
static_assert(sizeof(ChallengeBundlePage_C_UpdateQuestList) == 0x0000B8, "Wrong size on ChallengeBundlePage_C_UpdateQuestList");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, Visual_Style) == 0x000000, "Member 'ChallengeBundlePage_C_UpdateQuestList::Visual_Style' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, Panel) == 0x000008, "Member 'ChallengeBundlePage_C_UpdateQuestList::Panel' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, Container) == 0x000010, "Member 'ChallengeBundlePage_C_UpdateQuestList::Container' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, HasClaimableQuests) == 0x000018, "Member 'ChallengeBundlePage_C_UpdateQuestList::HasClaimableQuests' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, HasQueststoClaim) == 0x000019, "Member 'ChallengeBundlePage_C_UpdateQuestList::HasQueststoClaim' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'ChallengeBundlePage_C_UpdateQuestList::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'ChallengeBundlePage_C_UpdateQuestList::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, Temp_int_Array_Index_Variable) == 0x000024, "Member 'ChallengeBundlePage_C_UpdateQuestList::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, Temp_int_Loop_Counter_Variable1) == 0x000028, "Member 'ChallengeBundlePage_C_UpdateQuestList::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, CallFunc_Add_IntInt_ReturnValue1) == 0x00002C, "Member 'ChallengeBundlePage_C_UpdateQuestList::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, Temp_int_Array_Index_Variable1) == 0x000030, "Member 'ChallengeBundlePage_C_UpdateQuestList::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, CallFunc_GetChallengeBundleInfo_ReturnValue) == 0x000038, "Member 'ChallengeBundlePage_C_UpdateQuestList::CallFunc_GetChallengeBundleInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, CallFunc_GetContext_ReturnValue) == 0x000040, "Member 'ChallengeBundlePage_C_UpdateQuestList::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, CallFunc_GetQuestManager_ReturnValue) == 0x000048, "Member 'ChallengeBundlePage_C_UpdateQuestList::CallFunc_GetQuestManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, CallFunc_GetQuests_OwnedQuests) == 0x000050, "Member 'ChallengeBundlePage_C_UpdateQuestList::CallFunc_GetQuests_OwnedQuests' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, CallFunc_GetQuests_UnownedQuests) == 0x000060, "Member 'ChallengeBundlePage_C_UpdateQuestList::CallFunc_GetQuests_UnownedQuests' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'ChallengeBundlePage_C_UpdateQuestList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, CallFunc_Array_Get_Item) == 0x000078, "Member 'ChallengeBundlePage_C_UpdateQuestList::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, CallFunc_Array_Length_ReturnValue1) == 0x000080, "Member 'ChallengeBundlePage_C_UpdateQuestList::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, CallFunc_Less_IntInt_ReturnValue) == 0x000084, "Member 'ChallengeBundlePage_C_UpdateQuestList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, CallFunc_Array_Length_ReturnValue2) == 0x000088, "Member 'ChallengeBundlePage_C_UpdateQuestList::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, CallFunc_Add_IntInt_ReturnValue2) == 0x00008C, "Member 'ChallengeBundlePage_C_UpdateQuestList::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, CallFunc_Array_Get_Item1) == 0x000090, "Member 'ChallengeBundlePage_C_UpdateQuestList::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000098, "Member 'ChallengeBundlePage_C_UpdateQuestList::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, CallFunc_GetQuestDefinitionBP_ReturnValue) == 0x0000A0, "Member 'ChallengeBundlePage_C_UpdateQuestList::CallFunc_GetQuestDefinitionBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, CallFunc_GetQuestState_ReturnValue) == 0x0000A8, "Member 'ChallengeBundlePage_C_UpdateQuestList::CallFunc_GetQuestState_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, CallFunc_Array_Length_ReturnValue3) == 0x0000AC, "Member 'ChallengeBundlePage_C_UpdateQuestList::CallFunc_Array_Length_ReturnValue3' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, K2Node_SwitchEnum_CmpSuccess) == 0x0000B0, "Member 'ChallengeBundlePage_C_UpdateQuestList::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_UpdateQuestList, CallFunc_Less_IntInt_ReturnValue1) == 0x0000B1, "Member 'ChallengeBundlePage_C_UpdateQuestList::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.SetBackground
// 0x0018 (0x0018 - 0x0000)
struct ChallengeBundlePage_C_SetBackground final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGlobalUIContext*                   CallFunc_GetContext_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInZone_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_SetBackground) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_SetBackground");
static_assert(sizeof(ChallengeBundlePage_C_SetBackground) == 0x000018, "Wrong size on ChallengeBundlePage_C_SetBackground");
static_assert(offsetof(ChallengeBundlePage_C_SetBackground, Temp_byte_Variable) == 0x000000, "Member 'ChallengeBundlePage_C_SetBackground::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_SetBackground, Temp_byte_Variable1) == 0x000001, "Member 'ChallengeBundlePage_C_SetBackground::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_SetBackground, CallFunc_GetContext_ReturnValue) == 0x000008, "Member 'ChallengeBundlePage_C_SetBackground::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_SetBackground, CallFunc_IsInZone_ReturnValue) == 0x000010, "Member 'ChallengeBundlePage_C_SetBackground::CallFunc_IsInZone_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_SetBackground, Temp_bool_Variable) == 0x000011, "Member 'ChallengeBundlePage_C_SetBackground::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_SetBackground, K2Node_Select_Default) == 0x000012, "Member 'ChallengeBundlePage_C_SetBackground::K2Node_Select_Default' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.ConstructTimespanSource
// 0x0020 (0x0020 - 0x0000)
struct ChallengeBundlePage_C_ConstructTimespanSource final
{
public:
	class UFortTimerTimespanDataSource*           NewObject;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(struct FTimespan* Result)>     K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class UFortTimerTimespanDataSource*           CallFunc_SpawnObject_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_ConstructTimespanSource) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_ConstructTimespanSource");
static_assert(sizeof(ChallengeBundlePage_C_ConstructTimespanSource) == 0x000020, "Wrong size on ChallengeBundlePage_C_ConstructTimespanSource");
static_assert(offsetof(ChallengeBundlePage_C_ConstructTimespanSource, NewObject) == 0x000000, "Member 'ChallengeBundlePage_C_ConstructTimespanSource::NewObject' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ConstructTimespanSource, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'ChallengeBundlePage_C_ConstructTimespanSource::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_ConstructTimespanSource, CallFunc_SpawnObject_ReturnValue) == 0x000018, "Member 'ChallengeBundlePage_C_ConstructTimespanSource::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");

// Function ChallengeBundlePage.ChallengeBundlePage_C.GetAthenaEventTime
// 0x0028 (0x0028 - 0x0000)
struct ChallengeBundlePage_C_GetAthenaEventTime final
{
public:
	struct FTimespan                              Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  K2Node_DynamicCast_AsFort_Player_Controller;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_GetTimeSinceAthenaSeasonStart_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundlePage_C_GetAthenaEventTime) == 0x000008, "Wrong alignment on ChallengeBundlePage_C_GetAthenaEventTime");
static_assert(sizeof(ChallengeBundlePage_C_GetAthenaEventTime) == 0x000028, "Wrong size on ChallengeBundlePage_C_GetAthenaEventTime");
static_assert(offsetof(ChallengeBundlePage_C_GetAthenaEventTime, Result) == 0x000000, "Member 'ChallengeBundlePage_C_GetAthenaEventTime::Result' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_GetAthenaEventTime, CallFunc_GetOwningPlayer_ReturnValue) == 0x000008, "Member 'ChallengeBundlePage_C_GetAthenaEventTime::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_GetAthenaEventTime, K2Node_DynamicCast_AsFort_Player_Controller) == 0x000010, "Member 'ChallengeBundlePage_C_GetAthenaEventTime::K2Node_DynamicCast_AsFort_Player_Controller' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_GetAthenaEventTime, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ChallengeBundlePage_C_GetAthenaEventTime::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ChallengeBundlePage_C_GetAthenaEventTime, CallFunc_GetTimeSinceAthenaSeasonStart_ReturnValue) == 0x000020, "Member 'ChallengeBundlePage_C_GetAthenaEventTime::CallFunc_GetTimeSinceAthenaSeasonStart_ReturnValue' has a wrong offset!");

}

