#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortniteUI

#include "Basic.hpp"

#include "BlueprintContext_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "CommonUI_structs.hpp"
#include "CommonUI_classes.hpp"
#include "Party_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SlateCore_structs.hpp"
#include "CommonInput_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "SocialUMG_structs.hpp"
#include "SocialUMG_classes.hpp"
#include "InputCore_structs.hpp"
#include "EpicCMSUIFramework_classes.hpp"
#include "McpProfileSys_structs.hpp"
#include "GameSubCatalog_structs.hpp"
#include "Slate_structs.hpp"
#include "LauncherSocialTypes_structs.hpp"


namespace SDK
{

// Class FortniteUI.FortActivatablePanel
// 0x0028 (0x0348 - 0x0320)
class UFortActivatablePanel : public UCommonActivatablePanel
{
public:
	bool                                          bIsPushedOnToContentPanelStack;                    // 0x0320(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlreadyOnContentPanelStack;                     // 0x0321(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputPriority                                InputPriority;                                     // 0x0322(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsClosableByPlayerInput;                          // 0x0323(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_324[0x24];                                     // 0x0324(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RestoreCenterWidget(class UWidget* FallbackWidget);
	void RestoreScrollWidget(class UWidget* FallbackWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivatablePanel">();
	}
	static class UFortActivatablePanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivatablePanel>();
	}
};
static_assert(alignof(UFortActivatablePanel) == 0x000008, "Wrong alignment on UFortActivatablePanel");
static_assert(sizeof(UFortActivatablePanel) == 0x000348, "Wrong size on UFortActivatablePanel");
static_assert(offsetof(UFortActivatablePanel, bIsPushedOnToContentPanelStack) == 0x000320, "Member 'UFortActivatablePanel::bIsPushedOnToContentPanelStack' has a wrong offset!");
static_assert(offsetof(UFortActivatablePanel, bIsAlreadyOnContentPanelStack) == 0x000321, "Member 'UFortActivatablePanel::bIsAlreadyOnContentPanelStack' has a wrong offset!");
static_assert(offsetof(UFortActivatablePanel, InputPriority) == 0x000322, "Member 'UFortActivatablePanel::InputPriority' has a wrong offset!");
static_assert(offsetof(UFortActivatablePanel, bIsClosableByPlayerInput) == 0x000323, "Member 'UFortActivatablePanel::bIsClosableByPlayerInput' has a wrong offset!");

// Class FortniteUI.AthenaLeaderboardScreenBase
// 0x0100 (0x0448 - 0x0348)
class UAthenaLeaderboardScreenBase : public UFortActivatablePanel
{
public:
	class UFortTabListWidgetBase*                 LeaderboardTabList;                                // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonRotator*                         MatchRotator;                                      // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonRotator*                         LeaderboardTypeRotator;                            // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       RefreshTimeText;                                   // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       NoDataMessageText;                                 // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonBorder*                          BorderLocalUserFocus;                              // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             LeaderboardDisplayData;                            // 0x0378(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, class UCommonButton*>       ActiveTabButtons;                                  // 0x0380(0x0050)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UFortLeaderboardRowProxyInstance*> RowProxies;                                        // 0x03D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UFortLeaderboardRowProxyInstance*       LocalUserRowProxy;                                 // 0x03E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLeaderboardFilter                     CurrentLeaderboardFilter;                          // 0x03E8(0x0028)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_410[0x38];                                     // 0x0410(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActiveLeaderboardTabChanged(int32 ActiveWidgetIndex);
	void OnFriendsFilterChanged(int32 FriendsFilterIndex);
	void OnMatchTypeChanged(int32 MatchTypeIndex);
	void OnPlaylistChanged(const class FName NewPlaylistName, const ECommonInputType NewInputType);
	void OnQueryFinished();
	void OnQueryStarted();
	void OnUpdateLeaderboardListUI(bool bWasSuccessful, class UFortLeaderboardRowProxyInstance* LocalUserRow, const class FText& QueryErrorStr);
	void OnUpdateListHeader(const struct FAthenaPlaylistLeaderboardData& PlaylistTabData);
	void OnUpdateTabButtonText(class UCommonButton* Button, const struct FAthenaPlaylistLeaderboardData& PlaylistTabData);

	bool CanShowFriendsOnlyLeaderboard() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaLeaderboardScreenBase">();
	}
	static class UAthenaLeaderboardScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaLeaderboardScreenBase>();
	}
};
static_assert(alignof(UAthenaLeaderboardScreenBase) == 0x000008, "Wrong alignment on UAthenaLeaderboardScreenBase");
static_assert(sizeof(UAthenaLeaderboardScreenBase) == 0x000448, "Wrong size on UAthenaLeaderboardScreenBase");
static_assert(offsetof(UAthenaLeaderboardScreenBase, LeaderboardTabList) == 0x000348, "Member 'UAthenaLeaderboardScreenBase::LeaderboardTabList' has a wrong offset!");
static_assert(offsetof(UAthenaLeaderboardScreenBase, MatchRotator) == 0x000350, "Member 'UAthenaLeaderboardScreenBase::MatchRotator' has a wrong offset!");
static_assert(offsetof(UAthenaLeaderboardScreenBase, LeaderboardTypeRotator) == 0x000358, "Member 'UAthenaLeaderboardScreenBase::LeaderboardTypeRotator' has a wrong offset!");
static_assert(offsetof(UAthenaLeaderboardScreenBase, RefreshTimeText) == 0x000360, "Member 'UAthenaLeaderboardScreenBase::RefreshTimeText' has a wrong offset!");
static_assert(offsetof(UAthenaLeaderboardScreenBase, NoDataMessageText) == 0x000368, "Member 'UAthenaLeaderboardScreenBase::NoDataMessageText' has a wrong offset!");
static_assert(offsetof(UAthenaLeaderboardScreenBase, BorderLocalUserFocus) == 0x000370, "Member 'UAthenaLeaderboardScreenBase::BorderLocalUserFocus' has a wrong offset!");
static_assert(offsetof(UAthenaLeaderboardScreenBase, LeaderboardDisplayData) == 0x000378, "Member 'UAthenaLeaderboardScreenBase::LeaderboardDisplayData' has a wrong offset!");
static_assert(offsetof(UAthenaLeaderboardScreenBase, ActiveTabButtons) == 0x000380, "Member 'UAthenaLeaderboardScreenBase::ActiveTabButtons' has a wrong offset!");
static_assert(offsetof(UAthenaLeaderboardScreenBase, RowProxies) == 0x0003D0, "Member 'UAthenaLeaderboardScreenBase::RowProxies' has a wrong offset!");
static_assert(offsetof(UAthenaLeaderboardScreenBase, LocalUserRowProxy) == 0x0003E0, "Member 'UAthenaLeaderboardScreenBase::LocalUserRowProxy' has a wrong offset!");
static_assert(offsetof(UAthenaLeaderboardScreenBase, CurrentLeaderboardFilter) == 0x0003E8, "Member 'UAthenaLeaderboardScreenBase::CurrentLeaderboardFilter' has a wrong offset!");

// Class FortniteUI.FortUserWidget
// 0x0010 (0x0240 - 0x0230)
class UFortUserWidget : public UUserWidget
{
public:
	uint8                                         Pad_230[0x8];                                      // 0x0230(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bConsumePointerInput;                              // 0x0238(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddGrantCheatMenu(const class FString& TemplateId, const class FString& InstanceId);
	void AddStoreCheatMenu();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUserWidget">();
	}
	static class UFortUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUserWidget>();
	}
};
static_assert(alignof(UFortUserWidget) == 0x000008, "Wrong alignment on UFortUserWidget");
static_assert(sizeof(UFortUserWidget) == 0x000240, "Wrong size on UFortUserWidget");
static_assert(offsetof(UFortUserWidget, bConsumePointerInput) == 0x000238, "Member 'UFortUserWidget::bConsumePointerInput' has a wrong offset!");

// Class FortniteUI.FortMovieWidget
// 0x0028 (0x0268 - 0x0240)
class UFortMovieWidget : public UFortUserWidget
{
public:
	UMulticastDelegateProperty_                   OnMediaOpened;                                     // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMediaPlayer*                           MediaPlayer;                                       // 0x0250(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMediaTexture*                          MediaTexture;                                      // 0x0258(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMediaSoundComponent*                   SoundComponent;                                    // 0x0260(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void MediaDimensionsUpdated(float NewWidth, float NewHeight);
	void RequestPlayMovie(bool bShouldRewind);
	void RequestStopMovie();
	bool SetMediaSource(class UMediaSource* InMediaSource, const struct FMediaPlayerOptions& PlayerOptions, bool bPlayOnOpen, bool bLooping);

	class UMediaPlayer* GetMediaPlayer() const;
	class UMediaSoundComponent* GetMediaSoundComponent() const;
	class UMediaTexture* GetMediaTexture() const;
	bool HasPlayerForSource(class UMediaSource* InMediaSource) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMovieWidget">();
	}
	static class UFortMovieWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMovieWidget>();
	}
};
static_assert(alignof(UFortMovieWidget) == 0x000008, "Wrong alignment on UFortMovieWidget");
static_assert(sizeof(UFortMovieWidget) == 0x000268, "Wrong size on UFortMovieWidget");
static_assert(offsetof(UFortMovieWidget, OnMediaOpened) == 0x000240, "Member 'UFortMovieWidget::OnMediaOpened' has a wrong offset!");
static_assert(offsetof(UFortMovieWidget, MediaPlayer) == 0x000250, "Member 'UFortMovieWidget::MediaPlayer' has a wrong offset!");
static_assert(offsetof(UFortMovieWidget, MediaTexture) == 0x000258, "Member 'UFortMovieWidget::MediaTexture' has a wrong offset!");
static_assert(offsetof(UFortMovieWidget, SoundComponent) == 0x000260, "Member 'UFortMovieWidget::SoundComponent' has a wrong offset!");

// Class FortniteUI.AthenaAccountContext
// 0x0000 (0x0028 - 0x0028)
class UAthenaAccountContext final : public UBlueprintContextBase
{
public:
	void GetBattleBookPurchaseLimit(int32* MaxNumLevelsPossibleToPurchase, int32* BonusLevelsGranted);
	class UAthenaSeasonItemDefinition* GetCurrentSeasonDefinition();
	void SimulateBattleBookPurchase(int32 NumLevelsToPurchase, int32* BonusLevelsGranted, bool* bOverLimit);

	class FText GetCurrentSeasonName() const;
	int32 GetCurrentSeasonNumber() const;
	bool IsAtMaxBattlePassTier() const;
	bool ShouldReplaceBattleStarsWithAlternateReward() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaAccountContext">();
	}
	static class UAthenaAccountContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaAccountContext>();
	}
};
static_assert(alignof(UAthenaAccountContext) == 0x000008, "Wrong alignment on UAthenaAccountContext");
static_assert(sizeof(UAthenaAccountContext) == 0x000028, "Wrong size on UAthenaAccountContext");

// Class FortniteUI.FortAsyncAction_ShowConfirmation_NUI
// 0x0140 (0x0170 - 0x0030)
class UFortAsyncAction_ShowConfirmation_NUI final : public UBlueprintAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   DialogResult;                                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFortDialogDescription_NUI             Description;                                       // 0x0048(0x0120)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UFortAsyncAction_ShowConfirmation_NUI* ShowConfirmationDialog_NUI(class UObject* InWorldContextObject, const struct FSlateBrush& Icon, const class FText& Title, const class FText& MESSAGE, const TArray<struct FConfirmationDialogAction>& ConfirmButtonInputActions, const class FName& DeclineButtonInputAction, class UWidget* AdditionalContent, class UWidget* LeftAdditionalContent);
	static class UFortAsyncAction_ShowConfirmation_NUI* ShowSimpleConfirmationDialog_CustomInput(class UObject* InWorldContextObject, const struct FSlateBrush& Icon, const class FText& Title, const class FText& MESSAGE, class FName ConfirmAction, class FName DeclineAction, class UWidget* AdditionalContent, class UWidget* LeftAdditionalContent);
	static class UFortAsyncAction_ShowConfirmation_NUI* ShowSimpleConfirmationDialog_NUI(class UObject* InWorldContextObject, const struct FSlateBrush& Icon, const class FText& Title, const class FText& MESSAGE, bool bShowConfirm, bool bShowDecline, class UWidget* AdditionalContent, class UWidget* LeftAdditionalContent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAsyncAction_ShowConfirmation_NUI">();
	}
	static class UFortAsyncAction_ShowConfirmation_NUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAsyncAction_ShowConfirmation_NUI>();
	}
};
static_assert(alignof(UFortAsyncAction_ShowConfirmation_NUI) == 0x000008, "Wrong alignment on UFortAsyncAction_ShowConfirmation_NUI");
static_assert(sizeof(UFortAsyncAction_ShowConfirmation_NUI) == 0x000170, "Wrong size on UFortAsyncAction_ShowConfirmation_NUI");
static_assert(offsetof(UFortAsyncAction_ShowConfirmation_NUI, DialogResult) == 0x000030, "Member 'UFortAsyncAction_ShowConfirmation_NUI::DialogResult' has a wrong offset!");
static_assert(offsetof(UFortAsyncAction_ShowConfirmation_NUI, WorldContextObject) == 0x000040, "Member 'UFortAsyncAction_ShowConfirmation_NUI::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UFortAsyncAction_ShowConfirmation_NUI, Description) == 0x000048, "Member 'UFortAsyncAction_ShowConfirmation_NUI::Description' has a wrong offset!");

// Class FortniteUI.FortHUDElementWidget
// 0x0030 (0x0268 - 0x0238)
class UFortHUDElementWidget : public UCommonUserWidget
{
public:
	struct FGameplayTag                           ElementTag;                                        // 0x0238(0x0008)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  HUDElementTag;                                     // 0x0240(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_260[0x8];                                      // 0x0260(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleOnHUDElementVisibilityChanged(const struct FGameplayTagContainer& HiddenHUDElementTags);
	void HandleOnHUDResetToDefaults();
	void OnVisibilitySetEvent(ESlateVisibility InVisibility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHUDElementWidget">();
	}
	static class UFortHUDElementWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHUDElementWidget>();
	}
};
static_assert(alignof(UFortHUDElementWidget) == 0x000008, "Wrong alignment on UFortHUDElementWidget");
static_assert(sizeof(UFortHUDElementWidget) == 0x000268, "Wrong size on UFortHUDElementWidget");
static_assert(offsetof(UFortHUDElementWidget, ElementTag) == 0x000238, "Member 'UFortHUDElementWidget::ElementTag' has a wrong offset!");
static_assert(offsetof(UFortHUDElementWidget, HUDElementTag) == 0x000240, "Member 'UFortHUDElementWidget::HUDElementTag' has a wrong offset!");

// Class FortniteUI.FortGridPickerTile
// 0x0010 (0x0250 - 0x0240)
class UFortGridPickerTile final : public UFortUserWidget
{
public:
	class UObject*                                Data;                                              // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortGridWidgetBase*                    Owner;                                             // 0x0248(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ForwardClicked();
	void OnClicked();
	void SetData(class UObject* InData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGridPickerTile">();
	}
	static class UFortGridPickerTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGridPickerTile>();
	}
};
static_assert(alignof(UFortGridPickerTile) == 0x000008, "Wrong alignment on UFortGridPickerTile");
static_assert(sizeof(UFortGridPickerTile) == 0x000250, "Wrong size on UFortGridPickerTile");
static_assert(offsetof(UFortGridPickerTile, Data) == 0x000240, "Member 'UFortGridPickerTile::Data' has a wrong offset!");
static_assert(offsetof(UFortGridPickerTile, Owner) == 0x000248, "Member 'UFortGridPickerTile::Owner' has a wrong offset!");

// Class FortniteUI.AthenaAIKillsBase
// 0x0018 (0x0280 - 0x0268)
class UAthenaAIKillsBase final : public UFortHUDElementWidget
{
public:
	class UTextBlock*                             KillsText;                                         // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                KillsSource;                                       // 0x0270(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCustomKillSource;                                 // 0x0278(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetKillsSourcePlayerController(class AFortPlayerControllerAthena* InPlayerController);
	void SetKillsSourcePlayerState(class AFortPlayerStateAthena* InPlayerState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaAIKillsBase">();
	}
	static class UAthenaAIKillsBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaAIKillsBase>();
	}
};
static_assert(alignof(UAthenaAIKillsBase) == 0x000008, "Wrong alignment on UAthenaAIKillsBase");
static_assert(sizeof(UAthenaAIKillsBase) == 0x000280, "Wrong size on UAthenaAIKillsBase");
static_assert(offsetof(UAthenaAIKillsBase, KillsText) == 0x000268, "Member 'UAthenaAIKillsBase::KillsText' has a wrong offset!");
static_assert(offsetof(UAthenaAIKillsBase, KillsSource) == 0x000270, "Member 'UAthenaAIKillsBase::KillsSource' has a wrong offset!");
static_assert(offsetof(UAthenaAIKillsBase, bCustomKillSource) == 0x000278, "Member 'UAthenaAIKillsBase::bCustomKillSource' has a wrong offset!");

// Class FortniteUI.FortAsyncAction_CheckForStwMfaReward
// 0x0028 (0x0058 - 0x0030)
class UFortAsyncAction_CheckForStwMfaReward final : public UBlueprintAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   OnCompleted;                                       // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFailed;                                          // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  PlayerController;                                  // 0x0050(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UFortAsyncAction_CheckForStwMfaReward* CheckForStwMfaReward(class AFortPlayerController* Param_PlayerController);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAsyncAction_CheckForStwMfaReward">();
	}
	static class UFortAsyncAction_CheckForStwMfaReward* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAsyncAction_CheckForStwMfaReward>();
	}
};
static_assert(alignof(UFortAsyncAction_CheckForStwMfaReward) == 0x000008, "Wrong alignment on UFortAsyncAction_CheckForStwMfaReward");
static_assert(sizeof(UFortAsyncAction_CheckForStwMfaReward) == 0x000058, "Wrong size on UFortAsyncAction_CheckForStwMfaReward");
static_assert(offsetof(UFortAsyncAction_CheckForStwMfaReward, OnCompleted) == 0x000030, "Member 'UFortAsyncAction_CheckForStwMfaReward::OnCompleted' has a wrong offset!");
static_assert(offsetof(UFortAsyncAction_CheckForStwMfaReward, OnFailed) == 0x000040, "Member 'UFortAsyncAction_CheckForStwMfaReward::OnFailed' has a wrong offset!");
static_assert(offsetof(UFortAsyncAction_CheckForStwMfaReward, PlayerController) == 0x000050, "Member 'UFortAsyncAction_CheckForStwMfaReward::PlayerController' has a wrong offset!");

// Class FortniteUI.AthenaAwardAlertBase
// 0x0008 (0x0238 - 0x0230)
class UAthenaAwardAlertBase final : public UUserWidget
{
public:
	class UAthenaPlayerViewModel*                 PlayerVM;                                          // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnAwardGranted(class UFortAwardItemDefinition* AwardDefinition);
	void SetDataSource(class UAthenaPlayerViewModel* PlayerViewModel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaAwardAlertBase">();
	}
	static class UAthenaAwardAlertBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaAwardAlertBase>();
	}
};
static_assert(alignof(UAthenaAwardAlertBase) == 0x000008, "Wrong alignment on UAthenaAwardAlertBase");
static_assert(sizeof(UAthenaAwardAlertBase) == 0x000238, "Wrong size on UAthenaAwardAlertBase");
static_assert(offsetof(UAthenaAwardAlertBase, PlayerVM) == 0x000230, "Member 'UAthenaAwardAlertBase::PlayerVM' has a wrong offset!");

// Class FortniteUI.FortGridWidgetBase
// 0x0148 (0x0268 - 0x0120)
class UFortGridWidgetBase : public UContentWidget
{
public:
	TSubclassOf<class UFortGridPickerTile>        ClearWidgetType;                                   // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TileWidth;                                         // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TileHeight;                                        // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TilesAcross;                                       // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TilesDown;                                         // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShrinkToFit;                                      // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PeekOverflowTilePercentage;                        // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                TilePadding;                                       // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            GridBackground;                                    // 0x0150(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                GridBackgroundPadding;                             // 0x01D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UObject*>                        DataProvider;                                      // 0x01E8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnTileGenerated;                                   // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTileClicked;                                     // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMouseEnterTile;                                  // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMouseLeaveTile;                                  // 0x0228(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortGridPickerTile>        TileWidgetType;                                    // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGridSortKind                                 SortKind;                                          // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReversed;                                         // 0x0241(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242[0x2];                                      // 0x0242(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Data)>          GetSortKeyFor;                                     // 0x0244(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_254[0x14];                                     // 0x0254(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFortGridPickerTile* GetTileForObject(const class UObject* Object);
	TArray<class UFortGridPickerTile*> GetTiles();
	void SetClearWidgetType(TSubclassOf<class UFortGridPickerTile> InClearWidgetType);
	void SetDataProvider(const TArray<class UObject*>& Data);
	void SetPeekOverflowTilePercentage(float Percent);
	void SetTileHeight(float Height);
	void SetTilePadding(const struct FMargin& Padding);
	void SetTilesAcross(int32 Across);
	void SetTilesDown(int32 Down);
	void SetTileWidth(float Width);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGridWidgetBase">();
	}
	static class UFortGridWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGridWidgetBase>();
	}
};
static_assert(alignof(UFortGridWidgetBase) == 0x000008, "Wrong alignment on UFortGridWidgetBase");
static_assert(sizeof(UFortGridWidgetBase) == 0x000268, "Wrong size on UFortGridWidgetBase");
static_assert(offsetof(UFortGridWidgetBase, ClearWidgetType) == 0x000120, "Member 'UFortGridWidgetBase::ClearWidgetType' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, TileWidth) == 0x000128, "Member 'UFortGridWidgetBase::TileWidth' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, TileHeight) == 0x00012C, "Member 'UFortGridWidgetBase::TileHeight' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, TilesAcross) == 0x000130, "Member 'UFortGridWidgetBase::TilesAcross' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, TilesDown) == 0x000134, "Member 'UFortGridWidgetBase::TilesDown' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, bShrinkToFit) == 0x000138, "Member 'UFortGridWidgetBase::bShrinkToFit' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, PeekOverflowTilePercentage) == 0x00013C, "Member 'UFortGridWidgetBase::PeekOverflowTilePercentage' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, TilePadding) == 0x000140, "Member 'UFortGridWidgetBase::TilePadding' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, GridBackground) == 0x000150, "Member 'UFortGridWidgetBase::GridBackground' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, GridBackgroundPadding) == 0x0001D8, "Member 'UFortGridWidgetBase::GridBackgroundPadding' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, DataProvider) == 0x0001E8, "Member 'UFortGridWidgetBase::DataProvider' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, OnTileGenerated) == 0x0001F8, "Member 'UFortGridWidgetBase::OnTileGenerated' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, OnTileClicked) == 0x000208, "Member 'UFortGridWidgetBase::OnTileClicked' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, OnMouseEnterTile) == 0x000218, "Member 'UFortGridWidgetBase::OnMouseEnterTile' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, OnMouseLeaveTile) == 0x000228, "Member 'UFortGridWidgetBase::OnMouseLeaveTile' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, TileWidgetType) == 0x000238, "Member 'UFortGridWidgetBase::TileWidgetType' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, SortKind) == 0x000240, "Member 'UFortGridWidgetBase::SortKind' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, bReversed) == 0x000241, "Member 'UFortGridWidgetBase::bReversed' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, GetSortKeyFor) == 0x000244, "Member 'UFortGridWidgetBase::GetSortKeyFor' has a wrong offset!");

// Class FortniteUI.FortGridPickerButton
// 0x0048 (0x02B0 - 0x0268)
class UFortGridPickerButton final : public UFortGridWidgetBase
{
public:
	EMenuPlacement                                GridPlacement;                                     // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGridPickerGrid*                    GridWidget;                                        // 0x0270(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloseOnTileClicked;                               // 0x0278(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             GridWidgetDelegate;                                // 0x027C(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnGridPickerOpenChanged;                           // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0[0x10];                                     // 0x02A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFortGridPickerGrid* CreateGridWidget__DelegateSignature();
	void OnButtonClicked();
	void OnIsGridPickerOpenChanged__DelegateSignature(bool IsOpen);
	void SetIsOpen(const bool ShouldBeOpen);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGridPickerButton">();
	}
	static class UFortGridPickerButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGridPickerButton>();
	}
};
static_assert(alignof(UFortGridPickerButton) == 0x000008, "Wrong alignment on UFortGridPickerButton");
static_assert(sizeof(UFortGridPickerButton) == 0x0002B0, "Wrong size on UFortGridPickerButton");
static_assert(offsetof(UFortGridPickerButton, GridPlacement) == 0x000268, "Member 'UFortGridPickerButton::GridPlacement' has a wrong offset!");
static_assert(offsetof(UFortGridPickerButton, GridWidget) == 0x000270, "Member 'UFortGridPickerButton::GridWidget' has a wrong offset!");
static_assert(offsetof(UFortGridPickerButton, bCloseOnTileClicked) == 0x000278, "Member 'UFortGridPickerButton::bCloseOnTileClicked' has a wrong offset!");
static_assert(offsetof(UFortGridPickerButton, GridWidgetDelegate) == 0x00027C, "Member 'UFortGridPickerButton::GridWidgetDelegate' has a wrong offset!");
static_assert(offsetof(UFortGridPickerButton, OnGridPickerOpenChanged) == 0x000290, "Member 'UFortGridPickerButton::OnGridPickerOpenChanged' has a wrong offset!");

// Class FortniteUI.MassiveGadgetEquippedWidget
// 0x0000 (0x0238 - 0x0238)
class UMassiveGadgetEquippedWidget final : public UCommonUserWidget
{
public:
	void HandleMassiveTagChanged(const struct FGameplayTag& Tag, int32 Count);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassiveGadgetEquippedWidget">();
	}
	static class UMassiveGadgetEquippedWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassiveGadgetEquippedWidget>();
	}
};
static_assert(alignof(UMassiveGadgetEquippedWidget) == 0x000008, "Wrong alignment on UMassiveGadgetEquippedWidget");
static_assert(sizeof(UMassiveGadgetEquippedWidget) == 0x000238, "Wrong size on UMassiveGadgetEquippedWidget");

// Class FortniteUI.FortActivatablePanelWithItemPreview
// 0x00F8 (0x0440 - 0x0348)
class UFortActivatablePanelWithItemPreview : public UFortActivatablePanel
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemView*                          ItemViewObject;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    ItemViewUnifiedSupportsCameraControlInputAction;   // 0x0358(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    ItemViewUnifiedZoomInputAction;                    // 0x0368(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    ItemViewZoomOutInputAction;                        // 0x0378(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    ItemViewZoomInInputAction;                         // 0x0388(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    ItemViewRotateInputAction;                         // 0x0398(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A8[0x88];                                     // 0x03A8(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          AllowItemRotation;                                 // 0x0430(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AllowItemZooming;                                  // 0x0431(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AutomaticallyRegisterCameraView;                   // 0x0432(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_433[0x5];                                      // 0x0433(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             ActionDataTable;                                   // 0x0438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UWidget* GetWidgetForFramingViewedItem();
	void OnCosmeticSpecialActionPressed_0(bool* bPassThrough);
	void OnCosmeticSpecialActionPressed_1(bool* bPassThrough);
	void OnCosmeticSpecialActionPressed_2(bool* bPassThrough);
	void OnCosmeticSpecialActionPressed_3(bool* bPassThrough);
	void OnCosmeticSpecialActionPressed_4(bool* bPassThrough);
	void OnCosmeticSpecialActionPressed_5(bool* bPassThrough);
	void OnCosmeticSpecialActionPressed_6(bool* bPassThrough);
	void OnCosmeticSpecialActionPressed_7(bool* bPassThrough);
	void OnItemPreviewChanged(class AActor* NewPrefab, class UFortItem* NewItem);
	void OnVaultItemsViewed(const TArray<class UFortItem*>& Items);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivatablePanelWithItemPreview">();
	}
	static class UFortActivatablePanelWithItemPreview* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivatablePanelWithItemPreview>();
	}
};
static_assert(alignof(UFortActivatablePanelWithItemPreview) == 0x000008, "Wrong alignment on UFortActivatablePanelWithItemPreview");
static_assert(sizeof(UFortActivatablePanelWithItemPreview) == 0x000440, "Wrong size on UFortActivatablePanelWithItemPreview");
static_assert(offsetof(UFortActivatablePanelWithItemPreview, ItemViewObject) == 0x000350, "Member 'UFortActivatablePanelWithItemPreview::ItemViewObject' has a wrong offset!");
static_assert(offsetof(UFortActivatablePanelWithItemPreview, ItemViewUnifiedSupportsCameraControlInputAction) == 0x000358, "Member 'UFortActivatablePanelWithItemPreview::ItemViewUnifiedSupportsCameraControlInputAction' has a wrong offset!");
static_assert(offsetof(UFortActivatablePanelWithItemPreview, ItemViewUnifiedZoomInputAction) == 0x000368, "Member 'UFortActivatablePanelWithItemPreview::ItemViewUnifiedZoomInputAction' has a wrong offset!");
static_assert(offsetof(UFortActivatablePanelWithItemPreview, ItemViewZoomOutInputAction) == 0x000378, "Member 'UFortActivatablePanelWithItemPreview::ItemViewZoomOutInputAction' has a wrong offset!");
static_assert(offsetof(UFortActivatablePanelWithItemPreview, ItemViewZoomInInputAction) == 0x000388, "Member 'UFortActivatablePanelWithItemPreview::ItemViewZoomInInputAction' has a wrong offset!");
static_assert(offsetof(UFortActivatablePanelWithItemPreview, ItemViewRotateInputAction) == 0x000398, "Member 'UFortActivatablePanelWithItemPreview::ItemViewRotateInputAction' has a wrong offset!");
static_assert(offsetof(UFortActivatablePanelWithItemPreview, AllowItemRotation) == 0x000430, "Member 'UFortActivatablePanelWithItemPreview::AllowItemRotation' has a wrong offset!");
static_assert(offsetof(UFortActivatablePanelWithItemPreview, AllowItemZooming) == 0x000431, "Member 'UFortActivatablePanelWithItemPreview::AllowItemZooming' has a wrong offset!");
static_assert(offsetof(UFortActivatablePanelWithItemPreview, AutomaticallyRegisterCameraView) == 0x000432, "Member 'UFortActivatablePanelWithItemPreview::AutomaticallyRegisterCameraView' has a wrong offset!");
static_assert(offsetof(UFortActivatablePanelWithItemPreview, ActionDataTable) == 0x000438, "Member 'UFortActivatablePanelWithItemPreview::ActionDataTable' has a wrong offset!");

// Class FortniteUI.AthenaItemSelectorScreenBase
// 0x0178 (0x05B8 - 0x0440)
class UAthenaItemSelectorScreenBase : public UFortActivatablePanelWithItemPreview
{
public:
	TSubclassOf<class UCommonButton>              TabButtonType;                                     // 0x0440(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<EAthenaCustomizationCategory, struct FFortTabButtonLabelInfo> ItemCategoryButtonLabelInfo;                       // 0x0448(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FFortTabButtonLabelInfo                VariantButtonLabelInfo;                            // 0x0498(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UCommonButton*                          Button_ConfirmSelection;                           // 0x0538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButton*                          Button_EditStyle;                                  // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButton*                          Button_ConfirmStyle;                               // 0x0548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAthenaCustomizationPicker*             Picker_ItemSelector;                               // 0x0550(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           ItemInfo;                                          // 0x0558(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItemBaseWidget*                    Item_HeaderInfo;                                   // 0x0560(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItem*                              CurrentPreviewItem;                                // 0x0568(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAthenaCosmeticItemDefinition*          CurrentPreviewItemDef;                             // 0x0570(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMcpVariantChannelInfo>         CurrentPreviewVariantChannels;                     // 0x0578(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UFortVariantPicker*                     Picker_VariantSelector;                            // 0x0588(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_590[0x20];                                     // 0x0590(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	EAthenaCustomizationCategory                  CustomizeCategory;                                 // 0x05B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5B1[0x3];                                      // 0x05B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubslotIndex;                                      // 0x05B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void EnterEditStyle();
	void ExitEditStyle();
	void HandleSelectedTabChanged(class FName SelectedTabID);
	void OnCurrentItemChanged(class UFortItem* SelectedItem);
	void OnFinsihedItemSave();
	void OnFinsihedItemSetup(const class FText& CategoryDisplayName, const class FText& ItemDisplayTypeName, EAthenaCustomizationCategory SelectedCategory);
	void OnItemSelectedChanged(class UFortItem* SelectedItem);
	void OnItemSelectionCommited(class UFortItem* SelectedItem);
	void OnSavingItemStarted();
	void OnTabSelectionChanged(bool bShowingVariants);
	void OnVariantSelectionChanged(const struct FMcpVariantChannelInfo& InVariant);
	void SaveAndExit();
	void StartItemCustomization(EAthenaCustomizationCategory InCategory, int32 InSubslotIndex, const class FText& CategoryDisplayName, const class FText& ItemDisplayTypeName);

	class UFortItem* GetCurrentItem() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaItemSelectorScreenBase">();
	}
	static class UAthenaItemSelectorScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaItemSelectorScreenBase>();
	}
};
static_assert(alignof(UAthenaItemSelectorScreenBase) == 0x000008, "Wrong alignment on UAthenaItemSelectorScreenBase");
static_assert(sizeof(UAthenaItemSelectorScreenBase) == 0x0005B8, "Wrong size on UAthenaItemSelectorScreenBase");
static_assert(offsetof(UAthenaItemSelectorScreenBase, TabButtonType) == 0x000440, "Member 'UAthenaItemSelectorScreenBase::TabButtonType' has a wrong offset!");
static_assert(offsetof(UAthenaItemSelectorScreenBase, ItemCategoryButtonLabelInfo) == 0x000448, "Member 'UAthenaItemSelectorScreenBase::ItemCategoryButtonLabelInfo' has a wrong offset!");
static_assert(offsetof(UAthenaItemSelectorScreenBase, VariantButtonLabelInfo) == 0x000498, "Member 'UAthenaItemSelectorScreenBase::VariantButtonLabelInfo' has a wrong offset!");
static_assert(offsetof(UAthenaItemSelectorScreenBase, Button_ConfirmSelection) == 0x000538, "Member 'UAthenaItemSelectorScreenBase::Button_ConfirmSelection' has a wrong offset!");
static_assert(offsetof(UAthenaItemSelectorScreenBase, Button_EditStyle) == 0x000540, "Member 'UAthenaItemSelectorScreenBase::Button_EditStyle' has a wrong offset!");
static_assert(offsetof(UAthenaItemSelectorScreenBase, Button_ConfirmStyle) == 0x000548, "Member 'UAthenaItemSelectorScreenBase::Button_ConfirmStyle' has a wrong offset!");
static_assert(offsetof(UAthenaItemSelectorScreenBase, Picker_ItemSelector) == 0x000550, "Member 'UAthenaItemSelectorScreenBase::Picker_ItemSelector' has a wrong offset!");
static_assert(offsetof(UAthenaItemSelectorScreenBase, ItemInfo) == 0x000558, "Member 'UAthenaItemSelectorScreenBase::ItemInfo' has a wrong offset!");
static_assert(offsetof(UAthenaItemSelectorScreenBase, Item_HeaderInfo) == 0x000560, "Member 'UAthenaItemSelectorScreenBase::Item_HeaderInfo' has a wrong offset!");
static_assert(offsetof(UAthenaItemSelectorScreenBase, CurrentPreviewItem) == 0x000568, "Member 'UAthenaItemSelectorScreenBase::CurrentPreviewItem' has a wrong offset!");
static_assert(offsetof(UAthenaItemSelectorScreenBase, CurrentPreviewItemDef) == 0x000570, "Member 'UAthenaItemSelectorScreenBase::CurrentPreviewItemDef' has a wrong offset!");
static_assert(offsetof(UAthenaItemSelectorScreenBase, CurrentPreviewVariantChannels) == 0x000578, "Member 'UAthenaItemSelectorScreenBase::CurrentPreviewVariantChannels' has a wrong offset!");
static_assert(offsetof(UAthenaItemSelectorScreenBase, Picker_VariantSelector) == 0x000588, "Member 'UAthenaItemSelectorScreenBase::Picker_VariantSelector' has a wrong offset!");
static_assert(offsetof(UAthenaItemSelectorScreenBase, CustomizeCategory) == 0x0005B0, "Member 'UAthenaItemSelectorScreenBase::CustomizeCategory' has a wrong offset!");
static_assert(offsetof(UAthenaItemSelectorScreenBase, SubslotIndex) == 0x0005B4, "Member 'UAthenaItemSelectorScreenBase::SubslotIndex' has a wrong offset!");

// Class FortniteUI.AthenaTimeWidgetBase
// 0x0018 (0x0280 - 0x0268)
class UAthenaTimeWidgetBase final : public UFortHUDElementWidget
{
public:
	bool                                          bIsDisplaying;                                     // 0x0268(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CachedFinalCountdownTime;                          // 0x026C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           UpdateTimerHandle;                                 // 0x0270(0x0008)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             TimeText;                                          // 0x0278(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleGamePhaseChanged(EAthenaGamePhase GamePhase);
	void OnGamePhaseStepChanged(EAthenaGamePhaseStep GamePhaseStep);
	void OnStartTimeDisplay();
	void OnStopTimeDisplay();
	void StartTimeDisplay();
	void StopTimeDisplay();
	void UpdateTimeText();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaTimeWidgetBase">();
	}
	static class UAthenaTimeWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaTimeWidgetBase>();
	}
};
static_assert(alignof(UAthenaTimeWidgetBase) == 0x000008, "Wrong alignment on UAthenaTimeWidgetBase");
static_assert(sizeof(UAthenaTimeWidgetBase) == 0x000280, "Wrong size on UAthenaTimeWidgetBase");
static_assert(offsetof(UAthenaTimeWidgetBase, bIsDisplaying) == 0x000268, "Member 'UAthenaTimeWidgetBase::bIsDisplaying' has a wrong offset!");
static_assert(offsetof(UAthenaTimeWidgetBase, CachedFinalCountdownTime) == 0x00026C, "Member 'UAthenaTimeWidgetBase::CachedFinalCountdownTime' has a wrong offset!");
static_assert(offsetof(UAthenaTimeWidgetBase, UpdateTimerHandle) == 0x000270, "Member 'UAthenaTimeWidgetBase::UpdateTimerHandle' has a wrong offset!");
static_assert(offsetof(UAthenaTimeWidgetBase, TimeText) == 0x000278, "Member 'UAthenaTimeWidgetBase::TimeText' has a wrong offset!");

// Class FortniteUI.FortUIStateWidget_NUI
// 0x0018 (0x0360 - 0x0348)
class UFortUIStateWidget_NUI : public UFortActivatablePanel
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FContentPushState>              StackStates;                                       // 0x0350(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void DynamicHandleLoadingScreenVisibilityChanged(bool Param_IsVisible);
	void OnEnterState(EFortUIState PreviousUIState);
	void OnExitState(EFortUIState NextUIState);
	void OnFrontEndVisibilityUpdated(bool bHideHeader, bool bHideFooter, bool bHideChatWidget);
	void OnHUDScaleChanged(float HUDScale);
	void OnLoadingScreenVisibilityChanged(bool Param_IsVisible);
	void PopAllContentWidgets();
	class UWidget* PopContentWidget();
	class UWidget* PopContentWidgetInternal(const struct FContentPushState& State);
	void PushContentWidget(class UWidget* Widget);
	void PushContentWidgetAdvanced(class UWidget* Widget, bool bHideHeader, bool bHideFooter, bool bHideChatWidget);
	void PushContentWidgetInternal(class UWidget* Widget, const struct FContentPushState& State);
	void RequestOpenSocialMenu();
	void SetFrontEndVisibility(bool bHideHeader, bool bHideFooter, bool bHideChatWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIStateWidget_NUI">();
	}
	static class UFortUIStateWidget_NUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIStateWidget_NUI>();
	}
};
static_assert(alignof(UFortUIStateWidget_NUI) == 0x000008, "Wrong alignment on UFortUIStateWidget_NUI");
static_assert(sizeof(UFortUIStateWidget_NUI) == 0x000360, "Wrong size on UFortUIStateWidget_NUI");
static_assert(offsetof(UFortUIStateWidget_NUI, StackStates) == 0x000350, "Member 'UFortUIStateWidget_NUI::StackStates' has a wrong offset!");

// Class FortniteUI.FortItemListEntryWidgetInterface
// 0x0000 (0x0028 - 0x0028)
class IFortItemListEntryWidgetInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemListEntryWidgetInterface">();
	}
	static class IFortItemListEntryWidgetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFortItemListEntryWidgetInterface>();
	}
};
static_assert(alignof(IFortItemListEntryWidgetInterface) == 0x000008, "Wrong alignment on IFortItemListEntryWidgetInterface");
static_assert(sizeof(IFortItemListEntryWidgetInterface) == 0x000028, "Wrong size on IFortItemListEntryWidgetInterface");

// Class FortniteUI.AthenaHUDBase
// 0x0028 (0x0388 - 0x0360)
class UAthenaHUDBase : public UFortUIStateWidget_NUI
{
public:
	uint8                                         Pad_360[0x10];                                     // 0x0360(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaPlayerViewModel*                 PlayerViewModel;                                   // 0x0370(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_378[0x10];                                     // 0x0378(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleCursorModeChanging(bool bCursorModeEnabled);
	void HandleEnteredVolume(class APlayerState* ClientState, class AFortVolume* Volume);
	void HandleExitVolume(class APlayerState* ClientState, class AFortVolume* Volume);
	void HandleVolumeLoaded(class APlayerState* ClientState, class AFortVolume* Volume);
	void HandleVolumeStateChanged(EVolumeState NewState, class AFortVolume* Volume);
	void HandleVolumeUnloaded(class APlayerState* ClientState, class AFortVolume* Volume);
	void OnPlaylistExtensionWidgetCreated(EPlaylistUIExtensionSlot ExtensionSlot, class UUserWidget* Widget);
	void SetFullScreenMapVisibility(bool bIsVisible);
	void SetQuickBarNative(bool bShouldDoQuickBarNative);
	void ViewModelChanged(class UAthenaPlayerViewModel* ViewModel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaHUDBase">();
	}
	static class UAthenaHUDBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaHUDBase>();
	}
};
static_assert(alignof(UAthenaHUDBase) == 0x000008, "Wrong alignment on UAthenaHUDBase");
static_assert(sizeof(UAthenaHUDBase) == 0x000388, "Wrong size on UAthenaHUDBase");
static_assert(offsetof(UAthenaHUDBase, PlayerViewModel) == 0x000370, "Member 'UAthenaHUDBase::PlayerViewModel' has a wrong offset!");

// Class FortniteUI.BacchusHUDElement
// 0x0128 (0x0390 - 0x0268)
class UBacchusHUDElement : public UFortHUDElementWidget
{
public:
	uint8                                         Pad_268[0x8];                                      // 0x0268(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsInLayoutMode;                                   // 0x0270(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           VisualType;                                        // 0x0274(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   WidgetName;                                        // 0x0280(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          bHideWhenNotUsingTouch;                            // 0x0298(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAlwaysShow;                                       // 0x0299(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBacchusHUDStateType                          OnInBuildMode;                                     // 0x029A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBacchusHUDStateType                          OnInCombatMode;                                    // 0x029B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBacchusHUDStateType                          OnInEditMode;                                      // 0x029C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBacchusHUDStateType                          OnInCreativeMode;                                  // 0x029D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBacchusHUDStateType                          IsFreeFalling;                                     // 0x029E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBacchusHUDStateType                          IsGliding;                                         // 0x029F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBacchusHUDStateType                          CanOpenChute;                                      // 0x02A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBacchusHUDStateType                          InLockedBus;                                       // 0x02A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBacchusHUDStateType                          InUnlockedBus;                                     // 0x02A2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBacchusHUDStateType                          OnTargeting;                                       // 0x02A3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBacchusHUDStateType                          OnUsingScopeTargeting;                             // 0x02A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBacchusHUDStateType                          OnCanTarget;                                       // 0x02A5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBacchusHUDStateType                          OnCanUseScopeTargeting;                            // 0x02A6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBacchusHUDStateType                          OnCrouching;                                       // 0x02A7(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBacchusHUDStateType                          OnCanUseSecondaryAbility;                          // 0x02A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBacchusHUDStateType                          OnDBNO;                                            // 0x02A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBacchusHUDStateType                          OnControllingRCPawn;                               // 0x02AA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBacchusHUDStateType                          OnInVehicle;                                       // 0x02AB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBacchusHUDStateType                          OnDrivingVehicle;                                  // 0x02AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHUDLayoutDataEntry                    DefaultEntry;                                      // 0x02B0(0x00E0)(Transient, NativeAccessSpecifierPrivate)

public:
	void HandleInputMethodChanged(ECommonInputType CurrentInputType);
	void OnHUDStateUpdate(const struct FFortHUDState& NewState);

	struct FGameplayTag BP_GetMobileVisualType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BacchusHUDElement">();
	}
	static class UBacchusHUDElement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBacchusHUDElement>();
	}
};
static_assert(alignof(UBacchusHUDElement) == 0x000008, "Wrong alignment on UBacchusHUDElement");
static_assert(sizeof(UBacchusHUDElement) == 0x000390, "Wrong size on UBacchusHUDElement");
static_assert(offsetof(UBacchusHUDElement, bIsInLayoutMode) == 0x000270, "Member 'UBacchusHUDElement::bIsInLayoutMode' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, VisualType) == 0x000274, "Member 'UBacchusHUDElement::VisualType' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, WidgetName) == 0x000280, "Member 'UBacchusHUDElement::WidgetName' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, bHideWhenNotUsingTouch) == 0x000298, "Member 'UBacchusHUDElement::bHideWhenNotUsingTouch' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, bAlwaysShow) == 0x000299, "Member 'UBacchusHUDElement::bAlwaysShow' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, OnInBuildMode) == 0x00029A, "Member 'UBacchusHUDElement::OnInBuildMode' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, OnInCombatMode) == 0x00029B, "Member 'UBacchusHUDElement::OnInCombatMode' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, OnInEditMode) == 0x00029C, "Member 'UBacchusHUDElement::OnInEditMode' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, OnInCreativeMode) == 0x00029D, "Member 'UBacchusHUDElement::OnInCreativeMode' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, IsFreeFalling) == 0x00029E, "Member 'UBacchusHUDElement::IsFreeFalling' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, IsGliding) == 0x00029F, "Member 'UBacchusHUDElement::IsGliding' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, CanOpenChute) == 0x0002A0, "Member 'UBacchusHUDElement::CanOpenChute' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, InLockedBus) == 0x0002A1, "Member 'UBacchusHUDElement::InLockedBus' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, InUnlockedBus) == 0x0002A2, "Member 'UBacchusHUDElement::InUnlockedBus' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, OnTargeting) == 0x0002A3, "Member 'UBacchusHUDElement::OnTargeting' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, OnUsingScopeTargeting) == 0x0002A4, "Member 'UBacchusHUDElement::OnUsingScopeTargeting' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, OnCanTarget) == 0x0002A5, "Member 'UBacchusHUDElement::OnCanTarget' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, OnCanUseScopeTargeting) == 0x0002A6, "Member 'UBacchusHUDElement::OnCanUseScopeTargeting' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, OnCrouching) == 0x0002A7, "Member 'UBacchusHUDElement::OnCrouching' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, OnCanUseSecondaryAbility) == 0x0002A8, "Member 'UBacchusHUDElement::OnCanUseSecondaryAbility' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, OnDBNO) == 0x0002A9, "Member 'UBacchusHUDElement::OnDBNO' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, OnControllingRCPawn) == 0x0002AA, "Member 'UBacchusHUDElement::OnControllingRCPawn' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, OnInVehicle) == 0x0002AB, "Member 'UBacchusHUDElement::OnInVehicle' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, OnDrivingVehicle) == 0x0002AC, "Member 'UBacchusHUDElement::OnDrivingVehicle' has a wrong offset!");
static_assert(offsetof(UBacchusHUDElement, DefaultEntry) == 0x0002B0, "Member 'UBacchusHUDElement::DefaultEntry' has a wrong offset!");

// Class FortniteUI.BacchusSignalQualityWidget
// 0x0008 (0x0398 - 0x0390)
class UBacchusSignalQualityWidget final : public UBacchusHUDElement
{
public:
	uint8                                         Pad_390[0x8];                                      // 0x0390(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnNewSignalQuality(float NewRawQuality);
	void SetNewSignalQuality(EBacchusSignalQuality NewSignalQuality);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BacchusSignalQualityWidget">();
	}
	static class UBacchusSignalQualityWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBacchusSignalQualityWidget>();
	}
};
static_assert(alignof(UBacchusSignalQualityWidget) == 0x000008, "Wrong alignment on UBacchusSignalQualityWidget");
static_assert(sizeof(UBacchusSignalQualityWidget) == 0x000398, "Wrong size on UBacchusSignalQualityWidget");

// Class FortniteUI.AthenaSpectatorHUDBase
// 0x0008 (0x0390 - 0x0388)
class UAthenaSpectatorHUDBase : public UAthenaHUDBase
{
public:
	class UAthenaSpectatorNameplateLayerBase*     NameplateLayer;                                    // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnCursorModeChanged(bool bCursorModeEnabled, class FName ActionName, class UUserWidget* CursorModeContentWidget);
	void OnIndicatorModeChanged(bool bIndicatorsEnabled);
	void OnNameplatesEnabledChanged(bool bInNameplatesEnabled);
	void OnPlayerTargetingChanged(bool bIsTargeting);
	void OnSpectatorViewTargetChanged();
	void OnUnableToPerformAction(const struct FGameplayTagContainer& FailedReason, const class FText& FailureText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaSpectatorHUDBase">();
	}
	static class UAthenaSpectatorHUDBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaSpectatorHUDBase>();
	}
};
static_assert(alignof(UAthenaSpectatorHUDBase) == 0x000008, "Wrong alignment on UAthenaSpectatorHUDBase");
static_assert(sizeof(UAthenaSpectatorHUDBase) == 0x000390, "Wrong size on UAthenaSpectatorHUDBase");
static_assert(offsetof(UAthenaSpectatorHUDBase, NameplateLayer) == 0x000388, "Member 'UAthenaSpectatorHUDBase::NameplateLayer' has a wrong offset!");

// Class FortniteUI.AthenaBroadcastHUDBase
// 0x0088 (0x0418 - 0x0390)
class UAthenaBroadcastHUDBase final : public UAthenaSpectatorHUDBase
{
public:
	class UWidgetSwitcher*                        KillFeedSwitcher;                                  // 0x0390(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAthenaSpectatorHUDControlsBase*        BroadcastHUDControls;                              // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAthenaBroadcastMatchStatusWidget*      MatchStatusWidget;                                 // 0x03A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAthenaBroadcastSquadStatusWidget*      SquadStatusWidget;                                 // 0x03A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonWidgetSwitcher*                  EventMatchInfoSwitcher;                            // 0x03B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    ToggleMatchStatusActionRowHandle;                  // 0x03B8(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    ToggleSquadStatusActionRowHandle;                  // 0x03C8(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    ToggleActiveGridScreenActionRowHandle;             // 0x03D8(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    ToggleEliminatedGridScreenActionRowHandle;         // 0x03E8(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    ToggleMatchStatusScreenActionRowHandle;            // 0x03F8(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    ToggleScoreboardScreenActionRowHandle;             // 0x0408(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	void OnToggleActiveGridScreenActionExecuted(bool* bPassThrough);
	void OnToggleEliminatedGridScreenActionExecuted(bool* bPassThrough);
	void OnToggleMatchStatusActionExecuted(bool* bPassThrough);
	void OnToggleMatchStatusScreenActionExecuted(bool* bPassThrough);
	void OnToggleScoreboardScreenActionExecuted(bool* bPassThrough);
	void OnToggleSquadStatusActionExecuted(bool* bPassThrough);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaBroadcastHUDBase">();
	}
	static class UAthenaBroadcastHUDBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaBroadcastHUDBase>();
	}
};
static_assert(alignof(UAthenaBroadcastHUDBase) == 0x000008, "Wrong alignment on UAthenaBroadcastHUDBase");
static_assert(sizeof(UAthenaBroadcastHUDBase) == 0x000418, "Wrong size on UAthenaBroadcastHUDBase");
static_assert(offsetof(UAthenaBroadcastHUDBase, KillFeedSwitcher) == 0x000390, "Member 'UAthenaBroadcastHUDBase::KillFeedSwitcher' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastHUDBase, BroadcastHUDControls) == 0x000398, "Member 'UAthenaBroadcastHUDBase::BroadcastHUDControls' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastHUDBase, MatchStatusWidget) == 0x0003A0, "Member 'UAthenaBroadcastHUDBase::MatchStatusWidget' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastHUDBase, SquadStatusWidget) == 0x0003A8, "Member 'UAthenaBroadcastHUDBase::SquadStatusWidget' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastHUDBase, EventMatchInfoSwitcher) == 0x0003B0, "Member 'UAthenaBroadcastHUDBase::EventMatchInfoSwitcher' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastHUDBase, ToggleMatchStatusActionRowHandle) == 0x0003B8, "Member 'UAthenaBroadcastHUDBase::ToggleMatchStatusActionRowHandle' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastHUDBase, ToggleSquadStatusActionRowHandle) == 0x0003C8, "Member 'UAthenaBroadcastHUDBase::ToggleSquadStatusActionRowHandle' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastHUDBase, ToggleActiveGridScreenActionRowHandle) == 0x0003D8, "Member 'UAthenaBroadcastHUDBase::ToggleActiveGridScreenActionRowHandle' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastHUDBase, ToggleEliminatedGridScreenActionRowHandle) == 0x0003E8, "Member 'UAthenaBroadcastHUDBase::ToggleEliminatedGridScreenActionRowHandle' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastHUDBase, ToggleMatchStatusScreenActionRowHandle) == 0x0003F8, "Member 'UAthenaBroadcastHUDBase::ToggleMatchStatusScreenActionRowHandle' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastHUDBase, ToggleScoreboardScreenActionRowHandle) == 0x000408, "Member 'UAthenaBroadcastHUDBase::ToggleScoreboardScreenActionRowHandle' has a wrong offset!");

// Class FortniteUI.AthenaWinnersList
// 0x0000 (0x0238 - 0x0238)
class UAthenaWinnersList final : public UCommonUserWidget
{
public:
	void OnWinnersAnnounced(const struct FAthenaWinnerInfo& WinnerInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaWinnersList">();
	}
	static class UAthenaWinnersList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaWinnersList>();
	}
};
static_assert(alignof(UAthenaWinnersList) == 0x000008, "Wrong alignment on UAthenaWinnersList");
static_assert(sizeof(UAthenaWinnersList) == 0x000238, "Wrong size on UAthenaWinnersList");

// Class FortniteUI.ItemReceivedHeaderBase
// 0x0018 (0x0248 - 0x0230)
class UItemReceivedHeaderBase final : public UUserWidget
{
public:
	class UFortGiftBoxItem*                       GiftBoxItem;                                       // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 FromUsername;                                      // 0x0238(0x0010)(BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void InitFromGiftBoxItem();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ItemReceivedHeaderBase">();
	}
	static class UItemReceivedHeaderBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemReceivedHeaderBase>();
	}
};
static_assert(alignof(UItemReceivedHeaderBase) == 0x000008, "Wrong alignment on UItemReceivedHeaderBase");
static_assert(sizeof(UItemReceivedHeaderBase) == 0x000248, "Wrong size on UItemReceivedHeaderBase");
static_assert(offsetof(UItemReceivedHeaderBase, GiftBoxItem) == 0x000230, "Member 'UItemReceivedHeaderBase::GiftBoxItem' has a wrong offset!");
static_assert(offsetof(UItemReceivedHeaderBase, FromUsername) == 0x000238, "Member 'UItemReceivedHeaderBase::FromUsername' has a wrong offset!");

// Class FortniteUI.FortActorIndicatorWidget
// 0x0038 (0x02A0 - 0x0268)
class UFortActorIndicatorWidget : public UFortHUDElementWidget
{
public:
	uint8                                         Pad_268[0x8];                                      // 0x0268(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 IndicatedActor;                                    // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPrimitiveComponent*                    IndicatedActorComponent;                           // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                RelativeLocation;                                  // 0x0280(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxDistance;                                       // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bClampOnScreen;                                    // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowClampToScreenArrow;                           // 0x0291(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseScreenSpacePosition;                           // 0x0292(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_293[0x1];                                      // 0x0293(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ScreenSpaceRelativeOffset;                         // 0x0294(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActorIndicatorWidget">();
	}
	static class UFortActorIndicatorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActorIndicatorWidget>();
	}
};
static_assert(alignof(UFortActorIndicatorWidget) == 0x000008, "Wrong alignment on UFortActorIndicatorWidget");
static_assert(sizeof(UFortActorIndicatorWidget) == 0x0002A0, "Wrong size on UFortActorIndicatorWidget");
static_assert(offsetof(UFortActorIndicatorWidget, IndicatedActor) == 0x000270, "Member 'UFortActorIndicatorWidget::IndicatedActor' has a wrong offset!");
static_assert(offsetof(UFortActorIndicatorWidget, IndicatedActorComponent) == 0x000278, "Member 'UFortActorIndicatorWidget::IndicatedActorComponent' has a wrong offset!");
static_assert(offsetof(UFortActorIndicatorWidget, RelativeLocation) == 0x000280, "Member 'UFortActorIndicatorWidget::RelativeLocation' has a wrong offset!");
static_assert(offsetof(UFortActorIndicatorWidget, MaxDistance) == 0x00028C, "Member 'UFortActorIndicatorWidget::MaxDistance' has a wrong offset!");
static_assert(offsetof(UFortActorIndicatorWidget, bClampOnScreen) == 0x000290, "Member 'UFortActorIndicatorWidget::bClampOnScreen' has a wrong offset!");
static_assert(offsetof(UFortActorIndicatorWidget, bShowClampToScreenArrow) == 0x000291, "Member 'UFortActorIndicatorWidget::bShowClampToScreenArrow' has a wrong offset!");
static_assert(offsetof(UFortActorIndicatorWidget, bUseScreenSpacePosition) == 0x000292, "Member 'UFortActorIndicatorWidget::bUseScreenSpacePosition' has a wrong offset!");
static_assert(offsetof(UFortActorIndicatorWidget, ScreenSpaceRelativeOffset) == 0x000294, "Member 'UFortActorIndicatorWidget::ScreenSpaceRelativeOffset' has a wrong offset!");

// Class FortniteUI.FortUIBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UFortUIBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UObject* GetAssetFromTemplateId(const class FString& TemplateId);
	static struct FSlateBrush GetItemDefinitionSmallPreviewImageBrush(const class UFortItemDefinition* ItemDefinition, EFortBrushSize BrushSize);
	static struct FFortMultiSizeBrush GetItemDefinitionSmallPreviewImageMultiSizeBrush(const class UFortItemDefinition* ItemDefinition);
	static struct FSlateBrush GetItemSmallPreviewImageBrush(const class UFortItem* Item, EFortBrushSize BrushSize);
	static struct FFortMultiSizeBrush GetItemSmallPreviewImageMultiSizeBrush(const class UFortItem* Item);
	static bool GetMetaBoolOnOffer(const struct FCardPackOffer& Offer, const class FString& Key, bool bDefaultValue);
	static int32 GetMetaIntOnOffer(const struct FCardPackOffer& Offer, const class FString& Key, int32 DefaultValue);
	static class FString GetMetaStringOnOffer(const struct FCardPackOffer& Offer, const class FString& Key);
	static class UTexture2D* GetOrLoadSynchronously(const TSoftObjectPtr<class UTexture2D>& SoftTexture2D);
	static struct FVector2D GetStandardBrushSize(EFortBrushSize BrushSize);
	static class FText GetTimespanAsSimpleString(const struct FTimespan& Timespan);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIBlueprintFunctionLibrary">();
	}
	static class UFortUIBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(UFortUIBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on UFortUIBlueprintFunctionLibrary");
static_assert(sizeof(UFortUIBlueprintFunctionLibrary) == 0x000028, "Wrong size on UFortUIBlueprintFunctionLibrary");

// Class FortniteUI.AthenaBroadcastHUDMenuStatusBase
// 0x0008 (0x02A8 - 0x02A0)
class UAthenaBroadcastHUDMenuStatusBase final : public UFortActorIndicatorWidget
{
public:
	float                                         ZOffset;                                           // 0x02A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InventoryActivated();
	void MapActivated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaBroadcastHUDMenuStatusBase">();
	}
	static class UAthenaBroadcastHUDMenuStatusBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaBroadcastHUDMenuStatusBase>();
	}
};
static_assert(alignof(UAthenaBroadcastHUDMenuStatusBase) == 0x000008, "Wrong alignment on UAthenaBroadcastHUDMenuStatusBase");
static_assert(sizeof(UAthenaBroadcastHUDMenuStatusBase) == 0x0002A8, "Wrong size on UAthenaBroadcastHUDMenuStatusBase");
static_assert(offsetof(UAthenaBroadcastHUDMenuStatusBase, ZOffset) == 0x0002A0, "Member 'UAthenaBroadcastHUDMenuStatusBase::ZOffset' has a wrong offset!");

// Class FortniteUI.FortMessageReceivedScreen
// 0x0018 (0x0360 - 0x0348)
class UFortMessageReceivedScreen : public UFortActivatablePanel
{
public:
	UMulticastDelegateProperty_                   OnMessageClosed;                                   // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UFortGiftBoxItem*                       GiftBoxItem;                                       // 0x0358(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMessageReceivedScreen">();
	}
	static class UFortMessageReceivedScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMessageReceivedScreen>();
	}
};
static_assert(alignof(UFortMessageReceivedScreen) == 0x000008, "Wrong alignment on UFortMessageReceivedScreen");
static_assert(sizeof(UFortMessageReceivedScreen) == 0x000360, "Wrong size on UFortMessageReceivedScreen");
static_assert(offsetof(UFortMessageReceivedScreen, OnMessageClosed) == 0x000348, "Member 'UFortMessageReceivedScreen::OnMessageClosed' has a wrong offset!");
static_assert(offsetof(UFortMessageReceivedScreen, GiftBoxItem) == 0x000358, "Member 'UFortMessageReceivedScreen::GiftBoxItem' has a wrong offset!");

// Class FortniteUI.FortItemTileButton
// 0x0038 (0x0B68 - 0x0B30)
class UFortItemTileButton : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x10];                                     // 0x0B30(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMultiSizeItemCard*                 ItemWidget;                                        // 0x0B40(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFortItem>               Item;                                              // 0x0B48(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortItemCardSize                             ItemCardSize;                                      // 0x0B50(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsRewardCard;                                      // 0x0B51(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B52[0x6];                                      // 0x0B52(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IFortItemViewContextInterface> ItemViewContext;                                   // 0x0B58(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemTileButton">();
	}
	static class UFortItemTileButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemTileButton>();
	}
};
static_assert(alignof(UFortItemTileButton) == 0x000008, "Wrong alignment on UFortItemTileButton");
static_assert(sizeof(UFortItemTileButton) == 0x000B68, "Wrong size on UFortItemTileButton");
static_assert(offsetof(UFortItemTileButton, ItemWidget) == 0x000B40, "Member 'UFortItemTileButton::ItemWidget' has a wrong offset!");
static_assert(offsetof(UFortItemTileButton, Item) == 0x000B48, "Member 'UFortItemTileButton::Item' has a wrong offset!");
static_assert(offsetof(UFortItemTileButton, ItemCardSize) == 0x000B50, "Member 'UFortItemTileButton::ItemCardSize' has a wrong offset!");
static_assert(offsetof(UFortItemTileButton, IsRewardCard) == 0x000B51, "Member 'UFortItemTileButton::IsRewardCard' has a wrong offset!");
static_assert(offsetof(UFortItemTileButton, ItemViewContext) == 0x000B58, "Member 'UFortItemTileButton::ItemViewContext' has a wrong offset!");

// Class FortniteUI.AthenaInventoryFortItemTileButtonBase
// 0x0000 (0x0B68 - 0x0B68)
class UAthenaInventoryFortItemTileButtonBase final : public UFortItemTileButton
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaInventoryFortItemTileButtonBase">();
	}
	static class UAthenaInventoryFortItemTileButtonBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaInventoryFortItemTileButtonBase>();
	}
};
static_assert(alignof(UAthenaInventoryFortItemTileButtonBase) == 0x000008, "Wrong alignment on UAthenaInventoryFortItemTileButtonBase");
static_assert(sizeof(UAthenaInventoryFortItemTileButtonBase) == 0x000B68, "Wrong size on UAthenaInventoryFortItemTileButtonBase");

// Class FortniteUI.AthenaBroadcastHUDMenuStatusLayerBase
// 0x0010 (0x0278 - 0x0268)
class UAthenaBroadcastHUDMenuStatusLayerBase final : public UFortHUDElementWidget
{
public:
	TSubclassOf<class UAthenaBroadcastHUDMenuStatusBase> HUDMenuStatusWidgetClass;                          // 0x0268(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_270[0x8];                                      // 0x0270(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddHUDMenuStatus(class UAthenaBroadcastHUDMenuStatusBase* HUDMenuStatusWidget);
	void RemoveHUDMenuStatus(class UAthenaBroadcastHUDMenuStatusBase* HUDMenuStatusWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaBroadcastHUDMenuStatusLayerBase">();
	}
	static class UAthenaBroadcastHUDMenuStatusLayerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaBroadcastHUDMenuStatusLayerBase>();
	}
};
static_assert(alignof(UAthenaBroadcastHUDMenuStatusLayerBase) == 0x000008, "Wrong alignment on UAthenaBroadcastHUDMenuStatusLayerBase");
static_assert(sizeof(UAthenaBroadcastHUDMenuStatusLayerBase) == 0x000278, "Wrong size on UAthenaBroadcastHUDMenuStatusLayerBase");
static_assert(offsetof(UAthenaBroadcastHUDMenuStatusLayerBase, HUDMenuStatusWidgetClass) == 0x000268, "Member 'UAthenaBroadcastHUDMenuStatusLayerBase::HUDMenuStatusWidgetClass' has a wrong offset!");

// Class FortniteUI.FortOnlineStatusPanel
// 0x0018 (0x0248 - 0x0230)
class UFortOnlineStatusPanel : public UUserWidget
{
public:
	class UMenuAnchor*                            OwningMenuAnchor;                                  // 0x0230(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButton*                          Button_Online;                                     // 0x0238(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Away;                                       // 0x0240(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnFocused();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortOnlineStatusPanel">();
	}
	static class UFortOnlineStatusPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortOnlineStatusPanel>();
	}
};
static_assert(alignof(UFortOnlineStatusPanel) == 0x000008, "Wrong alignment on UFortOnlineStatusPanel");
static_assert(sizeof(UFortOnlineStatusPanel) == 0x000248, "Wrong size on UFortOnlineStatusPanel");
static_assert(offsetof(UFortOnlineStatusPanel, OwningMenuAnchor) == 0x000230, "Member 'UFortOnlineStatusPanel::OwningMenuAnchor' has a wrong offset!");
static_assert(offsetof(UFortOnlineStatusPanel, Button_Online) == 0x000238, "Member 'UFortOnlineStatusPanel::Button_Online' has a wrong offset!");
static_assert(offsetof(UFortOnlineStatusPanel, Button_Away) == 0x000240, "Member 'UFortOnlineStatusPanel::Button_Away' has a wrong offset!");

// Class FortniteUI.FortTeamMemberEntryBase
// 0x0010 (0x0248 - 0x0238)
class UFortTeamMemberEntryBase : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x10];                                     // 0x0238(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTeamMemberEstablished(const struct FUniqueNetIdRepl& UniqueId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTeamMemberEntryBase">();
	}
	static class UFortTeamMemberEntryBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTeamMemberEntryBase>();
	}
};
static_assert(alignof(UFortTeamMemberEntryBase) == 0x000008, "Wrong alignment on UFortTeamMemberEntryBase");
static_assert(sizeof(UFortTeamMemberEntryBase) == 0x000248, "Wrong size on UFortTeamMemberEntryBase");

// Class FortniteUI.FortBasicTeamMemberEntry
// 0x0028 (0x0270 - 0x0248)
class UFortBasicTeamMemberEntry : public UFortTeamMemberEntryBase
{
public:
	class UFortPlayerBanner*                      Banner_MemberBanner;                               // 0x0248(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_MemberName;                                   // 0x0250(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 Image_LeaderIcon;                                  // 0x0258(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 Image_PlatformIcon;                                // 0x0260(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortVoiceChatStatusIcon*               VoiceIcon_Status;                                  // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBasicTeamMemberEntry">();
	}
	static class UFortBasicTeamMemberEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBasicTeamMemberEntry>();
	}
};
static_assert(alignof(UFortBasicTeamMemberEntry) == 0x000008, "Wrong alignment on UFortBasicTeamMemberEntry");
static_assert(sizeof(UFortBasicTeamMemberEntry) == 0x000270, "Wrong size on UFortBasicTeamMemberEntry");
static_assert(offsetof(UFortBasicTeamMemberEntry, Banner_MemberBanner) == 0x000248, "Member 'UFortBasicTeamMemberEntry::Banner_MemberBanner' has a wrong offset!");
static_assert(offsetof(UFortBasicTeamMemberEntry, Text_MemberName) == 0x000250, "Member 'UFortBasicTeamMemberEntry::Text_MemberName' has a wrong offset!");
static_assert(offsetof(UFortBasicTeamMemberEntry, Image_LeaderIcon) == 0x000258, "Member 'UFortBasicTeamMemberEntry::Image_LeaderIcon' has a wrong offset!");
static_assert(offsetof(UFortBasicTeamMemberEntry, Image_PlatformIcon) == 0x000260, "Member 'UFortBasicTeamMemberEntry::Image_PlatformIcon' has a wrong offset!");
static_assert(offsetof(UFortBasicTeamMemberEntry, VoiceIcon_Status) == 0x000268, "Member 'UFortBasicTeamMemberEntry::VoiceIcon_Status' has a wrong offset!");

// Class FortniteUI.AthenaTeamMemberEntry
// 0x0038 (0x02A8 - 0x0270)
class UAthenaTeamMemberEntry final : public UFortBasicTeamMemberEntry
{
public:
	uint8                                         Pad_270[0x18];                                     // 0x0270(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_KillCount;                                    // 0x0288(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHorizontalBox*                         HBox_KillCount;                                    // 0x0290(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UVerticalBox*                           VBox_MemberBanner;                                 // 0x0298(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetSwitcher*                        Switcher_MemberState;                              // 0x02A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaTeamMemberEntry">();
	}
	static class UAthenaTeamMemberEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaTeamMemberEntry>();
	}
};
static_assert(alignof(UAthenaTeamMemberEntry) == 0x000008, "Wrong alignment on UAthenaTeamMemberEntry");
static_assert(sizeof(UAthenaTeamMemberEntry) == 0x0002A8, "Wrong size on UAthenaTeamMemberEntry");
static_assert(offsetof(UAthenaTeamMemberEntry, Text_KillCount) == 0x000288, "Member 'UAthenaTeamMemberEntry::Text_KillCount' has a wrong offset!");
static_assert(offsetof(UAthenaTeamMemberEntry, HBox_KillCount) == 0x000290, "Member 'UAthenaTeamMemberEntry::HBox_KillCount' has a wrong offset!");
static_assert(offsetof(UAthenaTeamMemberEntry, VBox_MemberBanner) == 0x000298, "Member 'UAthenaTeamMemberEntry::VBox_MemberBanner' has a wrong offset!");
static_assert(offsetof(UAthenaTeamMemberEntry, Switcher_MemberState) == 0x0002A0, "Member 'UAthenaTeamMemberEntry::Switcher_MemberState' has a wrong offset!");

// Class FortniteUI.AthenaBroadcastKillFeedBase
// 0x0010 (0x0278 - 0x0268)
class UAthenaBroadcastKillFeedBase final : public UFortHUDElementWidget
{
public:
	class UFortDynamicEntryBox*                   KillFeedEntryBox;                                  // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxTimeToShowEntry;                                // 0x0270(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddKillFeedEntry(const struct FAthenaBroadcastKillFeedEntryInfo& KillFeedEntryInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaBroadcastKillFeedBase">();
	}
	static class UAthenaBroadcastKillFeedBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaBroadcastKillFeedBase>();
	}
};
static_assert(alignof(UAthenaBroadcastKillFeedBase) == 0x000008, "Wrong alignment on UAthenaBroadcastKillFeedBase");
static_assert(sizeof(UAthenaBroadcastKillFeedBase) == 0x000278, "Wrong size on UAthenaBroadcastKillFeedBase");
static_assert(offsetof(UAthenaBroadcastKillFeedBase, KillFeedEntryBox) == 0x000268, "Member 'UAthenaBroadcastKillFeedBase::KillFeedEntryBox' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastKillFeedBase, MaxTimeToShowEntry) == 0x000270, "Member 'UAthenaBroadcastKillFeedBase::MaxTimeToShowEntry' has a wrong offset!");

// Class FortniteUI.BacchusQuickbar
// 0x0020 (0x03B0 - 0x0390)
class UBacchusQuickbar final : public UBacchusHUDElement
{
public:
	float                                         SlotSize;                                          // 0x0390(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SlotSizeName;                                      // 0x0398(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void Refresh();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BacchusQuickbar">();
	}
	static class UBacchusQuickbar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBacchusQuickbar>();
	}
};
static_assert(alignof(UBacchusQuickbar) == 0x000008, "Wrong alignment on UBacchusQuickbar");
static_assert(sizeof(UBacchusQuickbar) == 0x0003B0, "Wrong size on UBacchusQuickbar");
static_assert(offsetof(UBacchusQuickbar, SlotSize) == 0x000390, "Member 'UBacchusQuickbar::SlotSize' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbar, SlotSizeName) == 0x000398, "Member 'UBacchusQuickbar::SlotSizeName' has a wrong offset!");

// Class FortniteUI.FortItemListViewInterface
// 0x0000 (0x0028 - 0x0028)
class IFortItemListViewInterface final : public IInterface
{
public:
	void CenterSelectedItemListEntryWidgetBP();
	void ClearCustomItemListBP();
	void HideNullItemListEntryBP();
	void RefreshFilterAndSortBP();
	void RefreshSortBP();
	void SetCustomItemListBP(const TArray<class UFortItem*>& ItemList);
	void SetFilterAndSorterBP(const struct FFortItemFilterDefinition& Filter, const struct FFortItemSorterDefinition& Sorter);
	void SetFilterBP(const struct FFortItemFilterDefinition& Filter);
	void SetItemViewContextBP(TScriptInterface<class IFortItemViewContextInterface> ItemViewContext);
	void SetSorterBP(const struct FFortItemSorterDefinition& Sorter);
	void ShowNullItemListEntryBP();

	bool ContainsItemBP(const class UFortItem* Item) const;
	const struct FFortItemFilterDefinition GetFilterBP() const;
	const struct FFortItemSorterDefinition GetSorterBP() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemListViewInterface">();
	}
	static class IFortItemListViewInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFortItemListViewInterface>();
	}
};
static_assert(alignof(IFortItemListViewInterface) == 0x000008, "Wrong alignment on IFortItemListViewInterface");
static_assert(sizeof(IFortItemListViewInterface) == 0x000028, "Wrong size on IFortItemListViewInterface");

// Class FortniteUI.AthenaBroadcastKillFeedItemBase
// 0x0058 (0x02C0 - 0x0268)
class UAthenaBroadcastKillFeedItemBase final : public UFortHUDElementWidget
{
public:
	class UCommonTextBlock*                       InstigatorNameText;                                // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 IconImage;                                         // 0x0270(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       VictimNameText;                                    // 0x0278(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       DistanceText;                                      // 0x0280(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URetainerBox*                           RetainerBox;                                       // 0x0288(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                EliminationIcon;                                   // 0x0290(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                DbnoIcon;                                          // 0x0298(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                StormIcon;                                         // 0x02A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                FallDamageIcon;                                    // 0x02A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                ExplosionIcon;                                     // 0x02B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EAthenaBroadcastKillFeedEntryType             DesignTime_EntryType;                              // 0x02B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaBroadcastKillFeedItemBase">();
	}
	static class UAthenaBroadcastKillFeedItemBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaBroadcastKillFeedItemBase>();
	}
};
static_assert(alignof(UAthenaBroadcastKillFeedItemBase) == 0x000008, "Wrong alignment on UAthenaBroadcastKillFeedItemBase");
static_assert(sizeof(UAthenaBroadcastKillFeedItemBase) == 0x0002C0, "Wrong size on UAthenaBroadcastKillFeedItemBase");
static_assert(offsetof(UAthenaBroadcastKillFeedItemBase, InstigatorNameText) == 0x000268, "Member 'UAthenaBroadcastKillFeedItemBase::InstigatorNameText' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastKillFeedItemBase, IconImage) == 0x000270, "Member 'UAthenaBroadcastKillFeedItemBase::IconImage' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastKillFeedItemBase, VictimNameText) == 0x000278, "Member 'UAthenaBroadcastKillFeedItemBase::VictimNameText' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastKillFeedItemBase, DistanceText) == 0x000280, "Member 'UAthenaBroadcastKillFeedItemBase::DistanceText' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastKillFeedItemBase, RetainerBox) == 0x000288, "Member 'UAthenaBroadcastKillFeedItemBase::RetainerBox' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastKillFeedItemBase, EliminationIcon) == 0x000290, "Member 'UAthenaBroadcastKillFeedItemBase::EliminationIcon' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastKillFeedItemBase, DbnoIcon) == 0x000298, "Member 'UAthenaBroadcastKillFeedItemBase::DbnoIcon' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastKillFeedItemBase, StormIcon) == 0x0002A0, "Member 'UAthenaBroadcastKillFeedItemBase::StormIcon' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastKillFeedItemBase, FallDamageIcon) == 0x0002A8, "Member 'UAthenaBroadcastKillFeedItemBase::FallDamageIcon' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastKillFeedItemBase, ExplosionIcon) == 0x0002B0, "Member 'UAthenaBroadcastKillFeedItemBase::ExplosionIcon' has a wrong offset!");
static_assert(offsetof(UAthenaBroadcastKillFeedItemBase, DesignTime_EntryType) == 0x0002B8, "Member 'UAthenaBroadcastKillFeedItemBase::DesignTime_EntryType' has a wrong offset!");

// Class FortniteUI.FortGamepadCustomListItem
// 0x0008 (0x0B38 - 0x0B30)
class UFortGamepadCustomListItem : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGamepadCustomListItem">();
	}
	static class UFortGamepadCustomListItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGamepadCustomListItem>();
	}
};
static_assert(alignof(UFortGamepadCustomListItem) == 0x000008, "Wrong alignment on UFortGamepadCustomListItem");
static_assert(sizeof(UFortGamepadCustomListItem) == 0x000B38, "Wrong size on UFortGamepadCustomListItem");

// Class FortniteUI.FriendCodeEntryBase
// 0x0000 (0x0B30 - 0x0B30)
class UFriendCodeEntryBase final : public UCommonButton
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendCodeEntryBase">();
	}
	static class UFriendCodeEntryBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendCodeEntryBase>();
	}
};
static_assert(alignof(UFriendCodeEntryBase) == 0x000008, "Wrong alignment on UFriendCodeEntryBase");
static_assert(sizeof(UFriendCodeEntryBase) == 0x000B30, "Wrong size on UFriendCodeEntryBase");

// Class FortniteUI.AthenaBroadcastMapPanelBase
// 0x0000 (0x0348 - 0x0348)
class UAthenaBroadcastMapPanelBase final : public UFortActivatablePanel
{
public:
	void OnMapIconAdded(class UFortSpectateClickableMapIcon* MapIconIn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaBroadcastMapPanelBase">();
	}
	static class UAthenaBroadcastMapPanelBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaBroadcastMapPanelBase>();
	}
};
static_assert(alignof(UAthenaBroadcastMapPanelBase) == 0x000008, "Wrong alignment on UAthenaBroadcastMapPanelBase");
static_assert(sizeof(UAthenaBroadcastMapPanelBase) == 0x000348, "Wrong size on UAthenaBroadcastMapPanelBase");

// Class FortniteUI.CreativePerformanceHUDBase
// 0x0018 (0x0280 - 0x0268)
class UCreativePerformanceHUDBase final : public UFortHUDElementWidget
{
public:
	uint8                                         Pad_268[0x18];                                     // 0x0268(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleVolumeStateChanged(EVolumeState NewState, class AFortVolume* Volume);
	void HideUIMetrics();
	void OnClientEnterVolume(class APlayerState* ClientState, class AFortVolume* Volume);
	void OnClientExitVolume(class APlayerState* ClientState, class AFortVolume* Volume);
	void OnPerformanceMetricsUpdated(const struct FVolumePerformanceMetrics& VolumePerformanceMetrics);
	void SetUIMetrics(const struct FVolumePerformanceMetrics& VolumePerformanceMetrics);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CreativePerformanceHUDBase">();
	}
	static class UCreativePerformanceHUDBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreativePerformanceHUDBase>();
	}
};
static_assert(alignof(UCreativePerformanceHUDBase) == 0x000008, "Wrong alignment on UCreativePerformanceHUDBase");
static_assert(sizeof(UCreativePerformanceHUDBase) == 0x000280, "Wrong size on UCreativePerformanceHUDBase");

// Class FortniteUI.AthenaBroadcastMatchStatusWidget
// 0x0008 (0x0240 - 0x0238)
class UAthenaBroadcastMatchStatusWidget final : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnStormPhaseChanged(int32 StormPhase);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaBroadcastMatchStatusWidget">();
	}
	static class UAthenaBroadcastMatchStatusWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaBroadcastMatchStatusWidget>();
	}
};
static_assert(alignof(UAthenaBroadcastMatchStatusWidget) == 0x000008, "Wrong alignment on UAthenaBroadcastMatchStatusWidget");
static_assert(sizeof(UAthenaBroadcastMatchStatusWidget) == 0x000240, "Wrong size on UAthenaBroadcastMatchStatusWidget");

// Class FortniteUI.AthenaBroadcastPlayerLocationWidget
// 0x0008 (0x0270 - 0x0268)
class UAthenaBroadcastPlayerLocationWidget final : public UFortHUDElementWidget
{
public:
	class UCommonTextBlock*                       PlayerLocationText;                                // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaBroadcastPlayerLocationWidget">();
	}
	static class UAthenaBroadcastPlayerLocationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaBroadcastPlayerLocationWidget>();
	}
};
static_assert(alignof(UAthenaBroadcastPlayerLocationWidget) == 0x000008, "Wrong alignment on UAthenaBroadcastPlayerLocationWidget");
static_assert(sizeof(UAthenaBroadcastPlayerLocationWidget) == 0x000270, "Wrong size on UAthenaBroadcastPlayerLocationWidget");
static_assert(offsetof(UAthenaBroadcastPlayerLocationWidget, PlayerLocationText) == 0x000268, "Member 'UAthenaBroadcastPlayerLocationWidget::PlayerLocationText' has a wrong offset!");

// Class FortniteUI.CampaignHUDBase
// 0x0018 (0x0378 - 0x0360)
class UCampaignHUDBase final : public UFortUIStateWidget_NUI
{
public:
	uint8                                         Pad_360[0x18];                                     // 0x0360(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CampaignHUDBase">();
	}
	static class UCampaignHUDBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCampaignHUDBase>();
	}
};
static_assert(alignof(UCampaignHUDBase) == 0x000008, "Wrong alignment on UCampaignHUDBase");
static_assert(sizeof(UCampaignHUDBase) == 0x000378, "Wrong size on UCampaignHUDBase");

// Class FortniteUI.AthenaEventMatchSquadWidgetBase
// 0x0008 (0x0240 - 0x0238)
class UAthenaEventMatchSquadWidgetBase : public UCommonUserWidget
{
public:
	TWeakObjectPtr<class UAthenaRemoteSquadViewData> SquadData;                                         // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnPlayerAdded(class UAthenaRemoteSquadViewData* InSquadData, class UAthenaRemotePlayerViewData* InPlayerData);
	void OnSquadColorChanged(class UAthenaRemoteSquadViewData* InSquadData, const struct FLinearColor& InSquadColor);
	void OnSquadIdChanged(class UAthenaRemoteSquadViewData* InSquadData, uint8 InSquadId);
	void OnSquadKillscoreChanged(class UAthenaRemoteSquadViewData* InSquadData, int32 InSquadKills);
	void OnSquadPlaceChanged(class UAthenaRemoteSquadViewData* InSquadData, int32 InSquadPlace);
	void SetSquadIdVisible(bool InVisible);
	void SetStormcapDamageVisible(bool InVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaEventMatchSquadWidgetBase">();
	}
	static class UAthenaEventMatchSquadWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaEventMatchSquadWidgetBase>();
	}
};
static_assert(alignof(UAthenaEventMatchSquadWidgetBase) == 0x000008, "Wrong alignment on UAthenaEventMatchSquadWidgetBase");
static_assert(sizeof(UAthenaEventMatchSquadWidgetBase) == 0x000240, "Wrong size on UAthenaEventMatchSquadWidgetBase");
static_assert(offsetof(UAthenaEventMatchSquadWidgetBase, SquadData) == 0x000238, "Member 'UAthenaEventMatchSquadWidgetBase::SquadData' has a wrong offset!");

// Class FortniteUI.FortSquadIcon
// 0x0018 (0x0250 - 0x0238)
class UFortSquadIcon : public UCommonUserWidget
{
public:
	class FName                                   Name_FortSquadIcon;                                // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBrushSize                                ImageSize;                                         // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 Icon;                                              // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void HandleDifferentSquadSetBP();
	void SetSquad(const class FName& InName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadIcon">();
	}
	static class UFortSquadIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadIcon>();
	}
};
static_assert(alignof(UFortSquadIcon) == 0x000008, "Wrong alignment on UFortSquadIcon");
static_assert(sizeof(UFortSquadIcon) == 0x000250, "Wrong size on UFortSquadIcon");
static_assert(offsetof(UFortSquadIcon, Name_FortSquadIcon) == 0x000238, "Member 'UFortSquadIcon::Name_FortSquadIcon' has a wrong offset!");
static_assert(offsetof(UFortSquadIcon, ImageSize) == 0x000240, "Member 'UFortSquadIcon::ImageSize' has a wrong offset!");
static_assert(offsetof(UFortSquadIcon, Icon) == 0x000248, "Member 'UFortSquadIcon::Icon' has a wrong offset!");

// Class FortniteUI.AthenaBroadcastSquadStatusWidget
// 0x0008 (0x0248 - 0x0240)
class UAthenaBroadcastSquadStatusWidget final : public UAthenaEventMatchSquadWidgetBase
{
public:
	TWeakObjectPtr<class AFortPlayerState>        FollowedPlayer;                                    // 0x0240(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleFollowedPlayerChanged(class AFortPlayerControllerSpectating* SpectatorController, class AFortPlayerState* NewFollowedPlayer);
	void OnFollowedPlayerChanged(const class AFortPlayerState* NewFollowedPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaBroadcastSquadStatusWidget">();
	}
	static class UAthenaBroadcastSquadStatusWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaBroadcastSquadStatusWidget>();
	}
};
static_assert(alignof(UAthenaBroadcastSquadStatusWidget) == 0x000008, "Wrong alignment on UAthenaBroadcastSquadStatusWidget");
static_assert(sizeof(UAthenaBroadcastSquadStatusWidget) == 0x000248, "Wrong size on UAthenaBroadcastSquadStatusWidget");
static_assert(offsetof(UAthenaBroadcastSquadStatusWidget, FollowedPlayer) == 0x000240, "Member 'UAthenaBroadcastSquadStatusWidget::FollowedPlayer' has a wrong offset!");

// Class FortniteUI.FortChallengeBundleCategoryInfo
// 0x0028 (0x0050 - 0x0028)
class UFortChallengeBundleCategoryInfo final : public UObject
{
public:
	TArray<class UFortChallengeBundleScheduleDefinition*> BundleScheduleDefinitions;                         // 0x0028(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UFortChallengeBundleInfo*>       BundleInfos;                                       // 0x0038(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class AFortPlayerController*                  FortPC;                                            // 0x0048(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	TArray<class UFortChallengeBundleInfo*> GetChallengeBundleInfos() const;
	bool GetExpirationDate(struct FDateTime* ExpirationDate) const;
	class UFortChallengeBundleScheduleDefinition* GetFirstScheduleDefinition() const;
	int32 GetNumberOfBundles() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortChallengeBundleCategoryInfo">();
	}
	static class UFortChallengeBundleCategoryInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortChallengeBundleCategoryInfo>();
	}
};
static_assert(alignof(UFortChallengeBundleCategoryInfo) == 0x000008, "Wrong alignment on UFortChallengeBundleCategoryInfo");
static_assert(sizeof(UFortChallengeBundleCategoryInfo) == 0x000050, "Wrong size on UFortChallengeBundleCategoryInfo");
static_assert(offsetof(UFortChallengeBundleCategoryInfo, BundleScheduleDefinitions) == 0x000028, "Member 'UFortChallengeBundleCategoryInfo::BundleScheduleDefinitions' has a wrong offset!");
static_assert(offsetof(UFortChallengeBundleCategoryInfo, BundleInfos) == 0x000038, "Member 'UFortChallengeBundleCategoryInfo::BundleInfos' has a wrong offset!");
static_assert(offsetof(UFortChallengeBundleCategoryInfo, FortPC) == 0x000048, "Member 'UFortChallengeBundleCategoryInfo::FortPC' has a wrong offset!");

// Class FortniteUI.FortItemPickerBase
// 0x00D0 (0x0308 - 0x0238)
class UFortItemPickerBase : public UCommonUserWidget
{
public:
	UMulticastDelegateProperty_                   OnSelectionChangedEvent;                           // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSelectionCommittedEvent;                         // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemClicked;                                     // 0x0258(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemClickedDoubleClicked;                        // 0x0268(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemHoveredEvent;                                // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemUnhovered;                                   // 0x0288(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UFortItemTileView*                      PickerTileView;                                    // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UListView*                              ItemListViewWidget;                                // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A8[0x10];                                     // 0x02A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bConfirmSelectionIfAlreadySelectedAfterOneClick;   // 0x02B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                NewlySelectedItem;                                 // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TScriptInterface<class IFortItemViewContextInterface> ItemViewContext;                                   // 0x02C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D8[0x30];                                     // 0x02D8(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanItemBeComitted(const class UFortItem* ItemToCommit);
	void CenterSelectedItemTileWidget();
	void ClearSelection();
	TScriptInterface<class IFortItemListViewInterface> GetListViewInterface();
	void OnItemSelectionEvent__DelegateSignature(class UFortItem* SelectedItem);
	bool SetSelectedIndex(int32 Param_Index);
	void SetSelectedItem(const class UFortItem* ItemToSelect);
	bool TryCommitSelectedItem();

	int32 GetIndexForItem(class UFortItem* Item) const;
	class UFortItem* GetSelectedItem() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemPickerBase">();
	}
	static class UFortItemPickerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemPickerBase>();
	}
};
static_assert(alignof(UFortItemPickerBase) == 0x000008, "Wrong alignment on UFortItemPickerBase");
static_assert(sizeof(UFortItemPickerBase) == 0x000308, "Wrong size on UFortItemPickerBase");
static_assert(offsetof(UFortItemPickerBase, OnSelectionChangedEvent) == 0x000238, "Member 'UFortItemPickerBase::OnSelectionChangedEvent' has a wrong offset!");
static_assert(offsetof(UFortItemPickerBase, OnSelectionCommittedEvent) == 0x000248, "Member 'UFortItemPickerBase::OnSelectionCommittedEvent' has a wrong offset!");
static_assert(offsetof(UFortItemPickerBase, OnItemClicked) == 0x000258, "Member 'UFortItemPickerBase::OnItemClicked' has a wrong offset!");
static_assert(offsetof(UFortItemPickerBase, OnItemClickedDoubleClicked) == 0x000268, "Member 'UFortItemPickerBase::OnItemClickedDoubleClicked' has a wrong offset!");
static_assert(offsetof(UFortItemPickerBase, OnItemHoveredEvent) == 0x000278, "Member 'UFortItemPickerBase::OnItemHoveredEvent' has a wrong offset!");
static_assert(offsetof(UFortItemPickerBase, OnItemUnhovered) == 0x000288, "Member 'UFortItemPickerBase::OnItemUnhovered' has a wrong offset!");
static_assert(offsetof(UFortItemPickerBase, PickerTileView) == 0x000298, "Member 'UFortItemPickerBase::PickerTileView' has a wrong offset!");
static_assert(offsetof(UFortItemPickerBase, ItemListViewWidget) == 0x0002A0, "Member 'UFortItemPickerBase::ItemListViewWidget' has a wrong offset!");
static_assert(offsetof(UFortItemPickerBase, bConfirmSelectionIfAlreadySelectedAfterOneClick) == 0x0002B8, "Member 'UFortItemPickerBase::bConfirmSelectionIfAlreadySelectedAfterOneClick' has a wrong offset!");
static_assert(offsetof(UFortItemPickerBase, NewlySelectedItem) == 0x0002C0, "Member 'UFortItemPickerBase::NewlySelectedItem' has a wrong offset!");
static_assert(offsetof(UFortItemPickerBase, ItemViewContext) == 0x0002C8, "Member 'UFortItemPickerBase::ItemViewContext' has a wrong offset!");

// Class FortniteUI.FortHeroLoadoutGadgetPicker
// 0x0020 (0x0328 - 0x0308)
class UFortHeroLoadoutGadgetPicker final : public UFortItemPickerBase
{
public:
	TWeakObjectPtr<class UFortCampaignHeroLoadoutItem> TargetLoadoutItem;                                 // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TargetSlotIndex;                                   // 0x0310(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortItem*>                      TemporaryGadgetItemInstances;                      // 0x0318(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void SetTargetLoadoutSlot(const class UFortCampaignHeroLoadoutItem* LoadoutItem, const int32 SlotIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHeroLoadoutGadgetPicker">();
	}
	static class UFortHeroLoadoutGadgetPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHeroLoadoutGadgetPicker>();
	}
};
static_assert(alignof(UFortHeroLoadoutGadgetPicker) == 0x000008, "Wrong alignment on UFortHeroLoadoutGadgetPicker");
static_assert(sizeof(UFortHeroLoadoutGadgetPicker) == 0x000328, "Wrong size on UFortHeroLoadoutGadgetPicker");
static_assert(offsetof(UFortHeroLoadoutGadgetPicker, TargetLoadoutItem) == 0x000308, "Member 'UFortHeroLoadoutGadgetPicker::TargetLoadoutItem' has a wrong offset!");
static_assert(offsetof(UFortHeroLoadoutGadgetPicker, TargetSlotIndex) == 0x000310, "Member 'UFortHeroLoadoutGadgetPicker::TargetSlotIndex' has a wrong offset!");
static_assert(offsetof(UFortHeroLoadoutGadgetPicker, TemporaryGadgetItemInstances) == 0x000318, "Member 'UFortHeroLoadoutGadgetPicker::TemporaryGadgetItemInstances' has a wrong offset!");

// Class FortniteUI.BacchusDPICustomScalingRule
// 0x0000 (0x0028 - 0x0028)
class UBacchusDPICustomScalingRule final : public UDPICustomScalingRule
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BacchusDPICustomScalingRule">();
	}
	static class UBacchusDPICustomScalingRule* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBacchusDPICustomScalingRule>();
	}
};
static_assert(alignof(UBacchusDPICustomScalingRule) == 0x000008, "Wrong alignment on UBacchusDPICustomScalingRule");
static_assert(sizeof(UBacchusDPICustomScalingRule) == 0x000028, "Wrong size on UBacchusDPICustomScalingRule");

// Class FortniteUI.FortChallengeBundleInfo
// 0x0030 (0x0058 - 0x0028)
class UFortChallengeBundleInfo final : public UObject
{
public:
	class UFortChallengeBundleItem*               BundleItem;                                        // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortChallengeBundleItemDefinition*     BundleDefinition;                                  // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortChallengeBundleCategoryInfo*       BundleCategoryInfo;                                // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortChallengeBundleScheduleDefinition* BundleScheduleDefinition;                          // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EChallengeScheduleUnlockType                  BundleUnlockType;                                  // 0x0048(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BundleUnlockValue;                                 // 0x004C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AFortPlayerController*                  FortPC;                                            // 0x0050(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class FText FormatLockedReason(class AFortPlayerController* InFortPC, const struct FFortChallengeBundleInfoLockedReason& InReason, const struct FTimespan& TimeSinceStart);

	void GetAchievedCount(int32* OutTotalAchievedCount, int32* OutTotalRequiredCount, float* OutAchievedPercent, float* OutThresholdPercent) const;
	class UFortChallengeBundleItemDefinition* GetBundleDefinition() const;
	class UFortChallengeBundleCategoryInfo* GetOwningBundleCategoryInfo() const;
	void GetQuests(class UFortQuestManager* QuestManager, EChallengeBundleQuestVisualStyle QuestStyle, TArray<class UFortQuestItem*>* OwnedQuests, TArray<class UFortQuestItemDefinition*>* UnownedQuests, bool bGetAllQuestsInChain) const;
	class UFortItem* GetRewardItem() const;
	class UFortItem* GetVaultedItemToPreview() const;
	bool HasAnyAssociatedSecretQuests(class UFortQuestItem* BundleQuest) const;
	bool HasAnyAssociatedSecretQuestsAndAllAreComplete(class UFortQuestItem* BundleQuest) const;
	bool HasQuestReward(class UFortItemDefinition* ItemDef, int32* OutRecievedCount, int32* OutTotalCount) const;
	bool IsCompleted() const;
	bool IsLinearChainQuest(class UFortQuestItem* BundleQuest, int32* ChainLength, int32* CurrentChainIndex) const;
	bool IsQuestDefALinearChain(const class UFortQuestItemDefinition* InQuestDef, int32* ChainLength, int32* CurrentChainIndex) const;
	bool IsQuestUnlocked(const class UFortQuestItemDefinition* LockedQuest, struct FFortChallengeBundleInfoLockedReason* LockedReason) const;
	bool IsRewardThresholdAchieved() const;
	bool IsUnlocked(struct FFortChallengeBundleInfoLockedReason* LockedReason) const;
	bool OwnsBattlePass() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortChallengeBundleInfo">();
	}
	static class UFortChallengeBundleInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortChallengeBundleInfo>();
	}
};
static_assert(alignof(UFortChallengeBundleInfo) == 0x000008, "Wrong alignment on UFortChallengeBundleInfo");
static_assert(sizeof(UFortChallengeBundleInfo) == 0x000058, "Wrong size on UFortChallengeBundleInfo");
static_assert(offsetof(UFortChallengeBundleInfo, BundleItem) == 0x000028, "Member 'UFortChallengeBundleInfo::BundleItem' has a wrong offset!");
static_assert(offsetof(UFortChallengeBundleInfo, BundleDefinition) == 0x000030, "Member 'UFortChallengeBundleInfo::BundleDefinition' has a wrong offset!");
static_assert(offsetof(UFortChallengeBundleInfo, BundleCategoryInfo) == 0x000038, "Member 'UFortChallengeBundleInfo::BundleCategoryInfo' has a wrong offset!");
static_assert(offsetof(UFortChallengeBundleInfo, BundleScheduleDefinition) == 0x000040, "Member 'UFortChallengeBundleInfo::BundleScheduleDefinition' has a wrong offset!");
static_assert(offsetof(UFortChallengeBundleInfo, BundleUnlockType) == 0x000048, "Member 'UFortChallengeBundleInfo::BundleUnlockType' has a wrong offset!");
static_assert(offsetof(UFortChallengeBundleInfo, BundleUnlockValue) == 0x00004C, "Member 'UFortChallengeBundleInfo::BundleUnlockValue' has a wrong offset!");
static_assert(offsetof(UFortChallengeBundleInfo, FortPC) == 0x000050, "Member 'UFortChallengeBundleInfo::FortPC' has a wrong offset!");

// Class FortniteUI.CommonTagVisibilityWidget
// 0x0048 (0x0168 - 0x0120)
class UCommonTagVisibilityWidget final : public UContentWidget
{
public:
	struct FGameplayTagContainer                  HUDElementTag;                                     // 0x0120(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_140[0x28];                                     // 0x0140(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleOnHUDElementVisibilityChanged(const struct FGameplayTagContainer& HiddenHUDElementTags);
	void HandleOnHUDResetToDefaults();
	void Initialize(class ULocalPlayer* OwningLocalPlayer, class APlayerController* OwningPlayerController);
	void OnVisibilitySetEvent(ESlateVisibility InVisibility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonTagVisibilityWidget">();
	}
	static class UCommonTagVisibilityWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonTagVisibilityWidget>();
	}
};
static_assert(alignof(UCommonTagVisibilityWidget) == 0x000008, "Wrong alignment on UCommonTagVisibilityWidget");
static_assert(sizeof(UCommonTagVisibilityWidget) == 0x000168, "Wrong size on UCommonTagVisibilityWidget");
static_assert(offsetof(UCommonTagVisibilityWidget, HUDElementTag) == 0x000120, "Member 'UCommonTagVisibilityWidget::HUDElementTag' has a wrong offset!");

// Class FortniteUI.FortOptionsTab
// 0x0050 (0x0288 - 0x0238)
class UFortOptionsTab : public UCommonUserWidget
{
public:
	UMulticastDelegateProperty_                   OnTabSettingChanged;                               // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTabActivated;                                    // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTabDeactivated;                                  // 0x0258(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UCommonListView*                        TabListView;                                       // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESettingTab                                   TabType;                                           // 0x0270(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortSettingInfo*>               TabSettingsData;                                   // 0x0278(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void CenterOnTab();
	void ConstructSettingList();
	bool IsAthena();
	bool IsPS4Platform();
	bool IsSwitchPlatform();
	bool IsXboxPlatform();
	void ResetOptionsToDefault();
	bool ShouldShowSetting(const struct FSettingData& SettingData);
	void UpdateOptions(bool UpdateQuality);
	void UpdateOptionsTab();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortOptionsTab">();
	}
	static class UFortOptionsTab* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortOptionsTab>();
	}
};
static_assert(alignof(UFortOptionsTab) == 0x000008, "Wrong alignment on UFortOptionsTab");
static_assert(sizeof(UFortOptionsTab) == 0x000288, "Wrong size on UFortOptionsTab");
static_assert(offsetof(UFortOptionsTab, OnTabSettingChanged) == 0x000238, "Member 'UFortOptionsTab::OnTabSettingChanged' has a wrong offset!");
static_assert(offsetof(UFortOptionsTab, OnTabActivated) == 0x000248, "Member 'UFortOptionsTab::OnTabActivated' has a wrong offset!");
static_assert(offsetof(UFortOptionsTab, OnTabDeactivated) == 0x000258, "Member 'UFortOptionsTab::OnTabDeactivated' has a wrong offset!");
static_assert(offsetof(UFortOptionsTab, TabListView) == 0x000268, "Member 'UFortOptionsTab::TabListView' has a wrong offset!");
static_assert(offsetof(UFortOptionsTab, TabType) == 0x000270, "Member 'UFortOptionsTab::TabType' has a wrong offset!");
static_assert(offsetof(UFortOptionsTab, TabSettingsData) == 0x000278, "Member 'UFortOptionsTab::TabSettingsData' has a wrong offset!");

// Class FortniteUI.FortGameOptions
// 0x0010 (0x0298 - 0x0288)
class UFortGameOptions : public UFortOptionsTab
{
public:
	TArray<class UFortHUDVisibilityData*>         HUDData;                                           // 0x0288(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void ConstructHUDTagList();
	void HandleGamePadToggleMode();
	void SetControllerPlatform(const class FString& InControllerPlatform);
	void UpdatePossibleLanguages();

	class FString GetControllerPlatform() const;
	bool GetHUDSettings(const struct FGameplayTag& HUDMapping) const;
	void UpdateHUDSettings(const struct FGameplayTag& HUDMapping, bool NewVisibility) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameOptions">();
	}
	static class UFortGameOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameOptions>();
	}
};
static_assert(alignof(UFortGameOptions) == 0x000008, "Wrong alignment on UFortGameOptions");
static_assert(sizeof(UFortGameOptions) == 0x000298, "Wrong size on UFortGameOptions");
static_assert(offsetof(UFortGameOptions, HUDData) == 0x000288, "Member 'UFortGameOptions::HUDData' has a wrong offset!");

// Class FortniteUI.FortChallengeBundleTreeItemWidget
// 0x0010 (0x0B40 - 0x0B30)
class UFortChallengeBundleTreeItemWidget : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UObject>                 ScheduleOrBundle;                                  // 0x0B38(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleBundleUpdated();
	void OnBundleUpdated();
	void SetupAsChallengeBundle(class UFortChallengeBundleInfo* Bundle);
	void SetupAsChallengeBundleSchedule(class UFortChallengeBundleCategoryInfo* Schedule);

	class UFortChallengeBundleInfo* GetChallengeBundleInfo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortChallengeBundleTreeItemWidget">();
	}
	static class UFortChallengeBundleTreeItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortChallengeBundleTreeItemWidget>();
	}
};
static_assert(alignof(UFortChallengeBundleTreeItemWidget) == 0x000008, "Wrong alignment on UFortChallengeBundleTreeItemWidget");
static_assert(sizeof(UFortChallengeBundleTreeItemWidget) == 0x000B40, "Wrong size on UFortChallengeBundleTreeItemWidget");
static_assert(offsetof(UFortChallengeBundleTreeItemWidget, ScheduleOrBundle) == 0x000B38, "Member 'UFortChallengeBundleTreeItemWidget::ScheduleOrBundle' has a wrong offset!");

// Class FortniteUI.FortTabButtonInterface
// 0x0000 (0x0028 - 0x0028)
class IFortTabButtonInterface final : public IInterface
{
public:
	void SetTabLabelInfo(const struct FFortTabButtonLabelInfo& TabLabelInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTabButtonInterface">();
	}
	static class IFortTabButtonInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFortTabButtonInterface>();
	}
};
static_assert(alignof(IFortTabButtonInterface) == 0x000008, "Wrong alignment on IFortTabButtonInterface");
static_assert(sizeof(IFortTabButtonInterface) == 0x000028, "Wrong size on IFortTabButtonInterface");

// Class FortniteUI.FortChallengeBundleWidget
// 0x0008 (0x0328 - 0x0320)
class UFortChallengeBundleWidget : public UCommonActivatablePanel
{
public:
	class UFortChallengeBundleInfo*               ChallengeBundleInfo;                               // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleBundleUpdated();
	void MoveToNextBundle();
	void MoveToPrevBundle();
	void OnBundleUpdated();
	void OnSetup();
	void Setup(class UFortChallengeBundleInfo* Info);

	class UFortChallengeBundleInfo* GetChallengeBundleInfo() const;
	bool HasSiblingBundles() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortChallengeBundleWidget">();
	}
	static class UFortChallengeBundleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortChallengeBundleWidget>();
	}
};
static_assert(alignof(UFortChallengeBundleWidget) == 0x000008, "Wrong alignment on UFortChallengeBundleWidget");
static_assert(sizeof(UFortChallengeBundleWidget) == 0x000328, "Wrong size on UFortChallengeBundleWidget");
static_assert(offsetof(UFortChallengeBundleWidget, ChallengeBundleInfo) == 0x000320, "Member 'UFortChallengeBundleWidget::ChallengeBundleInfo' has a wrong offset!");

// Class FortniteUI.AthenaChallengeBundleScheduleScreenBase
// 0x0068 (0x03B0 - 0x0348)
class UAthenaChallengeBundleScheduleScreenBase : public UFortActivatablePanel
{
public:
	uint8                                         Pad_348[0x10];                                     // 0x0348(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UFortChallengeBundleCategoryInfo*> ScheduleCategoryCache;                             // 0x0358(0x0050)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A8[0x8];                                      // 0x03A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetChallengeCategoryInfos(TArray<class UFortChallengeBundleCategoryInfo*>* OutCategoryInfos);
	void OnChallengesChanged();
	void OnRefreshNavigation();
	void RequestRefreshNavigation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaChallengeBundleScheduleScreenBase">();
	}
	static class UAthenaChallengeBundleScheduleScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaChallengeBundleScheduleScreenBase>();
	}
};
static_assert(alignof(UAthenaChallengeBundleScheduleScreenBase) == 0x000008, "Wrong alignment on UAthenaChallengeBundleScheduleScreenBase");
static_assert(sizeof(UAthenaChallengeBundleScheduleScreenBase) == 0x0003B0, "Wrong size on UAthenaChallengeBundleScheduleScreenBase");
static_assert(offsetof(UAthenaChallengeBundleScheduleScreenBase, ScheduleCategoryCache) == 0x000358, "Member 'UAthenaChallengeBundleScheduleScreenBase::ScheduleCategoryCache' has a wrong offset!");

// Class FortniteUI.FortItemDetailsHostPanel
// 0x0070 (0x02A8 - 0x0238)
class UFortItemDetailsHostPanel : public UCommonUserWidget
{
public:
	TWeakObjectPtr<class UFortItem>               ItemToDetail;                                      // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFortItem>               ItemToCompareWith;                                 // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldPreviewUpgradingItem;                       // 0x0248(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UScrollBox*                             ScrollBox;                                         // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNamedSlot*                             DetailsContainerSlotWidget;                        // 0x0258(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonBorder*                          HighRarityBorder;                                  // 0x0260(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TScriptInterface<class IFortItemViewContextInterface> ItemViewContext;                                   // 0x0268(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	EFortItemInspectionMode                       CurrentInspectMode;                                // 0x0278(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_279[0x27];                                     // 0x0279(0x0027)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QuantityOverride;                                  // 0x02A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleDifferentItemToCompareSet();
	void HandleDifferentItemToDetailSet();
	void HandleInspectModeChanged();
	void HandleQuantityOverrideChanged();
	void HandleShouldPreviewUpgradingItemChangedBP();
	void SetInspectMode(EFortItemInspectionMode InspectMode);
	void SetItemToCompareWith(const class UFortItem* Param_ItemToCompareWith);
	void SetItemToDetail(const class UFortItem* Param_ItemToDetail);
	void SetItemViewContext(const TScriptInterface<class IFortItemViewContextInterface>& Param_ItemViewContext);
	void SetQuantityOverride(const int32 Param_QuantityOverride);
	void SetScrollWidget();
	void ShouldPreviewUpgradingItem(const bool Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemDetailsHostPanel">();
	}
	static class UFortItemDetailsHostPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemDetailsHostPanel>();
	}
};
static_assert(alignof(UFortItemDetailsHostPanel) == 0x000008, "Wrong alignment on UFortItemDetailsHostPanel");
static_assert(sizeof(UFortItemDetailsHostPanel) == 0x0002A8, "Wrong size on UFortItemDetailsHostPanel");
static_assert(offsetof(UFortItemDetailsHostPanel, ItemToDetail) == 0x000238, "Member 'UFortItemDetailsHostPanel::ItemToDetail' has a wrong offset!");
static_assert(offsetof(UFortItemDetailsHostPanel, ItemToCompareWith) == 0x000240, "Member 'UFortItemDetailsHostPanel::ItemToCompareWith' has a wrong offset!");
static_assert(offsetof(UFortItemDetailsHostPanel, bShouldPreviewUpgradingItem) == 0x000248, "Member 'UFortItemDetailsHostPanel::bShouldPreviewUpgradingItem' has a wrong offset!");
static_assert(offsetof(UFortItemDetailsHostPanel, ScrollBox) == 0x000250, "Member 'UFortItemDetailsHostPanel::ScrollBox' has a wrong offset!");
static_assert(offsetof(UFortItemDetailsHostPanel, DetailsContainerSlotWidget) == 0x000258, "Member 'UFortItemDetailsHostPanel::DetailsContainerSlotWidget' has a wrong offset!");
static_assert(offsetof(UFortItemDetailsHostPanel, HighRarityBorder) == 0x000260, "Member 'UFortItemDetailsHostPanel::HighRarityBorder' has a wrong offset!");
static_assert(offsetof(UFortItemDetailsHostPanel, ItemViewContext) == 0x000268, "Member 'UFortItemDetailsHostPanel::ItemViewContext' has a wrong offset!");
static_assert(offsetof(UFortItemDetailsHostPanel, CurrentInspectMode) == 0x000278, "Member 'UFortItemDetailsHostPanel::CurrentInspectMode' has a wrong offset!");
static_assert(offsetof(UFortItemDetailsHostPanel, QuantityOverride) == 0x0002A0, "Member 'UFortItemDetailsHostPanel::QuantityOverride' has a wrong offset!");

// Class FortniteUI.FeedbackReportablePlayerBase
// 0x0038 (0x0B68 - 0x0B30)
class UFeedbackReportablePlayerBase : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DebugName;                                         // 0x0B38(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReportablePlayerInfo*                  PlayerInfo;                                        // 0x0B48(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       TextBlock_Header;                                  // 0x0B50(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       TextBlock_SecondaryInfoText;                       // 0x0B58(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHorizontalBox*                         HorizontalBox_SecondayInfoArea;                    // 0x0B60(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetSelectionState(bool bIsSelected, bool bAnimateOnSelect);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FeedbackReportablePlayerBase">();
	}
	static class UFeedbackReportablePlayerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFeedbackReportablePlayerBase>();
	}
};
static_assert(alignof(UFeedbackReportablePlayerBase) == 0x000008, "Wrong alignment on UFeedbackReportablePlayerBase");
static_assert(sizeof(UFeedbackReportablePlayerBase) == 0x000B68, "Wrong size on UFeedbackReportablePlayerBase");
static_assert(offsetof(UFeedbackReportablePlayerBase, DebugName) == 0x000B38, "Member 'UFeedbackReportablePlayerBase::DebugName' has a wrong offset!");
static_assert(offsetof(UFeedbackReportablePlayerBase, PlayerInfo) == 0x000B48, "Member 'UFeedbackReportablePlayerBase::PlayerInfo' has a wrong offset!");
static_assert(offsetof(UFeedbackReportablePlayerBase, TextBlock_Header) == 0x000B50, "Member 'UFeedbackReportablePlayerBase::TextBlock_Header' has a wrong offset!");
static_assert(offsetof(UFeedbackReportablePlayerBase, TextBlock_SecondaryInfoText) == 0x000B58, "Member 'UFeedbackReportablePlayerBase::TextBlock_SecondaryInfoText' has a wrong offset!");
static_assert(offsetof(UFeedbackReportablePlayerBase, HorizontalBox_SecondayInfoArea) == 0x000B60, "Member 'UFeedbackReportablePlayerBase::HorizontalBox_SecondayInfoArea' has a wrong offset!");

// Class FortniteUI.AthenaCompassBase
// 0x0220 (0x0488 - 0x0268)
class UAthenaCompassBase final : public UFortHUDElementWidget
{
public:
	class UMaterialInstanceDynamic*               CompassMaterial;                                   // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                            MarkerBrush;                                       // 0x0270(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            HeadingIndicatorBrush;                             // 0x02F8(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            StormIndicatorBrush;                               // 0x0380(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         MarkerVerticalOffset;                              // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaPlayerViewModel*                 VM;                                                // 0x0410(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateFontInfo                         HeadingFont;                                       // 0x0418(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_468[0x20];                                     // 0x0468(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindToModel(class UAthenaPlayerViewModel* ViewModel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaCompassBase">();
	}
	static class UAthenaCompassBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaCompassBase>();
	}
};
static_assert(alignof(UAthenaCompassBase) == 0x000008, "Wrong alignment on UAthenaCompassBase");
static_assert(sizeof(UAthenaCompassBase) == 0x000488, "Wrong size on UAthenaCompassBase");
static_assert(offsetof(UAthenaCompassBase, CompassMaterial) == 0x000268, "Member 'UAthenaCompassBase::CompassMaterial' has a wrong offset!");
static_assert(offsetof(UAthenaCompassBase, MarkerBrush) == 0x000270, "Member 'UAthenaCompassBase::MarkerBrush' has a wrong offset!");
static_assert(offsetof(UAthenaCompassBase, HeadingIndicatorBrush) == 0x0002F8, "Member 'UAthenaCompassBase::HeadingIndicatorBrush' has a wrong offset!");
static_assert(offsetof(UAthenaCompassBase, StormIndicatorBrush) == 0x000380, "Member 'UAthenaCompassBase::StormIndicatorBrush' has a wrong offset!");
static_assert(offsetof(UAthenaCompassBase, MarkerVerticalOffset) == 0x000408, "Member 'UAthenaCompassBase::MarkerVerticalOffset' has a wrong offset!");
static_assert(offsetof(UAthenaCompassBase, VM) == 0x000410, "Member 'UAthenaCompassBase::VM' has a wrong offset!");
static_assert(offsetof(UAthenaCompassBase, HeadingFont) == 0x000418, "Member 'UAthenaCompassBase::HeadingFont' has a wrong offset!");

// Class FortniteUI.FortItemCountTextBlock
// 0x0018 (0x0358 - 0x0340)
class UFortItemCountTextBlock final : public UCommonNumericTextBlock
{
public:
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0340(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemCountStyle                           CountStyle;                                        // 0x0348(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_349[0x3];                                      // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ItemCountMaxInterpolateDuration;                   // 0x034C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemCountMinInterpolateRate;                       // 0x0350(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleItemCountChanged(class UFortItemDefinition* Definition, int32 Delta);
	void InterpolateOverrideToValue(const int32 TargetValue, float MaximumInterpolationDuration, float MinimumChangeRate, float OutroOffset);
	void SetCountStyle(EFortItemCountStyle InCountStyle);
	void SetItemDefinition(class UFortItemDefinition* InItemDefinition);
	void SetOverrideValue(int32 InOverrideValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemCountTextBlock">();
	}
	static class UFortItemCountTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemCountTextBlock>();
	}
};
static_assert(alignof(UFortItemCountTextBlock) == 0x000008, "Wrong alignment on UFortItemCountTextBlock");
static_assert(sizeof(UFortItemCountTextBlock) == 0x000358, "Wrong size on UFortItemCountTextBlock");
static_assert(offsetof(UFortItemCountTextBlock, ItemDefinition) == 0x000340, "Member 'UFortItemCountTextBlock::ItemDefinition' has a wrong offset!");
static_assert(offsetof(UFortItemCountTextBlock, CountStyle) == 0x000348, "Member 'UFortItemCountTextBlock::CountStyle' has a wrong offset!");
static_assert(offsetof(UFortItemCountTextBlock, ItemCountMaxInterpolateDuration) == 0x00034C, "Member 'UFortItemCountTextBlock::ItemCountMaxInterpolateDuration' has a wrong offset!");
static_assert(offsetof(UFortItemCountTextBlock, ItemCountMinInterpolateRate) == 0x000350, "Member 'UFortItemCountTextBlock::ItemCountMinInterpolateRate' has a wrong offset!");

// Class FortniteUI.DiscoCaptureWidgetBase
// 0x0090 (0x02F8 - 0x0268)
class UDiscoCaptureWidgetBase final : public UFortHUDElementWidget
{
public:
	struct FDiscoCaptureUIData                    CaptureUIData;                                     // 0x0268(0x0040)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FDiscoCaptureUIData                    PrevCaptureUIData;                                 // 0x02A8(0x0040)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E8[0x8];                                      // 0x02E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         LastViewedTeam;                                    // 0x02F0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class AAthenaCapturePoint* GetClosestCapturePoint(class AFortPlayerPawnAthena* ViewPawn);
	void OnHandleSpectatingChanged(class AFortPlayerStateZone* SpectatingTarget);
	void OnUpdateCaptureUI(const EDiscoCaptureUIState& CaptureState, const class FText& TextToDisplay, const class UMaterialInstanceDynamic* ImageMID, float FillAmount);
	void UpdateAllUI();
	void UpdateDiscoCaptureUI();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DiscoCaptureWidgetBase">();
	}
	static class UDiscoCaptureWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDiscoCaptureWidgetBase>();
	}
};
static_assert(alignof(UDiscoCaptureWidgetBase) == 0x000008, "Wrong alignment on UDiscoCaptureWidgetBase");
static_assert(sizeof(UDiscoCaptureWidgetBase) == 0x0002F8, "Wrong size on UDiscoCaptureWidgetBase");
static_assert(offsetof(UDiscoCaptureWidgetBase, CaptureUIData) == 0x000268, "Member 'UDiscoCaptureWidgetBase::CaptureUIData' has a wrong offset!");
static_assert(offsetof(UDiscoCaptureWidgetBase, PrevCaptureUIData) == 0x0002A8, "Member 'UDiscoCaptureWidgetBase::PrevCaptureUIData' has a wrong offset!");
static_assert(offsetof(UDiscoCaptureWidgetBase, LastViewedTeam) == 0x0002F0, "Member 'UDiscoCaptureWidgetBase::LastViewedTeam' has a wrong offset!");

// Class FortniteUI.AthenaCountdownWidgetBase
// 0x0000 (0x0268 - 0x0268)
class UAthenaCountdownWidgetBase final : public UFortHUDElementWidget
{
public:
	void HandleCountdownFinished();
	void HandleCountdownStarted(int32 TimeRemaining);
	void HandleCountdownUpdate(int32 TimeRemaining);
	void HandleGamePhaseStepChanged(EAthenaGamePhaseStep Step);
	void OnCountdownFinished();
	void OnCountdownStarted(int32 TimeRemaining, const class FText& CountdownIntroText);
	void OnCountdownUpdate(int32 TimeRemaining, const class FText& CountdownUpdateText);
	void OnDisplayWarningMessage(const class FText& FirstLineText, const class FText& SecondLineText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaCountdownWidgetBase">();
	}
	static class UAthenaCountdownWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaCountdownWidgetBase>();
	}
};
static_assert(alignof(UAthenaCountdownWidgetBase) == 0x000008, "Wrong alignment on UAthenaCountdownWidgetBase");
static_assert(sizeof(UAthenaCountdownWidgetBase) == 0x000268, "Wrong size on UAthenaCountdownWidgetBase");

// Class FortniteUI.AthenaCreativeItemEntryObjectWrapper
// 0x0120 (0x0148 - 0x0028)
class UAthenaCreativeItemEntryObjectWrapper final : public UObject
{
public:
	struct FFortItemEntry                         ItemEntry;                                         // 0x0028(0x0120)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaCreativeItemEntryObjectWrapper">();
	}
	static class UAthenaCreativeItemEntryObjectWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaCreativeItemEntryObjectWrapper>();
	}
};
static_assert(alignof(UAthenaCreativeItemEntryObjectWrapper) == 0x000008, "Wrong alignment on UAthenaCreativeItemEntryObjectWrapper");
static_assert(sizeof(UAthenaCreativeItemEntryObjectWrapper) == 0x000148, "Wrong size on UAthenaCreativeItemEntryObjectWrapper");
static_assert(offsetof(UAthenaCreativeItemEntryObjectWrapper, ItemEntry) == 0x000028, "Member 'UAthenaCreativeItemEntryObjectWrapper::ItemEntry' has a wrong offset!");

// Class FortniteUI.CarmineUIExtenderBase
// 0x0008 (0x0038 - 0x0030)
class UCarmineUIExtenderBase final : public UFortGameUIExtenderAthena
{
public:
	bool                                          bShowGoToBossCommand;                              // 0x0030(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CarmineUIExtenderBase">();
	}
	static class UCarmineUIExtenderBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCarmineUIExtenderBase>();
	}
};
static_assert(alignof(UCarmineUIExtenderBase) == 0x000008, "Wrong alignment on UCarmineUIExtenderBase");
static_assert(sizeof(UCarmineUIExtenderBase) == 0x000038, "Wrong size on UCarmineUIExtenderBase");
static_assert(offsetof(UCarmineUIExtenderBase, bShowGoToBossCommand) == 0x000030, "Member 'UCarmineUIExtenderBase::bShowGoToBossCommand' has a wrong offset!");

// Class FortniteUI.AthenaCreativeItemTileButton
// 0x0138 (0x0C68 - 0x0B30)
class UAthenaCreativeItemTileButton final : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaCreativeItemTileView*            ParentView;                                        // 0x0B38(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0B40(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFortItemEntry                         ItemEntry;                                         // 0x0B48(0x0120)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	static class UAthenaCreativeItemEntryObjectWrapper* MakeFortItemEntryObjectWrapper(class UObject* Target, struct FFortItemEntry& InItemEntry);

	bool CompareToItemEntry(const struct FFortItemEntry& InItemEntry);
	int32 GetItemTypeCount();
	void OnEntryClick(class UAthenaCreativeItemTileButton* Entry);
	void OnLoadedItem();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaCreativeItemTileButton">();
	}
	static class UAthenaCreativeItemTileButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaCreativeItemTileButton>();
	}
};
static_assert(alignof(UAthenaCreativeItemTileButton) == 0x000008, "Wrong alignment on UAthenaCreativeItemTileButton");
static_assert(sizeof(UAthenaCreativeItemTileButton) == 0x000C68, "Wrong size on UAthenaCreativeItemTileButton");
static_assert(offsetof(UAthenaCreativeItemTileButton, ParentView) == 0x000B38, "Member 'UAthenaCreativeItemTileButton::ParentView' has a wrong offset!");
static_assert(offsetof(UAthenaCreativeItemTileButton, ItemDefinition) == 0x000B40, "Member 'UAthenaCreativeItemTileButton::ItemDefinition' has a wrong offset!");
static_assert(offsetof(UAthenaCreativeItemTileButton, ItemEntry) == 0x000B48, "Member 'UAthenaCreativeItemTileButton::ItemEntry' has a wrong offset!");

// Class FortniteUI.AthenaCreativeItemTileView
// 0x0018 (0x0370 - 0x0358)
class UAthenaCreativeItemTileView final : public UCommonTileView
{
public:
	class UFortOptionsTab*                        ParentTab;                                         // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              CurrentlyFocusedItem;                              // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaCreativeItemTileView">();
	}
	static class UAthenaCreativeItemTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaCreativeItemTileView>();
	}
};
static_assert(alignof(UAthenaCreativeItemTileView) == 0x000008, "Wrong alignment on UAthenaCreativeItemTileView");
static_assert(sizeof(UAthenaCreativeItemTileView) == 0x000370, "Wrong size on UAthenaCreativeItemTileView");
static_assert(offsetof(UAthenaCreativeItemTileView, ParentTab) == 0x000358, "Member 'UAthenaCreativeItemTileView::ParentTab' has a wrong offset!");
static_assert(offsetof(UAthenaCreativeItemTileView, CurrentlyFocusedItem) == 0x000360, "Member 'UAthenaCreativeItemTileView::CurrentlyFocusedItem' has a wrong offset!");

// Class FortniteUI.FortLobby
// 0x0018 (0x0338 - 0x0320)
class UFortLobby final : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               OverlayMain;                                       // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void DynamicHandleLoadingScreenVisibilityChanged(bool Param_IsVisible);
	void OnBeginCursorOverPlayer(int32 PlayerIndex);
	void OnEndCursorOverPlayer(int32 PlayerIndex);
	void OnNavigationLeft();
	void OnNavigationRight();
	void OnPlayerClicked(int32 PlayerIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLobby">();
	}
	static class UFortLobby* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLobby>();
	}
};
static_assert(alignof(UFortLobby) == 0x000008, "Wrong alignment on UFortLobby");
static_assert(sizeof(UFortLobby) == 0x000338, "Wrong size on UFortLobby");
static_assert(offsetof(UFortLobby, OverlayMain) == 0x000330, "Member 'UFortLobby::OverlayMain' has a wrong offset!");

// Class FortniteUI.AthenaBaseStatView
// 0x0000 (0x0028 - 0x0028)
class UAthenaBaseStatView : public UObject
{
public:
	float GetStat(const struct FGameplayTag& InStat) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaBaseStatView">();
	}
	static class UAthenaBaseStatView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaBaseStatView>();
	}
};
static_assert(alignof(UAthenaBaseStatView) == 0x000008, "Wrong alignment on UAthenaBaseStatView");
static_assert(sizeof(UAthenaBaseStatView) == 0x000028, "Wrong size on UAthenaBaseStatView");

// Class FortniteUI.AthenaCustomizationPicker
// 0x0098 (0x03A0 - 0x0308)
class UAthenaCustomizationPicker : public UFortItemPickerBase
{
public:
	UMulticastDelegateProperty_                   OnCosmeticSelectionSaving;                         // 0x0308(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnCosmeticSelectionSaved;                          // 0x0318(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnShowSaveButton;                                  // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnHideSaveButton;                                  // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonButton>              FilterTabButtonType;                               // 0x0348(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCommonButtonStyle>         FilterTabButtonStyle;                              // 0x0350(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FFortAthenaItemManagementInventoryFilterTabLabelInfo> FilterTabLabelInfoArray;                           // 0x0358(0x0010)(Edit, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UFortTabListWidgetBase*                 FilterTabList;                                     // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CurrentFilterName;                                 // 0x0370(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EAthenaCustomizationCategory                  CustomizeCategory;                                 // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_379[0x3];                                      // 0x0379(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubslotIndex;                                      // 0x037C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAllowCommits;                                     // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_381[0x17];                                     // 0x0381(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              ItemListeningTo;                                   // 0x0398(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BeginCustomizationCategory(EAthenaCustomizationCategory Category, int32 SubslotToEdit);
	void EndCustomizationCategory();
	void HandleDifferentFilterSetBP();
	void HandleFilterTabButtonCreated(class FName TabNameID, class UCommonButton* TabButton);
	void HandleFilterTabSelected(class FName TabNameID);
	void HandleSelectedItemHasChanged(bool ItemChanged, bool AmmoChanged, bool IngredientsChanged);
	void OnCosmeticChangeSaveEvent__DelegateSignature();
	void OnItemsAvailableInFilter();
	void OnNoItemsAvailableInFilter(const class FText& EmptyDisplayText);
	void OnUpdateSaveButtonVisuals__DelegateSignature();
	void RefreshView(bool CategoryChanging, bool FilterChanged);
	void SetFilter(const class FName FilterName);

	class FText GetQualifiedFilterDisplayName(EAthenaFilterDisplayType InTopFilterDisplaySetting) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaCustomizationPicker">();
	}
	static class UAthenaCustomizationPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaCustomizationPicker>();
	}
};
static_assert(alignof(UAthenaCustomizationPicker) == 0x000008, "Wrong alignment on UAthenaCustomizationPicker");
static_assert(sizeof(UAthenaCustomizationPicker) == 0x0003A0, "Wrong size on UAthenaCustomizationPicker");
static_assert(offsetof(UAthenaCustomizationPicker, OnCosmeticSelectionSaving) == 0x000308, "Member 'UAthenaCustomizationPicker::OnCosmeticSelectionSaving' has a wrong offset!");
static_assert(offsetof(UAthenaCustomizationPicker, OnCosmeticSelectionSaved) == 0x000318, "Member 'UAthenaCustomizationPicker::OnCosmeticSelectionSaved' has a wrong offset!");
static_assert(offsetof(UAthenaCustomizationPicker, OnShowSaveButton) == 0x000328, "Member 'UAthenaCustomizationPicker::OnShowSaveButton' has a wrong offset!");
static_assert(offsetof(UAthenaCustomizationPicker, OnHideSaveButton) == 0x000338, "Member 'UAthenaCustomizationPicker::OnHideSaveButton' has a wrong offset!");
static_assert(offsetof(UAthenaCustomizationPicker, FilterTabButtonType) == 0x000348, "Member 'UAthenaCustomizationPicker::FilterTabButtonType' has a wrong offset!");
static_assert(offsetof(UAthenaCustomizationPicker, FilterTabButtonStyle) == 0x000350, "Member 'UAthenaCustomizationPicker::FilterTabButtonStyle' has a wrong offset!");
static_assert(offsetof(UAthenaCustomizationPicker, FilterTabLabelInfoArray) == 0x000358, "Member 'UAthenaCustomizationPicker::FilterTabLabelInfoArray' has a wrong offset!");
static_assert(offsetof(UAthenaCustomizationPicker, FilterTabList) == 0x000368, "Member 'UAthenaCustomizationPicker::FilterTabList' has a wrong offset!");
static_assert(offsetof(UAthenaCustomizationPicker, CurrentFilterName) == 0x000370, "Member 'UAthenaCustomizationPicker::CurrentFilterName' has a wrong offset!");
static_assert(offsetof(UAthenaCustomizationPicker, CustomizeCategory) == 0x000378, "Member 'UAthenaCustomizationPicker::CustomizeCategory' has a wrong offset!");
static_assert(offsetof(UAthenaCustomizationPicker, SubslotIndex) == 0x00037C, "Member 'UAthenaCustomizationPicker::SubslotIndex' has a wrong offset!");
static_assert(offsetof(UAthenaCustomizationPicker, bAllowCommits) == 0x000380, "Member 'UAthenaCustomizationPicker::bAllowCommits' has a wrong offset!");
static_assert(offsetof(UAthenaCustomizationPicker, ItemListeningTo) == 0x000398, "Member 'UAthenaCustomizationPicker::ItemListeningTo' has a wrong offset!");

// Class FortniteUI.AthenaCustomizationPickerTileButton
// 0x0008 (0x0B70 - 0x0B68)
class UAthenaCustomizationPickerTileButton : public UFortItemTileButton
{
public:
	uint8                                         Pad_B68[0x8];                                      // 0x0B68(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaCustomizationPickerTileButton">();
	}
	static class UAthenaCustomizationPickerTileButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaCustomizationPickerTileButton>();
	}
};
static_assert(alignof(UAthenaCustomizationPickerTileButton) == 0x000008, "Wrong alignment on UAthenaCustomizationPickerTileButton");
static_assert(sizeof(UAthenaCustomizationPickerTileButton) == 0x000B70, "Wrong size on UAthenaCustomizationPickerTileButton");

// Class FortniteUI.VariantObject
// 0x0020 (0x0048 - 0x0028)
class UVariantObject final : public UObject
{
public:
	struct FGameplayTag                           VariantChannel;                                    // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           VariantTag;                                        // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOwned;                                            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaCosmeticItemDefinition*          CosmeticDef;                                       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VariantObject">();
	}
	static class UVariantObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVariantObject>();
	}
};
static_assert(alignof(UVariantObject) == 0x000008, "Wrong alignment on UVariantObject");
static_assert(sizeof(UVariantObject) == 0x000048, "Wrong size on UVariantObject");
static_assert(offsetof(UVariantObject, VariantChannel) == 0x000028, "Member 'UVariantObject::VariantChannel' has a wrong offset!");
static_assert(offsetof(UVariantObject, VariantTag) == 0x000030, "Member 'UVariantObject::VariantTag' has a wrong offset!");
static_assert(offsetof(UVariantObject, bOwned) == 0x000038, "Member 'UVariantObject::bOwned' has a wrong offset!");
static_assert(offsetof(UVariantObject, CosmeticDef) == 0x000040, "Member 'UVariantObject::CosmeticDef' has a wrong offset!");

// Class FortniteUI.AthenaProfileStatContext
// 0x0018 (0x0040 - 0x0028)
class UAthenaProfileStatContext final : public UBlueprintContextBase
{
public:
	UMulticastDelegateProperty_                   OnStatsProfileLoaded;                              // 0x0028(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UAthenaMatchStatView* CreateCurrentMatchStatView();
	class UAthenaMatchSetStatView* CreateMatchStatView(class UAthenaSeasonStats* StatSet, class FName Bucket);
	TArray<class UAthenaMatchStatView*> CreateMatchViews(const TArray<struct FAthenaMatchStats>& InRecentMatches);
	void OnAthenaStatsProfileLoaded__DelegateSignature(class UFortMcpProfileAthenaStats* StatProfile);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaProfileStatContext">();
	}
	static class UAthenaProfileStatContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaProfileStatContext>();
	}
};
static_assert(alignof(UAthenaProfileStatContext) == 0x000008, "Wrong alignment on UAthenaProfileStatContext");
static_assert(sizeof(UAthenaProfileStatContext) == 0x000040, "Wrong size on UAthenaProfileStatContext");
static_assert(offsetof(UAthenaProfileStatContext, OnStatsProfileLoaded) == 0x000028, "Member 'UAthenaProfileStatContext::OnStatsProfileLoaded' has a wrong offset!");

// Class FortniteUI.FortMultiSizeImage
// 0x0358 (0x0460 - 0x0108)
class UFortMultiSizeImage : public UWidget
{
public:
	struct FFortMultiSizeBrush                    MultiSizeBrush;                                    // 0x0108(0x0330)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EFortBrushSize                                BrushSize;                                         // 0x0438(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_439[0x3];                                      // 0x0439(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorAndOpacity;                                   // 0x043C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44C[0x14];                                     // 0x044C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBrushSize(EFortBrushSize Param_BrushSize);
	void SetColorAndOpacity(const struct FLinearColor& Color);
	void SetMultiSizeBrush(const struct FFortMultiSizeBrush& Param_MultiSizeBrush);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMultiSizeImage">();
	}
	static class UFortMultiSizeImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMultiSizeImage>();
	}
};
static_assert(alignof(UFortMultiSizeImage) == 0x000008, "Wrong alignment on UFortMultiSizeImage");
static_assert(sizeof(UFortMultiSizeImage) == 0x000460, "Wrong size on UFortMultiSizeImage");
static_assert(offsetof(UFortMultiSizeImage, MultiSizeBrush) == 0x000108, "Member 'UFortMultiSizeImage::MultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortMultiSizeImage, BrushSize) == 0x000438, "Member 'UFortMultiSizeImage::BrushSize' has a wrong offset!");
static_assert(offsetof(UFortMultiSizeImage, ColorAndOpacity) == 0x00043C, "Member 'UFortMultiSizeImage::ColorAndOpacity' has a wrong offset!");

// Class FortniteUI.FortSimpleItemConditionIconIndicator
// 0x0008 (0x0468 - 0x0460)
class UFortSimpleItemConditionIconIndicator : public UFortMultiSizeImage
{
public:
	bool                                          bShouldCollapseWhenConditionIsFalse;               // 0x0460(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_461[0x7];                                      // 0x0461(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetItemToRepresent(class UFortItem* ItemToRepresent);
	void ShouldCollapseWhenConditionIsFalse(bool Value);

	class UFortItem* GetItemToRepresent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSimpleItemConditionIconIndicator">();
	}
	static class UFortSimpleItemConditionIconIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSimpleItemConditionIconIndicator>();
	}
};
static_assert(alignof(UFortSimpleItemConditionIconIndicator) == 0x000008, "Wrong alignment on UFortSimpleItemConditionIconIndicator");
static_assert(sizeof(UFortSimpleItemConditionIconIndicator) == 0x000468, "Wrong size on UFortSimpleItemConditionIconIndicator");
static_assert(offsetof(UFortSimpleItemConditionIconIndicator, bShouldCollapseWhenConditionIsFalse) == 0x000460, "Member 'UFortSimpleItemConditionIconIndicator::bShouldCollapseWhenConditionIsFalse' has a wrong offset!");

// Class FortniteUI.FortInventoryOverflowIndicator
// 0x0000 (0x0468 - 0x0468)
class UFortInventoryOverflowIndicator final : public UFortSimpleItemConditionIconIndicator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortInventoryOverflowIndicator">();
	}
	static class UFortInventoryOverflowIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortInventoryOverflowIndicator>();
	}
};
static_assert(alignof(UFortInventoryOverflowIndicator) == 0x000008, "Wrong alignment on UFortInventoryOverflowIndicator");
static_assert(sizeof(UFortInventoryOverflowIndicator) == 0x000468, "Wrong size on UFortInventoryOverflowIndicator");

// Class FortniteUI.FortVisualAttachment
// 0x0000 (0x0150 - 0x0150)
class UFortVisualAttachment final : public USizeBox
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVisualAttachment">();
	}
	static class UFortVisualAttachment* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVisualAttachment>();
	}
};
static_assert(alignof(UFortVisualAttachment) == 0x000008, "Wrong alignment on UFortVisualAttachment");
static_assert(sizeof(UFortVisualAttachment) == 0x000150, "Wrong size on UFortVisualAttachment");

// Class FortniteUI.AthenaCustomizationScreenBase
// 0x0378 (0x07B8 - 0x0440)
class UAthenaCustomizationScreenBase : public UFortActivatablePanelWithItemPreview
{
public:
	class FText                                   CategoryDisplayNames[0x12];                        // 0x0440(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   ItemTypeDisplayNames[0x12];                        // 0x05F0(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_7A0[0x10];                                     // 0x07A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         LastProfileRev;                                    // 0x07B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class FText GetCategoryDisplayName(EAthenaCustomizationCategory InCategory);
	class UFortItem* GetFavoriteItemForCategory(EAthenaCustomizationCategory CustomizationType, int32 SubslotIndex);
	class FText GetItemTypeDisplayNames(EAthenaCustomizationCategory InCategory);
	void HandleInventoryUpdated(const TSet<class FString>& ItemChangeFlags, int64 ProfileRevision);
	void HandleLoadoutChanged();
	void ProcessLoadoutChanged();
	void ShiftItemsVariantOption(class UAthenaCosmeticAccountItem* Item, int32 VariantChannelIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaCustomizationScreenBase">();
	}
	static class UAthenaCustomizationScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaCustomizationScreenBase>();
	}
};
static_assert(alignof(UAthenaCustomizationScreenBase) == 0x000008, "Wrong alignment on UAthenaCustomizationScreenBase");
static_assert(sizeof(UAthenaCustomizationScreenBase) == 0x0007B8, "Wrong size on UAthenaCustomizationScreenBase");
static_assert(offsetof(UAthenaCustomizationScreenBase, CategoryDisplayNames) == 0x000440, "Member 'UAthenaCustomizationScreenBase::CategoryDisplayNames' has a wrong offset!");
static_assert(offsetof(UAthenaCustomizationScreenBase, ItemTypeDisplayNames) == 0x0005F0, "Member 'UAthenaCustomizationScreenBase::ItemTypeDisplayNames' has a wrong offset!");
static_assert(offsetof(UAthenaCustomizationScreenBase, LastProfileRev) == 0x0007B0, "Member 'UAthenaCustomizationScreenBase::LastProfileRev' has a wrong offset!");

// Class FortniteUI.AthenaPostMatchScreenBase
// 0x0000 (0x02A0 - 0x02A0)
class UAthenaPostMatchScreenBase final : public UFortActorIndicatorWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaPostMatchScreenBase">();
	}
	static class UAthenaPostMatchScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaPostMatchScreenBase>();
	}
};
static_assert(alignof(UAthenaPostMatchScreenBase) == 0x000008, "Wrong alignment on UAthenaPostMatchScreenBase");
static_assert(sizeof(UAthenaPostMatchScreenBase) == 0x0002A0, "Wrong size on UAthenaPostMatchScreenBase");

// Class FortniteUI.AthenaCustomizationSlotSelectorButton
// 0x0020 (0x0B50 - 0x0B30)
class UAthenaCustomizationSlotSelectorButton : public UCommonButton
{
public:
	EAthenaCustomizationCategory                  CustomizationType;                                 // 0x0B30(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B31[0x3];                                      // 0x0B31(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubslotIndex;                                      // 0x0B34(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortMultiSizeItemCard*                 ItemWidget;                                        // 0x0B38(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B40[0x10];                                     // 0x0B40(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCustomizationType(EAthenaCustomizationCategory NewType, int32 InSubslotIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaCustomizationSlotSelectorButton">();
	}
	static class UAthenaCustomizationSlotSelectorButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaCustomizationSlotSelectorButton>();
	}
};
static_assert(alignof(UAthenaCustomizationSlotSelectorButton) == 0x000008, "Wrong alignment on UAthenaCustomizationSlotSelectorButton");
static_assert(sizeof(UAthenaCustomizationSlotSelectorButton) == 0x000B50, "Wrong size on UAthenaCustomizationSlotSelectorButton");
static_assert(offsetof(UAthenaCustomizationSlotSelectorButton, CustomizationType) == 0x000B30, "Member 'UAthenaCustomizationSlotSelectorButton::CustomizationType' has a wrong offset!");
static_assert(offsetof(UAthenaCustomizationSlotSelectorButton, SubslotIndex) == 0x000B34, "Member 'UAthenaCustomizationSlotSelectorButton::SubslotIndex' has a wrong offset!");
static_assert(offsetof(UAthenaCustomizationSlotSelectorButton, ItemWidget) == 0x000B38, "Member 'UAthenaCustomizationSlotSelectorButton::ItemWidget' has a wrong offset!");

// Class FortniteUI.AthenaEliminationOverlayBase
// 0x0000 (0x0230 - 0x0230)
class UAthenaEliminationOverlayBase final : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaEliminationOverlayBase">();
	}
	static class UAthenaEliminationOverlayBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaEliminationOverlayBase>();
	}
};
static_assert(alignof(UAthenaEliminationOverlayBase) == 0x000008, "Wrong alignment on UAthenaEliminationOverlayBase");
static_assert(sizeof(UAthenaEliminationOverlayBase) == 0x000230, "Wrong size on UAthenaEliminationOverlayBase");

// Class FortniteUI.FortInputReflector
// 0x0000 (0x0268 - 0x0268)
class UFortInputReflector : public UCommonInputReflector
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortInputReflector">();
	}
	static class UFortInputReflector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortInputReflector>();
	}
};
static_assert(alignof(UFortInputReflector) == 0x000008, "Wrong alignment on UFortInputReflector");
static_assert(sizeof(UFortInputReflector) == 0x000268, "Wrong size on UFortInputReflector");

// Class FortniteUI.FortAccountLinkingWindow
// 0x00C8 (0x0410 - 0x0348)
class UFortAccountLinkingWindow : public UFortActivatablePanel
{
public:
	uint8                                         Pad_348[0x70];                                     // 0x0348(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonWidgetSwitcher*                  Switcher_Main;                                     // 0x03B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBackgroundBlur*                        HaveEpicAccountBlur;                               // 0x03C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBackgroundBlur*                        SkipSignInBlur;                                    // 0x03C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonWidgetSwitcher*                  Switcher_NoThanks;                                 // 0x03D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCircularThrobber*                      Throbber_LoginDelay;                               // 0x03D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Signup;                                     // 0x03E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Login;                                      // 0x03E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_NoThanks;                                   // 0x03F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_SkipSignInSignup;                           // 0x03F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_SkipSignInLogin;                            // 0x0400(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_SkipSignInNoThanks;                         // 0x0408(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void FortNewPlatformReceipt__DelegateSignature();
	void HandleLoginClicked();
	void HandleNoThanksClicked();
	void HandleSignupClicked();
	void HandleSkipLoginClicked();
	void HandleSkipNoThanksClicked();
	void HandleSkipSignUpClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAccountLinkingWindow">();
	}
	static class UFortAccountLinkingWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAccountLinkingWindow>();
	}
};
static_assert(alignof(UFortAccountLinkingWindow) == 0x000008, "Wrong alignment on UFortAccountLinkingWindow");
static_assert(sizeof(UFortAccountLinkingWindow) == 0x000410, "Wrong size on UFortAccountLinkingWindow");
static_assert(offsetof(UFortAccountLinkingWindow, Switcher_Main) == 0x0003B8, "Member 'UFortAccountLinkingWindow::Switcher_Main' has a wrong offset!");
static_assert(offsetof(UFortAccountLinkingWindow, HaveEpicAccountBlur) == 0x0003C0, "Member 'UFortAccountLinkingWindow::HaveEpicAccountBlur' has a wrong offset!");
static_assert(offsetof(UFortAccountLinkingWindow, SkipSignInBlur) == 0x0003C8, "Member 'UFortAccountLinkingWindow::SkipSignInBlur' has a wrong offset!");
static_assert(offsetof(UFortAccountLinkingWindow, Switcher_NoThanks) == 0x0003D0, "Member 'UFortAccountLinkingWindow::Switcher_NoThanks' has a wrong offset!");
static_assert(offsetof(UFortAccountLinkingWindow, Throbber_LoginDelay) == 0x0003D8, "Member 'UFortAccountLinkingWindow::Throbber_LoginDelay' has a wrong offset!");
static_assert(offsetof(UFortAccountLinkingWindow, Button_Signup) == 0x0003E0, "Member 'UFortAccountLinkingWindow::Button_Signup' has a wrong offset!");
static_assert(offsetof(UFortAccountLinkingWindow, Button_Login) == 0x0003E8, "Member 'UFortAccountLinkingWindow::Button_Login' has a wrong offset!");
static_assert(offsetof(UFortAccountLinkingWindow, Button_NoThanks) == 0x0003F0, "Member 'UFortAccountLinkingWindow::Button_NoThanks' has a wrong offset!");
static_assert(offsetof(UFortAccountLinkingWindow, Button_SkipSignInSignup) == 0x0003F8, "Member 'UFortAccountLinkingWindow::Button_SkipSignInSignup' has a wrong offset!");
static_assert(offsetof(UFortAccountLinkingWindow, Button_SkipSignInLogin) == 0x000400, "Member 'UFortAccountLinkingWindow::Button_SkipSignInLogin' has a wrong offset!");
static_assert(offsetof(UFortAccountLinkingWindow, Button_SkipSignInNoThanks) == 0x000408, "Member 'UFortAccountLinkingWindow::Button_SkipSignInNoThanks' has a wrong offset!");

// Class FortniteUI.FortLegacySlateBridgeWidget
// 0x0018 (0x0130 - 0x0118)
class UFortLegacySlateBridgeWidget final : public UNativeWidgetHost
{
public:
	EFortLegacySlateWidget                        ContainedWidgetType;                               // 0x0118(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DPIScaleFactor;                                    // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TDelegate<void()>                             OnClose;                                           // 0x0120(0x0010)(ZeroConstructor, Transient, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate)

public:
	void SetOnCloseHandler(const TDelegate<void()>& OnCloseHandler);
	void UpdateSlateWidget(EFortLegacySlateWidget SlateWidgetType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLegacySlateBridgeWidget">();
	}
	static class UFortLegacySlateBridgeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLegacySlateBridgeWidget>();
	}
};
static_assert(alignof(UFortLegacySlateBridgeWidget) == 0x000008, "Wrong alignment on UFortLegacySlateBridgeWidget");
static_assert(sizeof(UFortLegacySlateBridgeWidget) == 0x000130, "Wrong size on UFortLegacySlateBridgeWidget");
static_assert(offsetof(UFortLegacySlateBridgeWidget, ContainedWidgetType) == 0x000118, "Member 'UFortLegacySlateBridgeWidget::ContainedWidgetType' has a wrong offset!");
static_assert(offsetof(UFortLegacySlateBridgeWidget, DPIScaleFactor) == 0x00011C, "Member 'UFortLegacySlateBridgeWidget::DPIScaleFactor' has a wrong offset!");
static_assert(offsetof(UFortLegacySlateBridgeWidget, OnClose) == 0x000120, "Member 'UFortLegacySlateBridgeWidget::OnClose' has a wrong offset!");

// Class FortniteUI.AthenaEquippedItemBase
// 0x0020 (0x03B0 - 0x0390)
class UAthenaEquippedItemBase final : public UBacchusHUDElement
{
public:
	EEquippedWeaponDisplay                        CurrentMode;                                       // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaPlayerViewModel*                 VM;                                                // 0x0398(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A0[0x10];                                     // 0x03A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AmmoChanged(int32 MagazineAmmoCount, int32 BackupAmmoCount, int32 TotalRemaining);
	void AmmoTypeChanged(class AFortWeaponRanged* RangedWeapon, class UFortWorldItemDefinition* Item);
	void HasAmmoChanged(bool bHasAmmo);
	void OnBuildingMaterialChanged();
	void OnLocalAmmoChanged(int32 LocalCount, int32 LocalRemaining);
	void OnViewTargetChanged();
	void OnWeaponChanged(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	void OnWorldItemsChanged();
	void ResourceCountChanged(int32 ResourceCount);
	void ResourceTypeChanged(class UFortResourceItemDefinition* Item, int32 ResourceCount);
	void SetViewModel(class UAthenaPlayerViewModel* ViewModel);
	void UtilityItemCountChanged(int32 Remaining);
	void UtilityItemTypeChanged(class AFortWeapon* Weapon, class UFortWeaponItemDefinition* Item);
	void WeaponTypeChanged(EEquippedWeaponDisplay Mode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaEquippedItemBase">();
	}
	static class UAthenaEquippedItemBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaEquippedItemBase>();
	}
};
static_assert(alignof(UAthenaEquippedItemBase) == 0x000008, "Wrong alignment on UAthenaEquippedItemBase");
static_assert(sizeof(UAthenaEquippedItemBase) == 0x0003B0, "Wrong size on UAthenaEquippedItemBase");
static_assert(offsetof(UAthenaEquippedItemBase, CurrentMode) == 0x000390, "Member 'UAthenaEquippedItemBase::CurrentMode' has a wrong offset!");
static_assert(offsetof(UAthenaEquippedItemBase, VM) == 0x000398, "Member 'UAthenaEquippedItemBase::VM' has a wrong offset!");

// Class FortniteUI.FortAffiliateEntryData
// 0x0010 (0x0038 - 0x0028)
class UFortAffiliateEntryData final : public UObject
{
public:
	class FString                                 AffiliateName;                                     // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAffiliateEntryData">();
	}
	static class UFortAffiliateEntryData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAffiliateEntryData>();
	}
};
static_assert(alignof(UFortAffiliateEntryData) == 0x000008, "Wrong alignment on UFortAffiliateEntryData");
static_assert(sizeof(UFortAffiliateEntryData) == 0x000038, "Wrong size on UFortAffiliateEntryData");
static_assert(offsetof(UFortAffiliateEntryData, AffiliateName) == 0x000028, "Member 'UFortAffiliateEntryData::AffiliateName' has a wrong offset!");

// Class FortniteUI.AthenaEventGamesBase
// 0x0000 (0x0348 - 0x0348)
class UAthenaEventGamesBase final : public UFortActivatablePanel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaEventGamesBase">();
	}
	static class UAthenaEventGamesBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaEventGamesBase>();
	}
};
static_assert(alignof(UAthenaEventGamesBase) == 0x000008, "Wrong alignment on UAthenaEventGamesBase");
static_assert(sizeof(UAthenaEventGamesBase) == 0x000348, "Wrong size on UAthenaEventGamesBase");

// Class FortniteUI.AthenaEventScreenBase
// 0x0000 (0x0348 - 0x0348)
class UAthenaEventScreenBase : public UFortActivatablePanel
{
public:
	void OnPlayerDataAdded(class UAthenaRemotePlayerViewData* InPlayerData);
	void OnSquadDataAdded(class UAthenaRemoteSquadViewData* InPlayerData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaEventScreenBase">();
	}
	static class UAthenaEventScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaEventScreenBase>();
	}
};
static_assert(alignof(UAthenaEventScreenBase) == 0x000008, "Wrong alignment on UAthenaEventScreenBase");
static_assert(sizeof(UAthenaEventScreenBase) == 0x000348, "Wrong size on UAthenaEventScreenBase");

// Class FortniteUI.FortAccountStatsContext
// 0x0000 (0x0028 - 0x0028)
class UFortAccountStatsContext final : public UBlueprintContextBase
{
public:
	bool CanShowAccountStats() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAccountStatsContext">();
	}
	static class UFortAccountStatsContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAccountStatsContext>();
	}
};
static_assert(alignof(UFortAccountStatsContext) == 0x000008, "Wrong alignment on UFortAccountStatsContext");
static_assert(sizeof(UFortAccountStatsContext) == 0x000028, "Wrong size on UFortAccountStatsContext");

// Class FortniteUI.FortFriendLinkPanel
// 0x0008 (0x0350 - 0x0348)
class UFortFriendLinkPanel : public UFortActivatablePanel
{
public:
	class UCommonButton*                          Button_ShareButton;                                // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnCopiedToClipboard();
	void OnShareButtonTypeSet(EShareButtonType Type);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortFriendLinkPanel">();
	}
	static class UFortFriendLinkPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortFriendLinkPanel>();
	}
};
static_assert(alignof(UFortFriendLinkPanel) == 0x000008, "Wrong alignment on UFortFriendLinkPanel");
static_assert(sizeof(UFortFriendLinkPanel) == 0x000350, "Wrong size on UFortFriendLinkPanel");
static_assert(offsetof(UFortFriendLinkPanel, Button_ShareButton) == 0x000348, "Member 'UFortFriendLinkPanel::Button_ShareButton' has a wrong offset!");

// Class FortniteUI.AthenaEventMatchActiveGridScreenBase
// 0x0028 (0x0370 - 0x0348)
class UAthenaEventMatchActiveGridScreenBase final : public UAthenaEventScreenBase
{
public:
	TSubclassOf<class UAthenaEventMatchTeamWidgetBase> TeamWidgetClass;                                   // 0x0348(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UAthenaEventMatchTeamWidgetBase*> ActiveTeams;                                       // 0x0350(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	int32                                         MaxNumColumns;                                     // 0x0360(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxTeamCount;                                      // 0x0364(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxTeamSize;                                       // 0x0368(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTeamChanged_BP();
	void OnTeamEliminated(int32 InSquadId);
	void OnTeamEliminated_BP();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaEventMatchActiveGridScreenBase">();
	}
	static class UAthenaEventMatchActiveGridScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaEventMatchActiveGridScreenBase>();
	}
};
static_assert(alignof(UAthenaEventMatchActiveGridScreenBase) == 0x000008, "Wrong alignment on UAthenaEventMatchActiveGridScreenBase");
static_assert(sizeof(UAthenaEventMatchActiveGridScreenBase) == 0x000370, "Wrong size on UAthenaEventMatchActiveGridScreenBase");
static_assert(offsetof(UAthenaEventMatchActiveGridScreenBase, TeamWidgetClass) == 0x000348, "Member 'UAthenaEventMatchActiveGridScreenBase::TeamWidgetClass' has a wrong offset!");
static_assert(offsetof(UAthenaEventMatchActiveGridScreenBase, ActiveTeams) == 0x000350, "Member 'UAthenaEventMatchActiveGridScreenBase::ActiveTeams' has a wrong offset!");
static_assert(offsetof(UAthenaEventMatchActiveGridScreenBase, MaxNumColumns) == 0x000360, "Member 'UAthenaEventMatchActiveGridScreenBase::MaxNumColumns' has a wrong offset!");
static_assert(offsetof(UAthenaEventMatchActiveGridScreenBase, MaxTeamCount) == 0x000364, "Member 'UAthenaEventMatchActiveGridScreenBase::MaxTeamCount' has a wrong offset!");
static_assert(offsetof(UAthenaEventMatchActiveGridScreenBase, MaxTeamSize) == 0x000368, "Member 'UAthenaEventMatchActiveGridScreenBase::MaxTeamSize' has a wrong offset!");

// Class FortniteUI.FortVariantPicker
// 0x0020 (0x0258 - 0x0238)
class UFortVariantPicker : public UCommonUserWidget
{
public:
	UMulticastDelegateProperty_                   OnVariantChanged;                                  // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UScrollBox*                             ScrollBox_Variants;                                // 0x0248(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortVariantEntryBox*                   EntryBox_VariantOptions;                           // 0x0250(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void InitFromCosmeticItem(class UAthenaCosmeticAccountItem* InCosmeticItem);
	void InitFromCosmeticItemDef(class UAthenaCosmeticItemDefinition* InCosmeticItemDef);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVariantPicker">();
	}
	static class UFortVariantPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVariantPicker>();
	}
};
static_assert(alignof(UFortVariantPicker) == 0x000008, "Wrong alignment on UFortVariantPicker");
static_assert(sizeof(UFortVariantPicker) == 0x000258, "Wrong size on UFortVariantPicker");
static_assert(offsetof(UFortVariantPicker, OnVariantChanged) == 0x000238, "Member 'UFortVariantPicker::OnVariantChanged' has a wrong offset!");
static_assert(offsetof(UFortVariantPicker, ScrollBox_Variants) == 0x000248, "Member 'UFortVariantPicker::ScrollBox_Variants' has a wrong offset!");
static_assert(offsetof(UFortVariantPicker, EntryBox_VariantOptions) == 0x000250, "Member 'UFortVariantPicker::EntryBox_VariantOptions' has a wrong offset!");

// Class FortniteUI.AthenaEventMatchEliminatedGridScreenBase
// 0x0028 (0x0370 - 0x0348)
class UAthenaEventMatchEliminatedGridScreenBase final : public UAthenaEventScreenBase
{
public:
	TSubclassOf<class UAthenaEventMatchTeamWidgetBase> TeamWidgetClass;                                   // 0x0348(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UAthenaEventMatchTeamWidgetBase*> EliminatedTeams;                                   // 0x0350(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	int32                                         MaxNumColumns;                                     // 0x0360(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxTeamCount;                                      // 0x0364(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxTeamSize;                                       // 0x0368(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerEliminatedStateChanged(class UAthenaRemotePlayerViewData* InPlayerData, bool bInIsEliminated);
	void OnTeamEliminated_BP();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaEventMatchEliminatedGridScreenBase">();
	}
	static class UAthenaEventMatchEliminatedGridScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaEventMatchEliminatedGridScreenBase>();
	}
};
static_assert(alignof(UAthenaEventMatchEliminatedGridScreenBase) == 0x000008, "Wrong alignment on UAthenaEventMatchEliminatedGridScreenBase");
static_assert(sizeof(UAthenaEventMatchEliminatedGridScreenBase) == 0x000370, "Wrong size on UAthenaEventMatchEliminatedGridScreenBase");
static_assert(offsetof(UAthenaEventMatchEliminatedGridScreenBase, TeamWidgetClass) == 0x000348, "Member 'UAthenaEventMatchEliminatedGridScreenBase::TeamWidgetClass' has a wrong offset!");
static_assert(offsetof(UAthenaEventMatchEliminatedGridScreenBase, EliminatedTeams) == 0x000350, "Member 'UAthenaEventMatchEliminatedGridScreenBase::EliminatedTeams' has a wrong offset!");
static_assert(offsetof(UAthenaEventMatchEliminatedGridScreenBase, MaxNumColumns) == 0x000360, "Member 'UAthenaEventMatchEliminatedGridScreenBase::MaxNumColumns' has a wrong offset!");
static_assert(offsetof(UAthenaEventMatchEliminatedGridScreenBase, MaxTeamCount) == 0x000364, "Member 'UAthenaEventMatchEliminatedGridScreenBase::MaxTeamCount' has a wrong offset!");
static_assert(offsetof(UAthenaEventMatchEliminatedGridScreenBase, MaxTeamSize) == 0x000368, "Member 'UAthenaEventMatchEliminatedGridScreenBase::MaxTeamSize' has a wrong offset!");

// Class FortniteUI.AthenaEventMatchPlayerWidgetBase
// 0x0010 (0x0B40 - 0x0B30)
class UAthenaEventMatchPlayerWidgetBase : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UAthenaRemotePlayerViewData> PlayerData;                                        // 0x0B38(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnBeingRevivedStateChanged(class UAthenaRemotePlayerViewData* InPlayerData, bool bIsBeingRevived);
	void OnDBNOStateChanged(class UAthenaRemotePlayerViewData* InPlayerData, bool bIsDBNO);
	void OnDeadStateChanged(class UAthenaRemotePlayerViewData* InPlayerData, bool bIsDead);
	void OnDisconnectedChanged(class UAthenaRemotePlayerViewData* InPlayerData, bool bIsDisconnected);
	void OnHealthDamaged(class UAthenaRemotePlayerViewData* InPlayerData, float InHealthPercent);
	void OnHealthHealed(class UAthenaRemotePlayerViewData* InPlayerData, float InHealthPercent);
	void OnIsFollowedPlayerChanged(class UAthenaRemotePlayerViewData* InPlayerData, bool bInIsFollowedPlayer);
	void OnIsInRelevancyChanged(class UAthenaRemotePlayerViewData* InPlayerData, bool bInIsInRelevancy);
	void OnIsReplayRelevancyPlayerChanged(class UAthenaRemotePlayerViewData* InPlayerData, bool bInIsReplayRelevancyPlayer);
	void OnKillScoreChanged(class UAthenaRemotePlayerViewData* InPlayerData, int32 InKillScore);
	void OnLocationChanged(class UAthenaRemotePlayerViewData* InPlayerData, const class FString& InLocation);
	void OnMaterialCountChanged(class UAthenaRemotePlayerViewData* InPlayerData, int32 InCount);
	void OnPlaceChanged(class UAthenaRemotePlayerViewData* InPlayerData, int32 InPlace);
	void OnPlayerDataChanged(class UAthenaRemotePlayerViewData* InPlayerData);
	void OnPlayerNameChanged(class UAthenaRemotePlayerViewData* InPlayerData, const class FString& InPlayerName);
	void OnPlayerPawnChanged(class UAthenaRemotePlayerViewData* InPlayerData, class AFortPlayerPawn* InPlayerPawn);
	void OnPlayerStateChanged(class UAthenaRemotePlayerViewData* InPlayerData, class AFortPlayerStateAthena* InPlayerState);
	void OnShieldDamaged(class UAthenaRemotePlayerViewData* InPlayerData, float InShieldPercent);
	void OnShieldHealed(class UAthenaRemotePlayerViewData* InPlayerData, float InShieldPercent);
	void OnSquadIdChanged(class UAthenaRemotePlayerViewData* InPlayerData, uint8 InSquadId);
	void OnStormcapScoreChanged(class UAthenaRemotePlayerViewData* InPlayerData, float InScore);
	void OnTeamColorChanged(class UAthenaRemotePlayerViewData* InPlayerData, const struct FLinearColor& InTeamColor);
	void SetPlayerData(class UAthenaRemotePlayerViewData* InPlayerData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaEventMatchPlayerWidgetBase">();
	}
	static class UAthenaEventMatchPlayerWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaEventMatchPlayerWidgetBase>();
	}
};
static_assert(alignof(UAthenaEventMatchPlayerWidgetBase) == 0x000008, "Wrong alignment on UAthenaEventMatchPlayerWidgetBase");
static_assert(sizeof(UAthenaEventMatchPlayerWidgetBase) == 0x000B40, "Wrong size on UAthenaEventMatchPlayerWidgetBase");
static_assert(offsetof(UAthenaEventMatchPlayerWidgetBase, PlayerData) == 0x000B38, "Member 'UAthenaEventMatchPlayerWidgetBase::PlayerData' has a wrong offset!");

// Class FortniteUI.FortItemDetailsActivatablePanel
// 0x0038 (0x0358 - 0x0320)
class UFortItemDetailsActivatablePanel : public UCommonActivatablePanel
{
public:
	TWeakObjectPtr<class UFortItem>               ItemToDetail;                                      // 0x0320(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFortItem>               ItemToCompareWith;                                 // 0x0328(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFortItemManagementScreen> HostItemManagementScreen;                          // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_338[0x20];                                     // 0x0338(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleConsumeItemProgressChangedBP();
	void HandleDifferentItemToCompareSetBP();
	void HandleDifferentItemToDetailSetBP();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemDetailsActivatablePanel">();
	}
	static class UFortItemDetailsActivatablePanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemDetailsActivatablePanel>();
	}
};
static_assert(alignof(UFortItemDetailsActivatablePanel) == 0x000008, "Wrong alignment on UFortItemDetailsActivatablePanel");
static_assert(sizeof(UFortItemDetailsActivatablePanel) == 0x000358, "Wrong size on UFortItemDetailsActivatablePanel");
static_assert(offsetof(UFortItemDetailsActivatablePanel, ItemToDetail) == 0x000320, "Member 'UFortItemDetailsActivatablePanel::ItemToDetail' has a wrong offset!");
static_assert(offsetof(UFortItemDetailsActivatablePanel, ItemToCompareWith) == 0x000328, "Member 'UFortItemDetailsActivatablePanel::ItemToCompareWith' has a wrong offset!");
static_assert(offsetof(UFortItemDetailsActivatablePanel, HostItemManagementScreen) == 0x000330, "Member 'UFortItemDetailsActivatablePanel::HostItemManagementScreen' has a wrong offset!");

// Class FortniteUI.FortItemDetailsModeActivatablePanel
// 0x0008 (0x0360 - 0x0358)
class UFortItemDetailsModeActivatablePanel final : public UFortItemDetailsActivatablePanel
{
public:
	class UCommonWidgetSwitcher*                  DetailPanelWidgetSwitcher;                         // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void HandleOnActiveWidgetChanged(class UWidget* ActiveWidget, int32 ActiveWidgetIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemDetailsModeActivatablePanel">();
	}
	static class UFortItemDetailsModeActivatablePanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemDetailsModeActivatablePanel>();
	}
};
static_assert(alignof(UFortItemDetailsModeActivatablePanel) == 0x000008, "Wrong alignment on UFortItemDetailsModeActivatablePanel");
static_assert(sizeof(UFortItemDetailsModeActivatablePanel) == 0x000360, "Wrong size on UFortItemDetailsModeActivatablePanel");
static_assert(offsetof(UFortItemDetailsModeActivatablePanel, DetailPanelWidgetSwitcher) == 0x000358, "Member 'UFortItemDetailsModeActivatablePanel::DetailPanelWidgetSwitcher' has a wrong offset!");

// Class FortniteUI.FortAbilitiesPageTileBase
// 0x0028 (0x0B58 - 0x0B30)
class UFortAbilitiesPageTileBase final : public UCommonButton
{
public:
	class UCommonWidgetSwitcher*                  SwitcherAbilityBindingSwitcher;                    // 0x0B30(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortKeybindWidget*                     KeybindAbilityKeybind;                             // 0x0B38(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortKeybindWidget*                     KeybindAbilityKeybindCombo1;                       // 0x0B40(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortKeybindWidget*                     KeybindAbilityKeybindCombo2;                       // 0x0B48(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         QuickBarSlot;                                      // 0x0B50(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B54[0x4];                                      // 0x0B54(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateGamepadKeyBindingText();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAbilitiesPageTileBase">();
	}
	static class UFortAbilitiesPageTileBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAbilitiesPageTileBase>();
	}
};
static_assert(alignof(UFortAbilitiesPageTileBase) == 0x000008, "Wrong alignment on UFortAbilitiesPageTileBase");
static_assert(sizeof(UFortAbilitiesPageTileBase) == 0x000B58, "Wrong size on UFortAbilitiesPageTileBase");
static_assert(offsetof(UFortAbilitiesPageTileBase, SwitcherAbilityBindingSwitcher) == 0x000B30, "Member 'UFortAbilitiesPageTileBase::SwitcherAbilityBindingSwitcher' has a wrong offset!");
static_assert(offsetof(UFortAbilitiesPageTileBase, KeybindAbilityKeybind) == 0x000B38, "Member 'UFortAbilitiesPageTileBase::KeybindAbilityKeybind' has a wrong offset!");
static_assert(offsetof(UFortAbilitiesPageTileBase, KeybindAbilityKeybindCombo1) == 0x000B40, "Member 'UFortAbilitiesPageTileBase::KeybindAbilityKeybindCombo1' has a wrong offset!");
static_assert(offsetof(UFortAbilitiesPageTileBase, KeybindAbilityKeybindCombo2) == 0x000B48, "Member 'UFortAbilitiesPageTileBase::KeybindAbilityKeybindCombo2' has a wrong offset!");
static_assert(offsetof(UFortAbilitiesPageTileBase, QuickBarSlot) == 0x000B50, "Member 'UFortAbilitiesPageTileBase::QuickBarSlot' has a wrong offset!");

// Class FortniteUI.AthenaEventMatchScoreboardPlayerWidgetBase
// 0x0000 (0x0B40 - 0x0B40)
class UAthenaEventMatchScoreboardPlayerWidgetBase final : public UAthenaEventMatchPlayerWidgetBase
{
public:
	void SetSquadIdVisible(bool InVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaEventMatchScoreboardPlayerWidgetBase">();
	}
	static class UAthenaEventMatchScoreboardPlayerWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaEventMatchScoreboardPlayerWidgetBase>();
	}
};
static_assert(alignof(UAthenaEventMatchScoreboardPlayerWidgetBase) == 0x000008, "Wrong alignment on UAthenaEventMatchScoreboardPlayerWidgetBase");
static_assert(sizeof(UAthenaEventMatchScoreboardPlayerWidgetBase) == 0x000B40, "Wrong size on UAthenaEventMatchScoreboardPlayerWidgetBase");

// Class FortniteUI.FortActorCanvasSlot
// 0x0010 (0x0048 - 0x0038)
class UFortActorCanvasSlot final : public UPanelSlot
{
public:
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanAutoRemove;                                    // 0x003A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0xD];                                       // 0x003B(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCanAutoRemove(bool bAllowAutoRemove);
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActorCanvasSlot">();
	}
	static class UFortActorCanvasSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActorCanvasSlot>();
	}
};
static_assert(alignof(UFortActorCanvasSlot) == 0x000008, "Wrong alignment on UFortActorCanvasSlot");
static_assert(sizeof(UFortActorCanvasSlot) == 0x000048, "Wrong size on UFortActorCanvasSlot");
static_assert(offsetof(UFortActorCanvasSlot, HorizontalAlignment) == 0x000038, "Member 'UFortActorCanvasSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UFortActorCanvasSlot, VerticalAlignment) == 0x000039, "Member 'UFortActorCanvasSlot::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UFortActorCanvasSlot, bCanAutoRemove) == 0x00003A, "Member 'UFortActorCanvasSlot::bCanAutoRemove' has a wrong offset!");

// Class FortniteUI.FortLeaderboardEntryWidget
// 0x0010 (0x0B40 - 0x0B30)
class UFortLeaderboardEntryWidget : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                LeaderboardEntryObject;                            // 0x0B38(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLeaderboardEntryWidget">();
	}
	static class UFortLeaderboardEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLeaderboardEntryWidget>();
	}
};
static_assert(alignof(UFortLeaderboardEntryWidget) == 0x000008, "Wrong alignment on UFortLeaderboardEntryWidget");
static_assert(sizeof(UFortLeaderboardEntryWidget) == 0x000B40, "Wrong size on UFortLeaderboardEntryWidget");
static_assert(offsetof(UFortLeaderboardEntryWidget, LeaderboardEntryObject) == 0x000B38, "Member 'UFortLeaderboardEntryWidget::LeaderboardEntryObject' has a wrong offset!");

// Class FortniteUI.AthenaEventMatchScoreboardScreenBase
// 0x0060 (0x03A8 - 0x0348)
class UAthenaEventMatchScoreboardScreenBase final : public UAthenaEventScreenBase
{
public:
	class UCommonListView*                        ScoreboardListView;                                // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    ToggleSquadIdsActionRowHandle;                     // 0x0350(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    ToggleStormcapDamageActionRowHandle;               // 0x0360(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    SortByEliminationsActionRowHandle;                 // 0x0370(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    SortByPlaceActionRowHandle;                        // 0x0380(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UAthenaRemoteSquadViewData*>     SquadDataArray;                                    // 0x0390(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A0[0x8];                                      // 0x03A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSortByEliminationsActionExecuted(bool* bPassThrough);
	void OnSortByPlaceActionExecuted(bool* bPassThrough);
	void OnSquadEliminated(class UAthenaRemoteSquadViewData* InSquadData);
	void OnSquadKillscoreChanged(class UAthenaRemoteSquadViewData* InSquadData, int32 InKillScore);
	void OnToggleSquadIdsActionExecuted(bool* bPassThrough);
	void OnToggleStormcapDamageActionExecuted(bool* bPassThrough);
	void SetSquadIdsVisible(bool InVisible);
	void SetStormcapDamageVisible(bool InVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaEventMatchScoreboardScreenBase">();
	}
	static class UAthenaEventMatchScoreboardScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaEventMatchScoreboardScreenBase>();
	}
};
static_assert(alignof(UAthenaEventMatchScoreboardScreenBase) == 0x000008, "Wrong alignment on UAthenaEventMatchScoreboardScreenBase");
static_assert(sizeof(UAthenaEventMatchScoreboardScreenBase) == 0x0003A8, "Wrong size on UAthenaEventMatchScoreboardScreenBase");
static_assert(offsetof(UAthenaEventMatchScoreboardScreenBase, ScoreboardListView) == 0x000348, "Member 'UAthenaEventMatchScoreboardScreenBase::ScoreboardListView' has a wrong offset!");
static_assert(offsetof(UAthenaEventMatchScoreboardScreenBase, ToggleSquadIdsActionRowHandle) == 0x000350, "Member 'UAthenaEventMatchScoreboardScreenBase::ToggleSquadIdsActionRowHandle' has a wrong offset!");
static_assert(offsetof(UAthenaEventMatchScoreboardScreenBase, ToggleStormcapDamageActionRowHandle) == 0x000360, "Member 'UAthenaEventMatchScoreboardScreenBase::ToggleStormcapDamageActionRowHandle' has a wrong offset!");
static_assert(offsetof(UAthenaEventMatchScoreboardScreenBase, SortByEliminationsActionRowHandle) == 0x000370, "Member 'UAthenaEventMatchScoreboardScreenBase::SortByEliminationsActionRowHandle' has a wrong offset!");
static_assert(offsetof(UAthenaEventMatchScoreboardScreenBase, SortByPlaceActionRowHandle) == 0x000380, "Member 'UAthenaEventMatchScoreboardScreenBase::SortByPlaceActionRowHandle' has a wrong offset!");
static_assert(offsetof(UAthenaEventMatchScoreboardScreenBase, SquadDataArray) == 0x000390, "Member 'UAthenaEventMatchScoreboardScreenBase::SquadDataArray' has a wrong offset!");

// Class FortniteUI.FortDisableAutoSlottingPromptAction
// 0x0020 (0x0048 - 0x0028)
class UFortDisableAutoSlottingPromptAction final : public UObject
{
public:
	TWeakObjectPtr<class APlayerController>       OwningPlayerController;                            // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UGameInstance>           RegisteredWithGameInstance;                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CompleteExecution(const EFortDialogResult Result, const class FName ResultName);
	void Execute();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDisableAutoSlottingPromptAction">();
	}
	static class UFortDisableAutoSlottingPromptAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDisableAutoSlottingPromptAction>();
	}
};
static_assert(alignof(UFortDisableAutoSlottingPromptAction) == 0x000008, "Wrong alignment on UFortDisableAutoSlottingPromptAction");
static_assert(sizeof(UFortDisableAutoSlottingPromptAction) == 0x000048, "Wrong size on UFortDisableAutoSlottingPromptAction");
static_assert(offsetof(UFortDisableAutoSlottingPromptAction, OwningPlayerController) == 0x000028, "Member 'UFortDisableAutoSlottingPromptAction::OwningPlayerController' has a wrong offset!");
static_assert(offsetof(UFortDisableAutoSlottingPromptAction, RegisteredWithGameInstance) == 0x000040, "Member 'UFortDisableAutoSlottingPromptAction::RegisteredWithGameInstance' has a wrong offset!");

// Class FortniteUI.TryHardCountdownWidget
// 0x0018 (0x0280 - 0x0268)
class UTryHardCountdownWidget final : public UFortHUDElementWidget
{
public:
	uint8                                         Pad_268[0x8];                                      // 0x0268(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumToStartShowingAt;                               // 0x0270(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_274[0xC];                                      // 0x0274(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HideWidget();
	void OnGamePhaseStepChanged(EAthenaGamePhaseStep GamePhaseStep);
	void OnHandleSpectatingChanged(class AFortPlayerStateZone* SpectatingTarget);
	void ShowWidget(int32 NumRemaining);
	void UpdateNumber(int32 NumRemaining);

	bool IsShowing() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TryHardCountdownWidget">();
	}
	static class UTryHardCountdownWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTryHardCountdownWidget>();
	}
};
static_assert(alignof(UTryHardCountdownWidget) == 0x000008, "Wrong alignment on UTryHardCountdownWidget");
static_assert(sizeof(UTryHardCountdownWidget) == 0x000280, "Wrong size on UTryHardCountdownWidget");
static_assert(offsetof(UTryHardCountdownWidget, NumToStartShowingAt) == 0x000270, "Member 'UTryHardCountdownWidget::NumToStartShowingAt' has a wrong offset!");

// Class FortniteUI.AthenaEventMatchScoreboardSquadWidget
// 0x0008 (0x0248 - 0x0240)
class UAthenaEventMatchScoreboardSquadWidget final : public UAthenaEventMatchSquadWidgetBase
{
public:
	uint8                                         Pad_240[0x8];                                      // 0x0240(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaEventMatchScoreboardSquadWidget">();
	}
	static class UAthenaEventMatchScoreboardSquadWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaEventMatchScoreboardSquadWidget>();
	}
};
static_assert(alignof(UAthenaEventMatchScoreboardSquadWidget) == 0x000008, "Wrong alignment on UAthenaEventMatchScoreboardSquadWidget");
static_assert(sizeof(UAthenaEventMatchScoreboardSquadWidget) == 0x000248, "Wrong size on UAthenaEventMatchScoreboardSquadWidget");

// Class FortniteUI.FortAlterationsWidget
// 0x0078 (0x02B0 - 0x0238)
class UFortAlterationsWidget : public UCommonUserWidget
{
public:
	class UFortItem*                              Item;                                              // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAlterationWidgetState                    State;                                             // 0x0240(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              ItemToCompareWith;                                 // 0x0248(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseButtons;                                       // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_251[0x37];                                     // 0x0251(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       EmptyText;                                         // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonGroup*                     ButtonGroup;                                       // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_298[0x18];                                     // 0x0298(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleAlterationsSlotHovered(class UCommonButton* InAlterationButton, int32 SelectedIndex);
	void HandleAlterationsSlotSelected(class UCommonButton* InAlterationButton, int32 SelectedIndex);
	void OnAlterationSlotIndexModifiedBP(int32 ModifiedIndex);
	void OnFocusFirstItem();
	void OnGenerateAlteration(class UFortAlterationInfo* AlterationInfo);
	void OnItemChanged(bool bIntroAlterations);
	void OnItemToCompareWithChanged();
	void OnStateChanged();
	void ProcessAlterations();
	void SetItem(class UFortItem* InItem, bool bInPreviewNewAlterations, bool bIntroAlterations);
	void SetItemToCompareWith(class UFortItem* InItem);
	void SetState(EFortAlterationWidgetState InState);
	void SetupInteractionEvents(class UFortAlterationButtonWidget* Buttion);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAlterationsWidget">();
	}
	static class UFortAlterationsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAlterationsWidget>();
	}
};
static_assert(alignof(UFortAlterationsWidget) == 0x000008, "Wrong alignment on UFortAlterationsWidget");
static_assert(sizeof(UFortAlterationsWidget) == 0x0002B0, "Wrong size on UFortAlterationsWidget");
static_assert(offsetof(UFortAlterationsWidget, Item) == 0x000238, "Member 'UFortAlterationsWidget::Item' has a wrong offset!");
static_assert(offsetof(UFortAlterationsWidget, State) == 0x000240, "Member 'UFortAlterationsWidget::State' has a wrong offset!");
static_assert(offsetof(UFortAlterationsWidget, ItemToCompareWith) == 0x000248, "Member 'UFortAlterationsWidget::ItemToCompareWith' has a wrong offset!");
static_assert(offsetof(UFortAlterationsWidget, bUseButtons) == 0x000250, "Member 'UFortAlterationsWidget::bUseButtons' has a wrong offset!");
static_assert(offsetof(UFortAlterationsWidget, EmptyText) == 0x000288, "Member 'UFortAlterationsWidget::EmptyText' has a wrong offset!");
static_assert(offsetof(UFortAlterationsWidget, ButtonGroup) == 0x000290, "Member 'UFortAlterationsWidget::ButtonGroup' has a wrong offset!");

// Class FortniteUI.AthenaEventMatchStatusScreenBase
// 0x0050 (0x0398 - 0x0348)
class UAthenaEventMatchStatusScreenBase final : public UAthenaEventScreenBase
{
public:
	uint8                                         Pad_348[0x50];                                     // 0x0348(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerDeadStateChanged(class UAthenaRemotePlayerViewData* InPlayerData, bool bInIsDead);
	void OnPlayerDeadStateChanged_BP(class UAthenaRemotePlayerViewData* InPlayerData, bool bInIsDead);
	void OnPlayerKillScoreChanged(class UAthenaRemotePlayerViewData* InPlayerData, int32 InKillScore);
	void UpdateChestsLootedText(const class FText& ChestsLootedText);
	void UpdateCircleRadiusText(const class FText& CircleRadiusText);
	void UpdateDamageHealedText(const class FText& DamageHealedText);
	void UpdateDamageInflictedText(const class FText& DamageInflictedText);
	void UpdateDamageTakenText(const class FText& DamageTakenText);
	void UpdateFastestKillText(const class FText& FastestKillText, const class FText& FastestKillTime);
	void UpdateGamePhaseText(const class FText& GamePhaseText);
	void UpdateGamePhaseTimeText(const class FText& GamePhaseTimeText);
	void UpdateGamePhaseTimeTitleText(const class FText& GamePhaseTimeTitleText);
	void UpdateLongestEliminationScore(const class FText& LongestEliminationScore);
	void UpdateLongestEliminationText(const class FText& LongestEliminationText);
	void UpdateMatchTimeText(const class FText& MatchTimeText);
	void UpdateMostKillsScore(const class FText& MostKillsScore);
	void UpdateMostKillsText(const class FText& MostKillsText);
	void UpdatePiecesBuiltText(const class FText& PiecesBuiltText);
	void UpdatePiecesDestroyedText(const class FText& PiecesDestroyedText);
	void UpdatePlayersRemainingText(const class FText& PlayersRemainingText);
	void UpdateShotsFiredText(const class FText& ShotsFiredText);
	void UpdateSupplyDropsLootedText(const class FText& SupplyDropsLootedText);
	void UpdateTimeSinceLastKillText(const class FText& TimeSinceLastKillText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaEventMatchStatusScreenBase">();
	}
	static class UAthenaEventMatchStatusScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaEventMatchStatusScreenBase>();
	}
};
static_assert(alignof(UAthenaEventMatchStatusScreenBase) == 0x000008, "Wrong alignment on UAthenaEventMatchStatusScreenBase");
static_assert(sizeof(UAthenaEventMatchStatusScreenBase) == 0x000398, "Wrong size on UAthenaEventMatchStatusScreenBase");

// Class FortniteUI.AthenaEventMatchTeamWidgetBase
// 0x0060 (0x0298 - 0x0238)
class UAthenaEventMatchTeamWidgetBase final : public UCommonUserWidget
{
public:
	TArray<class UAthenaEventMatchPlayerWidgetBase*> PlayerWidgets;                                     // 0x0238(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         SquadId;                                           // 0x0248(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TeamColor;                                         // 0x024C(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTeamSize;                                       // 0x025C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAthenaEventMatchPlayerWidgetBase> PlayerWidgetClass;                                 // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_268[0x18];                                     // 0x0268(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class UAthenaRemotePlayerViewData>> PlayerDatas;                                       // 0x0280(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerDeadStateChanged(class UAthenaRemotePlayerViewData* InPlayerData, bool bInIsDead);
	void OnPlayerDisconnectedChanged(class UAthenaRemotePlayerViewData* InPlayerData, bool bInIsDisconnected);
	void OnPlayerWidgetAdded();

	int32 GetTeamKills() const;
	bool IsTeamDead() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaEventMatchTeamWidgetBase">();
	}
	static class UAthenaEventMatchTeamWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaEventMatchTeamWidgetBase>();
	}
};
static_assert(alignof(UAthenaEventMatchTeamWidgetBase) == 0x000008, "Wrong alignment on UAthenaEventMatchTeamWidgetBase");
static_assert(sizeof(UAthenaEventMatchTeamWidgetBase) == 0x000298, "Wrong size on UAthenaEventMatchTeamWidgetBase");
static_assert(offsetof(UAthenaEventMatchTeamWidgetBase, PlayerWidgets) == 0x000238, "Member 'UAthenaEventMatchTeamWidgetBase::PlayerWidgets' has a wrong offset!");
static_assert(offsetof(UAthenaEventMatchTeamWidgetBase, SquadId) == 0x000248, "Member 'UAthenaEventMatchTeamWidgetBase::SquadId' has a wrong offset!");
static_assert(offsetof(UAthenaEventMatchTeamWidgetBase, TeamColor) == 0x00024C, "Member 'UAthenaEventMatchTeamWidgetBase::TeamColor' has a wrong offset!");
static_assert(offsetof(UAthenaEventMatchTeamWidgetBase, MaxTeamSize) == 0x00025C, "Member 'UAthenaEventMatchTeamWidgetBase::MaxTeamSize' has a wrong offset!");
static_assert(offsetof(UAthenaEventMatchTeamWidgetBase, PlayerWidgetClass) == 0x000260, "Member 'UAthenaEventMatchTeamWidgetBase::PlayerWidgetClass' has a wrong offset!");
static_assert(offsetof(UAthenaEventMatchTeamWidgetBase, PlayerDatas) == 0x000280, "Member 'UAthenaEventMatchTeamWidgetBase::PlayerDatas' has a wrong offset!");

// Class FortniteUI.FortAlterationButtonWidget
// 0x0008 (0x0B38 - 0x0B30)
class UFortAlterationButtonWidget : public UCommonButton
{
public:
	class UFortAlterationInfo*                    AlterationInfo;                                    // 0x0B30(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnSetup();
	void Setup(class UFortAlterationInfo* InAlterationInfo);

	class UFortAlterationInfo* GetAlterationInfo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAlterationButtonWidget">();
	}
	static class UFortAlterationButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAlterationButtonWidget>();
	}
};
static_assert(alignof(UFortAlterationButtonWidget) == 0x000008, "Wrong alignment on UFortAlterationButtonWidget");
static_assert(sizeof(UFortAlterationButtonWidget) == 0x000B38, "Wrong size on UFortAlterationButtonWidget");
static_assert(offsetof(UFortAlterationButtonWidget, AlterationInfo) == 0x000B30, "Member 'UFortAlterationButtonWidget::AlterationInfo' has a wrong offset!");

// Class FortniteUI.AthenaFPSBase
// 0x0008 (0x0270 - 0x0268)
class UAthenaFPSBase final : public UFortHUDElementWidget
{
public:
	class UTextBlock*                             FPS;                                               // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaFPSBase">();
	}
	static class UAthenaFPSBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaFPSBase>();
	}
};
static_assert(alignof(UAthenaFPSBase) == 0x000008, "Wrong alignment on UAthenaFPSBase");
static_assert(sizeof(UAthenaFPSBase) == 0x000270, "Wrong size on UAthenaFPSBase");
static_assert(offsetof(UAthenaFPSBase, FPS) == 0x000268, "Member 'UAthenaFPSBase::FPS' has a wrong offset!");

// Class FortniteUI.FortStoreSummaryItemButton
// 0x0050 (0x0B80 - 0x0B30)
class UFortStoreSummaryItemButton final : public UCommonButton
{
public:
	bool                                          HasAnItemMarkedForMulching;                        // 0x0B30(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B31[0x2F];                                     // 0x0B31(0x002F)(Fixing Size After Last Property [ Dumper-7 ])
	class UMenuAnchor*                            PopupMenuAnchor;                                   // 0x0B60(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStoreCardObject*                       StoreCardObject;                                   // 0x0B68(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortInventoryContext*                  InventoryContext;                                  // 0x0B70(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B78[0x8];                                      // 0x0B78(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UWidget* GetPopupMenu();
	void HandleItemMulchStateChanged();
	void HandleMenuOpenChanged(bool bIsOpen);
	void SetStoreCardObject(class UStoreCardObject* CardObject);
	void UpdateMulchListWithItem(bool bAddingItem);

	class UStoreCardObject* GetStoreCardObject() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortStoreSummaryItemButton">();
	}
	static class UFortStoreSummaryItemButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortStoreSummaryItemButton>();
	}
};
static_assert(alignof(UFortStoreSummaryItemButton) == 0x000008, "Wrong alignment on UFortStoreSummaryItemButton");
static_assert(sizeof(UFortStoreSummaryItemButton) == 0x000B80, "Wrong size on UFortStoreSummaryItemButton");
static_assert(offsetof(UFortStoreSummaryItemButton, HasAnItemMarkedForMulching) == 0x000B30, "Member 'UFortStoreSummaryItemButton::HasAnItemMarkedForMulching' has a wrong offset!");
static_assert(offsetof(UFortStoreSummaryItemButton, PopupMenuAnchor) == 0x000B60, "Member 'UFortStoreSummaryItemButton::PopupMenuAnchor' has a wrong offset!");
static_assert(offsetof(UFortStoreSummaryItemButton, StoreCardObject) == 0x000B68, "Member 'UFortStoreSummaryItemButton::StoreCardObject' has a wrong offset!");
static_assert(offsetof(UFortStoreSummaryItemButton, InventoryContext) == 0x000B70, "Member 'UFortStoreSummaryItemButton::InventoryContext' has a wrong offset!");

// Class FortniteUI.AthenaGadgetFuelWidget
// 0x0028 (0x0260 - 0x0238)
class UAthenaGadgetFuelWidget final : public UCommonUserWidget
{
public:
	TWeakObjectPtr<class UAthenaGadgetItemDefinition> AthenaGadgetItemDefinition;                        // 0x0238(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFortFuelGadgetVisualType                     FortFuelGadgetVisualType;                          // 0x0240(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 FuelGaugeProgressImage;                            // 0x0248(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonNumericTextBlock*                CurrentChargesText;                                // 0x0250(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_258[0x8];                                      // 0x0258(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetItem(class UFortWorldItem* Item);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaGadgetFuelWidget">();
	}
	static class UAthenaGadgetFuelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaGadgetFuelWidget>();
	}
};
static_assert(alignof(UAthenaGadgetFuelWidget) == 0x000008, "Wrong alignment on UAthenaGadgetFuelWidget");
static_assert(sizeof(UAthenaGadgetFuelWidget) == 0x000260, "Wrong size on UAthenaGadgetFuelWidget");
static_assert(offsetof(UAthenaGadgetFuelWidget, AthenaGadgetItemDefinition) == 0x000238, "Member 'UAthenaGadgetFuelWidget::AthenaGadgetItemDefinition' has a wrong offset!");
static_assert(offsetof(UAthenaGadgetFuelWidget, FortFuelGadgetVisualType) == 0x000240, "Member 'UAthenaGadgetFuelWidget::FortFuelGadgetVisualType' has a wrong offset!");
static_assert(offsetof(UAthenaGadgetFuelWidget, FuelGaugeProgressImage) == 0x000248, "Member 'UAthenaGadgetFuelWidget::FuelGaugeProgressImage' has a wrong offset!");
static_assert(offsetof(UAthenaGadgetFuelWidget, CurrentChargesText) == 0x000250, "Member 'UAthenaGadgetFuelWidget::CurrentChargesText' has a wrong offset!");

// Class FortniteUI.AthenaGameOverDisplay
// 0x0000 (0x0348 - 0x0348)
class UAthenaGameOverDisplay final : public UFortActivatablePanel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaGameOverDisplay">();
	}
	static class UAthenaGameOverDisplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaGameOverDisplay>();
	}
};
static_assert(alignof(UAthenaGameOverDisplay) == 0x000008, "Wrong alignment on UAthenaGameOverDisplay");
static_assert(sizeof(UAthenaGameOverDisplay) == 0x000348, "Wrong size on UAthenaGameOverDisplay");

// Class FortniteUI.FortItemCardMaterialPooler
// 0x00F8 (0x0120 - 0x0028)
class UFortItemCardMaterialPooler final : public UObject
{
public:
	uint8                                         Pad_28[0xF8];                                      // 0x0028(0x00F8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemCardMaterialPooler">();
	}
	static class UFortItemCardMaterialPooler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemCardMaterialPooler>();
	}
};
static_assert(alignof(UFortItemCardMaterialPooler) == 0x000008, "Wrong alignment on UFortItemCardMaterialPooler");
static_assert(sizeof(UFortItemCardMaterialPooler) == 0x000120, "Wrong size on UFortItemCardMaterialPooler");

// Class FortniteUI.FortActivatableVideoPanel
// 0x0028 (0x0370 - 0x0348)
class UFortActivatableVideoPanel : public UFortActivatablePanel
{
public:
	UMulticastDelegateProperty_                   OnMediaPlayerEndReached;                           // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bAutoPlayOnActivated;                              // 0x0358(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAllowSkipping;                                    // 0x0359(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_35A[0x6];                                      // 0x035A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortVideoPlayerWidget*                 VideoPlayerWidget;                                 // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Skip;                                       // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	bool LoadVideo(class FName VideoID);
	bool LoadVideoByIndex(int32 VideoIndex);
	bool StreamVideo(const class FString& VideoURL);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivatableVideoPanel">();
	}
	static class UFortActivatableVideoPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivatableVideoPanel>();
	}
};
static_assert(alignof(UFortActivatableVideoPanel) == 0x000008, "Wrong alignment on UFortActivatableVideoPanel");
static_assert(sizeof(UFortActivatableVideoPanel) == 0x000370, "Wrong size on UFortActivatableVideoPanel");
static_assert(offsetof(UFortActivatableVideoPanel, OnMediaPlayerEndReached) == 0x000348, "Member 'UFortActivatableVideoPanel::OnMediaPlayerEndReached' has a wrong offset!");
static_assert(offsetof(UFortActivatableVideoPanel, bAutoPlayOnActivated) == 0x000358, "Member 'UFortActivatableVideoPanel::bAutoPlayOnActivated' has a wrong offset!");
static_assert(offsetof(UFortActivatableVideoPanel, bAllowSkipping) == 0x000359, "Member 'UFortActivatableVideoPanel::bAllowSkipping' has a wrong offset!");
static_assert(offsetof(UFortActivatableVideoPanel, VideoPlayerWidget) == 0x000360, "Member 'UFortActivatableVideoPanel::VideoPlayerWidget' has a wrong offset!");
static_assert(offsetof(UFortActivatableVideoPanel, Button_Skip) == 0x000368, "Member 'UFortActivatableVideoPanel::Button_Skip' has a wrong offset!");

// Class FortniteUI.AthenaGameOverScreenBase
// 0x0008 (0x0350 - 0x0348)
class UAthenaGameOverScreenBase final : public UFortActivatablePanel
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanShowGoToBoss();
	void GoToBoss();
	void RequestRefreshInput();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaGameOverScreenBase">();
	}
	static class UAthenaGameOverScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaGameOverScreenBase>();
	}
};
static_assert(alignof(UAthenaGameOverScreenBase) == 0x000008, "Wrong alignment on UAthenaGameOverScreenBase");
static_assert(sizeof(UAthenaGameOverScreenBase) == 0x000350, "Wrong size on UAthenaGameOverScreenBase");

// Class FortniteUI.FortAlterationOptionsBase
// 0x00A8 (0x02E0 - 0x0238)
class UFortAlterationOptionsBase : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x10];                                     // 0x0238(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortAlterationOption>      AlterationOptionClass;                             // 0x0248(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonGroup*                     AlterationOptionButtons;                           // 0x0250(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_258[0x20];                                     // 0x0258(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAlterableItem*                     Item;                                              // 0x0278(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SlotIndex;                                         // 0x0280(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUpgradeOptionExists;                              // 0x0284(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_285[0x3];                                      // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAlterationOption                      UpgradeOption;                                     // 0x0288(0x0038)(Transient, NativeAccessSpecifierPrivate)
	TArray<struct FAlterationOption>              RespecOptions;                                     // 0x02C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D0[0x10];                                     // 0x02D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleAlterationsOptionHovered(class UCommonButton* AlterationOptionButton, int32 GroupIndex);
	void HandleAlterationsOptionSelected(class UCommonButton* AlterationOptionButton, int32 GroupIndex);
	void OnGenerateOption(EFortAlterationOptionType OptionType, class UFortAlterationOption* OptionWidget);
	void OnItemChanged(bool bIntroAlterations);
	void ProcessAlterationOptions(bool bIntroAlterations);

	bool DoAlterationOptionsExist(EFortAlterationOptionType OptionType) const;
	bool IsValidAlterationSlot() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAlterationOptionsBase">();
	}
	static class UFortAlterationOptionsBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAlterationOptionsBase>();
	}
};
static_assert(alignof(UFortAlterationOptionsBase) == 0x000008, "Wrong alignment on UFortAlterationOptionsBase");
static_assert(sizeof(UFortAlterationOptionsBase) == 0x0002E0, "Wrong size on UFortAlterationOptionsBase");
static_assert(offsetof(UFortAlterationOptionsBase, AlterationOptionClass) == 0x000248, "Member 'UFortAlterationOptionsBase::AlterationOptionClass' has a wrong offset!");
static_assert(offsetof(UFortAlterationOptionsBase, AlterationOptionButtons) == 0x000250, "Member 'UFortAlterationOptionsBase::AlterationOptionButtons' has a wrong offset!");
static_assert(offsetof(UFortAlterationOptionsBase, Item) == 0x000278, "Member 'UFortAlterationOptionsBase::Item' has a wrong offset!");
static_assert(offsetof(UFortAlterationOptionsBase, SlotIndex) == 0x000280, "Member 'UFortAlterationOptionsBase::SlotIndex' has a wrong offset!");
static_assert(offsetof(UFortAlterationOptionsBase, bUpgradeOptionExists) == 0x000284, "Member 'UFortAlterationOptionsBase::bUpgradeOptionExists' has a wrong offset!");
static_assert(offsetof(UFortAlterationOptionsBase, UpgradeOption) == 0x000288, "Member 'UFortAlterationOptionsBase::UpgradeOption' has a wrong offset!");
static_assert(offsetof(UFortAlterationOptionsBase, RespecOptions) == 0x0002C0, "Member 'UFortAlterationOptionsBase::RespecOptions' has a wrong offset!");

// Class FortniteUI.FortHomebaseNodeItemUtilities
// 0x0000 (0x0028 - 0x0028)
class UFortHomebaseNodeItemUtilities final : public UBlueprintFunctionLibrary
{
public:
	static bool AreAnyHomebaseNodeItemsUnseenForSquadId(class AFortPlayerController* FortPC, const class FName& SquadId);
	static bool AreAnyHomebaseNodeItemsUnseenForSquadType(class AFortPlayerController* FortPC, const EFortHomebaseSquadType SquadType);
	static class UFortHomebaseNodeItem* GetHomebaseNodeItemForSquadSlot(class AFortPlayerController* FortPC, const class FName& SquadId, const int32 SquadSlot);
	static class UFortHomebaseNodeItem* GetHomebaseNodeItemForTagContainer(class AFortPlayerController* FortPC, const struct FGameplayTagContainer& Tags);
	static class FString GetHomebaseNodeItemNameForTagContainer(class AFortPlayerController* FortPC, const struct FGameplayTagContainer& Tags);
	static bool IsHomebaseNodeItemUnseenForTagContainer(class AFortPlayerController* FortPC, const struct FGameplayTagContainer& Tags);
	static bool IsSquadSlotUnseen(class AFortPlayerController* FortPC, const class FName& SquadId, const int32 SquadSlot);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHomebaseNodeItemUtilities">();
	}
	static class UFortHomebaseNodeItemUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHomebaseNodeItemUtilities>();
	}
};
static_assert(alignof(UFortHomebaseNodeItemUtilities) == 0x000008, "Wrong alignment on UFortHomebaseNodeItemUtilities");
static_assert(sizeof(UFortHomebaseNodeItemUtilities) == 0x000028, "Wrong size on UFortHomebaseNodeItemUtilities");

// Class FortniteUI.AthenaGamePhaseWidgetBase
// 0x0020 (0x0288 - 0x0268)
class UAthenaGamePhaseWidgetBase final : public UFortHUDElementWidget
{
public:
	class UMaterialInterface*                     StormComingFontMaterial;                           // 0x0268(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StormComingWarningTime;                            // 0x0270(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextBlock*                             TimeText;                                          // 0x0278(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_280[0x8];                                      // 0x0280(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleCountdownUpdate(int32 TimeRemaining);
	void HandleGamePhaseStepChanged(EAthenaGamePhaseStep GamePhaseStep);
	void OnGamePhaseStepChanged(EAthenaGamePhaseStep GamePhaseStep);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaGamePhaseWidgetBase">();
	}
	static class UAthenaGamePhaseWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaGamePhaseWidgetBase>();
	}
};
static_assert(alignof(UAthenaGamePhaseWidgetBase) == 0x000008, "Wrong alignment on UAthenaGamePhaseWidgetBase");
static_assert(sizeof(UAthenaGamePhaseWidgetBase) == 0x000288, "Wrong size on UAthenaGamePhaseWidgetBase");
static_assert(offsetof(UAthenaGamePhaseWidgetBase, StormComingFontMaterial) == 0x000268, "Member 'UAthenaGamePhaseWidgetBase::StormComingFontMaterial' has a wrong offset!");
static_assert(offsetof(UAthenaGamePhaseWidgetBase, StormComingWarningTime) == 0x000270, "Member 'UAthenaGamePhaseWidgetBase::StormComingWarningTime' has a wrong offset!");
static_assert(offsetof(UAthenaGamePhaseWidgetBase, TimeText) == 0x000278, "Member 'UAthenaGamePhaseWidgetBase::TimeText' has a wrong offset!");

// Class FortniteUI.FortNumericTextBlock
// 0x0050 (0x02F0 - 0x02A0)
class UFortNumericTextBlock final : public UTextBlock
{
public:
	UMulticastDelegateProperty_                   CountFinished;                                     // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         StartingValue;                                     // 0x02B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DestValue;                                         // 0x02B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseGrouping;                                      // 0x02B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsCurrency;                                       // 0x02B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BA[0x2];                                      // 0x02BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EaseOutExp;                                        // 0x02BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpdateInterval;                                    // 0x02C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShrinkTime;                                        // 0x02C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C8[0x28];                                     // 0x02C8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DirectlySet(int32 InValue);
	void InterpolateSet(int32 InValue, float InUpdateLength, float InReportEndEarly);

	int32 GetCurrentValue() const;
	bool IsInterpolatingNumber() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortNumericTextBlock">();
	}
	static class UFortNumericTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortNumericTextBlock>();
	}
};
static_assert(alignof(UFortNumericTextBlock) == 0x000008, "Wrong alignment on UFortNumericTextBlock");
static_assert(sizeof(UFortNumericTextBlock) == 0x0002F0, "Wrong size on UFortNumericTextBlock");
static_assert(offsetof(UFortNumericTextBlock, CountFinished) == 0x0002A0, "Member 'UFortNumericTextBlock::CountFinished' has a wrong offset!");
static_assert(offsetof(UFortNumericTextBlock, StartingValue) == 0x0002B0, "Member 'UFortNumericTextBlock::StartingValue' has a wrong offset!");
static_assert(offsetof(UFortNumericTextBlock, DestValue) == 0x0002B4, "Member 'UFortNumericTextBlock::DestValue' has a wrong offset!");
static_assert(offsetof(UFortNumericTextBlock, bUseGrouping) == 0x0002B8, "Member 'UFortNumericTextBlock::bUseGrouping' has a wrong offset!");
static_assert(offsetof(UFortNumericTextBlock, bAsCurrency) == 0x0002B9, "Member 'UFortNumericTextBlock::bAsCurrency' has a wrong offset!");
static_assert(offsetof(UFortNumericTextBlock, EaseOutExp) == 0x0002BC, "Member 'UFortNumericTextBlock::EaseOutExp' has a wrong offset!");
static_assert(offsetof(UFortNumericTextBlock, UpdateInterval) == 0x0002C0, "Member 'UFortNumericTextBlock::UpdateInterval' has a wrong offset!");
static_assert(offsetof(UFortNumericTextBlock, ShrinkTime) == 0x0002C4, "Member 'UFortNumericTextBlock::ShrinkTime' has a wrong offset!");

// Class FortniteUI.AthenaInventoryPanelBase
// 0x0058 (0x03A0 - 0x0348)
class UAthenaInventoryPanelBase final : public UFortActivatablePanel
{
public:
	class UFortItemTileView*                      ResourceView;                                      // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItemTileView*                      AmmoView;                                          // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonGroup*                     EquipButtonGroup;                                  // 0x0358(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_360[0x40];                                     // 0x0360(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AdvanceSelection(class UFortItemTileView* TileView);
	void AttemptToUpdateFocus();
	void FocusTileView(class UFortItemTileView* TileView);
	class UFortItemTileView* GetTileViewForItem(class UFortItem* Item);
	void HandleCursorModeChanged(bool bCursorModeEnabled, class FName ActionName, class UUserWidget* CursorModeContentWidget);
	void HandleCursorModeChangedBP(bool bCursorModeEnabled, class FName ActionName, class UUserWidget* CursorModeContentWidget);
	void HandleInventoryItemSelected(class UFortItem* Item);
	void HandleQuickBarChangedBP(EFortQuickBars QuickBarType);
	void RequestEquip(class UFortItem* Item);
	void SetBypassNotifications(bool bBypass);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaInventoryPanelBase">();
	}
	static class UAthenaInventoryPanelBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaInventoryPanelBase>();
	}
};
static_assert(alignof(UAthenaInventoryPanelBase) == 0x000008, "Wrong alignment on UAthenaInventoryPanelBase");
static_assert(sizeof(UAthenaInventoryPanelBase) == 0x0003A0, "Wrong size on UAthenaInventoryPanelBase");
static_assert(offsetof(UAthenaInventoryPanelBase, ResourceView) == 0x000348, "Member 'UAthenaInventoryPanelBase::ResourceView' has a wrong offset!");
static_assert(offsetof(UAthenaInventoryPanelBase, AmmoView) == 0x000350, "Member 'UAthenaInventoryPanelBase::AmmoView' has a wrong offset!");
static_assert(offsetof(UAthenaInventoryPanelBase, EquipButtonGroup) == 0x000358, "Member 'UAthenaInventoryPanelBase::EquipButtonGroup' has a wrong offset!");

// Class FortniteUI.FortUIMessageItemWidget
// 0x0048 (0x0280 - 0x0238)
class UFortUIMessageItemWidget final : public UCommonUserWidget
{
public:
	UMulticastDelegateProperty_                   OnMessageDisplayed;                                // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMessageRemoved;                                  // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FName                                   MessageID;                                         // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackSize;                                         // 0x0260(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayDuration;                                   // 0x0264(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RemoveDuration;                                    // 0x0268(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_26C[0x14];                                     // 0x026C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBeginRemove();
	void OnReturnedToPool();
	void OnStackSizeChanged(int32 OldStackSize);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIMessageItemWidget">();
	}
	static class UFortUIMessageItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIMessageItemWidget>();
	}
};
static_assert(alignof(UFortUIMessageItemWidget) == 0x000008, "Wrong alignment on UFortUIMessageItemWidget");
static_assert(sizeof(UFortUIMessageItemWidget) == 0x000280, "Wrong size on UFortUIMessageItemWidget");
static_assert(offsetof(UFortUIMessageItemWidget, OnMessageDisplayed) == 0x000238, "Member 'UFortUIMessageItemWidget::OnMessageDisplayed' has a wrong offset!");
static_assert(offsetof(UFortUIMessageItemWidget, OnMessageRemoved) == 0x000248, "Member 'UFortUIMessageItemWidget::OnMessageRemoved' has a wrong offset!");
static_assert(offsetof(UFortUIMessageItemWidget, MessageID) == 0x000258, "Member 'UFortUIMessageItemWidget::MessageID' has a wrong offset!");
static_assert(offsetof(UFortUIMessageItemWidget, StackSize) == 0x000260, "Member 'UFortUIMessageItemWidget::StackSize' has a wrong offset!");
static_assert(offsetof(UFortUIMessageItemWidget, DisplayDuration) == 0x000264, "Member 'UFortUIMessageItemWidget::DisplayDuration' has a wrong offset!");
static_assert(offsetof(UFortUIMessageItemWidget, RemoveDuration) == 0x000268, "Member 'UFortUIMessageItemWidget::RemoveDuration' has a wrong offset!");

// Class FortniteUI.AthenaHUDContext
// 0x0220 (0x0248 - 0x0028)
class UAthenaHUDContext final : public UBlueprintContextBase
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnLocalPlayerWon;                                  // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerDeathOnWin;                           // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalTeamWon;                                    // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerLost;                                 // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerKilledPlayer;                         // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerDBNOStateChanged;                     // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnUIGameplayCue;                                   // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerBeginSkydiving;                       // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnAthenaAutoFireChanged;                           // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnClientSettingsShowViewersChanged;                // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnAthenaGamePhaseChanged;                          // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPlayerFiredWeapon;                               // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLowPerformanceMode;                              // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPTTStateChange;                                  // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnCanPTTChange;                                    // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   ShowMobilePickerDelegate;                          // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPlaylistUIExtensionChanged;                      // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPlayerNameChangeDelegate;                        // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnAllWinnersAnnouncedDelegate;                     // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSignalQualityChangeDelegate;                     // 0x0160(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnForwardStartedFalling;                           // 0x0170(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSpecialActorListChanged;                         // 0x0180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_190[0x10];                                     // 0x0190(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnInventoryItemSelected;                           // 0x01A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnInventorySwapStarted;                            // 0x01B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnInventorySwapComplete;                           // 0x01C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UWidget>                 MoveButtonWidgetPtr;                               // 0x01D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FAthenaWinnerInfo                      WinnerInfo;                                        // 0x01D8(0x0020)(NativeAccessSpecifierPrivate)
	bool                                          bMoveButtonMode;                                   // 0x01F8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bPendingAttachToHUD;                               // 0x01F9(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1FA[0x6];                                      // 0x01FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGameUIExtenderAthena*              PlaylistUIExtender;                                // 0x0200(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UFortItem>               LastSelectedInventoryItem;                         // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_210[0x38];                                     // 0x0210(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginUseFromHUD();
	void CancelSwap();
	float DisplayPlayerWonTime();
	void EnableAutoRunFromHUD(bool bEnable);
	void EndUseFromHUD();
	void ExecuteActionNameFromHUD(const class FName ActionName);
	void ExecuteActionNameFromHUDWithEventType(const class FName ActionName, const EInputEvent KeyEvent);
	void FireFromHUDStart(int32 TouchIndex, class UWidget* DebugWidget);
	void FireFromHUDStop(int32 TouchIndex, class UWidget* DebugWidget);
	void ForceFireFromHUDStop();
	void ForwardOnSpecialActorListChanged(const struct FSpecialActorRepData& SpecialActorData);
	TArray<class FName> GetBoundActions();
	void GetWinnerText(class FText* ReturnText, const class FText& WinnerName);
	void HandleGamePhaseChange(EAthenaGamePhaseStep NewGamePhase);
	void HandleLocalPlayerBeginSkydiving();
	void HandleLocalPlayerDBNOStateChanged(class AFortPawn* FortPawn, bool bIsDBNO);
	void HandleUIGameplayCue(class FName CueName, EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	bool IsActionBound(const class FName ActionName);
	void JumpFromHudEnd();
	void JumpFromHudStart(int32 TouchIndex);
	void OnAllWinnersAnnounced();
	void OnAthenaAutoFireChanged__DelegateSignature(bool bEntering);
	void OnAthenaGamePhaseChanged__DelegateSignature(EAthenaGamePhaseStep NewPhase);
	void OnAthenaHUDAllWinnersAnnounced__DelegateSignature(const struct FAthenaWinnerInfo& Param_WinnerInfo);
	void OnAthenaInventoryItemSelected__DelegateSignature(class UFortItem* Item);
	void OnAthenaInventorySwapComplete__DelegateSignature();
	void OnAthenaInventorySwapStarted__DelegateSignature(int32 SlotIndex);
	void OnAthenaSettingsApplied__DelegateSignature();
	void OnCanPTTChange__DelegateSignature();
	void OnClientSettingUpdatedShowViewers();
	void OnForwardStartedFalling__DelegateSignature();
	void OnLocalPlayerBeginSkydiving__DelegateSignature();
	void OnLocalPlayerDBNOStateChanged__DelegateSignature(bool bIsDBNO);
	void OnLocalPlayerDeathOnWin__DelegateSignature();
	void OnLocalPlayerKilledPlayer__DelegateSignature(const class AFortPlayerStateAthena* Player);
	void OnLocalPlayerLost__DelegateSignature(EEndOfMatchReason LostReason);
	void OnLocalPlayerWon__DelegateSignature();
	void OnLocalTeamWon__DelegateSignature();
	void OnLowPerformanceMode__DelegateSignature(bool bInLowPerformanceMode);
	void OnPlayerFiredWeapon__DelegateSignature();
	void OnPlayerNameChange__DelegateSignature(const class FString& NewName);
	void OnSignalQualityChange__DelegateSignature(float NewQuality);
	void OnSpecialActorListChanged__DelegateSignature();
	void PlaylistUIExtensionChanged__DelegateSignature();
	void PTTStateChange__DelegateSignature(EPTTState NewPushToTalkState);
	void PushGameOverEmoteInput();
	void ReloadFromHUD();
	void SelectWidgetToMove(class UWidget* Widget);
	void SetLockOnStickCoords(const struct FVector2D& LockOnCoords);
	void SetPTTState(EPTTState NewPushToTalkState);
	void SetResourceMaterial(EFortResourceType NewMaterial);
	void SetSelectedInventoryItem(class UFortItem* Item);
	void SetSelectWidgetToMoveMode(bool bSet);
	void SetTargetingToggleable(const bool bNewValue);
	bool ShouldDisplayPlacement();
	bool ShouldDisplayScoreUI();
	void ShowMobilePicker();
	void ShowMobilePicker__DelegateSignature();
	void StartOrFinishSwap(int32 SlotIndex);
	void StopItemSelectionInputFromHUD(const int32 TouchIndex, const int32 SlotIdx, EFortQuickBars InQuickBar);
	void StopTargettingFromHUD();
	void SwapQuickBarFocusFromHUD(EFortQuickBars InQuickBar, int32 SlotOverride);
	void TakeItemSelectionInputFromHUD(const int32 TouchIndex, const int32 SlotIdx, bool* bIsUsing, EFortQuickBars InQuickBar, bool bReloadOrUseIfAlreadySelected, bool bStopUseImmediately);
	void TakeLookInputFromHUD(const struct FRotator& LookRotator);
	void TakeLookStickInputFromHUD(const struct FVector2D& LookStickPosition);
	void TakeMovementInputFromHUD(const struct FVector& MoveVector, bool bTrySprint);
	void UpdateSelectedWidgetMoveOffsetVector(const struct FVector2D& VectorOffset, float FMoveScale);
	void UseOrRleoadFromHUDStart();
	void UseOrRleoadFromHUDStop();

	bool CanAutoRun() const;
	bool CanCurrentWeaponAutoFireFromReticle() const;
	bool CanShootInVehicle() const;
	void CycleQuickbar() const;
	float GetBatteryLevel() const;
	bool GetCanPTT() const;
	class UAthenaPlayerViewModel* GetCurrentViewModel() const;
	bool GetInLowPerformanceMode() const;
	int32 GetInteractPressedTouchIndex() const;
	int32 GetJumpPressedTouchIndex() const;
	void GetLocalTime(int32* Hours, int32* Minutes) const;
	struct FLinearColor GetPlayerColor() const;
	class FString GetPlayerName() const;
	class UFortGameUIExtenderAthena* GetPlaylistUIExtender() const;
	EPTTState GetPTTState() const;
	class UFortItem* GetSelectedInventoryItem() const;
	int32 GetSquadConnectedCount() const;
	class USoundCue* GetVictoryMusic() const;
	class FText GetVictoryText() const;
	EAthenaVictoryUIType GetVictoryUIType() const;
	bool HasAutofireTarget() const;
	bool HasLockOnTarget() const;
	bool HasWifi() const;
	bool IsAutoRunEnabled() const;
	bool IsCrouching() const;
	bool IsCurrentWeaponFiring() const;
	bool IsInBuildMode() const;
	bool IsInSelectWidgetToMoveMode() const;
	bool IsMovingSelectedWidget() const;
	bool IsOperatingTurret() const;
	bool IsShowViewerCountEnabled() const;
	bool IsSwapping() const;
	bool IsTargeting() const;
	bool IsUsingScope() const;
	bool UseTapToShoot() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaHUDContext">();
	}
	static class UAthenaHUDContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaHUDContext>();
	}
};
static_assert(alignof(UAthenaHUDContext) == 0x000008, "Wrong alignment on UAthenaHUDContext");
static_assert(sizeof(UAthenaHUDContext) == 0x000248, "Wrong size on UAthenaHUDContext");
static_assert(offsetof(UAthenaHUDContext, OnLocalPlayerWon) == 0x000030, "Member 'UAthenaHUDContext::OnLocalPlayerWon' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnLocalPlayerDeathOnWin) == 0x000040, "Member 'UAthenaHUDContext::OnLocalPlayerDeathOnWin' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnLocalTeamWon) == 0x000050, "Member 'UAthenaHUDContext::OnLocalTeamWon' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnLocalPlayerLost) == 0x000060, "Member 'UAthenaHUDContext::OnLocalPlayerLost' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnLocalPlayerKilledPlayer) == 0x000070, "Member 'UAthenaHUDContext::OnLocalPlayerKilledPlayer' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnLocalPlayerDBNOStateChanged) == 0x000080, "Member 'UAthenaHUDContext::OnLocalPlayerDBNOStateChanged' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnUIGameplayCue) == 0x000090, "Member 'UAthenaHUDContext::OnUIGameplayCue' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnLocalPlayerBeginSkydiving) == 0x0000A0, "Member 'UAthenaHUDContext::OnLocalPlayerBeginSkydiving' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnAthenaAutoFireChanged) == 0x0000B0, "Member 'UAthenaHUDContext::OnAthenaAutoFireChanged' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnClientSettingsShowViewersChanged) == 0x0000C0, "Member 'UAthenaHUDContext::OnClientSettingsShowViewersChanged' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnAthenaGamePhaseChanged) == 0x0000D0, "Member 'UAthenaHUDContext::OnAthenaGamePhaseChanged' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnPlayerFiredWeapon) == 0x0000E0, "Member 'UAthenaHUDContext::OnPlayerFiredWeapon' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnLowPerformanceMode) == 0x0000F0, "Member 'UAthenaHUDContext::OnLowPerformanceMode' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnPTTStateChange) == 0x000100, "Member 'UAthenaHUDContext::OnPTTStateChange' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnCanPTTChange) == 0x000110, "Member 'UAthenaHUDContext::OnCanPTTChange' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, ShowMobilePickerDelegate) == 0x000120, "Member 'UAthenaHUDContext::ShowMobilePickerDelegate' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnPlaylistUIExtensionChanged) == 0x000130, "Member 'UAthenaHUDContext::OnPlaylistUIExtensionChanged' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnPlayerNameChangeDelegate) == 0x000140, "Member 'UAthenaHUDContext::OnPlayerNameChangeDelegate' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnAllWinnersAnnouncedDelegate) == 0x000150, "Member 'UAthenaHUDContext::OnAllWinnersAnnouncedDelegate' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnSignalQualityChangeDelegate) == 0x000160, "Member 'UAthenaHUDContext::OnSignalQualityChangeDelegate' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnForwardStartedFalling) == 0x000170, "Member 'UAthenaHUDContext::OnForwardStartedFalling' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnSpecialActorListChanged) == 0x000180, "Member 'UAthenaHUDContext::OnSpecialActorListChanged' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnInventoryItemSelected) == 0x0001A0, "Member 'UAthenaHUDContext::OnInventoryItemSelected' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnInventorySwapStarted) == 0x0001B0, "Member 'UAthenaHUDContext::OnInventorySwapStarted' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, OnInventorySwapComplete) == 0x0001C0, "Member 'UAthenaHUDContext::OnInventorySwapComplete' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, MoveButtonWidgetPtr) == 0x0001D0, "Member 'UAthenaHUDContext::MoveButtonWidgetPtr' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, WinnerInfo) == 0x0001D8, "Member 'UAthenaHUDContext::WinnerInfo' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, bMoveButtonMode) == 0x0001F8, "Member 'UAthenaHUDContext::bMoveButtonMode' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, bPendingAttachToHUD) == 0x0001F9, "Member 'UAthenaHUDContext::bPendingAttachToHUD' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, PlaylistUIExtender) == 0x000200, "Member 'UAthenaHUDContext::PlaylistUIExtender' has a wrong offset!");
static_assert(offsetof(UAthenaHUDContext, LastSelectedInventoryItem) == 0x000208, "Member 'UAthenaHUDContext::LastSelectedInventoryItem' has a wrong offset!");

// Class FortniteUI.AthenaHUDGamePhaseChangingBase
// 0x0008 (0x0270 - 0x0268)
class UAthenaHUDGamePhaseChangingBase final : public UFortHUDElementWidget
{
public:
	uint8                                         Pad_268[0x8];                                      // 0x0268(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GamePhaseStepChanged(EAthenaGamePhaseStep Step);
	void HandleGamePhaseStepChanged(EAthenaGamePhaseStep Step);
	void UpdateMessaging(EAthenaGamePhaseStep Step, const class FText& MESSAGE, const class FText& TimeText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaHUDGamePhaseChangingBase">();
	}
	static class UAthenaHUDGamePhaseChangingBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaHUDGamePhaseChangingBase>();
	}
};
static_assert(alignof(UAthenaHUDGamePhaseChangingBase) == 0x000008, "Wrong alignment on UAthenaHUDGamePhaseChangingBase");
static_assert(sizeof(UAthenaHUDGamePhaseChangingBase) == 0x000270, "Wrong size on UAthenaHUDGamePhaseChangingBase");

// Class FortniteUI.ItemCardWidgetBase
// 0x0010 (0x0438 - 0x0428)
class UItemCardWidgetBase final : public UButton
{
public:
	class UFortGiftInfo*                          LootInfo;                                          // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMultiSizeItemCard*                 FortMultiSizeItemCard_Widget;                      // 0x0430(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnLootInfoSet();
	void SetLootInfo(class UFortGiftInfo* Param_LootInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ItemCardWidgetBase">();
	}
	static class UItemCardWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemCardWidgetBase>();
	}
};
static_assert(alignof(UItemCardWidgetBase) == 0x000008, "Wrong alignment on UItemCardWidgetBase");
static_assert(sizeof(UItemCardWidgetBase) == 0x000438, "Wrong size on UItemCardWidgetBase");
static_assert(offsetof(UItemCardWidgetBase, LootInfo) == 0x000428, "Member 'UItemCardWidgetBase::LootInfo' has a wrong offset!");
static_assert(offsetof(UItemCardWidgetBase, FortMultiSizeItemCard_Widget) == 0x000430, "Member 'UItemCardWidgetBase::FortMultiSizeItemCard_Widget' has a wrong offset!");

// Class FortniteUI.FortAsyncAction_SetUIState
// 0x0020 (0x0050 - 0x0030)
class UFortAsyncAction_SetUIState final : public UBlueprintAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   OnStateEntered;                                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UFortAsyncAction_SetUIState* SetUIState(class UObject* InWorldContextObject, EFortUIState DesiredState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAsyncAction_SetUIState">();
	}
	static class UFortAsyncAction_SetUIState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAsyncAction_SetUIState>();
	}
};
static_assert(alignof(UFortAsyncAction_SetUIState) == 0x000008, "Wrong alignment on UFortAsyncAction_SetUIState");
static_assert(sizeof(UFortAsyncAction_SetUIState) == 0x000050, "Wrong size on UFortAsyncAction_SetUIState");
static_assert(offsetof(UFortAsyncAction_SetUIState, OnStateEntered) == 0x000030, "Member 'UFortAsyncAction_SetUIState::OnStateEntered' has a wrong offset!");
static_assert(offsetof(UFortAsyncAction_SetUIState, WorldContextObject) == 0x000040, "Member 'UFortAsyncAction_SetUIState::WorldContextObject' has a wrong offset!");

// Class FortniteUI.AthenaHUDInputWidget
// 0x0000 (0x0238 - 0x0238)
class UAthenaHUDInputWidget final : public UCommonUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaHUDInputWidget">();
	}
	static class UAthenaHUDInputWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaHUDInputWidget>();
	}
};
static_assert(alignof(UAthenaHUDInputWidget) == 0x000008, "Wrong alignment on UAthenaHUDInputWidget");
static_assert(sizeof(UAthenaHUDInputWidget) == 0x000238, "Wrong size on UAthenaHUDInputWidget");

// Class FortniteUI.FortItemRatingIndicator
// 0x0368 (0x05A0 - 0x0238)
class UFortItemRatingIndicator : public UCommonUserWidget
{
public:
	TWeakObjectPtr<class UFortItem>               ItemToRepresent;                                   // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UFortItem>               ItemToCompareWith;                                 // 0x0240(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    RatingTypeIcon;                                    // 0x0248(0x0330)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	int32                                         RatingValue;                                       // 0x0578(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortBuffState                                ComparisonResult;                                  // 0x057C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ShouldAppearEnchanted;                             // 0x057D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_57E[0x22];                                     // 0x057E(0x0022)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleViewModelChanged();
	void SetItemToCompareWith(const class UFortItem* Param_ItemToCompareWith);
	void SetItemToRepresent(const class UFortItem* Param_ItemToRepresent);
	void SetItemViewContext(TScriptInterface<class IFortItemViewContextInterface> ItemViewContext);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemRatingIndicator">();
	}
	static class UFortItemRatingIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemRatingIndicator>();
	}
};
static_assert(alignof(UFortItemRatingIndicator) == 0x000008, "Wrong alignment on UFortItemRatingIndicator");
static_assert(sizeof(UFortItemRatingIndicator) == 0x0005A0, "Wrong size on UFortItemRatingIndicator");
static_assert(offsetof(UFortItemRatingIndicator, ItemToRepresent) == 0x000238, "Member 'UFortItemRatingIndicator::ItemToRepresent' has a wrong offset!");
static_assert(offsetof(UFortItemRatingIndicator, ItemToCompareWith) == 0x000240, "Member 'UFortItemRatingIndicator::ItemToCompareWith' has a wrong offset!");
static_assert(offsetof(UFortItemRatingIndicator, RatingTypeIcon) == 0x000248, "Member 'UFortItemRatingIndicator::RatingTypeIcon' has a wrong offset!");
static_assert(offsetof(UFortItemRatingIndicator, RatingValue) == 0x000578, "Member 'UFortItemRatingIndicator::RatingValue' has a wrong offset!");
static_assert(offsetof(UFortItemRatingIndicator, ComparisonResult) == 0x00057C, "Member 'UFortItemRatingIndicator::ComparisonResult' has a wrong offset!");
static_assert(offsetof(UFortItemRatingIndicator, ShouldAppearEnchanted) == 0x00057D, "Member 'UFortItemRatingIndicator::ShouldAppearEnchanted' has a wrong offset!");

// Class FortniteUI.FortAnnouncementWidget
// 0x0008 (0x0240 - 0x0238)
class UFortAnnouncementWidget : public UCommonUserWidget
{
public:
	class AFortClientAnnouncement*                BoundAnnouncement;                                 // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AnnouncementStopped(class AFortClientAnnouncement* Announcement);
	void BindUpdateEvents(class AFortClientAnnouncement* Announcement);
	class FName FindFirstUnboundAction(const class FText& AnnouncementBody);
	void UpdateWidgetData(class AFortClientAnnouncement* Announcement);

	class FText GetTextForAction(const class FName& ActionName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAnnouncementWidget">();
	}
	static class UFortAnnouncementWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAnnouncementWidget>();
	}
};
static_assert(alignof(UFortAnnouncementWidget) == 0x000008, "Wrong alignment on UFortAnnouncementWidget");
static_assert(sizeof(UFortAnnouncementWidget) == 0x000240, "Wrong size on UFortAnnouncementWidget");
static_assert(offsetof(UFortAnnouncementWidget, BoundAnnouncement) == 0x000238, "Member 'UFortAnnouncementWidget::BoundAnnouncement' has a wrong offset!");

// Class FortniteUI.AthenaHUDPlayerActionAlertBase
// 0x0020 (0x0288 - 0x0268)
class UAthenaHUDPlayerActionAlertBase final : public UFortHUDElementWidget
{
public:
	TWeakObjectPtr<class AFortPlayerPawnAthena>   CurrentPlayerPawn;                                 // 0x0268(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_270[0x18];                                     // 0x0270(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AlertPlayer(EAthenaPlayerActionAlert Alert, const class FText& DetailText);
	void RequestNextAlert();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaHUDPlayerActionAlertBase">();
	}
	static class UAthenaHUDPlayerActionAlertBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaHUDPlayerActionAlertBase>();
	}
};
static_assert(alignof(UAthenaHUDPlayerActionAlertBase) == 0x000008, "Wrong alignment on UAthenaHUDPlayerActionAlertBase");
static_assert(sizeof(UAthenaHUDPlayerActionAlertBase) == 0x000288, "Wrong size on UAthenaHUDPlayerActionAlertBase");
static_assert(offsetof(UAthenaHUDPlayerActionAlertBase, CurrentPlayerPawn) == 0x000268, "Member 'UAthenaHUDPlayerActionAlertBase::CurrentPlayerPawn' has a wrong offset!");

// Class FortniteUI.AthenaIndicatorLayerBase
// 0x0028 (0x0290 - 0x0268)
class UAthenaIndicatorLayerBase final : public UFortHUDElementWidget
{
public:
	class UFortActorCanvas*                       GeneralIndicators;                                 // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAthenaPlayerViewModel*                 PlayerVM;                                          // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USlateVectorArtData*                    TeamIndicatorMesh;                                 // 0x0278(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_280[0x10];                                     // 0x0280(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetDataSource(class UAthenaPlayerViewModel* PlayerViewModel);
	void SquadIndicatorsChanged(const TArray<class AFortPlayerStateAthena*>& PlayerStates);

	class UAthenaPlayerViewModel* GetPlayerViewModel() const;
	TArray<class AFortPlayerStateAthena*> GetSquadMembers() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaIndicatorLayerBase">();
	}
	static class UAthenaIndicatorLayerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaIndicatorLayerBase>();
	}
};
static_assert(alignof(UAthenaIndicatorLayerBase) == 0x000008, "Wrong alignment on UAthenaIndicatorLayerBase");
static_assert(sizeof(UAthenaIndicatorLayerBase) == 0x000290, "Wrong size on UAthenaIndicatorLayerBase");
static_assert(offsetof(UAthenaIndicatorLayerBase, GeneralIndicators) == 0x000268, "Member 'UAthenaIndicatorLayerBase::GeneralIndicators' has a wrong offset!");
static_assert(offsetof(UAthenaIndicatorLayerBase, PlayerVM) == 0x000270, "Member 'UAthenaIndicatorLayerBase::PlayerVM' has a wrong offset!");
static_assert(offsetof(UAthenaIndicatorLayerBase, TeamIndicatorMesh) == 0x000278, "Member 'UAthenaIndicatorLayerBase::TeamIndicatorMesh' has a wrong offset!");

// Class FortniteUI.FortAlterationModScreenBase
// 0x0060 (0x03A8 - 0x0348)
class UFortAlterationModScreenBase : public UFortActivatablePanel
{
public:
	class UFortAlterationsWidget*                 AlterationsToEdit;                                 // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortAlterationOptionsBase*             AlterationSlotOptions;                             // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItemDetailsHostPanel*              ItemInspectionMainItemDetailsHostPanel;            // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItemDetailsHostPanel*              AlterationsExtraDetailsPanel;                      // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortAlterationModOptinScreenBase> AlterationModOptinScreenClass;                     // 0x0368(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    BackInputAction;                                   // 0x0370(0x0010)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFortAlterableItem>      AlterableItem;                                     // 0x0380(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortAlterationOption*                  CurrentAlterationOptionInternal;                   // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_390[0x18];                                     // 0x0390(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AreIngredientRequirementsMent(const TArray<struct FFortItemQuantityPair>& RequiredIngredients);
	void CancelSelection();
	void ConfirmSelection();
	void HandleBackAction(bool* bPassThrough);
	void OnAlterationModificationCompleted();
	void OnAlterationModificationStarted();
	void OnAlterationModificationSucess(int32 ModifiedSlotIndex);
	void OnAlterationOptionChanged(class UFortAlterationOption* CurrentAlterationOption);
	void OnItemSlotChanged(bool SelectedSlot);
	void RefreshItemAndAlterationsBP();
	void SetItemForAlterationsModding(class UFortAlterableItem* InAlterableItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAlterationModScreenBase">();
	}
	static class UFortAlterationModScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAlterationModScreenBase>();
	}
};
static_assert(alignof(UFortAlterationModScreenBase) == 0x000008, "Wrong alignment on UFortAlterationModScreenBase");
static_assert(sizeof(UFortAlterationModScreenBase) == 0x0003A8, "Wrong size on UFortAlterationModScreenBase");
static_assert(offsetof(UFortAlterationModScreenBase, AlterationsToEdit) == 0x000348, "Member 'UFortAlterationModScreenBase::AlterationsToEdit' has a wrong offset!");
static_assert(offsetof(UFortAlterationModScreenBase, AlterationSlotOptions) == 0x000350, "Member 'UFortAlterationModScreenBase::AlterationSlotOptions' has a wrong offset!");
static_assert(offsetof(UFortAlterationModScreenBase, ItemInspectionMainItemDetailsHostPanel) == 0x000358, "Member 'UFortAlterationModScreenBase::ItemInspectionMainItemDetailsHostPanel' has a wrong offset!");
static_assert(offsetof(UFortAlterationModScreenBase, AlterationsExtraDetailsPanel) == 0x000360, "Member 'UFortAlterationModScreenBase::AlterationsExtraDetailsPanel' has a wrong offset!");
static_assert(offsetof(UFortAlterationModScreenBase, AlterationModOptinScreenClass) == 0x000368, "Member 'UFortAlterationModScreenBase::AlterationModOptinScreenClass' has a wrong offset!");
static_assert(offsetof(UFortAlterationModScreenBase, BackInputAction) == 0x000370, "Member 'UFortAlterationModScreenBase::BackInputAction' has a wrong offset!");
static_assert(offsetof(UFortAlterationModScreenBase, AlterableItem) == 0x000380, "Member 'UFortAlterationModScreenBase::AlterableItem' has a wrong offset!");
static_assert(offsetof(UFortAlterationModScreenBase, CurrentAlterationOptionInternal) == 0x000388, "Member 'UFortAlterationModScreenBase::CurrentAlterationOptionInternal' has a wrong offset!");

// Class FortniteUI.AthenaInventoryEquipButtonBase
// 0x0018 (0x0B48 - 0x0B30)
class UAthenaInventoryEquipButtonBase final : public UCommonButton
{
public:
	class UFortMultiSizeItemCard*                 ItemWidget;                                        // 0x0B30(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                EmptyImage;                                        // 0x0B38(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SlotIndex;                                         // 0x0B40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B44[0x4];                                      // 0x0B44(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaInventoryEquipButtonBase">();
	}
	static class UAthenaInventoryEquipButtonBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaInventoryEquipButtonBase>();
	}
};
static_assert(alignof(UAthenaInventoryEquipButtonBase) == 0x000008, "Wrong alignment on UAthenaInventoryEquipButtonBase");
static_assert(sizeof(UAthenaInventoryEquipButtonBase) == 0x000B48, "Wrong size on UAthenaInventoryEquipButtonBase");
static_assert(offsetof(UAthenaInventoryEquipButtonBase, ItemWidget) == 0x000B30, "Member 'UAthenaInventoryEquipButtonBase::ItemWidget' has a wrong offset!");
static_assert(offsetof(UAthenaInventoryEquipButtonBase, EmptyImage) == 0x000B38, "Member 'UAthenaInventoryEquipButtonBase::EmptyImage' has a wrong offset!");
static_assert(offsetof(UAthenaInventoryEquipButtonBase, SlotIndex) == 0x000B40, "Member 'UAthenaInventoryEquipButtonBase::SlotIndex' has a wrong offset!");

// Class FortniteUI.AthenaLevelBarBase
// 0x0000 (0x02A0 - 0x02A0)
class UAthenaLevelBarBase final : public UFortActorIndicatorWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaLevelBarBase">();
	}
	static class UAthenaLevelBarBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaLevelBarBase>();
	}
};
static_assert(alignof(UAthenaLevelBarBase) == 0x000008, "Wrong alignment on UAthenaLevelBarBase");
static_assert(sizeof(UAthenaLevelBarBase) == 0x0002A0, "Wrong size on UAthenaLevelBarBase");

// Class FortniteUI.FortItemPlacementActor
// 0x0048 (0x0378 - 0x0330)
class AFortItemPlacementActor : public AActor
{
public:
	class UWidgetComponent*                       WidgetComponent_LoadingIndicator;                  // 0x0330(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsActorHovered;                                   // 0x0338(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        CurrentPawn;                                       // 0x0340(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_348[0x30];                                     // 0x0348(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandlePawnBeginCursorOver(class AActor* TouchedActor);
	void HandlePawnClicked(class AActor* TouchedActor, const struct FKey& ButtonPressed);
	void HandlePawnEndCursorOver(class AActor* TouchedActor);
	void HandlePawnFinishedApplyingCharacterParts(class AFortPlayerPawn* Pawn);
	void HandlePawnTouchReleased(ETouchIndex FingerIndex, class AActor* TouchedActor);
	void OnHeroPawnSetupCompleted();
	void OnHovered();
	void OnItemClicked();
	void OnPreviewActorSpawned();
	void OnRemovePreviewActor();
	void OnUnhovered();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemPlacementActor">();
	}
	static class AFortItemPlacementActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortItemPlacementActor>();
	}
};
static_assert(alignof(AFortItemPlacementActor) == 0x000008, "Wrong alignment on AFortItemPlacementActor");
static_assert(sizeof(AFortItemPlacementActor) == 0x000378, "Wrong size on AFortItemPlacementActor");
static_assert(offsetof(AFortItemPlacementActor, WidgetComponent_LoadingIndicator) == 0x000330, "Member 'AFortItemPlacementActor::WidgetComponent_LoadingIndicator' has a wrong offset!");
static_assert(offsetof(AFortItemPlacementActor, bIsActorHovered) == 0x000338, "Member 'AFortItemPlacementActor::bIsActorHovered' has a wrong offset!");
static_assert(offsetof(AFortItemPlacementActor, CurrentPawn) == 0x000340, "Member 'AFortItemPlacementActor::CurrentPawn' has a wrong offset!");

// Class FortniteUI.FortItemPreviewPedestal
// 0x0068 (0x03E0 - 0x0378)
class AFortItemPreviewPedestal : public AFortItemPlacementActor
{
public:
	TWeakObjectPtr<class APlayerController>       ContextualPlayerController;                        // 0x0378(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortHero*                              TemporaryHeroInstance;                             // 0x0380(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UCustomCharacterPart*>           AdditionalCharacterParts;                          // 0x0388(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_398[0x28];                                     // 0x0398(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        WeaponPlacementComponent;                          // 0x03C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChildActorComponent*                   PreviewActorComponent;                             // 0x03C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                   PreviewStaticMeshComponent;                        // 0x03D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMeshComponent*                 PreviewSkelMeshComponent;                          // 0x03D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ClearDisplay();
	void PreviewItemBP(class UFortItem* Item, bool bIncludeCurrentLoadout);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemPreviewPedestal">();
	}
	static class AFortItemPreviewPedestal* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortItemPreviewPedestal>();
	}
};
static_assert(alignof(AFortItemPreviewPedestal) == 0x000008, "Wrong alignment on AFortItemPreviewPedestal");
static_assert(sizeof(AFortItemPreviewPedestal) == 0x0003E0, "Wrong size on AFortItemPreviewPedestal");
static_assert(offsetof(AFortItemPreviewPedestal, ContextualPlayerController) == 0x000378, "Member 'AFortItemPreviewPedestal::ContextualPlayerController' has a wrong offset!");
static_assert(offsetof(AFortItemPreviewPedestal, TemporaryHeroInstance) == 0x000380, "Member 'AFortItemPreviewPedestal::TemporaryHeroInstance' has a wrong offset!");
static_assert(offsetof(AFortItemPreviewPedestal, AdditionalCharacterParts) == 0x000388, "Member 'AFortItemPreviewPedestal::AdditionalCharacterParts' has a wrong offset!");
static_assert(offsetof(AFortItemPreviewPedestal, WeaponPlacementComponent) == 0x0003C0, "Member 'AFortItemPreviewPedestal::WeaponPlacementComponent' has a wrong offset!");
static_assert(offsetof(AFortItemPreviewPedestal, PreviewActorComponent) == 0x0003C8, "Member 'AFortItemPreviewPedestal::PreviewActorComponent' has a wrong offset!");
static_assert(offsetof(AFortItemPreviewPedestal, PreviewStaticMeshComponent) == 0x0003D0, "Member 'AFortItemPreviewPedestal::PreviewStaticMeshComponent' has a wrong offset!");
static_assert(offsetof(AFortItemPreviewPedestal, PreviewSkelMeshComponent) == 0x0003D8, "Member 'AFortItemPreviewPedestal::PreviewSkelMeshComponent' has a wrong offset!");

// Class FortniteUI.FortHeroLoadoutPedestal
// 0x0038 (0x0418 - 0x03E0)
class AFortHeroLoadoutPedestal : public AFortItemPreviewPedestal
{
public:
	class FName                                   SlotName;                                          // 0x03E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UFortCampaignHeroLoadoutItem> HeroLoadout;                                       // 0x03E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSlotFocusedInUI;                                // 0x03F0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F1[0x27];                                     // 0x03F1(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleDifferentHeroLoadoutSlotFocused(const class FName FocusedSlotName);
	void HandleDifferentLoadoutViewed(const class UFortCampaignHeroLoadoutItem* PreviousLoadout, const class UFortCampaignHeroLoadoutItem* CurrentLoadout);
	void HandleMcpProfilesInitialized();
	void HandleSlotFocusInUIChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHeroLoadoutPedestal">();
	}
	static class AFortHeroLoadoutPedestal* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortHeroLoadoutPedestal>();
	}
};
static_assert(alignof(AFortHeroLoadoutPedestal) == 0x000008, "Wrong alignment on AFortHeroLoadoutPedestal");
static_assert(sizeof(AFortHeroLoadoutPedestal) == 0x000418, "Wrong size on AFortHeroLoadoutPedestal");
static_assert(offsetof(AFortHeroLoadoutPedestal, SlotName) == 0x0003E0, "Member 'AFortHeroLoadoutPedestal::SlotName' has a wrong offset!");
static_assert(offsetof(AFortHeroLoadoutPedestal, HeroLoadout) == 0x0003E8, "Member 'AFortHeroLoadoutPedestal::HeroLoadout' has a wrong offset!");
static_assert(offsetof(AFortHeroLoadoutPedestal, bIsSlotFocusedInUI) == 0x0003F0, "Member 'AFortHeroLoadoutPedestal::bIsSlotFocusedInUI' has a wrong offset!");

// Class FortniteUI.AthenaLoadingScreenPreviewPanelBase
// 0x0018 (0x0360 - 0x0348)
class UAthenaLoadingScreenPreviewPanelBase final : public UFortActivatablePanel
{
public:
	class UAthenaLoadingScreenItemDefinition*     MyLoadingScreen;                                   // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNativeWidgetHost*                      LoadingScreenSlot;                                 // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_358[0x8];                                      // 0x0358(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaLoadingScreenPreviewPanelBase">();
	}
	static class UAthenaLoadingScreenPreviewPanelBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaLoadingScreenPreviewPanelBase>();
	}
};
static_assert(alignof(UAthenaLoadingScreenPreviewPanelBase) == 0x000008, "Wrong alignment on UAthenaLoadingScreenPreviewPanelBase");
static_assert(sizeof(UAthenaLoadingScreenPreviewPanelBase) == 0x000360, "Wrong size on UAthenaLoadingScreenPreviewPanelBase");
static_assert(offsetof(UAthenaLoadingScreenPreviewPanelBase, MyLoadingScreen) == 0x000348, "Member 'UAthenaLoadingScreenPreviewPanelBase::MyLoadingScreen' has a wrong offset!");
static_assert(offsetof(UAthenaLoadingScreenPreviewPanelBase, LoadingScreenSlot) == 0x000350, "Member 'UAthenaLoadingScreenPreviewPanelBase::LoadingScreenSlot' has a wrong offset!");

// Class FortniteUI.AthenaLobbyBase
// 0x0098 (0x03E0 - 0x0348)
class UAthenaLobbyBase : public UFortActivatablePanel
{
public:
	uint8                                         Pad_348[0x10];                                     // 0x0348(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               OverlayMain;                                       // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAthenaMatchmakingWidget*           AthenaMatchmakingPlay;                             // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonBorder*                          DefaultLobbyDetails;                               // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortShowdownDetailView*                ShowdownLobbyDetails;                              // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                FeaturedCreativeContent;                           // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                NullLobbyDetails;                                  // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonWidgetSwitcher*                  LobbyDetailsModeSwitcher;                          // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_390[0x19];                                     // 0x0390(0x0019)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsSwitchingLevels;                                // 0x03A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortLobbyType                                CurrentLobbyType;                                  // 0x03AA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3AB[0x1];                                      // 0x03AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActiveLobbyLevelName;                              // 0x03AC(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   LoadingLobbyLevelName;                             // 0x03B4(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   NextLobbyLevelName;                                // 0x03BC(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFriendCodeShareButtonBase*             FriendCodeFrontEndShareButton;                     // 0x03C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCatalogMessaging*                      CatalogMessaging;                                  // 0x03D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          GenericLinkButton;                                 // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void DisplayStoreUpdated(class UStoreToastRequest* StoreUpdatedRequest);
	void DynamicHandleLoadingScreenVisibilityChanged(bool Param_IsVisible);
	void HandleGenericLinkButtonClicked();
	void HandlePlaylistDataChanged(const struct FPlaylistData& NewPlaylistData);
	void LoadLobbyBackground();
	void OnBeginCursorOverPlayer(int32 PlayerIndex);
	void OnEndCursorOverPlayer(int32 PlayerIndex);
	void OnLobbyChanged(const EFortLobbyType& LobbyType);
	void OnNavigationLeft();
	void OnNavigationRight();
	void OnNavigationUp();
	void OnPlayerClicked(int32 PlayerIndex);
	void OnPlaylistChanged(EFortLobbyType LobbyType);
	void OnUpdateSocialImportButtonText(const class FText& NewText);
	void ShowDailyNews();
	void ShowHighlightSummary();
	void ShowMobileAutoFireScreen();
	void UpdateGenericLinkText(const class FText& NewText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaLobbyBase">();
	}
	static class UAthenaLobbyBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaLobbyBase>();
	}
};
static_assert(alignof(UAthenaLobbyBase) == 0x000008, "Wrong alignment on UAthenaLobbyBase");
static_assert(sizeof(UAthenaLobbyBase) == 0x0003E0, "Wrong size on UAthenaLobbyBase");
static_assert(offsetof(UAthenaLobbyBase, OverlayMain) == 0x000358, "Member 'UAthenaLobbyBase::OverlayMain' has a wrong offset!");
static_assert(offsetof(UAthenaLobbyBase, AthenaMatchmakingPlay) == 0x000360, "Member 'UAthenaLobbyBase::AthenaMatchmakingPlay' has a wrong offset!");
static_assert(offsetof(UAthenaLobbyBase, DefaultLobbyDetails) == 0x000368, "Member 'UAthenaLobbyBase::DefaultLobbyDetails' has a wrong offset!");
static_assert(offsetof(UAthenaLobbyBase, ShowdownLobbyDetails) == 0x000370, "Member 'UAthenaLobbyBase::ShowdownLobbyDetails' has a wrong offset!");
static_assert(offsetof(UAthenaLobbyBase, FeaturedCreativeContent) == 0x000378, "Member 'UAthenaLobbyBase::FeaturedCreativeContent' has a wrong offset!");
static_assert(offsetof(UAthenaLobbyBase, NullLobbyDetails) == 0x000380, "Member 'UAthenaLobbyBase::NullLobbyDetails' has a wrong offset!");
static_assert(offsetof(UAthenaLobbyBase, LobbyDetailsModeSwitcher) == 0x000388, "Member 'UAthenaLobbyBase::LobbyDetailsModeSwitcher' has a wrong offset!");
static_assert(offsetof(UAthenaLobbyBase, bIsSwitchingLevels) == 0x0003A9, "Member 'UAthenaLobbyBase::bIsSwitchingLevels' has a wrong offset!");
static_assert(offsetof(UAthenaLobbyBase, CurrentLobbyType) == 0x0003AA, "Member 'UAthenaLobbyBase::CurrentLobbyType' has a wrong offset!");
static_assert(offsetof(UAthenaLobbyBase, ActiveLobbyLevelName) == 0x0003AC, "Member 'UAthenaLobbyBase::ActiveLobbyLevelName' has a wrong offset!");
static_assert(offsetof(UAthenaLobbyBase, LoadingLobbyLevelName) == 0x0003B4, "Member 'UAthenaLobbyBase::LoadingLobbyLevelName' has a wrong offset!");
static_assert(offsetof(UAthenaLobbyBase, NextLobbyLevelName) == 0x0003BC, "Member 'UAthenaLobbyBase::NextLobbyLevelName' has a wrong offset!");
static_assert(offsetof(UAthenaLobbyBase, FriendCodeFrontEndShareButton) == 0x0003C8, "Member 'UAthenaLobbyBase::FriendCodeFrontEndShareButton' has a wrong offset!");
static_assert(offsetof(UAthenaLobbyBase, CatalogMessaging) == 0x0003D0, "Member 'UAthenaLobbyBase::CatalogMessaging' has a wrong offset!");
static_assert(offsetof(UAthenaLobbyBase, GenericLinkButton) == 0x0003D8, "Member 'UAthenaLobbyBase::GenericLinkButton' has a wrong offset!");

// Class FortniteUI.FortIconWithLabel
// 0x0020 (0x0128 - 0x0108)
class UFortIconWithLabel : public UWidget
{
public:
	bool                                          ShouldShowIcon;                                    // 0x0108(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldCollapseIconWhenNotShown;                    // 0x0109(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBrushSize                                IconBrushSize;                                     // 0x010A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldShowLabel;                                   // 0x010B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonTextStyle>           LabelTextStyle;                                    // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x10];                                     // 0x0118(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortIconWithLabel">();
	}
	static class UFortIconWithLabel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortIconWithLabel>();
	}
};
static_assert(alignof(UFortIconWithLabel) == 0x000008, "Wrong alignment on UFortIconWithLabel");
static_assert(sizeof(UFortIconWithLabel) == 0x000128, "Wrong size on UFortIconWithLabel");
static_assert(offsetof(UFortIconWithLabel, ShouldShowIcon) == 0x000108, "Member 'UFortIconWithLabel::ShouldShowIcon' has a wrong offset!");
static_assert(offsetof(UFortIconWithLabel, ShouldCollapseIconWhenNotShown) == 0x000109, "Member 'UFortIconWithLabel::ShouldCollapseIconWhenNotShown' has a wrong offset!");
static_assert(offsetof(UFortIconWithLabel, IconBrushSize) == 0x00010A, "Member 'UFortIconWithLabel::IconBrushSize' has a wrong offset!");
static_assert(offsetof(UFortIconWithLabel, ShouldShowLabel) == 0x00010B, "Member 'UFortIconWithLabel::ShouldShowLabel' has a wrong offset!");
static_assert(offsetof(UFortIconWithLabel, LabelTextStyle) == 0x000110, "Member 'UFortIconWithLabel::LabelTextStyle' has a wrong offset!");

// Class FortniteUI.FortViewModel
// 0x0000 (0x0028 - 0x0028)
class UFortViewModel : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortViewModel">();
	}
	static class UFortViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortViewModel>();
	}
};
static_assert(alignof(UFortViewModel) == 0x000008, "Wrong alignment on UFortViewModel");
static_assert(sizeof(UFortViewModel) == 0x000028, "Wrong size on UFortViewModel");

// Class FortniteUI.FortItemReceivedWidgetBase
// 0x0058 (0x0498 - 0x0440)
class UFortItemReceivedWidgetBase : public UFortActivatablePanelWithItemPreview
{
public:
	uint8                                         Pad_440[0x18];                                     // 0x0440(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortReceivedItemLootInfo>      ItemDefs;                                          // 0x0458(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UFortGiftBoxItem*                       GiftBoxItem;                                       // 0x0468(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 FromUsername;                                      // 0x0470(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         HeaderContainer;                                   // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UScrollBox*                             GiftScrollBox;                                     // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UItemCardWidgetBase>        ItemCardClass;                                     // 0x0490(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UFortItem* GetTemporaryInstance(const struct FFortReceivedItemLootInfo& ItemReference);
	void OnGiftBoxItemSet(bool bFromSelf);
	void OnGiftBoxItemSetInternal(bool bFromSelf);
	void SetAlignmentOnSlot(class UScrollBox* Widget, int32 Param_Index);
	void SetAlignmentOnSlots(class UScrollBox* Widget);
	void SetGiftBoxItem(class UFortGiftBoxItem* Param_GiftBoxItem);
	void ShowGiftBox();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemReceivedWidgetBase">();
	}
	static class UFortItemReceivedWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemReceivedWidgetBase>();
	}
};
static_assert(alignof(UFortItemReceivedWidgetBase) == 0x000008, "Wrong alignment on UFortItemReceivedWidgetBase");
static_assert(sizeof(UFortItemReceivedWidgetBase) == 0x000498, "Wrong size on UFortItemReceivedWidgetBase");
static_assert(offsetof(UFortItemReceivedWidgetBase, ItemDefs) == 0x000458, "Member 'UFortItemReceivedWidgetBase::ItemDefs' has a wrong offset!");
static_assert(offsetof(UFortItemReceivedWidgetBase, GiftBoxItem) == 0x000468, "Member 'UFortItemReceivedWidgetBase::GiftBoxItem' has a wrong offset!");
static_assert(offsetof(UFortItemReceivedWidgetBase, FromUsername) == 0x000470, "Member 'UFortItemReceivedWidgetBase::FromUsername' has a wrong offset!");
static_assert(offsetof(UFortItemReceivedWidgetBase, HeaderContainer) == 0x000480, "Member 'UFortItemReceivedWidgetBase::HeaderContainer' has a wrong offset!");
static_assert(offsetof(UFortItemReceivedWidgetBase, GiftScrollBox) == 0x000488, "Member 'UFortItemReceivedWidgetBase::GiftScrollBox' has a wrong offset!");
static_assert(offsetof(UFortItemReceivedWidgetBase, ItemCardClass) == 0x000490, "Member 'UFortItemReceivedWidgetBase::ItemCardClass' has a wrong offset!");

// Class FortniteUI.FortItemReceivedPrePrompt
// 0x0010 (0x04A8 - 0x0498)
class UFortItemReceivedPrePrompt : public UFortItemReceivedWidgetBase
{
public:
	UMulticastDelegateProperty_                   OnPrePromptClosed;                                 // 0x0498(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemReceivedPrePrompt">();
	}
	static class UFortItemReceivedPrePrompt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemReceivedPrePrompt>();
	}
};
static_assert(alignof(UFortItemReceivedPrePrompt) == 0x000008, "Wrong alignment on UFortItemReceivedPrePrompt");
static_assert(sizeof(UFortItemReceivedPrePrompt) == 0x0004A8, "Wrong size on UFortItemReceivedPrePrompt");
static_assert(offsetof(UFortItemReceivedPrePrompt, OnPrePromptClosed) == 0x000498, "Member 'UFortItemReceivedPrePrompt::OnPrePromptClosed' has a wrong offset!");

// Class FortniteUI.FortPlayerViewModel
// 0x00B0 (0x00D8 - 0x0028)
class UFortPlayerViewModel : public UFortViewModel
{
public:
	uint8                                         Pad_28[0xB0];                                      // 0x0028(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerViewModel">();
	}
	static class UFortPlayerViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerViewModel>();
	}
};
static_assert(alignof(UFortPlayerViewModel) == 0x000008, "Wrong alignment on UFortPlayerViewModel");
static_assert(sizeof(UFortPlayerViewModel) == 0x0000D8, "Wrong size on UFortPlayerViewModel");

// Class FortniteUI.FortHelpTreeItemBase
// 0x0010 (0x0B40 - 0x0B30)
class UFortHelpTreeItemBase : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortHelpItem*                          HelpItem;                                          // 0x0B38(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHelpTreeItemBase">();
	}
	static class UFortHelpTreeItemBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHelpTreeItemBase>();
	}
};
static_assert(alignof(UFortHelpTreeItemBase) == 0x000008, "Wrong alignment on UFortHelpTreeItemBase");
static_assert(sizeof(UFortHelpTreeItemBase) == 0x000B40, "Wrong size on UFortHelpTreeItemBase");
static_assert(offsetof(UFortHelpTreeItemBase, HelpItem) == 0x000B38, "Member 'UFortHelpTreeItemBase::HelpItem' has a wrong offset!");

// Class FortniteUI.IconTextButtonSpectatorBase
// 0x0000 (0x0B30 - 0x0B30)
class UIconTextButtonSpectatorBase final : public UCommonButton
{
public:
	void SetText(const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IconTextButtonSpectatorBase">();
	}
	static class UIconTextButtonSpectatorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIconTextButtonSpectatorBase>();
	}
};
static_assert(alignof(UIconTextButtonSpectatorBase) == 0x000008, "Wrong alignment on UIconTextButtonSpectatorBase");
static_assert(sizeof(UIconTextButtonSpectatorBase) == 0x000B30, "Wrong size on UIconTextButtonSpectatorBase");

// Class FortniteUI.AthenaPlayerViewModel
// 0x0088 (0x0160 - 0x00D8)
class UAthenaPlayerViewModel : public UFortPlayerViewModel
{
public:
	uint8                                         Pad_D8[0x88];                                      // 0x00D8(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaPlayerViewModel">();
	}
	static class UAthenaPlayerViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaPlayerViewModel>();
	}
};
static_assert(alignof(UAthenaPlayerViewModel) == 0x000008, "Wrong alignment on UAthenaPlayerViewModel");
static_assert(sizeof(UAthenaPlayerViewModel) == 0x000160, "Wrong size on UAthenaPlayerViewModel");

// Class FortniteUI.AthenaLocalPlayerViewModel
// 0x0008 (0x0168 - 0x0160)
class UAthenaLocalPlayerViewModel final : public UAthenaPlayerViewModel
{
public:
	class AFortPlayerControllerAthena*            PlayerController;                                  // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaLocalPlayerViewModel">();
	}
	static class UAthenaLocalPlayerViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaLocalPlayerViewModel>();
	}
};
static_assert(alignof(UAthenaLocalPlayerViewModel) == 0x000008, "Wrong alignment on UAthenaLocalPlayerViewModel");
static_assert(sizeof(UAthenaLocalPlayerViewModel) == 0x000168, "Wrong size on UAthenaLocalPlayerViewModel");
static_assert(offsetof(UAthenaLocalPlayerViewModel, PlayerController) == 0x000160, "Member 'UAthenaLocalPlayerViewModel::PlayerController' has a wrong offset!");

// Class FortniteUI.FortGlobalActionDetailsDataSource
// 0x0000 (0x0028 - 0x0028)
class IFortGlobalActionDetailsDataSource final : public IInterface
{
public:
	void AddOnChangeDelegate(const TDelegate<void(class UObject* Source)>& InDelegate);
	void RemoveOnChangeDelegate(const TDelegate<void(class UObject* Source)>& InDelegate);

	struct FFortGlobalActionDetails GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGlobalActionDetailsDataSource">();
	}
	static class IFortGlobalActionDetailsDataSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFortGlobalActionDetailsDataSource>();
	}
};
static_assert(alignof(IFortGlobalActionDetailsDataSource) == 0x000008, "Wrong alignment on IFortGlobalActionDetailsDataSource");
static_assert(sizeof(IFortGlobalActionDetailsDataSource) == 0x000028, "Wrong size on IFortGlobalActionDetailsDataSource");

// Class FortniteUI.AthenaLootStoreScreenBase
// 0x0000 (0x0348 - 0x0348)
class UAthenaLootStoreScreenBase final : public UFortActivatablePanel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaLootStoreScreenBase">();
	}
	static class UAthenaLootStoreScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaLootStoreScreenBase>();
	}
};
static_assert(alignof(UAthenaLootStoreScreenBase) == 0x000008, "Wrong alignment on UAthenaLootStoreScreenBase");
static_assert(sizeof(UAthenaLootStoreScreenBase) == 0x000348, "Wrong size on UAthenaLootStoreScreenBase");

// Class FortniteUI.FortItemListView
// 0x0128 (0x0460 - 0x0338)
class UFortItemListView final : public UCommonListView
{
public:
	uint8                                         Pad_338[0xE0];                                     // 0x0338(0x00E0)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShouldShowNullItemListEntry;                      // 0x0418(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutomaticallyLoadItemDetails;                     // 0x0419(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemListViewDisplayType                      DisplayType;                                       // 0x041A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41B[0x5];                                      // 0x041B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnInventoryUpdatedEvent;                           // 0x0420(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UFortItem>>       CustomItemList;                                    // 0x0430(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class UFortItem>>       ItemsForListView;                                  // 0x0440(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TScriptInterface<class IFortItemViewContextInterface> ItemViewContext;                                   // 0x0450(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemListView">();
	}
	static class UFortItemListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemListView>();
	}
};
static_assert(alignof(UFortItemListView) == 0x000008, "Wrong alignment on UFortItemListView");
static_assert(sizeof(UFortItemListView) == 0x000460, "Wrong size on UFortItemListView");
static_assert(offsetof(UFortItemListView, bShouldShowNullItemListEntry) == 0x000418, "Member 'UFortItemListView::bShouldShowNullItemListEntry' has a wrong offset!");
static_assert(offsetof(UFortItemListView, bAutomaticallyLoadItemDetails) == 0x000419, "Member 'UFortItemListView::bAutomaticallyLoadItemDetails' has a wrong offset!");
static_assert(offsetof(UFortItemListView, DisplayType) == 0x00041A, "Member 'UFortItemListView::DisplayType' has a wrong offset!");
static_assert(offsetof(UFortItemListView, OnInventoryUpdatedEvent) == 0x000420, "Member 'UFortItemListView::OnInventoryUpdatedEvent' has a wrong offset!");
static_assert(offsetof(UFortItemListView, CustomItemList) == 0x000430, "Member 'UFortItemListView::CustomItemList' has a wrong offset!");
static_assert(offsetof(UFortItemListView, ItemsForListView) == 0x000440, "Member 'UFortItemListView::ItemsForListView' has a wrong offset!");
static_assert(offsetof(UFortItemListView, ItemViewContext) == 0x000450, "Member 'UFortItemListView::ItemViewContext' has a wrong offset!");

// Class FortniteUI.AthenaMapLayer
// 0x0018 (0x0120 - 0x0108)
class UAthenaMapLayer final : public UWidget
{
public:
	uint8                                         Pad_108[0x10];                                     // 0x0108(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ULocalPlayer*                           LocalPlayer;                                       // 0x0118(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ClearTouches();
	void FlashPlayerIcon();
	void SetLocalPlayer(class ULocalPlayer* Param_LocalPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaMapLayer">();
	}
	static class UAthenaMapLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaMapLayer>();
	}
};
static_assert(alignof(UAthenaMapLayer) == 0x000008, "Wrong alignment on UAthenaMapLayer");
static_assert(sizeof(UAthenaMapLayer) == 0x000120, "Wrong size on UAthenaMapLayer");
static_assert(offsetof(UAthenaMapLayer, LocalPlayer) == 0x000118, "Member 'UAthenaMapLayer::LocalPlayer' has a wrong offset!");

// Class FortniteUI.AthenaMatchReadyDesktopPopup
// 0x0018 (0x0248 - 0x0230)
class UAthenaMatchReadyDesktopPopup final : public UUserWidget
{
public:
	uint8                                         Pad_230[0x18];                                     // 0x0230(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UserDismissedDialog(bool bBringToFront);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaMatchReadyDesktopPopup">();
	}
	static class UAthenaMatchReadyDesktopPopup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaMatchReadyDesktopPopup>();
	}
};
static_assert(alignof(UAthenaMatchReadyDesktopPopup) == 0x000008, "Wrong alignment on UAthenaMatchReadyDesktopPopup");
static_assert(sizeof(UAthenaMatchReadyDesktopPopup) == 0x000248, "Wrong size on UAthenaMatchReadyDesktopPopup");

// Class FortniteUI.AthenaMinimap
// 0x0008 (0x0110 - 0x0108)
class UAthenaMinimap final : public UWidget
{
public:
	struct FVector2D                              DesiredSize;                                       // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaMinimap">();
	}
	static class UAthenaMinimap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaMinimap>();
	}
};
static_assert(alignof(UAthenaMinimap) == 0x000008, "Wrong alignment on UAthenaMinimap");
static_assert(sizeof(UAthenaMinimap) == 0x000110, "Wrong size on UAthenaMinimap");
static_assert(offsetof(UAthenaMinimap, DesiredSize) == 0x000108, "Member 'UAthenaMinimap::DesiredSize' has a wrong offset!");

// Class FortniteUI.AthenaPartyBar
// 0x0008 (0x0240 - 0x0238)
class UAthenaPartyBar final : public UCommonUserWidget
{
public:
	class UDynamicEntryBox*                       EntryBox_PartyMembers;                             // 0x0238(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaPartyBar">();
	}
	static class UAthenaPartyBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaPartyBar>();
	}
};
static_assert(alignof(UAthenaPartyBar) == 0x000008, "Wrong alignment on UAthenaPartyBar");
static_assert(sizeof(UAthenaPartyBar) == 0x000240, "Wrong size on UAthenaPartyBar");
static_assert(offsetof(UAthenaPartyBar, EntryBox_PartyMembers) == 0x000238, "Member 'UAthenaPartyBar::EntryBox_PartyMembers' has a wrong offset!");

// Class FortniteUI.AthenaPickingLayer
// 0x0000 (0x0238 - 0x0238)
class UAthenaPickingLayer final : public UCommonUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaPickingLayer">();
	}
	static class UAthenaPickingLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaPickingLayer>();
	}
};
static_assert(alignof(UAthenaPickingLayer) == 0x000008, "Wrong alignment on UAthenaPickingLayer");
static_assert(sizeof(UAthenaPickingLayer) == 0x000238, "Wrong size on UAthenaPickingLayer");

// Class FortniteUI.AthenaPlayerHitPointBarBase
// 0x0020 (0x0250 - 0x0230)
class UAthenaPlayerHitPointBarBase final : public UUserWidget
{
public:
	class UAthenaPlayerViewModel*                 PlayerVM;                                          // 0x0230(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHealthBarType                                BarType;                                           // 0x0238(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValueCurrent;                                      // 0x023C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ValueLast;                                         // 0x0240(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ValueMax;                                          // 0x0244(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastToCurrentUpdateRate;                           // 0x0248(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDBNOStateChanged(bool IsDBNO);
	void OnDeltaChanged();
	void OnMaxValueChanged(float Value);
	void OnValueChangedWithReason(float Value, EFortHitPointModificationReason Reason);
	void SetDataSource(class UAthenaPlayerViewModel* PlayerViewModel);

	float GetCurrentValuePercentage() const;
	float GetLastValuePercentage() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaPlayerHitPointBarBase">();
	}
	static class UAthenaPlayerHitPointBarBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaPlayerHitPointBarBase>();
	}
};
static_assert(alignof(UAthenaPlayerHitPointBarBase) == 0x000008, "Wrong alignment on UAthenaPlayerHitPointBarBase");
static_assert(sizeof(UAthenaPlayerHitPointBarBase) == 0x000250, "Wrong size on UAthenaPlayerHitPointBarBase");
static_assert(offsetof(UAthenaPlayerHitPointBarBase, PlayerVM) == 0x000230, "Member 'UAthenaPlayerHitPointBarBase::PlayerVM' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerHitPointBarBase, BarType) == 0x000238, "Member 'UAthenaPlayerHitPointBarBase::BarType' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerHitPointBarBase, ValueCurrent) == 0x00023C, "Member 'UAthenaPlayerHitPointBarBase::ValueCurrent' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerHitPointBarBase, ValueLast) == 0x000240, "Member 'UAthenaPlayerHitPointBarBase::ValueLast' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerHitPointBarBase, ValueMax) == 0x000244, "Member 'UAthenaPlayerHitPointBarBase::ValueMax' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerHitPointBarBase, LastToCurrentUpdateRate) == 0x000248, "Member 'UAthenaPlayerHitPointBarBase::LastToCurrentUpdateRate' has a wrong offset!");

// Class FortniteUI.AthenaPlayerIndicatorBase
// 0x0010 (0x02B0 - 0x02A0)
class UAthenaPlayerIndicatorBase final : public UFortActorIndicatorWidget
{
public:
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaPlayerViewModel*                 PlayerVM;                                          // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BeingRevivedStateChanged(class AFortPlayerStateAthena* PS, bool bReviving);
	void DBNOStateChanged(class AFortPlayerStateAthena* PS, bool bDBNO);
	void MapIndicatorPositionChanged(class AFortPlayerStateAthena* PS);
	void PlayerNameChanged(class AFortPlayerStateAthena* PS, const class FString& PlayerName);
	void RefreshCurrentPawn();
	void SetViewModel(class UAthenaPlayerViewModel* InPlayerVM);
	void ShowCallout(ETeamMemberState Callout);
	void TalkingStateChanged(class AFortPlayerStateAthena* PS, bool bTalking);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaPlayerIndicatorBase">();
	}
	static class UAthenaPlayerIndicatorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaPlayerIndicatorBase>();
	}
};
static_assert(alignof(UAthenaPlayerIndicatorBase) == 0x000008, "Wrong alignment on UAthenaPlayerIndicatorBase");
static_assert(sizeof(UAthenaPlayerIndicatorBase) == 0x0002B0, "Wrong size on UAthenaPlayerIndicatorBase");
static_assert(offsetof(UAthenaPlayerIndicatorBase, PlayerState) == 0x0002A0, "Member 'UAthenaPlayerIndicatorBase::PlayerState' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerIndicatorBase, PlayerVM) == 0x0002A8, "Member 'UAthenaPlayerIndicatorBase::PlayerVM' has a wrong offset!");

// Class FortniteUI.AthenaPlayerInfoBase
// 0x00D0 (0x0338 - 0x0268)
class UAthenaPlayerInfoBase final : public UFortHUDElementWidget
{
public:
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateColor                            Color_PlayerNameAlive;                             // 0x0270(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateColor                            Color_PlayerNameDead;                              // 0x0298(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateColor                            Color_PlayerNameDisconnected;                      // 0x02C0(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E8[0x8];                                      // 0x02E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 Image_HealthBar;                                   // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 Image_ShieldBar;                                   // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 Image_DBNOBar;                                     // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 Image_PlatformIcon;                                // 0x0308(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_PlayerName;                                   // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 Image_Marker;                                      // 0x0318(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUserWidget*                            DBNOStateWidget;                                   // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 Image_DeadIndicator;                               // 0x0328(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 Image_DisconnectedIndicator;                       // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BeingRevivedStateChanged(class AFortPlayerStateAthena* PS, bool bReviving);
	void DBNOStateChanged(class AFortPlayerStateAthena* PS, bool bDBNO);
	void HandleSpectatingChanged(class AFortPlayerStateZone* NewSpectatingTarget);
	void MapIndicatorPositionChanged(class AFortPlayerStateAthena* PS);
	void MutedStateChanged(class AFortPlayerStateAthena* PS, bool Muted);
	void OnDisplayAddFriend(bool bShowAnimation);
	void OnGameModeIconChange(class AFortPlayerStateAthena* PS, class UTexture2D* NewGameModeIcon);
	void SendEpicFriendInvite();
	void SetPlayerState(class AFortPlayerStateAthena* InPlayerState);
	void TalkingStateChanged(class AFortPlayerStateAthena* PS, bool bTalking);

	bool IsPlayerOnPC() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaPlayerInfoBase">();
	}
	static class UAthenaPlayerInfoBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaPlayerInfoBase>();
	}
};
static_assert(alignof(UAthenaPlayerInfoBase) == 0x000008, "Wrong alignment on UAthenaPlayerInfoBase");
static_assert(sizeof(UAthenaPlayerInfoBase) == 0x000338, "Wrong size on UAthenaPlayerInfoBase");
static_assert(offsetof(UAthenaPlayerInfoBase, PlayerState) == 0x000268, "Member 'UAthenaPlayerInfoBase::PlayerState' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerInfoBase, Color_PlayerNameAlive) == 0x000270, "Member 'UAthenaPlayerInfoBase::Color_PlayerNameAlive' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerInfoBase, Color_PlayerNameDead) == 0x000298, "Member 'UAthenaPlayerInfoBase::Color_PlayerNameDead' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerInfoBase, Color_PlayerNameDisconnected) == 0x0002C0, "Member 'UAthenaPlayerInfoBase::Color_PlayerNameDisconnected' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerInfoBase, Image_HealthBar) == 0x0002F0, "Member 'UAthenaPlayerInfoBase::Image_HealthBar' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerInfoBase, Image_ShieldBar) == 0x0002F8, "Member 'UAthenaPlayerInfoBase::Image_ShieldBar' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerInfoBase, Image_DBNOBar) == 0x000300, "Member 'UAthenaPlayerInfoBase::Image_DBNOBar' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerInfoBase, Image_PlatformIcon) == 0x000308, "Member 'UAthenaPlayerInfoBase::Image_PlatformIcon' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerInfoBase, Text_PlayerName) == 0x000310, "Member 'UAthenaPlayerInfoBase::Text_PlayerName' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerInfoBase, Image_Marker) == 0x000318, "Member 'UAthenaPlayerInfoBase::Image_Marker' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerInfoBase, DBNOStateWidget) == 0x000320, "Member 'UAthenaPlayerInfoBase::DBNOStateWidget' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerInfoBase, Image_DeadIndicator) == 0x000328, "Member 'UAthenaPlayerInfoBase::Image_DeadIndicator' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerInfoBase, Image_DisconnectedIndicator) == 0x000330, "Member 'UAthenaPlayerInfoBase::Image_DisconnectedIndicator' has a wrong offset!");

// Class FortniteUI.FortGameFeedbackBase
// 0x0148 (0x0490 - 0x0348)
class UFortGameFeedbackBase : public UFortActivatablePanel
{
public:
	class UEditableText*                          SubjectEditable;                                   // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             PlayerNameText;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMultiLineEditableText*                 BodyEditable;                                      // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButton*                          PlayerReportingCategoryButton;                     // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuAnchor*                            PlayerReportingCategoryMenuAnchor;                 // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButton*                          PlayerNameButton;                                  // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuAnchor*                            PlayerNameMenuAnchor;                              // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEditableText*                          BodyEditable_SingleLine;                           // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_388[0x50];                                     // 0x0388(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonGroup*                     ButtonGroup;                                       // 0x03D8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3E0[0x80];                                     // 0x03E0(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortDropdownDelegateRegistrar*         PlayerReportingCategoryDropdownRegistrar;          // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortDropdownDelegateRegistrar*         PlayerNameDropdownRegistrar;                       // 0x0468(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPlayerNameInfoContainer               PlayerNameInfoContainer;                           // 0x0470(0x0018)(NativeAccessSpecifierPrivate)
	bool                                          bDisableGameFeedbackAttachments;                   // 0x0488(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class FText GetDisplayTextForPlayerReportingCategoryBP(int32 CategoryIndex);
	static TArray<class FText> GetPlayerReportingCategoryLabels();

	void AddButtonWithFeedbackType(class UCommonButton* Button, EFortUIGameFeedbackType UIFeedbackType);
	void CancelFeedback();
	ESlateVisibility GetButtonVisibilityByUIFeedbackType(EFortUIGameFeedbackType UIFeedbackType);
	void InitiateDebugInfoForFeedback();
	void OnFeedbackTypeChanged(EFortUIGameFeedbackType FeedBackType);
	void OnFeedbackTypeSelected(class UCommonButton* SelectedButton, int32 ButtonIndex);
	void OnInitiateDebugInfoForFeedbackComplete();
	void OnPlayerNameSelected(class UCommonButton* SelectedButton, int32 ButtonIndex);
	void OnPlayerNameSelectedEvent(const class FText& Param_Name);
	void OnPlayerReportingCategorySelected(class UCommonButton* SelectedButton, int32 ButtonIndex);
	void OnReportingCategoryChanged(int32 CategoryIndex);
	void SelectKiller();
	void SelectSpectateTarget();
	void SubmitFeedback();

	const struct FPlayerNameInfoContainer GetPlayerNameInfoContainer() const;
	bool HasKiller() const;
	bool HasSelectedCategory() const;
	bool HasSelectedPlayer() const;
	bool HasSpectateTarget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameFeedbackBase">();
	}
	static class UFortGameFeedbackBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameFeedbackBase>();
	}
};
static_assert(alignof(UFortGameFeedbackBase) == 0x000008, "Wrong alignment on UFortGameFeedbackBase");
static_assert(sizeof(UFortGameFeedbackBase) == 0x000490, "Wrong size on UFortGameFeedbackBase");
static_assert(offsetof(UFortGameFeedbackBase, SubjectEditable) == 0x000348, "Member 'UFortGameFeedbackBase::SubjectEditable' has a wrong offset!");
static_assert(offsetof(UFortGameFeedbackBase, PlayerNameText) == 0x000350, "Member 'UFortGameFeedbackBase::PlayerNameText' has a wrong offset!");
static_assert(offsetof(UFortGameFeedbackBase, BodyEditable) == 0x000358, "Member 'UFortGameFeedbackBase::BodyEditable' has a wrong offset!");
static_assert(offsetof(UFortGameFeedbackBase, PlayerReportingCategoryButton) == 0x000360, "Member 'UFortGameFeedbackBase::PlayerReportingCategoryButton' has a wrong offset!");
static_assert(offsetof(UFortGameFeedbackBase, PlayerReportingCategoryMenuAnchor) == 0x000368, "Member 'UFortGameFeedbackBase::PlayerReportingCategoryMenuAnchor' has a wrong offset!");
static_assert(offsetof(UFortGameFeedbackBase, PlayerNameButton) == 0x000370, "Member 'UFortGameFeedbackBase::PlayerNameButton' has a wrong offset!");
static_assert(offsetof(UFortGameFeedbackBase, PlayerNameMenuAnchor) == 0x000378, "Member 'UFortGameFeedbackBase::PlayerNameMenuAnchor' has a wrong offset!");
static_assert(offsetof(UFortGameFeedbackBase, BodyEditable_SingleLine) == 0x000380, "Member 'UFortGameFeedbackBase::BodyEditable_SingleLine' has a wrong offset!");
static_assert(offsetof(UFortGameFeedbackBase, ButtonGroup) == 0x0003D8, "Member 'UFortGameFeedbackBase::ButtonGroup' has a wrong offset!");
static_assert(offsetof(UFortGameFeedbackBase, PlayerReportingCategoryDropdownRegistrar) == 0x000460, "Member 'UFortGameFeedbackBase::PlayerReportingCategoryDropdownRegistrar' has a wrong offset!");
static_assert(offsetof(UFortGameFeedbackBase, PlayerNameDropdownRegistrar) == 0x000468, "Member 'UFortGameFeedbackBase::PlayerNameDropdownRegistrar' has a wrong offset!");
static_assert(offsetof(UFortGameFeedbackBase, PlayerNameInfoContainer) == 0x000470, "Member 'UFortGameFeedbackBase::PlayerNameInfoContainer' has a wrong offset!");
static_assert(offsetof(UFortGameFeedbackBase, bDisableGameFeedbackAttachments) == 0x000488, "Member 'UFortGameFeedbackBase::bDisableGameFeedbackAttachments' has a wrong offset!");

// Class FortniteUI.AthenaPlayerKillsBase
// 0x0018 (0x0280 - 0x0268)
class UAthenaPlayerKillsBase final : public UFortHUDElementWidget
{
public:
	class UTextBlock*                             KillsText;                                         // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                KillsSource;                                       // 0x0270(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCustomKillSource;                                 // 0x0278(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetKillsSourcePlayerController(class AFortPlayerControllerAthena* InPlayerController);
	void SetKillsSourcePlayerState(class AFortPlayerStateAthena* InPlayerState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaPlayerKillsBase">();
	}
	static class UAthenaPlayerKillsBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaPlayerKillsBase>();
	}
};
static_assert(alignof(UAthenaPlayerKillsBase) == 0x000008, "Wrong alignment on UAthenaPlayerKillsBase");
static_assert(sizeof(UAthenaPlayerKillsBase) == 0x000280, "Wrong size on UAthenaPlayerKillsBase");
static_assert(offsetof(UAthenaPlayerKillsBase, KillsText) == 0x000268, "Member 'UAthenaPlayerKillsBase::KillsText' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerKillsBase, KillsSource) == 0x000270, "Member 'UAthenaPlayerKillsBase::KillsSource' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerKillsBase, bCustomKillSource) == 0x000278, "Member 'UAthenaPlayerKillsBase::bCustomKillSource' has a wrong offset!");

// Class FortniteUI.FortMissionTracker
// 0x0030 (0x0298 - 0x0268)
class UFortMissionTracker final : public UFortHUDElementWidget
{
public:
	class UFortMissionTrackerList*                MissionTrackerList;                                // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortQuestTrackerList*                  MainQuestList;                                     // 0x0270(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortQuestTrackerList*                  PinnedQuestsList;                                  // 0x0278(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                AdditionalEntriesIndicator;                        // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonNumericTextBlock*                DebugHeightEstimate;                               // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AllowedSize;                                       // 0x0290(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnforceHeightLimit;                               // 0x0294(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSizeEstimateNeedsRefresh;                         // 0x0295(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_296[0x2];                                      // 0x0296(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleDebugHUDObjectiveHeightChanged(bool bIsDebugging);
	void HandleSizeEstimateChanged(class UObject* ChangedElement);
	void RefreshSizeEstimate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMissionTracker">();
	}
	static class UFortMissionTracker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMissionTracker>();
	}
};
static_assert(alignof(UFortMissionTracker) == 0x000008, "Wrong alignment on UFortMissionTracker");
static_assert(sizeof(UFortMissionTracker) == 0x000298, "Wrong size on UFortMissionTracker");
static_assert(offsetof(UFortMissionTracker, MissionTrackerList) == 0x000268, "Member 'UFortMissionTracker::MissionTrackerList' has a wrong offset!");
static_assert(offsetof(UFortMissionTracker, MainQuestList) == 0x000270, "Member 'UFortMissionTracker::MainQuestList' has a wrong offset!");
static_assert(offsetof(UFortMissionTracker, PinnedQuestsList) == 0x000278, "Member 'UFortMissionTracker::PinnedQuestsList' has a wrong offset!");
static_assert(offsetof(UFortMissionTracker, AdditionalEntriesIndicator) == 0x000280, "Member 'UFortMissionTracker::AdditionalEntriesIndicator' has a wrong offset!");
static_assert(offsetof(UFortMissionTracker, DebugHeightEstimate) == 0x000288, "Member 'UFortMissionTracker::DebugHeightEstimate' has a wrong offset!");
static_assert(offsetof(UFortMissionTracker, AllowedSize) == 0x000290, "Member 'UFortMissionTracker::AllowedSize' has a wrong offset!");
static_assert(offsetof(UFortMissionTracker, bEnforceHeightLimit) == 0x000294, "Member 'UFortMissionTracker::bEnforceHeightLimit' has a wrong offset!");
static_assert(offsetof(UFortMissionTracker, bSizeEstimateNeedsRefresh) == 0x000295, "Member 'UFortMissionTracker::bSizeEstimateNeedsRefresh' has a wrong offset!");

// Class FortniteUI.AthenaPlayersLeftBase
// 0x0018 (0x0280 - 0x0268)
class UAthenaPlayersLeftBase final : public UFortHUDElementWidget
{
public:
	uint8                                         Pad_268[0x18];                                     // 0x0268(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetPlayersLeftText(const class FText& PlayersText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaPlayersLeftBase">();
	}
	static class UAthenaPlayersLeftBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaPlayersLeftBase>();
	}
};
static_assert(alignof(UAthenaPlayersLeftBase) == 0x000008, "Wrong alignment on UAthenaPlayersLeftBase");
static_assert(sizeof(UAthenaPlayersLeftBase) == 0x000280, "Wrong size on UAthenaPlayersLeftBase");

// Class FortniteUI.AthenaPlayerTeamKillsBase
// 0x0018 (0x0280 - 0x0268)
class UAthenaPlayerTeamKillsBase final : public UFortHUDElementWidget
{
public:
	class UTextBlock*                             KillsText;                                         // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                KillsSource;                                       // 0x0270(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCustomKillSource;                                 // 0x0278(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetKillsSourcePlayerController(class AFortPlayerControllerAthena* InPlayerController);
	void SetKillsSourcePlayerState(class AFortPlayerStateAthena* InPlayerState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaPlayerTeamKillsBase">();
	}
	static class UAthenaPlayerTeamKillsBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaPlayerTeamKillsBase>();
	}
};
static_assert(alignof(UAthenaPlayerTeamKillsBase) == 0x000008, "Wrong alignment on UAthenaPlayerTeamKillsBase");
static_assert(sizeof(UAthenaPlayerTeamKillsBase) == 0x000280, "Wrong size on UAthenaPlayerTeamKillsBase");
static_assert(offsetof(UAthenaPlayerTeamKillsBase, KillsText) == 0x000268, "Member 'UAthenaPlayerTeamKillsBase::KillsText' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerTeamKillsBase, KillsSource) == 0x000270, "Member 'UAthenaPlayerTeamKillsBase::KillsSource' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerTeamKillsBase, bCustomKillSource) == 0x000278, "Member 'UAthenaPlayerTeamKillsBase::bCustomKillSource' has a wrong offset!");

// Class FortniteUI.FortQuestUpdateEntry
// 0x0030 (0x0268 - 0x0238)
class UFortQuestUpdateEntry final : public UCommonUserWidget
{
public:
	TSubclassOf<class UFortQuestObjectiveEntry>   SubEntryClass;                                     // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   FinishedDisplayingQuests;                          // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UVerticalBox*                           ObjectivesBox;                                     // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_258[0x10];                                     // 0x0258(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanAddObjective(class UFortQuestItem* QuestItemToCheck);
	void CurrentlyDisplayedObjectiveFinished(class UFortQuestObjectiveEntry* QuestObjective);
	void FinishQuestIntro();
	void FinishQuestOutro();
	int32 GetNumDisplayedObjectives();
	void QuestItemSet(class UFortQuestItem* QuestItemToCheck);
	void SetQuestItem(const class UFortQuestObjectiveInfo* ObjectiveInfo, bool IsAnnouncement);
	void SetupAsAnnouncement();
	void StartQuestIntro();
	void StartQuestOutro();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQuestUpdateEntry">();
	}
	static class UFortQuestUpdateEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQuestUpdateEntry>();
	}
};
static_assert(alignof(UFortQuestUpdateEntry) == 0x000008, "Wrong alignment on UFortQuestUpdateEntry");
static_assert(sizeof(UFortQuestUpdateEntry) == 0x000268, "Wrong size on UFortQuestUpdateEntry");
static_assert(offsetof(UFortQuestUpdateEntry, SubEntryClass) == 0x000238, "Member 'UFortQuestUpdateEntry::SubEntryClass' has a wrong offset!");
static_assert(offsetof(UFortQuestUpdateEntry, FinishedDisplayingQuests) == 0x000240, "Member 'UFortQuestUpdateEntry::FinishedDisplayingQuests' has a wrong offset!");
static_assert(offsetof(UFortQuestUpdateEntry, ObjectivesBox) == 0x000250, "Member 'UFortQuestUpdateEntry::ObjectivesBox' has a wrong offset!");

// Class FortniteUI.AthenaPlayerVitalityBarBase
// 0x0008 (0x0238 - 0x0230)
class UAthenaPlayerVitalityBarBase final : public UUserWidget
{
public:
	class UAthenaPlayerViewModel*                 PlayerVM;                                          // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetDataSource(class UAthenaPlayerViewModel* PlayerViewModel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaPlayerVitalityBarBase">();
	}
	static class UAthenaPlayerVitalityBarBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaPlayerVitalityBarBase>();
	}
};
static_assert(alignof(UAthenaPlayerVitalityBarBase) == 0x000008, "Wrong alignment on UAthenaPlayerVitalityBarBase");
static_assert(sizeof(UAthenaPlayerVitalityBarBase) == 0x000238, "Wrong size on UAthenaPlayerVitalityBarBase");
static_assert(offsetof(UAthenaPlayerVitalityBarBase, PlayerVM) == 0x000230, "Member 'UAthenaPlayerVitalityBarBase::PlayerVM' has a wrong offset!");

// Class FortniteUI.AthenaProfileStatBox
// 0x0028 (0x0178 - 0x0150)
class UAthenaProfileStatBox final : public USizeBox
{
public:
	UMulticastDelegateProperty_                   OnStatViewChanged;                                 // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bRespectParentStatView;                            // 0x0160(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaBaseStatView*                    StatView;                                          // 0x0168(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_170[0x8];                                      // 0x0170(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UAthenaBaseStatView* GetBaseStatView();
	void OnStatViewChanged__DelegateSignature(class UAthenaBaseStatView* Param_StatView);
	void SetStatView(class UAthenaBaseStatView* InStatView, bool RespectParentStatView);

	const struct FFortUIStatStyle GetStatStyle(const struct FGameplayTag& InStat) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaProfileStatBox">();
	}
	static class UAthenaProfileStatBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaProfileStatBox>();
	}
};
static_assert(alignof(UAthenaProfileStatBox) == 0x000008, "Wrong alignment on UAthenaProfileStatBox");
static_assert(sizeof(UAthenaProfileStatBox) == 0x000178, "Wrong size on UAthenaProfileStatBox");
static_assert(offsetof(UAthenaProfileStatBox, OnStatViewChanged) == 0x000150, "Member 'UAthenaProfileStatBox::OnStatViewChanged' has a wrong offset!");
static_assert(offsetof(UAthenaProfileStatBox, bRespectParentStatView) == 0x000160, "Member 'UAthenaProfileStatBox::bRespectParentStatView' has a wrong offset!");
static_assert(offsetof(UAthenaProfileStatBox, StatView) == 0x000168, "Member 'UAthenaProfileStatBox::StatView' has a wrong offset!");

// Class FortniteUI.AthenaWeaponStatView
// 0x0010 (0x0038 - 0x0028)
class UAthenaWeaponStatView final : public UAthenaBaseStatView
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFortWeaponItemDefinition* GetWeaponDefinition() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaWeaponStatView">();
	}
	static class UAthenaWeaponStatView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaWeaponStatView>();
	}
};
static_assert(alignof(UAthenaWeaponStatView) == 0x000008, "Wrong alignment on UAthenaWeaponStatView");
static_assert(sizeof(UAthenaWeaponStatView) == 0x000038, "Wrong size on UAthenaWeaponStatView");

// Class FortniteUI.FortFrontendLevelScriptActor
// 0x0050 (0x0398 - 0x0348)
class AFortFrontendLevelScriptActor final : public AFortLevelScriptActor
{
public:
	TSoftObjectPtr<class AFortItemPreviewPedestal> CommanderPreviewPedestalActor;                     // 0x0348(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class AFortItemPreviewPedestal> HeroLoadoutPreviewPedestalActor;                   // 0x0370(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class AFortFrontendLevelScriptActor* GetFrontendLevelScript(class UObject* WorldContextObject);

	TSoftObjectPtr<class AFortItemPreviewPedestal> GetCommanderPreviewPedestalActor() const;
	TSoftObjectPtr<class AFortItemPreviewPedestal> GetHeroLoadoutPreviewPedestalActor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortFrontendLevelScriptActor">();
	}
	static class AFortFrontendLevelScriptActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortFrontendLevelScriptActor>();
	}
};
static_assert(alignof(AFortFrontendLevelScriptActor) == 0x000008, "Wrong alignment on AFortFrontendLevelScriptActor");
static_assert(sizeof(AFortFrontendLevelScriptActor) == 0x000398, "Wrong size on AFortFrontendLevelScriptActor");
static_assert(offsetof(AFortFrontendLevelScriptActor, CommanderPreviewPedestalActor) == 0x000348, "Member 'AFortFrontendLevelScriptActor::CommanderPreviewPedestalActor' has a wrong offset!");
static_assert(offsetof(AFortFrontendLevelScriptActor, HeroLoadoutPreviewPedestalActor) == 0x000370, "Member 'AFortFrontendLevelScriptActor::HeroLoadoutPreviewPedestalActor' has a wrong offset!");

// Class FortniteUI.AthenaMatchStatView
// 0x00B0 (0x00D8 - 0x0028)
class UAthenaMatchStatView : public UAthenaBaseStatView
{
public:
	uint8                                         Pad_28[0xA0];                                      // 0x0028(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAthenaWeaponStatView*>          WeaponStatViews;                                   // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	const struct FDateTime GetMatchEndTime() const;
	class FString GetMatchID() const;
	TArray<class UAthenaWeaponStatView*> GetSortedWeaponViews(const struct FGameplayTag& InStat) const;
	class UAthenaWeaponStatView* GetWeaponViewHighestStat(const struct FGameplayTag& InStat) const;
	TArray<class UAthenaWeaponStatView*> GetWeaponViews() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaMatchStatView">();
	}
	static class UAthenaMatchStatView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaMatchStatView>();
	}
};
static_assert(alignof(UAthenaMatchStatView) == 0x000008, "Wrong alignment on UAthenaMatchStatView");
static_assert(sizeof(UAthenaMatchStatView) == 0x0000D8, "Wrong size on UAthenaMatchStatView");
static_assert(offsetof(UAthenaMatchStatView, WeaponStatViews) == 0x0000C8, "Member 'UAthenaMatchStatView::WeaponStatViews' has a wrong offset!");

// Class FortniteUI.FortItemDetailElementWidget
// 0x0048 (0x0280 - 0x0238)
class UFortItemDetailElementWidget : public UCommonUserWidget
{
public:
	TWeakObjectPtr<class UFortItem>               ItemToDetail;                                      // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFortItem>               ItemToCompareWith;                                 // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldPreviewUpgradingItem;                       // 0x0248(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IFortItemViewContextInterface> ItemViewContext;                                   // 0x0250(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	EFortItemInspectionMode                       CurrentInspectMode;                                // 0x0260(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QuantityOverride;                                  // 0x0264(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_268[0x18];                                     // 0x0268(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleInspectModeChanged();
	void HandleItemToDetailChangedBP();
	void HandlePostDifferentItemToCompareWithSet();
	void HandlePostDifferentItemToDetailSet();
	void HandlePreDifferentItemToCompareWithSet();
	void HandlePreDifferentItemToDetailSet();
	void HandleQuantityOverrideChanged();
	void HandleShouldPreviewUpgradingItemChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemDetailElementWidget">();
	}
	static class UFortItemDetailElementWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemDetailElementWidget>();
	}
};
static_assert(alignof(UFortItemDetailElementWidget) == 0x000008, "Wrong alignment on UFortItemDetailElementWidget");
static_assert(sizeof(UFortItemDetailElementWidget) == 0x000280, "Wrong size on UFortItemDetailElementWidget");
static_assert(offsetof(UFortItemDetailElementWidget, ItemToDetail) == 0x000238, "Member 'UFortItemDetailElementWidget::ItemToDetail' has a wrong offset!");
static_assert(offsetof(UFortItemDetailElementWidget, ItemToCompareWith) == 0x000240, "Member 'UFortItemDetailElementWidget::ItemToCompareWith' has a wrong offset!");
static_assert(offsetof(UFortItemDetailElementWidget, bShouldPreviewUpgradingItem) == 0x000248, "Member 'UFortItemDetailElementWidget::bShouldPreviewUpgradingItem' has a wrong offset!");
static_assert(offsetof(UFortItemDetailElementWidget, ItemViewContext) == 0x000250, "Member 'UFortItemDetailElementWidget::ItemViewContext' has a wrong offset!");
static_assert(offsetof(UFortItemDetailElementWidget, CurrentInspectMode) == 0x000260, "Member 'UFortItemDetailElementWidget::CurrentInspectMode' has a wrong offset!");
static_assert(offsetof(UFortItemDetailElementWidget, QuantityOverride) == 0x000264, "Member 'UFortItemDetailElementWidget::QuantityOverride' has a wrong offset!");

// Class FortniteUI.AthenaMatchSetStatView
// 0x0020 (0x00F8 - 0x00D8)
class UAthenaMatchSetStatView final : public UAthenaMatchStatView
{
public:
	class UAthenaSeasonStats*                     OwningSeason;                                      // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PlaylistId;                                        // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UAthenaMatchStatView*>           BestMatches;                                       // 0x00E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	class UAthenaSeasonStats* GetOwningSeason();

	TArray<class UAthenaMatchStatView*> GetBestMatchViews() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaMatchSetStatView">();
	}
	static class UAthenaMatchSetStatView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaMatchSetStatView>();
	}
};
static_assert(alignof(UAthenaMatchSetStatView) == 0x000008, "Wrong alignment on UAthenaMatchSetStatView");
static_assert(sizeof(UAthenaMatchSetStatView) == 0x0000F8, "Wrong size on UAthenaMatchSetStatView");
static_assert(offsetof(UAthenaMatchSetStatView, OwningSeason) == 0x0000D8, "Member 'UAthenaMatchSetStatView::OwningSeason' has a wrong offset!");
static_assert(offsetof(UAthenaMatchSetStatView, PlaylistId) == 0x0000E0, "Member 'UAthenaMatchSetStatView::PlaylistId' has a wrong offset!");
static_assert(offsetof(UAthenaMatchSetStatView, BestMatches) == 0x0000E8, "Member 'UAthenaMatchSetStatView::BestMatches' has a wrong offset!");

// Class FortniteUI.AthenaProfileStatListWidgetBase
// 0x0010 (0x0B40 - 0x0B30)
class UAthenaProfileStatListWidgetBase : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaProfileStatBox*                  ProfileStatBox;                                    // 0x0B38(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleStatViewChanged(class UAthenaBaseStatView* StatView);
	void OnStatChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaProfileStatListWidgetBase">();
	}
	static class UAthenaProfileStatListWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaProfileStatListWidgetBase>();
	}
};
static_assert(alignof(UAthenaProfileStatListWidgetBase) == 0x000008, "Wrong alignment on UAthenaProfileStatListWidgetBase");
static_assert(sizeof(UAthenaProfileStatListWidgetBase) == 0x000B40, "Wrong size on UAthenaProfileStatListWidgetBase");
static_assert(offsetof(UAthenaProfileStatListWidgetBase, ProfileStatBox) == 0x000B38, "Member 'UAthenaProfileStatListWidgetBase::ProfileStatBox' has a wrong offset!");

// Class FortniteUI.FortMissionActivationWidget
// 0x0050 (0x0398 - 0x0348)
class UFortMissionActivationWidget : public UFortActivatablePanel
{
public:
	class UFortMissionActivationInfo*             InfoObject;                                        // 0x0348(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  ReadyUpObjectiveHandle;                            // 0x0350(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UCurveFloat*                            DifficultyIncreaseBluGloCurve;                     // 0x0370(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_378[0x20];                                     // 0x0378(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActiveVoteChangedBP(EFortVoteType VoteType, bool bIsVoteActive, int32 VoteResult);
	void OnMultiplayerChangedBP(bool bIsMultiplayer);
	void OnStateUpdated(EFortMissionActivationWidgetState ActiveState, EFortMissionActivationWidgetState PreviousState);
	void OnVoteLockoutChangedBP(EFortVoteType VoteType, bool bIsLocked);
	void RequestDefaultState();
	void RequestDifficultyIncreaseState();
	void RequestStartObjectiveState();

	EFortMissionActivationWidgetState GetCurrentState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMissionActivationWidget">();
	}
	static class UFortMissionActivationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMissionActivationWidget>();
	}
};
static_assert(alignof(UFortMissionActivationWidget) == 0x000008, "Wrong alignment on UFortMissionActivationWidget");
static_assert(sizeof(UFortMissionActivationWidget) == 0x000398, "Wrong size on UFortMissionActivationWidget");
static_assert(offsetof(UFortMissionActivationWidget, InfoObject) == 0x000348, "Member 'UFortMissionActivationWidget::InfoObject' has a wrong offset!");
static_assert(offsetof(UFortMissionActivationWidget, ReadyUpObjectiveHandle) == 0x000350, "Member 'UFortMissionActivationWidget::ReadyUpObjectiveHandle' has a wrong offset!");
static_assert(offsetof(UFortMissionActivationWidget, DifficultyIncreaseBluGloCurve) == 0x000370, "Member 'UFortMissionActivationWidget::DifficultyIncreaseBluGloCurve' has a wrong offset!");

// Class FortniteUI.FortMobileShareButton
// 0x0030 (0x0B60 - 0x0B30)
class UFortMobileShareButton : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x30];                                     // 0x0B30(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnOSImageEnumSet(EFortFortMobileShareButtonOS OSType);
	void SetShareParams(const class FString& URL, const class FText& Description);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMobileShareButton">();
	}
	static class UFortMobileShareButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMobileShareButton>();
	}
};
static_assert(alignof(UFortMobileShareButton) == 0x000008, "Wrong alignment on UFortMobileShareButton");
static_assert(sizeof(UFortMobileShareButton) == 0x000B60, "Wrong size on UFortMobileShareButton");

// Class FortniteUI.FortFriendCodeEntryBase
// 0x0070 (0x0BD0 - 0x0B60)
class UFortFriendCodeEntryBase : public UFortMobileShareButton
{
public:
	struct FFriendCode                            FriendCode;                                        // 0x0B60(0x0020)(NativeAccessSpecifierPublic)
	class UCommonTextBlock*                       LinkDataTextBox;                                   // 0x0B80(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugName;                                         // 0x0B88(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LengthOfCode;                                      // 0x0B98(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B9C[0x4];                                      // 0x0B9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SharedMessage;                                     // 0x0BA0(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   SharedMessageNoInvite;                             // 0x0BB8(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortFriendCodeEntryBase">();
	}
	static class UFortFriendCodeEntryBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortFriendCodeEntryBase>();
	}
};
static_assert(alignof(UFortFriendCodeEntryBase) == 0x000008, "Wrong alignment on UFortFriendCodeEntryBase");
static_assert(sizeof(UFortFriendCodeEntryBase) == 0x000BD0, "Wrong size on UFortFriendCodeEntryBase");
static_assert(offsetof(UFortFriendCodeEntryBase, FriendCode) == 0x000B60, "Member 'UFortFriendCodeEntryBase::FriendCode' has a wrong offset!");
static_assert(offsetof(UFortFriendCodeEntryBase, LinkDataTextBox) == 0x000B80, "Member 'UFortFriendCodeEntryBase::LinkDataTextBox' has a wrong offset!");
static_assert(offsetof(UFortFriendCodeEntryBase, DebugName) == 0x000B88, "Member 'UFortFriendCodeEntryBase::DebugName' has a wrong offset!");
static_assert(offsetof(UFortFriendCodeEntryBase, LengthOfCode) == 0x000B98, "Member 'UFortFriendCodeEntryBase::LengthOfCode' has a wrong offset!");
static_assert(offsetof(UFortFriendCodeEntryBase, SharedMessage) == 0x000BA0, "Member 'UFortFriendCodeEntryBase::SharedMessage' has a wrong offset!");
static_assert(offsetof(UFortFriendCodeEntryBase, SharedMessageNoInvite) == 0x000BB8, "Member 'UFortFriendCodeEntryBase::SharedMessageNoInvite' has a wrong offset!");

// Class FortniteUI.AthenaProfileStatsBase
// 0x0058 (0x0378 - 0x0320)
class UAthenaProfileStatsBase : public UCommonActivatablePanel
{
public:
	class UAthenaProfileStatBox*                  ProfileStatBox;                                    // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UAthenaSeasonStats*>             StatSets;                                          // 0x0328(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UAthenaSeasonStats*                     CurrentViewedStatSet;                              // 0x0338(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAthenaMatchStatView*                   CurrentStatView;                                   // 0x0340(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CurrentPlaylist;                                   // 0x0348(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_350[0x28];                                     // 0x0350(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void NextPlaylist();
	void NextStatSet();
	void OnDataRecieved();
	void OnNoData();
	void OnProfileLoaded(class UFortMcpProfileAthenaStats* ProfileAthenaStats);
	void OnStartFetchingData();
	void OnStatSetChanged();
	void PrevStatSet();
	void Setup(const struct FUniqueNetIdRepl& InUniqueId);

	class FText GetCurrentPlaylistName() const;
	class UAthenaSeasonStats* GetCurrentStatSet() const;
	struct FUniqueNetIdRepl GetUniqueID() const;
	int32 NumStatSets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaProfileStatsBase">();
	}
	static class UAthenaProfileStatsBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaProfileStatsBase>();
	}
};
static_assert(alignof(UAthenaProfileStatsBase) == 0x000008, "Wrong alignment on UAthenaProfileStatsBase");
static_assert(sizeof(UAthenaProfileStatsBase) == 0x000378, "Wrong size on UAthenaProfileStatsBase");
static_assert(offsetof(UAthenaProfileStatsBase, ProfileStatBox) == 0x000320, "Member 'UAthenaProfileStatsBase::ProfileStatBox' has a wrong offset!");
static_assert(offsetof(UAthenaProfileStatsBase, StatSets) == 0x000328, "Member 'UAthenaProfileStatsBase::StatSets' has a wrong offset!");
static_assert(offsetof(UAthenaProfileStatsBase, CurrentViewedStatSet) == 0x000338, "Member 'UAthenaProfileStatsBase::CurrentViewedStatSet' has a wrong offset!");
static_assert(offsetof(UAthenaProfileStatsBase, CurrentStatView) == 0x000340, "Member 'UAthenaProfileStatsBase::CurrentStatView' has a wrong offset!");
static_assert(offsetof(UAthenaProfileStatsBase, CurrentPlaylist) == 0x000348, "Member 'UAthenaProfileStatsBase::CurrentPlaylist' has a wrong offset!");

// Class FortniteUI.AthenaProfileStatsRecentMatchesBase
// 0x0038 (0x0358 - 0x0320)
class UAthenaProfileStatsRecentMatchesBase : public UCommonActivatablePanel
{
public:
	TArray<class UAthenaMatchStatView*>           RecentMatches;                                     // 0x0320(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_330[0x28];                                     // 0x0330(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDataRecieved();
	void OnNoData();
	void OnProfileLoaded(class UFortMcpProfileAthenaStats* ProfileAthenaStats);
	void OnRecentMatcheChanged();
	void OnStartFetchingData();
	void Setup(const struct FUniqueNetIdRepl& InUniqueId);

	TArray<class UAthenaMatchStatView*> GetRecentMatches() const;
	struct FUniqueNetIdRepl GetUniqueID() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaProfileStatsRecentMatchesBase">();
	}
	static class UAthenaProfileStatsRecentMatchesBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaProfileStatsRecentMatchesBase>();
	}
};
static_assert(alignof(UAthenaProfileStatsRecentMatchesBase) == 0x000008, "Wrong alignment on UAthenaProfileStatsRecentMatchesBase");
static_assert(sizeof(UAthenaProfileStatsRecentMatchesBase) == 0x000358, "Wrong size on UAthenaProfileStatsRecentMatchesBase");
static_assert(offsetof(UAthenaProfileStatsRecentMatchesBase, RecentMatches) == 0x000320, "Member 'UAthenaProfileStatsRecentMatchesBase::RecentMatches' has a wrong offset!");

// Class FortniteUI.AthenaProfileStatWidgetBase
// 0x0010 (0x0248 - 0x0238)
class UAthenaProfileStatWidgetBase : public UCommonUserWidget
{
public:
	struct FGameplayTag                           Stat;                                              // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAthenaProfileStatBox*                  ProfileStatBox;                                    // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	TArray<struct FStatGroupData> CreateWeaponGroupData(int32 MaxToReturn, bool bIncludeOtherCategory, bool bPercentages);
	void HandleStatViewChanged(class UAthenaBaseStatView* StatView);
	void OnStatChanged();
	void SetAsStat(const struct FGameplayTag& InStat);
	void SetStatView(class UAthenaBaseStatView* InStatView, bool RespectParentStatView);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaProfileStatWidgetBase">();
	}
	static class UAthenaProfileStatWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaProfileStatWidgetBase>();
	}
};
static_assert(alignof(UAthenaProfileStatWidgetBase) == 0x000008, "Wrong alignment on UAthenaProfileStatWidgetBase");
static_assert(sizeof(UAthenaProfileStatWidgetBase) == 0x000248, "Wrong size on UAthenaProfileStatWidgetBase");
static_assert(offsetof(UAthenaProfileStatWidgetBase, Stat) == 0x000238, "Member 'UAthenaProfileStatWidgetBase::Stat' has a wrong offset!");
static_assert(offsetof(UAthenaProfileStatWidgetBase, ProfileStatBox) == 0x000240, "Member 'UAthenaProfileStatWidgetBase::ProfileStatBox' has a wrong offset!");

// Class FortniteUI.AthenaQuickBarNativeCell
// 0x03B8 (0x04C0 - 0x0108)
class UAthenaQuickBarNativeCell final : public UWidget
{
public:
	struct FVector2D                              SelectionOffset;                                   // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SelectionAnimLength_Seconds;                       // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            EmptyCell_Brush;                                   // 0x0118(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FVector2D                              EmptyCell_Padding;                                 // 0x01A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                            SelectedCell_Brush;                                // 0x01A8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            ItemPortrait_Brush;                                // 0x0230(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            AmmoType_Brush;                                    // 0x02B8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FVector2D                              AmmoTypeIcon_Size;                                 // 0x0340(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              AmmoTypeIcon_Padding;                              // 0x0348(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateFontInfo                         ItemCount_Font;                                    // 0x0350(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           ItemCount_Color;                                   // 0x03A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ItemCount_OutlineAlphaFactor;                      // 0x03B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B4[0x4];                                      // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            GadgetFuel_Brush;                                  // 0x03B8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FVector2D                              GadgetFuel_Padding;                                // 0x0440(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GadgetFuelChargeCount_OutlineAlphaFactor;          // 0x0448(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44C[0x4];                                      // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         GadgetFuelChargeCount_Font;                        // 0x0450(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           GadgetFuelChargeCount_Color;                       // 0x04A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4B0[0x10];                                     // 0x04B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DesiredSizeOverride(float WidthOverride, float HeightOverride);
	void SetIsSelected(bool bInSelected);
	void SetItemToRepresent(class UFortItem* InItemToRepresent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaQuickBarNativeCell">();
	}
	static class UAthenaQuickBarNativeCell* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaQuickBarNativeCell>();
	}
};
static_assert(alignof(UAthenaQuickBarNativeCell) == 0x000008, "Wrong alignment on UAthenaQuickBarNativeCell");
static_assert(sizeof(UAthenaQuickBarNativeCell) == 0x0004C0, "Wrong size on UAthenaQuickBarNativeCell");
static_assert(offsetof(UAthenaQuickBarNativeCell, SelectionOffset) == 0x000108, "Member 'UAthenaQuickBarNativeCell::SelectionOffset' has a wrong offset!");
static_assert(offsetof(UAthenaQuickBarNativeCell, SelectionAnimLength_Seconds) == 0x000110, "Member 'UAthenaQuickBarNativeCell::SelectionAnimLength_Seconds' has a wrong offset!");
static_assert(offsetof(UAthenaQuickBarNativeCell, EmptyCell_Brush) == 0x000118, "Member 'UAthenaQuickBarNativeCell::EmptyCell_Brush' has a wrong offset!");
static_assert(offsetof(UAthenaQuickBarNativeCell, EmptyCell_Padding) == 0x0001A0, "Member 'UAthenaQuickBarNativeCell::EmptyCell_Padding' has a wrong offset!");
static_assert(offsetof(UAthenaQuickBarNativeCell, SelectedCell_Brush) == 0x0001A8, "Member 'UAthenaQuickBarNativeCell::SelectedCell_Brush' has a wrong offset!");
static_assert(offsetof(UAthenaQuickBarNativeCell, ItemPortrait_Brush) == 0x000230, "Member 'UAthenaQuickBarNativeCell::ItemPortrait_Brush' has a wrong offset!");
static_assert(offsetof(UAthenaQuickBarNativeCell, AmmoType_Brush) == 0x0002B8, "Member 'UAthenaQuickBarNativeCell::AmmoType_Brush' has a wrong offset!");
static_assert(offsetof(UAthenaQuickBarNativeCell, AmmoTypeIcon_Size) == 0x000340, "Member 'UAthenaQuickBarNativeCell::AmmoTypeIcon_Size' has a wrong offset!");
static_assert(offsetof(UAthenaQuickBarNativeCell, AmmoTypeIcon_Padding) == 0x000348, "Member 'UAthenaQuickBarNativeCell::AmmoTypeIcon_Padding' has a wrong offset!");
static_assert(offsetof(UAthenaQuickBarNativeCell, ItemCount_Font) == 0x000350, "Member 'UAthenaQuickBarNativeCell::ItemCount_Font' has a wrong offset!");
static_assert(offsetof(UAthenaQuickBarNativeCell, ItemCount_Color) == 0x0003A0, "Member 'UAthenaQuickBarNativeCell::ItemCount_Color' has a wrong offset!");
static_assert(offsetof(UAthenaQuickBarNativeCell, ItemCount_OutlineAlphaFactor) == 0x0003B0, "Member 'UAthenaQuickBarNativeCell::ItemCount_OutlineAlphaFactor' has a wrong offset!");
static_assert(offsetof(UAthenaQuickBarNativeCell, GadgetFuel_Brush) == 0x0003B8, "Member 'UAthenaQuickBarNativeCell::GadgetFuel_Brush' has a wrong offset!");
static_assert(offsetof(UAthenaQuickBarNativeCell, GadgetFuel_Padding) == 0x000440, "Member 'UAthenaQuickBarNativeCell::GadgetFuel_Padding' has a wrong offset!");
static_assert(offsetof(UAthenaQuickBarNativeCell, GadgetFuelChargeCount_OutlineAlphaFactor) == 0x000448, "Member 'UAthenaQuickBarNativeCell::GadgetFuelChargeCount_OutlineAlphaFactor' has a wrong offset!");
static_assert(offsetof(UAthenaQuickBarNativeCell, GadgetFuelChargeCount_Font) == 0x000450, "Member 'UAthenaQuickBarNativeCell::GadgetFuelChargeCount_Font' has a wrong offset!");
static_assert(offsetof(UAthenaQuickBarNativeCell, GadgetFuelChargeCount_Color) == 0x0004A0, "Member 'UAthenaQuickBarNativeCell::GadgetFuelChargeCount_Color' has a wrong offset!");

// Class FortniteUI.FortPlayerProfileBannerEditor
// 0x00B8 (0x02F0 - 0x0238)
class UFortPlayerProfileBannerEditor : public UCommonUserWidget
{
public:
	ESaveProfileForBanners                        ProfileToSave;                                     // 0x0238(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortSwipeDetector                     SwipeDetector;                                     // 0x0240(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class FName>                           IconCategories;                                    // 0x02B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           ColorCategories;                                   // 0x02C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class FName                                   ChosenIcon;                                        // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ChosenIconCategory;                                // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ChosenColor;                                       // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ChosenColorCategory;                               // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void CommitChosenIconAndColor();
	void HandleEditorActivated();
	void HandleEditorDeactivated();
	void OnShowNextCategory();
	void OnShowPreviousCategory();
	void RefreshBannerEditor();
	void SetBannerColor(const class FName& Color);
	void SetBannerIcon(const class FName& Icon);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerProfileBannerEditor">();
	}
	static class UFortPlayerProfileBannerEditor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerProfileBannerEditor>();
	}
};
static_assert(alignof(UFortPlayerProfileBannerEditor) == 0x000008, "Wrong alignment on UFortPlayerProfileBannerEditor");
static_assert(sizeof(UFortPlayerProfileBannerEditor) == 0x0002F0, "Wrong size on UFortPlayerProfileBannerEditor");
static_assert(offsetof(UFortPlayerProfileBannerEditor, ProfileToSave) == 0x000238, "Member 'UFortPlayerProfileBannerEditor::ProfileToSave' has a wrong offset!");
static_assert(offsetof(UFortPlayerProfileBannerEditor, SwipeDetector) == 0x000240, "Member 'UFortPlayerProfileBannerEditor::SwipeDetector' has a wrong offset!");
static_assert(offsetof(UFortPlayerProfileBannerEditor, IconCategories) == 0x0002B0, "Member 'UFortPlayerProfileBannerEditor::IconCategories' has a wrong offset!");
static_assert(offsetof(UFortPlayerProfileBannerEditor, ColorCategories) == 0x0002C0, "Member 'UFortPlayerProfileBannerEditor::ColorCategories' has a wrong offset!");
static_assert(offsetof(UFortPlayerProfileBannerEditor, ChosenIcon) == 0x0002D0, "Member 'UFortPlayerProfileBannerEditor::ChosenIcon' has a wrong offset!");
static_assert(offsetof(UFortPlayerProfileBannerEditor, ChosenIconCategory) == 0x0002D8, "Member 'UFortPlayerProfileBannerEditor::ChosenIconCategory' has a wrong offset!");
static_assert(offsetof(UFortPlayerProfileBannerEditor, ChosenColor) == 0x0002E0, "Member 'UFortPlayerProfileBannerEditor::ChosenColor' has a wrong offset!");
static_assert(offsetof(UFortPlayerProfileBannerEditor, ChosenColorCategory) == 0x0002E8, "Member 'UFortPlayerProfileBannerEditor::ChosenColorCategory' has a wrong offset!");

// Class FortniteUI.AthenaRemotePlayerViewData
// 0x0220 (0x0248 - 0x0028)
class UAthenaRemotePlayerViewData final : public UObject
{
public:
	UMulticastDelegateProperty_                   OnPlayerStateChanged;                              // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTeamColorChanged;                                // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSquadIdChanged;                                  // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPlayerNameChanged;                               // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnKillScoreChanged;                                // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocationChanged;                                 // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnHealthHealed;                                    // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnHealthDamaged;                                   // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnShieldHealed;                                    // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnShieldDamaged;                                   // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnDBNOStateChanged;                                // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnDeadStateChanged;                                // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnBeingRevivedStateChanged;                        // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnDisconnectedChanged;                             // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPlayerPawnChanged;                               // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnWeaponChanged;                                   // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnDistanceToStormChanged;                          // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPlaceChanged;                                    // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMaterialCountChanged;                            // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnStormcapScoreChanged;                            // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnIsInRelevancyChanged;                            // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnIsFollowedPlayerChanged;                         // 0x0178(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnIsReplayRelevancyPlayerChanged;                  // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnVehicleStateChanged;                             // 0x0198(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnVehicleHealthHealed;                             // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnVehicleHealthDamaged;                            // 0x01B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       PlayerUID;                                         // 0x01C8(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F8[0x48];                                     // 0x01F8(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        CachedPlayerPawn;                                  // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BoolDelegate__DelegateSignature(class UAthenaRemotePlayerViewData* PlayerData, bool BoolParam);
	void FloatDelegate__DelegateSignature(class UAthenaRemotePlayerViewData* PlayerData, float FloatParam);
	void ForwardOnBeingRevivedStateChanged(class AFortPlayerStateAthena* InPlayerState, bool bInIsBeingRevived);
	void ForwardOnDBNOStateChanged(class AFortPlayerStateAthena* InPlayerState, bool bInIsDBNO);
	void ForwardOnDeadStateChanged(class AFortPlayerStateAthena* InPlayerState, bool bInIsDead);
	void ForwardOnDisconnectedChanged(class AFortPlayerStateAthena* InPlayerState, bool bInIsDisconnected);
	void ForwardOnHitPointsStateChanged(class AFortPlayerStateAthena* InPlayerState, float InHealthPercent, float InShieldPercent);
	void ForwardOnKillScoreChanged(class AFortPlayerStateAthena* InPlayerState, int32 InKillScore);
	void ForwardOnLocationChanged(const class FString& InLocation);
	void ForwardOnPlaceChanged(int32 InPlace);
	void ForwardOnPlayerNameChanged(class AFortPlayerStateAthena* InPlayerState, const class FString& InPlayerName);
	void ForwardOnSquadIdChanged(uint8 InSquadId);
	void ForwardOnStormcapScoreChanged(float InScore);
	void ForwardOnVehicleHealthChanged();
	void ForwardOnVehicleStateChanged(class AFortPlayerPawn* InPawn, class AFortAthenaVehicle* InNewVehicle, class AFortAthenaVehicle* InOldVehicle);
	void ForwardOnWeaponChanged(class AFortWeapon* InNewWeapon, class AFortWeapon* InPrevWeapon);
	void IntDelegate__DelegateSignature(class UAthenaRemotePlayerViewData* PlayerData, int32 IntParam);
	void LinearColorDelegate__DelegateSignature(class UAthenaRemotePlayerViewData* PlayerData, const struct FLinearColor& ColorParam);
	void PawnDelegate__DelegateSignature(class UAthenaRemotePlayerViewData* PlayerData, class AFortPlayerPawn* PawnParam);
	void PlayerStateDelegate__DelegateSignature(class UAthenaRemotePlayerViewData* PlayerData, class AFortPlayerStateAthena* Param_PlayerState);
	void SetPlayerState(class AFortPlayerStateAthena* InPlayerState);
	void StringDelegate__DelegateSignature(class UAthenaRemotePlayerViewData* PlayerData, const class FString& StringParam);
	void UInt8Delegate__DelegateSignature(class UAthenaRemotePlayerViewData* PlayerData, uint8 IntParam);
	void UpdateDistanceToStorm();
	void UpdatePlayerPawn();
	void VehicleDelegate__DelegateSignature(class UAthenaRemotePlayerViewData* PlayerData, class AFortAthenaVehicle* VehicleParam1, class AFortAthenaVehicle* VehicleParam2);
	void WeaponDelegate__DelegateSignature(class UAthenaRemotePlayerViewData* PlayerData, class AFortWeapon* WeaponParam);

	class AFortWeapon* GetCurrentWeapon() const;
	int32 GetDistanceToStorm() const;
	float GetHealthPercent() const;
	bool GetInAircraft() const;
	bool GetIsBeingRevived() const;
	bool GetIsDBNO() const;
	bool GetIsDead() const;
	bool GetIsDisconnected() const;
	bool GetIsDrivingVehicle() const;
	bool GetIsEliminated() const;
	bool GetIsFollowedPlayer() const;
	bool GetIsInRelevancy() const;
	bool GetIsReplayRelevancyPlayer() const;
	int32 GetKillScore() const;
	class FString GetLocation() const;
	int32 GetMaterialCount() const;
	int32 GetPlace() const;
	class FString GetPlayerName() const;
	class AFortPlayerPawn* GetPlayerPawn() const;
	class AFortPlayerStateAthena* GetPlayerState() const;
	struct FUniqueNetIdRepl GetPlayerUID() const;
	float GetShieldPercent() const;
	uint8 GetSquadId() const;
	float GetStormcapScore() const;
	struct FLinearColor GetTeamColor() const;
	class AFortAthenaVehicle* GetVehicle() const;
	float GetVehicleHealthPercent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaRemotePlayerViewData">();
	}
	static class UAthenaRemotePlayerViewData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaRemotePlayerViewData>();
	}
};
static_assert(alignof(UAthenaRemotePlayerViewData) == 0x000008, "Wrong alignment on UAthenaRemotePlayerViewData");
static_assert(sizeof(UAthenaRemotePlayerViewData) == 0x000248, "Wrong size on UAthenaRemotePlayerViewData");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnPlayerStateChanged) == 0x000028, "Member 'UAthenaRemotePlayerViewData::OnPlayerStateChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnTeamColorChanged) == 0x000038, "Member 'UAthenaRemotePlayerViewData::OnTeamColorChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnSquadIdChanged) == 0x000048, "Member 'UAthenaRemotePlayerViewData::OnSquadIdChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnPlayerNameChanged) == 0x000058, "Member 'UAthenaRemotePlayerViewData::OnPlayerNameChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnKillScoreChanged) == 0x000068, "Member 'UAthenaRemotePlayerViewData::OnKillScoreChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnLocationChanged) == 0x000078, "Member 'UAthenaRemotePlayerViewData::OnLocationChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnHealthHealed) == 0x000088, "Member 'UAthenaRemotePlayerViewData::OnHealthHealed' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnHealthDamaged) == 0x000098, "Member 'UAthenaRemotePlayerViewData::OnHealthDamaged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnShieldHealed) == 0x0000A8, "Member 'UAthenaRemotePlayerViewData::OnShieldHealed' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnShieldDamaged) == 0x0000B8, "Member 'UAthenaRemotePlayerViewData::OnShieldDamaged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnDBNOStateChanged) == 0x0000C8, "Member 'UAthenaRemotePlayerViewData::OnDBNOStateChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnDeadStateChanged) == 0x0000D8, "Member 'UAthenaRemotePlayerViewData::OnDeadStateChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnBeingRevivedStateChanged) == 0x0000E8, "Member 'UAthenaRemotePlayerViewData::OnBeingRevivedStateChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnDisconnectedChanged) == 0x0000F8, "Member 'UAthenaRemotePlayerViewData::OnDisconnectedChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnPlayerPawnChanged) == 0x000108, "Member 'UAthenaRemotePlayerViewData::OnPlayerPawnChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnWeaponChanged) == 0x000118, "Member 'UAthenaRemotePlayerViewData::OnWeaponChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnDistanceToStormChanged) == 0x000128, "Member 'UAthenaRemotePlayerViewData::OnDistanceToStormChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnPlaceChanged) == 0x000138, "Member 'UAthenaRemotePlayerViewData::OnPlaceChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnMaterialCountChanged) == 0x000148, "Member 'UAthenaRemotePlayerViewData::OnMaterialCountChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnStormcapScoreChanged) == 0x000158, "Member 'UAthenaRemotePlayerViewData::OnStormcapScoreChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnIsInRelevancyChanged) == 0x000168, "Member 'UAthenaRemotePlayerViewData::OnIsInRelevancyChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnIsFollowedPlayerChanged) == 0x000178, "Member 'UAthenaRemotePlayerViewData::OnIsFollowedPlayerChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnIsReplayRelevancyPlayerChanged) == 0x000188, "Member 'UAthenaRemotePlayerViewData::OnIsReplayRelevancyPlayerChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnVehicleStateChanged) == 0x000198, "Member 'UAthenaRemotePlayerViewData::OnVehicleStateChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnVehicleHealthHealed) == 0x0001A8, "Member 'UAthenaRemotePlayerViewData::OnVehicleHealthHealed' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, OnVehicleHealthDamaged) == 0x0001B8, "Member 'UAthenaRemotePlayerViewData::OnVehicleHealthDamaged' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, PlayerUID) == 0x0001C8, "Member 'UAthenaRemotePlayerViewData::PlayerUID' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, PlayerState) == 0x0001F0, "Member 'UAthenaRemotePlayerViewData::PlayerState' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewData, CachedPlayerPawn) == 0x000240, "Member 'UAthenaRemotePlayerViewData::CachedPlayerPawn' has a wrong offset!");

// Class FortniteUI.FortTopBarPanel
// 0x0010 (0x0358 - 0x0348)
class UFortTopBarPanel : public UFortActivatablePanel
{
public:
	uint8                                         Pad_348[0x10];                                     // 0x0348(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddIconToScreen(class UCommonLazyImage* Image);
	void SetActiveInvitesCount(int32 NewActiveInvitesCount);
	void SetOnlineFriendsCount(int32 NewOnlineFriendsCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTopBarPanel">();
	}
	static class UFortTopBarPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTopBarPanel>();
	}
};
static_assert(alignof(UFortTopBarPanel) == 0x000008, "Wrong alignment on UFortTopBarPanel");
static_assert(sizeof(UFortTopBarPanel) == 0x000358, "Wrong size on UFortTopBarPanel");

// Class FortniteUI.AthenaRemotePlayerViewModel
// 0x0018 (0x0178 - 0x0160)
class UAthenaRemotePlayerViewModel final : public UAthenaPlayerViewModel
{
public:
	class AFortPlayerControllerSpectating*        PlayerController;                                  // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AFortPlayerStateAthena*>         SquadList;                                         // 0x0168(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void OnFollowedPlayerChanged(class AFortPlayerControllerSpectating* SpectatorPC, class AFortPlayerState* NewFollowedPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaRemotePlayerViewModel">();
	}
	static class UAthenaRemotePlayerViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaRemotePlayerViewModel>();
	}
};
static_assert(alignof(UAthenaRemotePlayerViewModel) == 0x000008, "Wrong alignment on UAthenaRemotePlayerViewModel");
static_assert(sizeof(UAthenaRemotePlayerViewModel) == 0x000178, "Wrong size on UAthenaRemotePlayerViewModel");
static_assert(offsetof(UAthenaRemotePlayerViewModel, PlayerController) == 0x000160, "Member 'UAthenaRemotePlayerViewModel::PlayerController' has a wrong offset!");
static_assert(offsetof(UAthenaRemotePlayerViewModel, SquadList) == 0x000168, "Member 'UAthenaRemotePlayerViewModel::SquadList' has a wrong offset!");

// Class FortniteUI.AthenaRemoteSquadViewData
// 0x0090 (0x00B8 - 0x0028)
class UAthenaRemoteSquadViewData final : public UObject
{
public:
	UMulticastDelegateProperty_                   OnPlayerAdded;                                     // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSquadIdChanged;                                  // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSquadKillscoreChanged;                           // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSquadPlaceChanged;                               // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSquadColorChanged;                               // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSquadEliminated;                                 // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UAthenaRemotePlayerViewData*>    PlayerDataArray;                                   // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_98[0x20];                                      // 0x0098(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EventDelegate__DelegateSignature(class UAthenaRemoteSquadViewData* SquadData);
	void HandlePlayerDeadStateChanged(class UAthenaRemotePlayerViewData* InPlayerData, bool InEliminated);
	void HandlePlayerKillscoreChanged(class UAthenaRemotePlayerViewData* InPlayerData, int32 InKillScore);
	void HandlePlayerPlaceChanged(class UAthenaRemotePlayerViewData* InPlayerData, int32 InPlace);
	void IntDelegate__DelegateSignature(class UAthenaRemoteSquadViewData* SquadData, int32 IntParam);
	void LinearColorDelegate__DelegateSignature(class UAthenaRemoteSquadViewData* SquadData, const struct FLinearColor& ColorParam);
	void PlayerDelegate__DelegateSignature(class UAthenaRemoteSquadViewData* SquadData, class UAthenaRemotePlayerViewData* PlayerData);
	void UInt8Delegate__DelegateSignature(class UAthenaRemoteSquadViewData* SquadData, uint8 IntParam);

	bool GetIsEliminated() const;
	int32 GetKillScore() const;
	int32 GetPlace() const;
	const TArray<class UAthenaRemotePlayerViewData*> GetPlayerDatas() const;
	struct FLinearColor GetSquadColor() const;
	int32 GetSquadId() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaRemoteSquadViewData">();
	}
	static class UAthenaRemoteSquadViewData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaRemoteSquadViewData>();
	}
};
static_assert(alignof(UAthenaRemoteSquadViewData) == 0x000008, "Wrong alignment on UAthenaRemoteSquadViewData");
static_assert(sizeof(UAthenaRemoteSquadViewData) == 0x0000B8, "Wrong size on UAthenaRemoteSquadViewData");
static_assert(offsetof(UAthenaRemoteSquadViewData, OnPlayerAdded) == 0x000028, "Member 'UAthenaRemoteSquadViewData::OnPlayerAdded' has a wrong offset!");
static_assert(offsetof(UAthenaRemoteSquadViewData, OnSquadIdChanged) == 0x000038, "Member 'UAthenaRemoteSquadViewData::OnSquadIdChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemoteSquadViewData, OnSquadKillscoreChanged) == 0x000048, "Member 'UAthenaRemoteSquadViewData::OnSquadKillscoreChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemoteSquadViewData, OnSquadPlaceChanged) == 0x000058, "Member 'UAthenaRemoteSquadViewData::OnSquadPlaceChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemoteSquadViewData, OnSquadColorChanged) == 0x000068, "Member 'UAthenaRemoteSquadViewData::OnSquadColorChanged' has a wrong offset!");
static_assert(offsetof(UAthenaRemoteSquadViewData, OnSquadEliminated) == 0x000078, "Member 'UAthenaRemoteSquadViewData::OnSquadEliminated' has a wrong offset!");
static_assert(offsetof(UAthenaRemoteSquadViewData, PlayerDataArray) == 0x000088, "Member 'UAthenaRemoteSquadViewData::PlayerDataArray' has a wrong offset!");

// Class FortniteUI.AthenaReplayBrowserEntryWidget
// 0x0010 (0x0B40 - 0x0B30)
class UAthenaReplayBrowserEntryWidget : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReplayBrowserEntryObject;                          // 0x0B38(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class FText GetDateTimeText(const struct FDateTime& DateTime);
	void OnReplayBrowserEntryDataSet();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaReplayBrowserEntryWidget">();
	}
	static class UAthenaReplayBrowserEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaReplayBrowserEntryWidget>();
	}
};
static_assert(alignof(UAthenaReplayBrowserEntryWidget) == 0x000008, "Wrong alignment on UAthenaReplayBrowserEntryWidget");
static_assert(sizeof(UAthenaReplayBrowserEntryWidget) == 0x000B40, "Wrong size on UAthenaReplayBrowserEntryWidget");
static_assert(offsetof(UAthenaReplayBrowserEntryWidget, ReplayBrowserEntryObject) == 0x000B38, "Member 'UAthenaReplayBrowserEntryWidget::ReplayBrowserEntryObject' has a wrong offset!");

// Class FortniteUI.FortFriendCodeListBase
// 0x0028 (0x0370 - 0x0348)
class UFortFriendCodeListBase : public UFortActivatablePanel
{
public:
	TArray<struct FFriendCode>                    BacchusFriendCodes;                                // 0x0348(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortFriendCodeEntryBase>   FriendCodeEntryClass;                              // 0x0358(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDynamicEntryBox*                       EntryBox_FriendCodes;                              // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URichTextBlock*                         WarningText;                                       // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CloseAndPopDialog();
	void DescAndURL();
	void JustDesc();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortFriendCodeListBase">();
	}
	static class UFortFriendCodeListBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortFriendCodeListBase>();
	}
};
static_assert(alignof(UFortFriendCodeListBase) == 0x000008, "Wrong alignment on UFortFriendCodeListBase");
static_assert(sizeof(UFortFriendCodeListBase) == 0x000370, "Wrong size on UFortFriendCodeListBase");
static_assert(offsetof(UFortFriendCodeListBase, BacchusFriendCodes) == 0x000348, "Member 'UFortFriendCodeListBase::BacchusFriendCodes' has a wrong offset!");
static_assert(offsetof(UFortFriendCodeListBase, FriendCodeEntryClass) == 0x000358, "Member 'UFortFriendCodeListBase::FriendCodeEntryClass' has a wrong offset!");
static_assert(offsetof(UFortFriendCodeListBase, EntryBox_FriendCodes) == 0x000360, "Member 'UFortFriendCodeListBase::EntryBox_FriendCodes' has a wrong offset!");
static_assert(offsetof(UFortFriendCodeListBase, WarningText) == 0x000368, "Member 'UFortFriendCodeListBase::WarningText' has a wrong offset!");

// Class FortniteUI.AthenaReplayBrowserRowProxyInstance
// 0x0090 (0x00B8 - 0x0028)
class UAthenaReplayBrowserRowProxyInstance final : public UObject
{
public:
	struct FAthenaReplayBrowserRowData            RowData;                                           // 0x0028(0x0090)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaReplayBrowserRowProxyInstance">();
	}
	static class UAthenaReplayBrowserRowProxyInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaReplayBrowserRowProxyInstance>();
	}
};
static_assert(alignof(UAthenaReplayBrowserRowProxyInstance) == 0x000008, "Wrong alignment on UAthenaReplayBrowserRowProxyInstance");
static_assert(sizeof(UAthenaReplayBrowserRowProxyInstance) == 0x0000B8, "Wrong size on UAthenaReplayBrowserRowProxyInstance");
static_assert(offsetof(UAthenaReplayBrowserRowProxyInstance, RowData) == 0x000028, "Member 'UAthenaReplayBrowserRowProxyInstance::RowData' has a wrong offset!");

// Class FortniteUI.FortItemWidget_NUI
// 0x0028 (0x0130 - 0x0108)
class UFortItemWidget_NUI : public UWidget
{
public:
	TWeakObjectPtr<class UFortItem>               ItemToRepresent;                                   // 0x0108(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TScriptInterface<class IFortItemViewContextInterface> ItemViewContext;                                   // 0x0110(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_120[0x10];                                     // 0x0120(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetItemToRepresent(const class UFortItem* Param_ItemToRepresent);
	void SetItemViewContext(TScriptInterface<class IFortItemViewContextInterface> Param_ItemViewContext);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemWidget_NUI">();
	}
	static class UFortItemWidget_NUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemWidget_NUI>();
	}
};
static_assert(alignof(UFortItemWidget_NUI) == 0x000008, "Wrong alignment on UFortItemWidget_NUI");
static_assert(sizeof(UFortItemWidget_NUI) == 0x000130, "Wrong size on UFortItemWidget_NUI");
static_assert(offsetof(UFortItemWidget_NUI, ItemToRepresent) == 0x000108, "Member 'UFortItemWidget_NUI::ItemToRepresent' has a wrong offset!");
static_assert(offsetof(UFortItemWidget_NUI, ItemViewContext) == 0x000110, "Member 'UFortItemWidget_NUI::ItemViewContext' has a wrong offset!");

// Class FortniteUI.FortItemCardBase
// 0x0000 (0x0130 - 0x0130)
class UFortItemCardBase final : public UFortItemWidget_NUI
{
public:
	static EFortItemCardSize PortBrushSize(const EFortBrushSize& BrushSize);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemCardBase">();
	}
	static class UFortItemCardBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemCardBase>();
	}
};
static_assert(alignof(UFortItemCardBase) == 0x000008, "Wrong alignment on UFortItemCardBase");
static_assert(sizeof(UFortItemCardBase) == 0x000130, "Wrong size on UFortItemCardBase");

// Class FortniteUI.AthenaReplayBrowserScreenBase
// 0x0078 (0x03C0 - 0x0348)
class UAthenaReplayBrowserScreenBase : public UFortActivatablePanel
{
public:
	TArray<class UAthenaReplayBrowserRowProxyInstance*> RowProxies;                                        // 0x0348(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    PlayActionRowHandle;                               // 0x0358(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    DeleteActionRowHandle;                             // 0x0368(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    RenameActionRowHandle;                             // 0x0378(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    RefreshActionRowHandle;                            // 0x0388(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    BackActionRowHandle;                               // 0x0398(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A8[0x18];                                     // 0x03A8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AreAnyActionsOutstanding();
	bool AreExternalActionsOutstanding();
	void BrowseToReplayFolder();
	void DeleteInvalidReplays();
	void DeleteReplay(const class UAthenaReplayBrowserRowProxyInstance* RowProxy);
	bool DoesReplayFolderExist();
	bool IsHandlingAction();
	void OnActionFinished();
	void OnActionStarted();
	void OnBackActionExecuted(bool* bPassThrough);
	void OnDeleteActionExecuted(bool* bPassThrough);
	void OnDeleteFailed(const class FText& Reason);
	void OnPlayActionExecuted(bool* bPassThrough);
	void OnPlayFailed(const class FText& Reason);
	void OnRefreshActionExecuted(bool* bPassThrough);
	void OnRenameActionExecuted(bool* bPassThrough);
	void OnRenameFailed(const class FText& Reason);
	void OnRowsUpdated();
	void OnSaveFailed(const class FText& Reason);
	void PlayReplay(const class UAthenaReplayBrowserRowProxyInstance* RowProxy);
	void RenameReplay(const class UAthenaReplayBrowserRowProxyInstance* RowProxy, const class FString& NewReplayName);
	void SaveAndRenameReplay(const class UAthenaReplayBrowserRowProxyInstance* RowProxy, const class FString& NewReplayName);
	void ShowDeleteInvalidDialog(const class FText& Title, const class FText& MESSAGE);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaReplayBrowserScreenBase">();
	}
	static class UAthenaReplayBrowserScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaReplayBrowserScreenBase>();
	}
};
static_assert(alignof(UAthenaReplayBrowserScreenBase) == 0x000008, "Wrong alignment on UAthenaReplayBrowserScreenBase");
static_assert(sizeof(UAthenaReplayBrowserScreenBase) == 0x0003C0, "Wrong size on UAthenaReplayBrowserScreenBase");
static_assert(offsetof(UAthenaReplayBrowserScreenBase, RowProxies) == 0x000348, "Member 'UAthenaReplayBrowserScreenBase::RowProxies' has a wrong offset!");
static_assert(offsetof(UAthenaReplayBrowserScreenBase, PlayActionRowHandle) == 0x000358, "Member 'UAthenaReplayBrowserScreenBase::PlayActionRowHandle' has a wrong offset!");
static_assert(offsetof(UAthenaReplayBrowserScreenBase, DeleteActionRowHandle) == 0x000368, "Member 'UAthenaReplayBrowserScreenBase::DeleteActionRowHandle' has a wrong offset!");
static_assert(offsetof(UAthenaReplayBrowserScreenBase, RenameActionRowHandle) == 0x000378, "Member 'UAthenaReplayBrowserScreenBase::RenameActionRowHandle' has a wrong offset!");
static_assert(offsetof(UAthenaReplayBrowserScreenBase, RefreshActionRowHandle) == 0x000388, "Member 'UAthenaReplayBrowserScreenBase::RefreshActionRowHandle' has a wrong offset!");
static_assert(offsetof(UAthenaReplayBrowserScreenBase, BackActionRowHandle) == 0x000398, "Member 'UAthenaReplayBrowserScreenBase::BackActionRowHandle' has a wrong offset!");

// Class FortniteUI.AthenaResourcesBase
// 0x0000 (0x0268 - 0x0268)
class UAthenaResourcesBase final : public UFortHUDElementWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaResourcesBase">();
	}
	static class UAthenaResourcesBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaResourcesBase>();
	}
};
static_assert(alignof(UAthenaResourcesBase) == 0x000008, "Wrong alignment on UAthenaResourcesBase");
static_assert(sizeof(UAthenaResourcesBase) == 0x000268, "Wrong size on UAthenaResourcesBase");

// Class FortniteUI.FortHUDTargetUnderReticleWidget
// 0x0048 (0x0280 - 0x0238)
class UFortHUDTargetUnderReticleWidget final : public UCommonUserWidget
{
public:
	TScriptInterface<class IFortHUDTargetUnderReticleInterface> Target;                                            // 0x0238(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bKeepTargetUntilNewValidTarget;                    // 0x0248(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TargetRequiredTags;                                // 0x0250(0x0020)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPrivate)
	uint8                                         Pad_270[0x10];                                     // 0x0270(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearTarget();
	void HandleOnHUDTargetUnderReticle(TScriptInterface<class IFortHUDTargetUnderReticleInterface>* NewTarget);
	void OnTargetActorDestroyed(class AActor* DestroyedActor);
	void OnTargetChanged();
	void OnTargetDestroyed();
	void OnTargetDied();
	void OnTargetHealthChanged();
	void Setup(bool bInKeepTargetUntilNewValidTarget, const struct FGameplayTagContainer& InTargetRequiredTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHUDTargetUnderReticleWidget">();
	}
	static class UFortHUDTargetUnderReticleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHUDTargetUnderReticleWidget>();
	}
};
static_assert(alignof(UFortHUDTargetUnderReticleWidget) == 0x000008, "Wrong alignment on UFortHUDTargetUnderReticleWidget");
static_assert(sizeof(UFortHUDTargetUnderReticleWidget) == 0x000280, "Wrong size on UFortHUDTargetUnderReticleWidget");
static_assert(offsetof(UFortHUDTargetUnderReticleWidget, Target) == 0x000238, "Member 'UFortHUDTargetUnderReticleWidget::Target' has a wrong offset!");
static_assert(offsetof(UFortHUDTargetUnderReticleWidget, bKeepTargetUntilNewValidTarget) == 0x000248, "Member 'UFortHUDTargetUnderReticleWidget::bKeepTargetUntilNewValidTarget' has a wrong offset!");
static_assert(offsetof(UFortHUDTargetUnderReticleWidget, TargetRequiredTags) == 0x000250, "Member 'UFortHUDTargetUnderReticleWidget::TargetRequiredTags' has a wrong offset!");

// Class FortniteUI.AthenaRespawnBase
// 0x0010 (0x0278 - 0x0268)
class UAthenaRespawnBase final : public UFortHUDElementWidget
{
public:
	ERespawnUIState                               RespawnState;                                      // 0x0268(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_269[0xF];                                      // 0x0269(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGamePhaseChanged(EAthenaGamePhase GamePhase);
	void OnUpdateRespawnState(bool bEnabled);
	void UpdateAllUI();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaRespawnBase">();
	}
	static class UAthenaRespawnBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaRespawnBase>();
	}
};
static_assert(alignof(UAthenaRespawnBase) == 0x000008, "Wrong alignment on UAthenaRespawnBase");
static_assert(sizeof(UAthenaRespawnBase) == 0x000278, "Wrong size on UAthenaRespawnBase");
static_assert(offsetof(UAthenaRespawnBase, RespawnState) == 0x000268, "Member 'UAthenaRespawnBase::RespawnState' has a wrong offset!");

// Class FortniteUI.FortLeaderboardContext
// 0x0000 (0x0028 - 0x0028)
class UFortLeaderboardContext final : public UBlueprintContextBase
{
public:
	bool CanShowGlobalLeaderboards() const;
	bool CanShowLeaderboards() const;
	bool CanShowStats() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLeaderboardContext">();
	}
	static class UFortLeaderboardContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLeaderboardContext>();
	}
};
static_assert(alignof(UFortLeaderboardContext) == 0x000008, "Wrong alignment on UFortLeaderboardContext");
static_assert(sizeof(UFortLeaderboardContext) == 0x000028, "Wrong size on UFortLeaderboardContext");

// Class FortniteUI.AthenaScorePopWidgetBase
// 0x0000 (0x0268 - 0x0268)
class UAthenaScorePopWidgetBase final : public UFortHUDElementWidget
{
public:
	void HandleNewScoreEarned(int32 NewPoints, EAthenaScoringEvent ScoreType);
	void OnNewScoreEarned(int32 NewScoreValue, const class FText& NewScoreTypeText, int32 BigScoreThreshold);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaScorePopWidgetBase">();
	}
	static class UAthenaScorePopWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaScorePopWidgetBase>();
	}
};
static_assert(alignof(UAthenaScorePopWidgetBase) == 0x000008, "Wrong alignment on UAthenaScorePopWidgetBase");
static_assert(sizeof(UAthenaScorePopWidgetBase) == 0x000268, "Wrong size on UAthenaScorePopWidgetBase");

// Class FortniteUI.AthenaSeasonStatusWidget
// 0x0000 (0x0238 - 0x0238)
class UAthenaSeasonStatusWidget final : public UCommonUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaSeasonStatusWidget">();
	}
	static class UAthenaSeasonStatusWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaSeasonStatusWidget>();
	}
};
static_assert(alignof(UAthenaSeasonStatusWidget) == 0x000008, "Wrong alignment on UAthenaSeasonStatusWidget");
static_assert(sizeof(UAthenaSeasonStatusWidget) == 0x000238, "Wrong size on UAthenaSeasonStatusWidget");

// Class FortniteUI.AthenaSpectatorHitPointBarBase
// 0x0018 (0x0250 - 0x0238)
class UAthenaSpectatorHitPointBarBase final : public UCommonUserWidget
{
public:
	EHealthBarType                                BarType;                                           // 0x0238(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastToCurrentUpdateRate;                           // 0x023C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsDBNO;                                           // 0x0240(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_241[0x3];                                      // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UAthenaRemotePlayerViewData> PlayerData;                                        // 0x0244(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCurrentValueChanged(float InCurrentValue);
	void OnDBNOChanged(bool bInIsDBNO);
	void OnDBNOStateChanged(class UAthenaRemotePlayerViewData* InPlayerData, bool bInIsDBNO);
	void OnDeltaValueChanged(float InDeltaValue);
	void OnEliminatedStateChanged(class UAthenaRemotePlayerViewData* InPlayerData, bool bInIsEliminated);
	void OnValueDamaged(class UAthenaRemotePlayerViewData* InPlayerData, float InValuePercent);
	void OnValueHealed(class UAthenaRemotePlayerViewData* InPlayerData, float InValuePercent);
	void SetPlayerData(class UAthenaRemotePlayerViewData* InPlayerData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaSpectatorHitPointBarBase">();
	}
	static class UAthenaSpectatorHitPointBarBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaSpectatorHitPointBarBase>();
	}
};
static_assert(alignof(UAthenaSpectatorHitPointBarBase) == 0x000008, "Wrong alignment on UAthenaSpectatorHitPointBarBase");
static_assert(sizeof(UAthenaSpectatorHitPointBarBase) == 0x000250, "Wrong size on UAthenaSpectatorHitPointBarBase");
static_assert(offsetof(UAthenaSpectatorHitPointBarBase, BarType) == 0x000238, "Member 'UAthenaSpectatorHitPointBarBase::BarType' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorHitPointBarBase, LastToCurrentUpdateRate) == 0x00023C, "Member 'UAthenaSpectatorHitPointBarBase::LastToCurrentUpdateRate' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorHitPointBarBase, bIsDBNO) == 0x000240, "Member 'UAthenaSpectatorHitPointBarBase::bIsDBNO' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorHitPointBarBase, PlayerData) == 0x000244, "Member 'UAthenaSpectatorHitPointBarBase::PlayerData' has a wrong offset!");

// Class FortniteUI.AthenaSpectatorHUDControlsBase
// 0x0040 (0x0278 - 0x0238)
class UAthenaSpectatorHUDControlsBase final : public UCommonUserWidget
{
public:
	class UIconTextButtonSpectatorBase*           HUDVisibilityButton;                               // 0x0238(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UIconTextButtonSpectatorBase*           PlayerListButton;                                  // 0x0240(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UIconTextButtonSpectatorBase*           ViewSettingsButton;                                // 0x0248(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UIconTextButtonSpectatorBase*           PreviousPlayerButton;                              // 0x0250(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       FollowedPlayerText;                                // 0x0258(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UIconTextButtonSpectatorBase*           NextPlayerButton;                                  // 0x0260(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UIconTextButtonSpectatorBase*           CurrentCameraButton;                               // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuAnchor*                            CameraSelectAnchor;                                // 0x0270(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnCameraTypeChanged(class AFortPlayerControllerSpectating* SpectatorPC, ESpectatorCameraType NewCameraType);
	void OnCurrentCameraButtonClicked();
	void OnFollowedPlayerChanged(class AFortPlayerControllerSpectating* SpectatorPC, class AFortPlayerState* NewFollowedPlayer);
	void OnHUDVisibilityButtonClicked();
	void OnNextPlayerButtonClicked();
	void OnPlayerListButtonClicked();
	void OnPreviousPlayerButtonClicked();
	void OnViewSettingsButtonClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaSpectatorHUDControlsBase">();
	}
	static class UAthenaSpectatorHUDControlsBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaSpectatorHUDControlsBase>();
	}
};
static_assert(alignof(UAthenaSpectatorHUDControlsBase) == 0x000008, "Wrong alignment on UAthenaSpectatorHUDControlsBase");
static_assert(sizeof(UAthenaSpectatorHUDControlsBase) == 0x000278, "Wrong size on UAthenaSpectatorHUDControlsBase");
static_assert(offsetof(UAthenaSpectatorHUDControlsBase, HUDVisibilityButton) == 0x000238, "Member 'UAthenaSpectatorHUDControlsBase::HUDVisibilityButton' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorHUDControlsBase, PlayerListButton) == 0x000240, "Member 'UAthenaSpectatorHUDControlsBase::PlayerListButton' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorHUDControlsBase, ViewSettingsButton) == 0x000248, "Member 'UAthenaSpectatorHUDControlsBase::ViewSettingsButton' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorHUDControlsBase, PreviousPlayerButton) == 0x000250, "Member 'UAthenaSpectatorHUDControlsBase::PreviousPlayerButton' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorHUDControlsBase, FollowedPlayerText) == 0x000258, "Member 'UAthenaSpectatorHUDControlsBase::FollowedPlayerText' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorHUDControlsBase, NextPlayerButton) == 0x000260, "Member 'UAthenaSpectatorHUDControlsBase::NextPlayerButton' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorHUDControlsBase, CurrentCameraButton) == 0x000268, "Member 'UAthenaSpectatorHUDControlsBase::CurrentCameraButton' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorHUDControlsBase, CameraSelectAnchor) == 0x000270, "Member 'UAthenaSpectatorHUDControlsBase::CameraSelectAnchor' has a wrong offset!");

// Class FortniteUI.AthenaSpectatorPlayerListBase
// 0x0030 (0x0378 - 0x0348)
class UAthenaSpectatorPlayerListBase : public UAthenaEventScreenBase
{
public:
	UMulticastDelegateProperty_                   OnSortMethodChanged;                               // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UCommonListView*                        ListView;                                          // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UAthenaRemotePlayerViewData*>    PlayerDataArray;                                   // 0x0360(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	ESpectatorPlayerListSortMethod                CurrentSortMethod;                                 // 0x0370(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FocusListView(class UAthenaRemotePlayerViewData* ItemToFocus);
	void SetSortMethod(ESpectatorPlayerListSortMethod InNewSortMethod);
	void SortMethodDelegate__DelegateSignature(ESpectatorPlayerListSortMethod SortMethodParam);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaSpectatorPlayerListBase">();
	}
	static class UAthenaSpectatorPlayerListBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaSpectatorPlayerListBase>();
	}
};
static_assert(alignof(UAthenaSpectatorPlayerListBase) == 0x000008, "Wrong alignment on UAthenaSpectatorPlayerListBase");
static_assert(sizeof(UAthenaSpectatorPlayerListBase) == 0x000378, "Wrong size on UAthenaSpectatorPlayerListBase");
static_assert(offsetof(UAthenaSpectatorPlayerListBase, OnSortMethodChanged) == 0x000348, "Member 'UAthenaSpectatorPlayerListBase::OnSortMethodChanged' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorPlayerListBase, ListView) == 0x000358, "Member 'UAthenaSpectatorPlayerListBase::ListView' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorPlayerListBase, PlayerDataArray) == 0x000360, "Member 'UAthenaSpectatorPlayerListBase::PlayerDataArray' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorPlayerListBase, CurrentSortMethod) == 0x000370, "Member 'UAthenaSpectatorPlayerListBase::CurrentSortMethod' has a wrong offset!");

// Class FortniteUI.AthenaSpectatorMapPlayerListBase
// 0x0008 (0x0380 - 0x0378)
class UAthenaSpectatorMapPlayerListBase final : public UAthenaSpectatorPlayerListBase
{
public:
	class UAthenaMapLayer*                        MapLayer;                                          // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnListItemClicked(class UObject* Item);
	void OnPlayerEliminatedStateChanged(class UAthenaRemotePlayerViewData* InPlayerData, bool bInIsEliminated);
	void OnPlayerIsInRelevancyChanged(class UAthenaRemotePlayerViewData* InPlayerData, bool bInIsInRelevancy);
	void OnPlayerKillScoreChanged(class UAthenaRemotePlayerViewData* InPlayerData, int32 InKillScore);
	void OnPlayerNameChanged(class UAthenaRemotePlayerViewData* InPlayerData, const class FString& InPlayerName);
	void OnPlayerSquadIdChanged(class UAthenaRemotePlayerViewData* InPlayerData, uint8 InSquadId);
	void OnSortByEliminationsActionExecuted(bool* bPassThrough);
	void OnSortByPlayerNameActionExecuted(bool* bPassThrough);
	void OnSortBySquadIdActionExecuted(bool* bPassThrough);
	void OnSortByStateActionExecuted(bool* bPassThrough);
	void OnToggleOnlyShowMapPlayersActionExecuted(bool* bPassThrough);

	ESpectatorPlayerListSortMethod GetNextSortMethod() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaSpectatorMapPlayerListBase">();
	}
	static class UAthenaSpectatorMapPlayerListBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaSpectatorMapPlayerListBase>();
	}
};
static_assert(alignof(UAthenaSpectatorMapPlayerListBase) == 0x000008, "Wrong alignment on UAthenaSpectatorMapPlayerListBase");
static_assert(sizeof(UAthenaSpectatorMapPlayerListBase) == 0x000380, "Wrong size on UAthenaSpectatorMapPlayerListBase");
static_assert(offsetof(UAthenaSpectatorMapPlayerListBase, MapLayer) == 0x000378, "Member 'UAthenaSpectatorMapPlayerListBase::MapLayer' has a wrong offset!");

// Class FortniteUI.AthenaSpectatorNameplateBase
// 0x00A8 (0x0348 - 0x02A0)
class UAthenaSpectatorNameplateBase final : public UFortActorIndicatorWidget
{
public:
	float                                         DistanceToCameraOffsetScale;                       // 0x02A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinZOffset;                                        // 0x02A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxZOffset;                                        // 0x02A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NearDistanceThreshold;                             // 0x02AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonLazyImage*                       WeaponIcon;                                        // 0x02B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 WeaponBackground;                                  // 0x02B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              EditToolIcon;                                      // 0x02C0(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              BuildingIcon;                                      // 0x02E8(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              DriverIcon;                                        // 0x0310(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UAthenaRemotePlayerViewData> PlayerData;                                        // 0x0338(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EAthenaSpectatorNameplateDistanceState        CurrentDistanceState;                              // 0x0340(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDistanceStateChanged(EAthenaSpectatorNameplateDistanceState NewDistanceState);
	void OnPlayerDataSet(class UAthenaRemotePlayerViewData* InPlayerData);
	void OnPlayerNameChanged(class UAthenaRemotePlayerViewData* InPlayerData, const class FString& InPlayerName);
	void OnPlayerPawnChanged(class UAthenaRemotePlayerViewData* InPlayerData, class AFortPlayerPawn* InPlayerPawn);
	void OnSquadIdChanged(class UAthenaRemotePlayerViewData* InPlayerData, uint8 InSquadId);
	void OnTeamColorChanged(class UAthenaRemotePlayerViewData* InPlayerData, const struct FLinearColor& InTeamColor);
	void OnVehicleStateChanged(class UAthenaRemotePlayerViewData* InPlayerData, class AFortAthenaVehicle* InNewVehicle, class AFortAthenaVehicle* InOldVehicle);
	void OnVehicleStateChanged_BP(class UAthenaRemotePlayerViewData* InPlayerData, class AFortAthenaVehicle* InNewVehicle, class AFortAthenaVehicle* InOldVehicle);
	void OnWeaponChanged(class UAthenaRemotePlayerViewData* InPlayerData, class AFortWeapon* InNewWeapon);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaSpectatorNameplateBase">();
	}
	static class UAthenaSpectatorNameplateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaSpectatorNameplateBase>();
	}
};
static_assert(alignof(UAthenaSpectatorNameplateBase) == 0x000008, "Wrong alignment on UAthenaSpectatorNameplateBase");
static_assert(sizeof(UAthenaSpectatorNameplateBase) == 0x000348, "Wrong size on UAthenaSpectatorNameplateBase");
static_assert(offsetof(UAthenaSpectatorNameplateBase, DistanceToCameraOffsetScale) == 0x0002A0, "Member 'UAthenaSpectatorNameplateBase::DistanceToCameraOffsetScale' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorNameplateBase, MinZOffset) == 0x0002A4, "Member 'UAthenaSpectatorNameplateBase::MinZOffset' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorNameplateBase, MaxZOffset) == 0x0002A8, "Member 'UAthenaSpectatorNameplateBase::MaxZOffset' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorNameplateBase, NearDistanceThreshold) == 0x0002AC, "Member 'UAthenaSpectatorNameplateBase::NearDistanceThreshold' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorNameplateBase, WeaponIcon) == 0x0002B0, "Member 'UAthenaSpectatorNameplateBase::WeaponIcon' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorNameplateBase, WeaponBackground) == 0x0002B8, "Member 'UAthenaSpectatorNameplateBase::WeaponBackground' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorNameplateBase, EditToolIcon) == 0x0002C0, "Member 'UAthenaSpectatorNameplateBase::EditToolIcon' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorNameplateBase, BuildingIcon) == 0x0002E8, "Member 'UAthenaSpectatorNameplateBase::BuildingIcon' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorNameplateBase, DriverIcon) == 0x000310, "Member 'UAthenaSpectatorNameplateBase::DriverIcon' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorNameplateBase, PlayerData) == 0x000338, "Member 'UAthenaSpectatorNameplateBase::PlayerData' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorNameplateBase, CurrentDistanceState) == 0x000340, "Member 'UAthenaSpectatorNameplateBase::CurrentDistanceState' has a wrong offset!");

// Class FortniteUI.AthenaSpectatorNameplateLayerBase
// 0x0058 (0x02C0 - 0x0268)
class UAthenaSpectatorNameplateLayerBase final : public UFortHUDElementWidget
{
public:
	TSubclassOf<class UAthenaSpectatorNameplateBase> NameplateWidgetClass;                              // 0x0268(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FUniqueNetIdRepl, class UAthenaSpectatorNameplateBase*> NameplateWidgetMap;                                // 0x0270(0x0050)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void AddNameplate(class UAthenaSpectatorNameplateBase* NameplateWidget);
	void OnNameplatesViewDistanceChanged(float NewDistance);
	void OnPlayerDataAdded(class UAthenaRemotePlayerViewData* InPlayerData);
	void RemoveNameplate(class UAthenaSpectatorNameplateBase* NameplateWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaSpectatorNameplateLayerBase">();
	}
	static class UAthenaSpectatorNameplateLayerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaSpectatorNameplateLayerBase>();
	}
};
static_assert(alignof(UAthenaSpectatorNameplateLayerBase) == 0x000008, "Wrong alignment on UAthenaSpectatorNameplateLayerBase");
static_assert(sizeof(UAthenaSpectatorNameplateLayerBase) == 0x0002C0, "Wrong size on UAthenaSpectatorNameplateLayerBase");
static_assert(offsetof(UAthenaSpectatorNameplateLayerBase, NameplateWidgetClass) == 0x000268, "Member 'UAthenaSpectatorNameplateLayerBase::NameplateWidgetClass' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorNameplateLayerBase, NameplateWidgetMap) == 0x000270, "Member 'UAthenaSpectatorNameplateLayerBase::NameplateWidgetMap' has a wrong offset!");

// Class FortniteUI.FortHomebaseNodeItemTooltip
// 0x0020 (0x00B0 - 0x0090)
class UFortHomebaseNodeItemTooltip final : public UFortItemTooltip
{
public:
	uint8                                         Pad_90[0x20];                                      // 0x0090(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHomebaseNodeItemTooltip">();
	}
	static class UFortHomebaseNodeItemTooltip* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHomebaseNodeItemTooltip>();
	}
};
static_assert(alignof(UFortHomebaseNodeItemTooltip) == 0x000008, "Wrong alignment on UFortHomebaseNodeItemTooltip");
static_assert(sizeof(UFortHomebaseNodeItemTooltip) == 0x0000B0, "Wrong size on UFortHomebaseNodeItemTooltip");

// Class FortniteUI.AthenaSpectatorPlayerListEntryBase
// 0x0000 (0x0B40 - 0x0B40)
class UAthenaSpectatorPlayerListEntryBase final : public UAthenaEventMatchPlayerWidgetBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaSpectatorPlayerListEntryBase">();
	}
	static class UAthenaSpectatorPlayerListEntryBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaSpectatorPlayerListEntryBase>();
	}
};
static_assert(alignof(UAthenaSpectatorPlayerListEntryBase) == 0x000008, "Wrong alignment on UAthenaSpectatorPlayerListEntryBase");
static_assert(sizeof(UAthenaSpectatorPlayerListEntryBase) == 0x000B40, "Wrong size on UAthenaSpectatorPlayerListEntryBase");

// Class FortniteUI.FortPCBInfoPannel
// 0x0038 (0x0268 - 0x0230)
class UFortPCBInfoPannel : public UUserWidget
{
public:
	bool                                          bDisplayPCBData;                                   // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PCB_Header;                                        // 0x0238(0x0018)(NativeAccessSpecifierPrivate)
	class FText                                   PCB_Description;                                   // 0x0250(0x0018)(NativeAccessSpecifierPrivate)

public:
	void CmsDataRead();

	class FText GetPCBDescription() const;
	class FText GetPCBHeader() const;
	bool ShouldDisplayPCBData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPCBInfoPannel">();
	}
	static class UFortPCBInfoPannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPCBInfoPannel>();
	}
};
static_assert(alignof(UFortPCBInfoPannel) == 0x000008, "Wrong alignment on UFortPCBInfoPannel");
static_assert(sizeof(UFortPCBInfoPannel) == 0x000268, "Wrong size on UFortPCBInfoPannel");
static_assert(offsetof(UFortPCBInfoPannel, bDisplayPCBData) == 0x000230, "Member 'UFortPCBInfoPannel::bDisplayPCBData' has a wrong offset!");
static_assert(offsetof(UFortPCBInfoPannel, PCB_Header) == 0x000238, "Member 'UFortPCBInfoPannel::PCB_Header' has a wrong offset!");
static_assert(offsetof(UFortPCBInfoPannel, PCB_Description) == 0x000250, "Member 'UFortPCBInfoPannel::PCB_Description' has a wrong offset!");

// Class FortniteUI.AthenaSpectatorPlayerListEntryWidget
// 0x0010 (0x0B40 - 0x0B30)
class UAthenaSpectatorPlayerListEntryWidget final : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaSpectatorPlayerListRowData*      PlayerListRowData;                                 // 0x0B38(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnEntryDataSet();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaSpectatorPlayerListEntryWidget">();
	}
	static class UAthenaSpectatorPlayerListEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaSpectatorPlayerListEntryWidget>();
	}
};
static_assert(alignof(UAthenaSpectatorPlayerListEntryWidget) == 0x000008, "Wrong alignment on UAthenaSpectatorPlayerListEntryWidget");
static_assert(sizeof(UAthenaSpectatorPlayerListEntryWidget) == 0x000B40, "Wrong size on UAthenaSpectatorPlayerListEntryWidget");
static_assert(offsetof(UAthenaSpectatorPlayerListEntryWidget, PlayerListRowData) == 0x000B38, "Member 'UAthenaSpectatorPlayerListEntryWidget::PlayerListRowData' has a wrong offset!");

// Class FortniteUI.AthenaSpectatorPlayerListScreenBase
// 0x0010 (0x0248 - 0x0238)
class UAthenaSpectatorPlayerListScreenBase final : public UCommonUserWidget
{
public:
	TArray<class UAthenaSpectatorPlayerListRowData*> RowDataArray;                                      // 0x0238(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void ClearPlayers();
	void OnFollowedPlayerChanged(class AFortPlayerControllerSpectating* SpectatorPC, class AFortPlayerState* NewFollowedPlayer);
	void OnPlayerBecameIrrelevant(class AFortPlayerState* NewlyIrrelevantPlayer);
	void OnPlayerBecameRelevant(class AFortPlayerState* NewlyRelevantPlayer);
	void OnPlayerDied(class AFortPlayerState* NewlyDeadPlayer);
	void UpdateListUI();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaSpectatorPlayerListScreenBase">();
	}
	static class UAthenaSpectatorPlayerListScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaSpectatorPlayerListScreenBase>();
	}
};
static_assert(alignof(UAthenaSpectatorPlayerListScreenBase) == 0x000008, "Wrong alignment on UAthenaSpectatorPlayerListScreenBase");
static_assert(sizeof(UAthenaSpectatorPlayerListScreenBase) == 0x000248, "Wrong size on UAthenaSpectatorPlayerListScreenBase");
static_assert(offsetof(UAthenaSpectatorPlayerListScreenBase, RowDataArray) == 0x000238, "Member 'UAthenaSpectatorPlayerListScreenBase::RowDataArray' has a wrong offset!");

// Class FortniteUI.FortRewardNotificationData
// 0x0008 (0x0030 - 0x0028)
class UFortRewardNotificationData : public UObject
{
public:
	EFrontEndRewardType                           RewardType;                                        // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetIconBrush(struct FSlateBrush* IconBrush, EFortBrushSize BrushSize);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRewardNotificationData">();
	}
	static class UFortRewardNotificationData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRewardNotificationData>();
	}
};
static_assert(alignof(UFortRewardNotificationData) == 0x000008, "Wrong alignment on UFortRewardNotificationData");
static_assert(sizeof(UFortRewardNotificationData) == 0x000030, "Wrong size on UFortRewardNotificationData");
static_assert(offsetof(UFortRewardNotificationData, RewardType) == 0x000028, "Member 'UFortRewardNotificationData::RewardType' has a wrong offset!");

// Class FortniteUI.FortRewardMissionData
// 0x0000 (0x0030 - 0x0030)
class UFortRewardMissionData final : public UFortRewardNotificationData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRewardMissionData">();
	}
	static class UFortRewardMissionData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRewardMissionData>();
	}
};
static_assert(alignof(UFortRewardMissionData) == 0x000008, "Wrong alignment on UFortRewardMissionData");
static_assert(sizeof(UFortRewardMissionData) == 0x000030, "Wrong size on UFortRewardMissionData");

// Class FortniteUI.AthenaSpectatorUIContext
// 0x0118 (0x0140 - 0x0028)
class UAthenaSpectatorUIContext final : public UBlueprintContextBase
{
public:
	UMulticastDelegateProperty_                   OnPlayerDataAdded;                                 // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSquadDataAdded;                                  // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<struct FUniqueNetIdRepl, class UAthenaRemotePlayerViewData*> PlayerDataMap;                                     // 0x0048(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<uint8, class UAthenaRemoteSquadViewData*> SquadDataMap;                                      // 0x0098(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class AFortPlayerControllerSpectating*        SpectatingPC;                                      // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FUniqueNetIdRepl                       FollowedPlayerUID;                                 // 0x00F0(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FUniqueNetIdRepl                       ReplayRelevancyPlayerUID;                          // 0x0118(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnBroadcastSpectatorPerPlayerInfoChanged(const TArray<struct FFortBroadcastInfoPerPlayer>& BroadcastPerPlayerInfo);
	void OnFollowedPlayerChanged(class AFortPlayerControllerSpectating* SpectatorPC, class AFortPlayerState* NewFollowedPlayer);
	void OnGamePhaseChanged(EAthenaGamePhase GamePhase);
	void OnGameStateSet(class AFortGameState* InGameState);
	void OnPawnForReplayRelevancyChanged(class AFortPawn* InPawnForReplayRelevancy);
	void OnPlayerBecameIrrelevant(class AFortPlayerState* FPS);
	void OnPlayerBecameRelevant(class AFortPlayerState* FPS);
	void OnPlayerStateAdded(class AFortPlayerStateAthena* FPSA);
	void PlayerDataDelegate__DelegateSignature(class UAthenaRemotePlayerViewData* PlayerData);
	void SquadDataDelegate__DelegateSignature(class UAthenaRemoteSquadViewData* SquadData);

	class UAthenaRemotePlayerViewData* GetFollowedPlayerData() const;
	class UAthenaRemotePlayerViewData* GetPlayerData(const struct FUniqueNetIdRepl& PlayerUID) const;
	const TMap<struct FUniqueNetIdRepl, class UAthenaRemotePlayerViewData*> GetPlayerDataMap() const;
	const TMap<uint8, class UAthenaRemoteSquadViewData*> GetSquadDataMap() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaSpectatorUIContext">();
	}
	static class UAthenaSpectatorUIContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaSpectatorUIContext>();
	}
};
static_assert(alignof(UAthenaSpectatorUIContext) == 0x000008, "Wrong alignment on UAthenaSpectatorUIContext");
static_assert(sizeof(UAthenaSpectatorUIContext) == 0x000140, "Wrong size on UAthenaSpectatorUIContext");
static_assert(offsetof(UAthenaSpectatorUIContext, OnPlayerDataAdded) == 0x000028, "Member 'UAthenaSpectatorUIContext::OnPlayerDataAdded' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorUIContext, OnSquadDataAdded) == 0x000038, "Member 'UAthenaSpectatorUIContext::OnSquadDataAdded' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorUIContext, PlayerDataMap) == 0x000048, "Member 'UAthenaSpectatorUIContext::PlayerDataMap' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorUIContext, SquadDataMap) == 0x000098, "Member 'UAthenaSpectatorUIContext::SquadDataMap' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorUIContext, SpectatingPC) == 0x0000E8, "Member 'UAthenaSpectatorUIContext::SpectatingPC' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorUIContext, FollowedPlayerUID) == 0x0000F0, "Member 'UAthenaSpectatorUIContext::FollowedPlayerUID' has a wrong offset!");
static_assert(offsetof(UAthenaSpectatorUIContext, ReplayRelevancyPlayerUID) == 0x000118, "Member 'UAthenaSpectatorUIContext::ReplayRelevancyPlayerUID' has a wrong offset!");

// Class FortniteUI.AthenaSquadListBase
// 0x0010 (0x0278 - 0x0268)
class UAthenaSquadListBase final : public UFortHUDElementWidget
{
public:
	class UAthenaPlayerInfoBase*                  LocalPlayerInfo;                                   // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDynamicEntryBox*                       EntryBox_SquadList;                                // 0x0270(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleSquadMemberDisconnected(const class AFortPlayerStateAthena* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaSquadListBase">();
	}
	static class UAthenaSquadListBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaSquadListBase>();
	}
};
static_assert(alignof(UAthenaSquadListBase) == 0x000008, "Wrong alignment on UAthenaSquadListBase");
static_assert(sizeof(UAthenaSquadListBase) == 0x000278, "Wrong size on UAthenaSquadListBase");
static_assert(offsetof(UAthenaSquadListBase, LocalPlayerInfo) == 0x000268, "Member 'UAthenaSquadListBase::LocalPlayerInfo' has a wrong offset!");
static_assert(offsetof(UAthenaSquadListBase, EntryBox_SquadList) == 0x000270, "Member 'UAthenaSquadListBase::EntryBox_SquadList' has a wrong offset!");

// Class FortniteUI.AthenaStatsScreenBase
// 0x0118 (0x0460 - 0x0348)
class UAthenaStatsScreenBase : public UFortActivatablePanel
{
public:
	class UCommonTabListWidget*                   StatsTabList;                                      // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortProfileStatsMainTile*              WinsTile;                                          // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortProfileStatsMainTile*              SecondTierTile;                                    // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortProfileStatsMainTile*              ThirdTierTile;                                     // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortProfileStatsRow*                   KillsRow;                                          // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortProfileStatsRow*                   MatchesPlayedRow;                                  // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       LastUpdatedTime;                                   // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWasLastQuerySuccessful;                           // 0x0380(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         SoloPlaylistNames;                                 // 0x0388(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         DuoPlaylistNames;                                  // 0x0398(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         SquadPlaylistNames;                                // 0x03A8(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         LTM_ExclusionPlaylistNames;                        // 0x03B8(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C8[0x98];                                     // 0x03C8(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnQueryFinished(bool bWasSuccessful);
	void OnQueryStarted();
	void OnTabSelected(class FName TabName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaStatsScreenBase">();
	}
	static class UAthenaStatsScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaStatsScreenBase>();
	}
};
static_assert(alignof(UAthenaStatsScreenBase) == 0x000008, "Wrong alignment on UAthenaStatsScreenBase");
static_assert(sizeof(UAthenaStatsScreenBase) == 0x000460, "Wrong size on UAthenaStatsScreenBase");
static_assert(offsetof(UAthenaStatsScreenBase, StatsTabList) == 0x000348, "Member 'UAthenaStatsScreenBase::StatsTabList' has a wrong offset!");
static_assert(offsetof(UAthenaStatsScreenBase, WinsTile) == 0x000350, "Member 'UAthenaStatsScreenBase::WinsTile' has a wrong offset!");
static_assert(offsetof(UAthenaStatsScreenBase, SecondTierTile) == 0x000358, "Member 'UAthenaStatsScreenBase::SecondTierTile' has a wrong offset!");
static_assert(offsetof(UAthenaStatsScreenBase, ThirdTierTile) == 0x000360, "Member 'UAthenaStatsScreenBase::ThirdTierTile' has a wrong offset!");
static_assert(offsetof(UAthenaStatsScreenBase, KillsRow) == 0x000368, "Member 'UAthenaStatsScreenBase::KillsRow' has a wrong offset!");
static_assert(offsetof(UAthenaStatsScreenBase, MatchesPlayedRow) == 0x000370, "Member 'UAthenaStatsScreenBase::MatchesPlayedRow' has a wrong offset!");
static_assert(offsetof(UAthenaStatsScreenBase, LastUpdatedTime) == 0x000378, "Member 'UAthenaStatsScreenBase::LastUpdatedTime' has a wrong offset!");
static_assert(offsetof(UAthenaStatsScreenBase, bWasLastQuerySuccessful) == 0x000380, "Member 'UAthenaStatsScreenBase::bWasLastQuerySuccessful' has a wrong offset!");
static_assert(offsetof(UAthenaStatsScreenBase, SoloPlaylistNames) == 0x000388, "Member 'UAthenaStatsScreenBase::SoloPlaylistNames' has a wrong offset!");
static_assert(offsetof(UAthenaStatsScreenBase, DuoPlaylistNames) == 0x000398, "Member 'UAthenaStatsScreenBase::DuoPlaylistNames' has a wrong offset!");
static_assert(offsetof(UAthenaStatsScreenBase, SquadPlaylistNames) == 0x0003A8, "Member 'UAthenaStatsScreenBase::SquadPlaylistNames' has a wrong offset!");
static_assert(offsetof(UAthenaStatsScreenBase, LTM_ExclusionPlaylistNames) == 0x0003B8, "Member 'UAthenaStatsScreenBase::LTM_ExclusionPlaylistNames' has a wrong offset!");

// Class FortniteUI.AthenaStormSurgeWarningBase
// 0x0000 (0x0268 - 0x0268)
class UAthenaStormSurgeWarningBase final : public UFortHUDElementWidget
{
public:
	void OnStartDisplaying(const class FText& TitleText, const class FText& SubTitleText, bool bDisplaySubtitle, bool bPlayDamageActiveSound);
	void OnStopDisplaying();
	void OnStormCapStateChanged(EAthenaStormCapState StormCapState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaStormSurgeWarningBase">();
	}
	static class UAthenaStormSurgeWarningBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaStormSurgeWarningBase>();
	}
};
static_assert(alignof(UAthenaStormSurgeWarningBase) == 0x000008, "Wrong alignment on UAthenaStormSurgeWarningBase");
static_assert(sizeof(UAthenaStormSurgeWarningBase) == 0x000268, "Wrong size on UAthenaStormSurgeWarningBase");

// Class FortniteUI.AthenaStormSurgeWidgetBase
// 0x0018 (0x0280 - 0x0268)
class UAthenaStormSurgeWidgetBase final : public UFortHUDElementWidget
{
public:
	uint8                                         Pad_268[0x18];                                     // 0x0268(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnStartDisplaying(const class FText& TitleText);
	void OnStopDisplaying();
	void OnStormCapStateChanged(EAthenaStormCapState StormCapState);
	void OnUpdateThresholdDisplay(const class FText& ThresholdText, EStormSurgeThresholdType ThresholdType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaStormSurgeWidgetBase">();
	}
	static class UAthenaStormSurgeWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaStormSurgeWidgetBase>();
	}
};
static_assert(alignof(UAthenaStormSurgeWidgetBase) == 0x000008, "Wrong alignment on UAthenaStormSurgeWidgetBase");
static_assert(sizeof(UAthenaStormSurgeWidgetBase) == 0x000280, "Wrong size on UAthenaStormSurgeWidgetBase");

// Class FortniteUI.FortHeroSupportPerkWidget
// 0x0358 (0x0588 - 0x0230)
class UFortHeroSupportPerkWidget : public UUserWidget
{
public:
	TWeakObjectPtr<class UFortHero>               HeroToRepresent;                                   // 0x0230(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortSupportBonusType                         SupportTypeToRepresent;                            // 0x0238(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortSupportPerkWidgetState                   SupportPerkWidgetState;                            // 0x0239(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23A[0x6];                                      // 0x023A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMultiSizeImage*                    PerkImage;                                         // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       NameText;                                          // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       DescriptionText;                                   // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_258[0x330];                                    // 0x0258(0x0330)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnHeroUpdated();
	void OnStateChanged();
	void OnSupportTypeUpdated();
	void SetHeroToRepresent(const class UFortHero* InHeroToRepresent);
	void SetState(const EFortSupportPerkWidgetState InState);
	void SetSupportTypeToRepresent(const EFortSupportBonusType InSupportTypeToRepresent);

	bool IsHeroInSupportSlot() const;
	bool IsPerkActive() const;
	bool IsPerkEmpty() const;
	bool IsPerkHighlighted() const;
	bool IsPerkInCorrectSlot() const;
	bool IsPerkUnlocked() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHeroSupportPerkWidget">();
	}
	static class UFortHeroSupportPerkWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHeroSupportPerkWidget>();
	}
};
static_assert(alignof(UFortHeroSupportPerkWidget) == 0x000008, "Wrong alignment on UFortHeroSupportPerkWidget");
static_assert(sizeof(UFortHeroSupportPerkWidget) == 0x000588, "Wrong size on UFortHeroSupportPerkWidget");
static_assert(offsetof(UFortHeroSupportPerkWidget, HeroToRepresent) == 0x000230, "Member 'UFortHeroSupportPerkWidget::HeroToRepresent' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget, SupportTypeToRepresent) == 0x000238, "Member 'UFortHeroSupportPerkWidget::SupportTypeToRepresent' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget, SupportPerkWidgetState) == 0x000239, "Member 'UFortHeroSupportPerkWidget::SupportPerkWidgetState' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget, PerkImage) == 0x000240, "Member 'UFortHeroSupportPerkWidget::PerkImage' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget, NameText) == 0x000248, "Member 'UFortHeroSupportPerkWidget::NameText' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget, DescriptionText) == 0x000250, "Member 'UFortHeroSupportPerkWidget::DescriptionText' has a wrong offset!");

// Class FortniteUI.AthenaTeamAliveCountBase
// 0x0018 (0x0280 - 0x0268)
class UAthenaTeamAliveCountBase final : public UFortHUDElementWidget
{
public:
	uint8                                         Pad_268[0x18];                                     // 0x0268(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTeamSlotData(int32 TeamIdx, const struct FAthenaTeamCountSlotData& TeamSlotData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaTeamAliveCountBase">();
	}
	static class UAthenaTeamAliveCountBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaTeamAliveCountBase>();
	}
};
static_assert(alignof(UAthenaTeamAliveCountBase) == 0x000008, "Wrong alignment on UAthenaTeamAliveCountBase");
static_assert(sizeof(UAthenaTeamAliveCountBase) == 0x000280, "Wrong size on UAthenaTeamAliveCountBase");

// Class FortniteUI.FortGiftInfo
// 0x0048 (0x0070 - 0x0028)
class UFortGiftInfo final : public UObject
{
public:
	struct FGiftBoxInfo                           GiftBoxInfo;                                       // 0x0028(0x0048)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGiftInfo">();
	}
	static class UFortGiftInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGiftInfo>();
	}
};
static_assert(alignof(UFortGiftInfo) == 0x000008, "Wrong alignment on UFortGiftInfo");
static_assert(sizeof(UFortGiftInfo) == 0x000070, "Wrong size on UFortGiftInfo");
static_assert(offsetof(UFortGiftInfo, GiftBoxInfo) == 0x000028, "Member 'UFortGiftInfo::GiftBoxInfo' has a wrong offset!");

// Class FortniteUI.AthenaTeamMemberButton
// 0x0010 (0x0B40 - 0x0B30)
class UAthenaTeamMemberButton final : public UCommonButton
{
public:
	class UAthenaTeamMemberEntry*                 MemberEntry;                                       // 0x0B30(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_AddFriend;                                  // 0x0B38(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnFriendshipStatusDetermined(EFortFriendRequestStatus RequestStatus);
	void OpenSocialPanel();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaTeamMemberButton">();
	}
	static class UAthenaTeamMemberButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaTeamMemberButton>();
	}
};
static_assert(alignof(UAthenaTeamMemberButton) == 0x000008, "Wrong alignment on UAthenaTeamMemberButton");
static_assert(sizeof(UAthenaTeamMemberButton) == 0x000B40, "Wrong size on UAthenaTeamMemberButton");
static_assert(offsetof(UAthenaTeamMemberButton, MemberEntry) == 0x000B30, "Member 'UAthenaTeamMemberButton::MemberEntry' has a wrong offset!");
static_assert(offsetof(UAthenaTeamMemberButton, Button_AddFriend) == 0x000B38, "Member 'UAthenaTeamMemberButton::Button_AddFriend' has a wrong offset!");

// Class FortniteUI.MobileHUDVisual
// 0x0010 (0x0248 - 0x0238)
class UMobileHUDVisual : public UCommonUserWidget
{
public:
	struct FGameplayTag                           VisualType;                                        // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Opacity;                                           // 0x0240(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FGameplayTag GetVisualType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MobileHUDVisual">();
	}
	static class UMobileHUDVisual* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMobileHUDVisual>();
	}
};
static_assert(alignof(UMobileHUDVisual) == 0x000008, "Wrong alignment on UMobileHUDVisual");
static_assert(sizeof(UMobileHUDVisual) == 0x000248, "Wrong size on UMobileHUDVisual");
static_assert(offsetof(UMobileHUDVisual, VisualType) == 0x000238, "Member 'UMobileHUDVisual::VisualType' has a wrong offset!");
static_assert(offsetof(UMobileHUDVisual, Opacity) == 0x000240, "Member 'UMobileHUDVisual::Opacity' has a wrong offset!");

// Class FortniteUI.FortPartySlot
// 0x0018 (0x0248 - 0x0230)
class UFortPartySlot : public UUserWidget
{
public:
	struct FLinearColor                           EmptySlotColor;                                    // 0x0230(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Image_PartySlot;                                   // 0x0240(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPartySlot">();
	}
	static class UFortPartySlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPartySlot>();
	}
};
static_assert(alignof(UFortPartySlot) == 0x000008, "Wrong alignment on UFortPartySlot");
static_assert(sizeof(UFortPartySlot) == 0x000248, "Wrong size on UFortPartySlot");
static_assert(offsetof(UFortPartySlot, EmptySlotColor) == 0x000230, "Member 'UFortPartySlot::EmptySlotColor' has a wrong offset!");
static_assert(offsetof(UFortPartySlot, Image_PartySlot) == 0x000240, "Member 'UFortPartySlot::Image_PartySlot' has a wrong offset!");

// Class FortniteUI.AthenaTeamScoreWidgetBase
// 0x0028 (0x0290 - 0x0268)
class UAthenaTeamScoreWidgetBase final : public UFortHUDElementWidget
{
public:
	class AFortPlayerStateAthena*                 CurrPlayerState;                                   // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         GoalScore;                                         // 0x0270(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PreviousScore;                                     // 0x0274(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PreviousScorePlacement;                            // 0x0278(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PreviousDeltaScore;                                // 0x027C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPreviousIsWinner;                                 // 0x0280(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPreviousHasScore;                                 // 0x0281(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_282[0xE];                                      // 0x0282(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleScoreChanged(int32 Score);
	void HandleSpectatingChanged(class AFortPlayerStateZone* SpectatingTarget);
	void HandleUpdate();
	void OnLeaderboardChanged(int32 ScoreDelta, bool bIsWinner, bool bHasScore);
	void OnPlacementChanged(int32 Placement);
	void OnScoreChanged(int32 Score);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaTeamScoreWidgetBase">();
	}
	static class UAthenaTeamScoreWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaTeamScoreWidgetBase>();
	}
};
static_assert(alignof(UAthenaTeamScoreWidgetBase) == 0x000008, "Wrong alignment on UAthenaTeamScoreWidgetBase");
static_assert(sizeof(UAthenaTeamScoreWidgetBase) == 0x000290, "Wrong size on UAthenaTeamScoreWidgetBase");
static_assert(offsetof(UAthenaTeamScoreWidgetBase, CurrPlayerState) == 0x000268, "Member 'UAthenaTeamScoreWidgetBase::CurrPlayerState' has a wrong offset!");
static_assert(offsetof(UAthenaTeamScoreWidgetBase, GoalScore) == 0x000270, "Member 'UAthenaTeamScoreWidgetBase::GoalScore' has a wrong offset!");
static_assert(offsetof(UAthenaTeamScoreWidgetBase, PreviousScore) == 0x000274, "Member 'UAthenaTeamScoreWidgetBase::PreviousScore' has a wrong offset!");
static_assert(offsetof(UAthenaTeamScoreWidgetBase, PreviousScorePlacement) == 0x000278, "Member 'UAthenaTeamScoreWidgetBase::PreviousScorePlacement' has a wrong offset!");
static_assert(offsetof(UAthenaTeamScoreWidgetBase, PreviousDeltaScore) == 0x00027C, "Member 'UAthenaTeamScoreWidgetBase::PreviousDeltaScore' has a wrong offset!");
static_assert(offsetof(UAthenaTeamScoreWidgetBase, bPreviousIsWinner) == 0x000280, "Member 'UAthenaTeamScoreWidgetBase::bPreviousIsWinner' has a wrong offset!");
static_assert(offsetof(UAthenaTeamScoreWidgetBase, bPreviousHasScore) == 0x000281, "Member 'UAthenaTeamScoreWidgetBase::bPreviousHasScore' has a wrong offset!");

// Class FortniteUI.FortRedirectToEpicAccountWidget
// 0x0048 (0x0368 - 0x0320)
class UFortRedirectToEpicAccountWidget : public UCommonActivatablePanel
{
public:
	TArray<struct FPlatformSupportDesc>           SupportedPlatforms;                                // 0x0320(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FPlatformSupportDesc                   DefaultValues;                                     // 0x0330(0x0020)(Edit, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Title;                                        // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Desc;                                         // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_CreateAccount;                              // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetLoginType(EFortLoginAccountType LoginType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRedirectToEpicAccountWidget">();
	}
	static class UFortRedirectToEpicAccountWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRedirectToEpicAccountWidget>();
	}
};
static_assert(alignof(UFortRedirectToEpicAccountWidget) == 0x000008, "Wrong alignment on UFortRedirectToEpicAccountWidget");
static_assert(sizeof(UFortRedirectToEpicAccountWidget) == 0x000368, "Wrong size on UFortRedirectToEpicAccountWidget");
static_assert(offsetof(UFortRedirectToEpicAccountWidget, SupportedPlatforms) == 0x000320, "Member 'UFortRedirectToEpicAccountWidget::SupportedPlatforms' has a wrong offset!");
static_assert(offsetof(UFortRedirectToEpicAccountWidget, DefaultValues) == 0x000330, "Member 'UFortRedirectToEpicAccountWidget::DefaultValues' has a wrong offset!");
static_assert(offsetof(UFortRedirectToEpicAccountWidget, Text_Title) == 0x000350, "Member 'UFortRedirectToEpicAccountWidget::Text_Title' has a wrong offset!");
static_assert(offsetof(UFortRedirectToEpicAccountWidget, Text_Desc) == 0x000358, "Member 'UFortRedirectToEpicAccountWidget::Text_Desc' has a wrong offset!");
static_assert(offsetof(UFortRedirectToEpicAccountWidget, Button_CreateAccount) == 0x000360, "Member 'UFortRedirectToEpicAccountWidget::Button_CreateAccount' has a wrong offset!");

// Class FortniteUI.AthenaTravelLogFormatting
// 0x0000 (0x0028 - 0x0028)
class UAthenaTravelLogFormatting final : public UBlueprintFunctionLibrary
{
public:
	static class FText FormatTravelLogEntry(class UObject* WorldContextObject, const struct FAthenaTravelLogEntry& Entry);
	static bool IsTravelLogTextDisplayEnabled();
	static bool ShouldDisplayText(const struct FAthenaTravelLogEntry& Entry);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaTravelLogFormatting">();
	}
	static class UAthenaTravelLogFormatting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaTravelLogFormatting>();
	}
};
static_assert(alignof(UAthenaTravelLogFormatting) == 0x000008, "Wrong alignment on UAthenaTravelLogFormatting");
static_assert(sizeof(UAthenaTravelLogFormatting) == 0x000028, "Wrong size on UAthenaTravelLogFormatting");

// Class FortniteUI.FortHeroLoadoutScreenBase
// 0x0000 (0x0440 - 0x0440)
class UFortHeroLoadoutScreenBase final : public UFortActivatablePanelWithItemPreview
{
public:
	void SetHeroLoadout(class UFortCampaignHeroLoadoutItem* HeroLoadout);

	bool GetIsReadOnly() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHeroLoadoutScreenBase">();
	}
	static class UFortHeroLoadoutScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHeroLoadoutScreenBase>();
	}
};
static_assert(alignof(UFortHeroLoadoutScreenBase) == 0x000008, "Wrong alignment on UFortHeroLoadoutScreenBase");
static_assert(sizeof(UFortHeroLoadoutScreenBase) == 0x000440, "Wrong size on UFortHeroLoadoutScreenBase");

// Class FortniteUI.AthenaTrickFeedBase
// 0x0028 (0x0290 - 0x0268)
class UAthenaTrickFeedBase final : public UFortHUDElementWidget
{
public:
	class UAthenaPlayerViewModel*                 VM;                                                // 0x0268(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_270[0x20];                                     // 0x0270(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddTrick(const class FText& TrickName);
	void BindToModel(class UAthenaPlayerViewModel* ViewModel);
	void RequestNextSequence();
	void TrickSequenceCanceled();
	void TrickSequenceComplete();
	void TrickSequenceFailed();
	void TrickSequenceStarted();
	void UpdateMultiplier(int32 Multiplier);
	void UpdateScore(class UFortVehicleTrickSet* TrickSet, int32 TotalScore);
	void UpdateTrickStats(const class FText& StatsText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaTrickFeedBase">();
	}
	static class UAthenaTrickFeedBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaTrickFeedBase>();
	}
};
static_assert(alignof(UAthenaTrickFeedBase) == 0x000008, "Wrong alignment on UAthenaTrickFeedBase");
static_assert(sizeof(UAthenaTrickFeedBase) == 0x000290, "Wrong size on UAthenaTrickFeedBase");
static_assert(offsetof(UAthenaTrickFeedBase, VM) == 0x000268, "Member 'UAthenaTrickFeedBase::VM' has a wrong offset!");

// Class FortniteUI.FortItemQuantityListEntryBase
// 0x0028 (0x0260 - 0x0238)
class UFortItemQuantityListEntryBase : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Quantity;                                          // 0x0240(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_244[0x1C];                                     // 0x0244(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearPreviewData();
	void HandleDifferentItemOrQuantitySetBP(const bool IsBeingReset);
	void PreviewEnded();
	void PreviewStarted();
	void SetItemDefinitionAndQuantity(const struct FFortItemQuantityPair& ItemQuantityPair, const bool ShouldTreatAsReset);
	void SetItemInstanceAndQuantity(const struct FFortItemInstanceQuantityPair& ItemQuantityPair, const bool ShouldTreatAsReset);
	void SetPreviewData(const struct FFortItemEntryPreviewData& PreviewData);

	class UFortItemDefinition* GetItemDefinition() const;
	class UFortItem* GetItemInstance() const;
	void GetPreviewData(struct FFortItemEntryPreviewData* OutPreviewData) const;
	bool IsBeingPreviewed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemQuantityListEntryBase">();
	}
	static class UFortItemQuantityListEntryBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemQuantityListEntryBase>();
	}
};
static_assert(alignof(UFortItemQuantityListEntryBase) == 0x000008, "Wrong alignment on UFortItemQuantityListEntryBase");
static_assert(sizeof(UFortItemQuantityListEntryBase) == 0x000260, "Wrong size on UFortItemQuantityListEntryBase");
static_assert(offsetof(UFortItemQuantityListEntryBase, Quantity) == 0x000240, "Member 'UFortItemQuantityListEntryBase::Quantity' has a wrong offset!");

// Class FortniteUI.AthenaWinConditionMsgBase
// 0x0000 (0x0268 - 0x0268)
class UAthenaWinConditionMsgBase final : public UFortHUDElementWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaWinConditionMsgBase">();
	}
	static class UAthenaWinConditionMsgBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaWinConditionMsgBase>();
	}
};
static_assert(alignof(UAthenaWinConditionMsgBase) == 0x000008, "Wrong alignment on UAthenaWinConditionMsgBase");
static_assert(sizeof(UAthenaWinConditionMsgBase) == 0x000268, "Wrong size on UAthenaWinConditionMsgBase");

// Class FortniteUI.BacchusButton
// 0x0050 (0x03E0 - 0x0390)
class UBacchusButton final : public UBacchusHUDElement
{
public:
	EButtonClickMethod                            ClickMethod;                                       // 0x0390(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EButtonTouchMethod                            TouchMethod;                                       // 0x0391(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_392[0x2];                                      // 0x0392(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ButtonSize;                                        // 0x0394(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ButtonDisplayScale;                                // 0x0398(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ButtonSizeName;                                    // 0x03A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ButtonDisplayScaleName;                            // 0x03B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UButton*                                InternalButton;                                    // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D8[0x8];                                      // 0x03D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnClicked();
	void SetButtonDisplayScale(float NewDisplayScale);
	void SetButtonSize(float NewButtonSize);
	void SetButtonSprite(class UPaperSprite* NewSprite);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BacchusButton">();
	}
	static class UBacchusButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBacchusButton>();
	}
};
static_assert(alignof(UBacchusButton) == 0x000008, "Wrong alignment on UBacchusButton");
static_assert(sizeof(UBacchusButton) == 0x0003E0, "Wrong size on UBacchusButton");
static_assert(offsetof(UBacchusButton, ClickMethod) == 0x000390, "Member 'UBacchusButton::ClickMethod' has a wrong offset!");
static_assert(offsetof(UBacchusButton, TouchMethod) == 0x000391, "Member 'UBacchusButton::TouchMethod' has a wrong offset!");
static_assert(offsetof(UBacchusButton, ButtonSize) == 0x000394, "Member 'UBacchusButton::ButtonSize' has a wrong offset!");
static_assert(offsetof(UBacchusButton, ButtonDisplayScale) == 0x000398, "Member 'UBacchusButton::ButtonDisplayScale' has a wrong offset!");
static_assert(offsetof(UBacchusButton, ButtonSizeName) == 0x0003A0, "Member 'UBacchusButton::ButtonSizeName' has a wrong offset!");
static_assert(offsetof(UBacchusButton, ButtonDisplayScaleName) == 0x0003B8, "Member 'UBacchusButton::ButtonDisplayScaleName' has a wrong offset!");
static_assert(offsetof(UBacchusButton, InternalButton) == 0x0003D0, "Member 'UBacchusButton::InternalButton' has a wrong offset!");

// Class FortniteUI.FortOpenCardPackModal
// 0x0040 (0x0388 - 0x0348)
class UFortOpenCardPackModal final : public UFortActivatablePanel
{
public:
	class UCommonListView*                        CardPackList;                                      // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonButton*                          OpenAllButton;                                     // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          CancelButton;                                      // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	UMulticastDelegateProperty_                   BPOnRequestOpenCardPack;                           // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_370[0x18];                                     // 0x0370(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortOpenCardPackModal">();
	}
	static class UFortOpenCardPackModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortOpenCardPackModal>();
	}
};
static_assert(alignof(UFortOpenCardPackModal) == 0x000008, "Wrong alignment on UFortOpenCardPackModal");
static_assert(sizeof(UFortOpenCardPackModal) == 0x000388, "Wrong size on UFortOpenCardPackModal");
static_assert(offsetof(UFortOpenCardPackModal, CardPackList) == 0x000348, "Member 'UFortOpenCardPackModal::CardPackList' has a wrong offset!");
static_assert(offsetof(UFortOpenCardPackModal, OpenAllButton) == 0x000350, "Member 'UFortOpenCardPackModal::OpenAllButton' has a wrong offset!");
static_assert(offsetof(UFortOpenCardPackModal, CancelButton) == 0x000358, "Member 'UFortOpenCardPackModal::CancelButton' has a wrong offset!");
static_assert(offsetof(UFortOpenCardPackModal, BPOnRequestOpenCardPack) == 0x000360, "Member 'UFortOpenCardPackModal::BPOnRequestOpenCardPack' has a wrong offset!");

// Class FortniteUI.FortItemManagementModeDetailsPanel
// 0x0030 (0x0268 - 0x0238)
class UFortItemManagementModeDetailsPanel final : public UCommonUserWidget
{
public:
	class UCommonWidgetSwitcher*                  ModeWidgetSwitcher;                                // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItemDetailsActivatablePanel*       DetailsModeItemDetailsPanel;                       // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItemDetailsActivatablePanel*       ComparisonModeItemDetailsPanel;                    // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItemDetailsActivatablePanel*       MulchModeItemDetailsPanel;                         // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFortItemManagementScreen> HostItemManagementScreen;                          // 0x0258(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_260[0x8];                                      // 0x0260(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleDifferentItemManagementModeSetBP();
	void HandleHostSet();

	EFortItemManagementMode GetItemManagementMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemManagementModeDetailsPanel">();
	}
	static class UFortItemManagementModeDetailsPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemManagementModeDetailsPanel>();
	}
};
static_assert(alignof(UFortItemManagementModeDetailsPanel) == 0x000008, "Wrong alignment on UFortItemManagementModeDetailsPanel");
static_assert(sizeof(UFortItemManagementModeDetailsPanel) == 0x000268, "Wrong size on UFortItemManagementModeDetailsPanel");
static_assert(offsetof(UFortItemManagementModeDetailsPanel, ModeWidgetSwitcher) == 0x000238, "Member 'UFortItemManagementModeDetailsPanel::ModeWidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UFortItemManagementModeDetailsPanel, DetailsModeItemDetailsPanel) == 0x000240, "Member 'UFortItemManagementModeDetailsPanel::DetailsModeItemDetailsPanel' has a wrong offset!");
static_assert(offsetof(UFortItemManagementModeDetailsPanel, ComparisonModeItemDetailsPanel) == 0x000248, "Member 'UFortItemManagementModeDetailsPanel::ComparisonModeItemDetailsPanel' has a wrong offset!");
static_assert(offsetof(UFortItemManagementModeDetailsPanel, MulchModeItemDetailsPanel) == 0x000250, "Member 'UFortItemManagementModeDetailsPanel::MulchModeItemDetailsPanel' has a wrong offset!");
static_assert(offsetof(UFortItemManagementModeDetailsPanel, HostItemManagementScreen) == 0x000258, "Member 'UFortItemManagementModeDetailsPanel::HostItemManagementScreen' has a wrong offset!");

// Class FortniteUI.BacchusHUDLayoutToolPanel
// 0x0088 (0x03A8 - 0x0320)
class UBacchusHUDLayoutToolPanel final : public UCommonActivatablePanel
{
public:
	class UHUDLayoutToolButtonLayer*              ButtonLayer;                                       // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHUDLayoutToolPanZoomWidget*            ZoomWidget;                                        // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Background;                                        // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBackgroundColors                      CombatColors;                                      // 0x0338(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FBackgroundColors                      BuildColors;                                       // 0x0368(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector2D                              OpenPanelOffset;                                   // 0x0398(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               BackgroundMID;                                     // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BacchusHUDLayoutToolPanel">();
	}
	static class UBacchusHUDLayoutToolPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBacchusHUDLayoutToolPanel>();
	}
};
static_assert(alignof(UBacchusHUDLayoutToolPanel) == 0x000008, "Wrong alignment on UBacchusHUDLayoutToolPanel");
static_assert(sizeof(UBacchusHUDLayoutToolPanel) == 0x0003A8, "Wrong size on UBacchusHUDLayoutToolPanel");
static_assert(offsetof(UBacchusHUDLayoutToolPanel, ButtonLayer) == 0x000320, "Member 'UBacchusHUDLayoutToolPanel::ButtonLayer' has a wrong offset!");
static_assert(offsetof(UBacchusHUDLayoutToolPanel, ZoomWidget) == 0x000328, "Member 'UBacchusHUDLayoutToolPanel::ZoomWidget' has a wrong offset!");
static_assert(offsetof(UBacchusHUDLayoutToolPanel, Background) == 0x000330, "Member 'UBacchusHUDLayoutToolPanel::Background' has a wrong offset!");
static_assert(offsetof(UBacchusHUDLayoutToolPanel, CombatColors) == 0x000338, "Member 'UBacchusHUDLayoutToolPanel::CombatColors' has a wrong offset!");
static_assert(offsetof(UBacchusHUDLayoutToolPanel, BuildColors) == 0x000368, "Member 'UBacchusHUDLayoutToolPanel::BuildColors' has a wrong offset!");
static_assert(offsetof(UBacchusHUDLayoutToolPanel, OpenPanelOffset) == 0x000398, "Member 'UBacchusHUDLayoutToolPanel::OpenPanelOffset' has a wrong offset!");
static_assert(offsetof(UBacchusHUDLayoutToolPanel, BackgroundMID) == 0x0003A0, "Member 'UBacchusHUDLayoutToolPanel::BackgroundMID' has a wrong offset!");

// Class FortniteUI.BacchusQuickbarComboSlot
// 0x0058 (0x03E8 - 0x0390)
class UBacchusQuickbarComboSlot final : public UBacchusHUDElement
{
public:
	float                                         SlotSize;                                          // 0x0390(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComboSlotType                                SlotType;                                          // 0x0394(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_395[0x3];                                      // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x0398(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SlotTypeName;                                      // 0x03A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   SlotIndexName;                                     // 0x03B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   SlotSizeName;                                      // 0x03D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void Refresh();
	void SetQuickbarType(int32 NewType);
	void SetSize(float NewButtonSize);

	EFortQuickBars GetQuickbarType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BacchusQuickbarComboSlot">();
	}
	static class UBacchusQuickbarComboSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBacchusQuickbarComboSlot>();
	}
};
static_assert(alignof(UBacchusQuickbarComboSlot) == 0x000008, "Wrong alignment on UBacchusQuickbarComboSlot");
static_assert(sizeof(UBacchusQuickbarComboSlot) == 0x0003E8, "Wrong size on UBacchusQuickbarComboSlot");
static_assert(offsetof(UBacchusQuickbarComboSlot, SlotSize) == 0x000390, "Member 'UBacchusQuickbarComboSlot::SlotSize' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarComboSlot, SlotType) == 0x000394, "Member 'UBacchusQuickbarComboSlot::SlotType' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarComboSlot, SlotIndex) == 0x000398, "Member 'UBacchusQuickbarComboSlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarComboSlot, SlotTypeName) == 0x0003A0, "Member 'UBacchusQuickbarComboSlot::SlotTypeName' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarComboSlot, SlotIndexName) == 0x0003B8, "Member 'UBacchusQuickbarComboSlot::SlotIndexName' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarComboSlot, SlotSizeName) == 0x0003D0, "Member 'UBacchusQuickbarComboSlot::SlotSizeName' has a wrong offset!");

// Class FortniteUI.FortMissionTrackerList
// 0x0090 (0x02C8 - 0x0238)
class UFortMissionTrackerList final : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortMissionTrackerEntry>   MissionEntryClass;                                 // 0x0240(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bConfigureAsHUD;                                   // 0x0248(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVerticalBox*                           MissionsListBox;                                   // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnMissionTrackerListVisibilityChanged;             // 0x0258(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnSizeEstimateChangedDelegate;                     // 0x0268(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_278[0x50];                                     // 0x0278(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleMissionsUpdated();
	void HandleSizeEstimateChanged(class UObject* ChangedElement);
	void UpdateVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMissionTrackerList">();
	}
	static class UFortMissionTrackerList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMissionTrackerList>();
	}
};
static_assert(alignof(UFortMissionTrackerList) == 0x000008, "Wrong alignment on UFortMissionTrackerList");
static_assert(sizeof(UFortMissionTrackerList) == 0x0002C8, "Wrong size on UFortMissionTrackerList");
static_assert(offsetof(UFortMissionTrackerList, MissionEntryClass) == 0x000240, "Member 'UFortMissionTrackerList::MissionEntryClass' has a wrong offset!");
static_assert(offsetof(UFortMissionTrackerList, bConfigureAsHUD) == 0x000248, "Member 'UFortMissionTrackerList::bConfigureAsHUD' has a wrong offset!");
static_assert(offsetof(UFortMissionTrackerList, MissionsListBox) == 0x000250, "Member 'UFortMissionTrackerList::MissionsListBox' has a wrong offset!");
static_assert(offsetof(UFortMissionTrackerList, OnMissionTrackerListVisibilityChanged) == 0x000258, "Member 'UFortMissionTrackerList::OnMissionTrackerListVisibilityChanged' has a wrong offset!");
static_assert(offsetof(UFortMissionTrackerList, OnSizeEstimateChangedDelegate) == 0x000268, "Member 'UFortMissionTrackerList::OnSizeEstimateChangedDelegate' has a wrong offset!");

// Class FortniteUI.BarrierWidgetBase
// 0x0038 (0x02A0 - 0x0268)
class UBarrierWidgetBase final : public UFortHUDElementWidget
{
public:
	uint8                                         Pad_268[0x10];                                     // 0x0268(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBarrierObjectState                    FriendlyTeamState;                                 // 0x0278(0x0010)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FBarrierObjectState                    EnemyTeamState;                                    // 0x0288(0x0010)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGamePhaseChanged(EAthenaGamePhase GamePhase);
	void OnHandleSpectatingChanged(class AFortPlayerStateZone* SpectatingTarget);
	void OnMutatorObjectUpdated(const struct FGameplayMutatorObjectDataArray& MutatorArray);
	void UpdateHealth(bool bFriendlyTeam, float HealthPercent, EBarrierFoodTeam FoodTeam, bool bFlashBar);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BarrierWidgetBase">();
	}
	static class UBarrierWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBarrierWidgetBase>();
	}
};
static_assert(alignof(UBarrierWidgetBase) == 0x000008, "Wrong alignment on UBarrierWidgetBase");
static_assert(sizeof(UBarrierWidgetBase) == 0x0002A0, "Wrong size on UBarrierWidgetBase");
static_assert(offsetof(UBarrierWidgetBase, FriendlyTeamState) == 0x000278, "Member 'UBarrierWidgetBase::FriendlyTeamState' has a wrong offset!");
static_assert(offsetof(UBarrierWidgetBase, EnemyTeamState) == 0x000288, "Member 'UBarrierWidgetBase::EnemyTeamState' has a wrong offset!");

// Class FortniteUI.FortSquadSlotItemPickerTileButton
// 0x0018 (0x0B80 - 0x0B68)
class UFortSquadSlotItemPickerTileButton : public UFortItemTileButton
{
public:
	uint8                                         Pad_B68[0x18];                                     // 0x0B68(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleItemSlottedToDifferentSquad(const struct FHomebaseSquadSlotId& SquadSlotId);
	void HandleSlottingRestrictionReasonsChanged();

	TArray<EFortSquadSlottingRestrictionReason> GetSlottingRestrictionReasons() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadSlotItemPickerTileButton">();
	}
	static class UFortSquadSlotItemPickerTileButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadSlotItemPickerTileButton>();
	}
};
static_assert(alignof(UFortSquadSlotItemPickerTileButton) == 0x000008, "Wrong alignment on UFortSquadSlotItemPickerTileButton");
static_assert(sizeof(UFortSquadSlotItemPickerTileButton) == 0x000B80, "Wrong size on UFortSquadSlotItemPickerTileButton");

// Class FortniteUI.CarmineHUDBase
// 0x0030 (0x0260 - 0x0230)
class UCarmineHUDBase final : public UUserWidget
{
public:
	uint8                                         Pad_230[0x30];                                     // 0x0230(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBossHealthBarChanged(const struct FAthenaBossHealthData& BossData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CarmineHUDBase">();
	}
	static class UCarmineHUDBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCarmineHUDBase>();
	}
};
static_assert(alignof(UCarmineHUDBase) == 0x000008, "Wrong alignment on UCarmineHUDBase");
static_assert(sizeof(UCarmineHUDBase) == 0x000260, "Wrong size on UCarmineHUDBase");

// Class FortniteUI.CMSContext
// 0x0198 (0x01C0 - 0x0028)
class UCMSContext final : public UBlueprintContextBase
{
public:
	uint8                                         Pad_28[0x90];                                      // 0x0028(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCmsJsonMessages                       CachedCmsMessages;                                 // 0x00B8(0x0100)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B8[0x8];                                      // 0x01B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FAthenaLatestPlaylistData GetLatestAthenaPlaylistData();
	struct FCreativeAdSource GetLatestCreativeAds();
	struct FAthenaNewsEntry GetLatestEmergencyNotice();
	struct FAthenaNews GetLatestNews();
	const struct FKoreanCafeSource GetLatestPCBInfo();
	struct FShowdownLatestTournamentData GetLatestShowdownTournamentData();
	void MarkNewsAsViewed();
	void MarkPlaylistInformationAsViewed();

	bool IsNewNewsAvailable() const;
	bool IsNewPlaylistInformationAvailable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CMSContext">();
	}
	static class UCMSContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCMSContext>();
	}
};
static_assert(alignof(UCMSContext) == 0x000008, "Wrong alignment on UCMSContext");
static_assert(sizeof(UCMSContext) == 0x0001C0, "Wrong size on UCMSContext");
static_assert(offsetof(UCMSContext, CachedCmsMessages) == 0x0000B8, "Member 'UCMSContext::CachedCmsMessages' has a wrong offset!");

// Class FortniteUI.CreativeHUDLContext
// 0x0048 (0x0070 - 0x0028)
class UCreativeHUDLContext final : public UBlueprintContextBase
{
public:
	UMulticastDelegateProperty_                   OnRotationAxisChanged;                             // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnDropToFloorChanged;                              // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPrecisionChanged;                                // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMoveToolLineOfSightBlockingChanged;              // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AFortCreativeMoveTool*                  CurrentMoveTool;                                   // 0x0068(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ForwardOnDropToFloorChanged(bool bDropToFloorOn);
	void ForwardOnLOSChanged(bool bLOSBlockingOn);
	void ForwardOnPrecisionChanged(bool bPrecisionOn, uint8 GridSnapIndex);
	void ForwardOnRotationAxisChanged(uint8 AxisIndex);
	void OnPlayerPawnSet();
	void OnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);

	bool GetDropToFloorEnabled() const;
	class AFortPlayerPawn* GetOwningPlayerPawn() const;
	void GetPrecisionLevel(bool* SnappingEnabled, uint8* GridSnappingIndex) const;
	struct FRotator GetRotationAxis() const;
	bool IsIgnoringLOSBlockers() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CreativeHUDLContext">();
	}
	static class UCreativeHUDLContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreativeHUDLContext>();
	}
};
static_assert(alignof(UCreativeHUDLContext) == 0x000008, "Wrong alignment on UCreativeHUDLContext");
static_assert(sizeof(UCreativeHUDLContext) == 0x000070, "Wrong size on UCreativeHUDLContext");
static_assert(offsetof(UCreativeHUDLContext, OnRotationAxisChanged) == 0x000028, "Member 'UCreativeHUDLContext::OnRotationAxisChanged' has a wrong offset!");
static_assert(offsetof(UCreativeHUDLContext, OnDropToFloorChanged) == 0x000038, "Member 'UCreativeHUDLContext::OnDropToFloorChanged' has a wrong offset!");
static_assert(offsetof(UCreativeHUDLContext, OnPrecisionChanged) == 0x000048, "Member 'UCreativeHUDLContext::OnPrecisionChanged' has a wrong offset!");
static_assert(offsetof(UCreativeHUDLContext, OnMoveToolLineOfSightBlockingChanged) == 0x000058, "Member 'UCreativeHUDLContext::OnMoveToolLineOfSightBlockingChanged' has a wrong offset!");
static_assert(offsetof(UCreativeHUDLContext, CurrentMoveTool) == 0x000068, "Member 'UCreativeHUDLContext::CurrentMoveTool' has a wrong offset!");

// Class FortniteUI.FortItemDetailsPanel
// 0x0028 (0x0260 - 0x0238)
class UFortItemDetailsPanel final : public UCommonUserWidget
{
public:
	TWeakObjectPtr<class UFortItem>               ItemToDetail;                                      // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFortItem>               ItemToCompareWith;                                 // 0x0240(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_248[0x18];                                     // 0x0248(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleCursorModeChanged(bool bCursorModeEnabled, class FName ActionName, class UUserWidget* CustomWidget);
	void HandleDifferentItemToCompareSet();
	void HandleDifferentItemToDetailSet();
	void HandleItemToCompareWithChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);
	void HandleItemToDetailChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);
	void SetItemToCompareWith(const class UFortItem* Param_ItemToCompareWith);
	void SetItemToDetail(const class UFortItem* Param_ItemToDetail);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemDetailsPanel">();
	}
	static class UFortItemDetailsPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemDetailsPanel>();
	}
};
static_assert(alignof(UFortItemDetailsPanel) == 0x000008, "Wrong alignment on UFortItemDetailsPanel");
static_assert(sizeof(UFortItemDetailsPanel) == 0x000260, "Wrong size on UFortItemDetailsPanel");
static_assert(offsetof(UFortItemDetailsPanel, ItemToDetail) == 0x000238, "Member 'UFortItemDetailsPanel::ItemToDetail' has a wrong offset!");
static_assert(offsetof(UFortItemDetailsPanel, ItemToCompareWith) == 0x000240, "Member 'UFortItemDetailsPanel::ItemToCompareWith' has a wrong offset!");

// Class FortniteUI.DeimosSurvivalWidgetBase
// 0x0068 (0x02D0 - 0x0268)
class UDeimosSurvivalWidgetBase final : public UFortHUDElementWidget
{
public:
	TArray<struct FSurvivalObjectiveText>         SurvivalStateDefaultText;                          // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           ObjectiveTag;                                      // 0x0278(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_280[0x50];                                     // 0x0280(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnUpdateObjectiveIcon(const struct FSurvivalObjectiveIconData& ObjectiveIconData);
	void OnUpdateStateText(const class FText& StateText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DeimosSurvivalWidgetBase">();
	}
	static class UDeimosSurvivalWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDeimosSurvivalWidgetBase>();
	}
};
static_assert(alignof(UDeimosSurvivalWidgetBase) == 0x000008, "Wrong alignment on UDeimosSurvivalWidgetBase");
static_assert(sizeof(UDeimosSurvivalWidgetBase) == 0x0002D0, "Wrong size on UDeimosSurvivalWidgetBase");
static_assert(offsetof(UDeimosSurvivalWidgetBase, SurvivalStateDefaultText) == 0x000268, "Member 'UDeimosSurvivalWidgetBase::SurvivalStateDefaultText' has a wrong offset!");
static_assert(offsetof(UDeimosSurvivalWidgetBase, ObjectiveTag) == 0x000278, "Member 'UDeimosSurvivalWidgetBase::ObjectiveTag' has a wrong offset!");

// Class FortniteUI.DiscoWidgetBase
// 0x0070 (0x02D8 - 0x0268)
class UDiscoWidgetBase final : public UFortHUDElementWidget
{
public:
	TArray<struct FDiscoCaptureIconData>          CapturePointIconList;                              // 0x0268(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_278[0x20];                                     // 0x0278(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 PlayScoreProgressSoundPercentagesMild;             // 0x0298(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                 PlayScoreProgressSoundPercentagesMedium;           // 0x02A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                 PlayScoreProgressSoundPercentagesStrong;           // 0x02B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         PercentageScoreToPlayCountdown;                    // 0x02C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PercentageScoreToPlayFinalCountdown;               // 0x02CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ScoreCountdownSoundFrequency;                      // 0x02D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLocalTeamIsScoring;                               // 0x02D4(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnemyTeamIsScoring;                               // 0x02D5(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         LastViewedTeam;                                    // 0x02D6(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D7[0x1];                                      // 0x02D7(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCountdownTimerUpdate();
	void OnGamePhaseChanged(EAthenaGamePhase GamePhase);
	void OnHandleSpectatingChanged(class AFortPlayerStateZone* SpectatingTarget);
	void OnMutatorObjectUpdated(const struct FGameplayMutatorObjectDataArray& MutatorArray);
	void OnPlayScoreProgressSound(EDiscoScoreProgressTypes ScoreProgressType, bool bIsLocalTeam);
	void OnUpdateCapturePoint(int32 IconIndex, const struct FDiscoCaptureIconData& IconData);
	void OnUpdateTeamScore(int32 TeamIndex, const struct FDiscoTeamScoreData& ScoreData);
	void UpdateAllUI();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DiscoWidgetBase">();
	}
	static class UDiscoWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDiscoWidgetBase>();
	}
};
static_assert(alignof(UDiscoWidgetBase) == 0x000008, "Wrong alignment on UDiscoWidgetBase");
static_assert(sizeof(UDiscoWidgetBase) == 0x0002D8, "Wrong size on UDiscoWidgetBase");
static_assert(offsetof(UDiscoWidgetBase, CapturePointIconList) == 0x000268, "Member 'UDiscoWidgetBase::CapturePointIconList' has a wrong offset!");
static_assert(offsetof(UDiscoWidgetBase, PlayScoreProgressSoundPercentagesMild) == 0x000298, "Member 'UDiscoWidgetBase::PlayScoreProgressSoundPercentagesMild' has a wrong offset!");
static_assert(offsetof(UDiscoWidgetBase, PlayScoreProgressSoundPercentagesMedium) == 0x0002A8, "Member 'UDiscoWidgetBase::PlayScoreProgressSoundPercentagesMedium' has a wrong offset!");
static_assert(offsetof(UDiscoWidgetBase, PlayScoreProgressSoundPercentagesStrong) == 0x0002B8, "Member 'UDiscoWidgetBase::PlayScoreProgressSoundPercentagesStrong' has a wrong offset!");
static_assert(offsetof(UDiscoWidgetBase, PercentageScoreToPlayCountdown) == 0x0002C8, "Member 'UDiscoWidgetBase::PercentageScoreToPlayCountdown' has a wrong offset!");
static_assert(offsetof(UDiscoWidgetBase, PercentageScoreToPlayFinalCountdown) == 0x0002CC, "Member 'UDiscoWidgetBase::PercentageScoreToPlayFinalCountdown' has a wrong offset!");
static_assert(offsetof(UDiscoWidgetBase, ScoreCountdownSoundFrequency) == 0x0002D0, "Member 'UDiscoWidgetBase::ScoreCountdownSoundFrequency' has a wrong offset!");
static_assert(offsetof(UDiscoWidgetBase, bLocalTeamIsScoring) == 0x0002D4, "Member 'UDiscoWidgetBase::bLocalTeamIsScoring' has a wrong offset!");
static_assert(offsetof(UDiscoWidgetBase, bEnemyTeamIsScoring) == 0x0002D5, "Member 'UDiscoWidgetBase::bEnemyTeamIsScoring' has a wrong offset!");
static_assert(offsetof(UDiscoWidgetBase, LastViewedTeam) == 0x0002D6, "Member 'UDiscoWidgetBase::LastViewedTeam' has a wrong offset!");

// Class FortniteUI.EmergencyNoticeBase
// 0x0000 (0x0238 - 0x0238)
class UEmergencyNoticeBase : public UCommonUserWidget
{
public:
	void HideNotice();
	void ShowNotice(const class FText& Title, const class FText& Body);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EmergencyNoticeBase">();
	}
	static class UEmergencyNoticeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEmergencyNoticeBase>();
	}
};
static_assert(alignof(UEmergencyNoticeBase) == 0x000008, "Wrong alignment on UEmergencyNoticeBase");
static_assert(sizeof(UEmergencyNoticeBase) == 0x000238, "Wrong size on UEmergencyNoticeBase");

// Class FortniteUI.EnableMultiFactorModal
// 0x0038 (0x0380 - 0x0348)
class UEnableMultiFactorModal : public UFortActivatablePanel
{
public:
	bool                                          bHasEnableMFABeenClicked;                          // 0x0348(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldShowConsoleVersion;                         // 0x0349(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34A[0x16];                                     // 0x034A(0x0016)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButton*                          Button_EnableMFA;                                  // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_RemindLater;                                // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_OptOut;                                     // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_ConsoleMFAEnabled;                          // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AnimationsComplete();
	void OnConsoleDisplayURLProvided(const class FText& UniquePlayerURLText);
	void OnSetExitButtonText(const class FText& NewButtonText);
	void OnSetScreenConfiguration(bool bIsConsole);
	bool QueueModal(bool bAllowPermanentOptOut);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnableMultiFactorModal">();
	}
	static class UEnableMultiFactorModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnableMultiFactorModal>();
	}
};
static_assert(alignof(UEnableMultiFactorModal) == 0x000008, "Wrong alignment on UEnableMultiFactorModal");
static_assert(sizeof(UEnableMultiFactorModal) == 0x000380, "Wrong size on UEnableMultiFactorModal");
static_assert(offsetof(UEnableMultiFactorModal, bHasEnableMFABeenClicked) == 0x000348, "Member 'UEnableMultiFactorModal::bHasEnableMFABeenClicked' has a wrong offset!");
static_assert(offsetof(UEnableMultiFactorModal, bShouldShowConsoleVersion) == 0x000349, "Member 'UEnableMultiFactorModal::bShouldShowConsoleVersion' has a wrong offset!");
static_assert(offsetof(UEnableMultiFactorModal, Button_EnableMFA) == 0x000360, "Member 'UEnableMultiFactorModal::Button_EnableMFA' has a wrong offset!");
static_assert(offsetof(UEnableMultiFactorModal, Button_RemindLater) == 0x000368, "Member 'UEnableMultiFactorModal::Button_RemindLater' has a wrong offset!");
static_assert(offsetof(UEnableMultiFactorModal, Button_OptOut) == 0x000370, "Member 'UEnableMultiFactorModal::Button_OptOut' has a wrong offset!");
static_assert(offsetof(UEnableMultiFactorModal, Button_ConsoleMFAEnabled) == 0x000378, "Member 'UEnableMultiFactorModal::Button_ConsoleMFAEnabled' has a wrong offset!");

// Class FortniteUI.FeaturedCreativeContent
// 0x0000 (0x0230 - 0x0230)
class UFeaturedCreativeContent : public UUserWidget
{
public:
	void OnSetMediaURLs(const TArray<class FString>& MediaURLs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FeaturedCreativeContent">();
	}
	static class UFeaturedCreativeContent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFeaturedCreativeContent>();
	}
};
static_assert(alignof(UFeaturedCreativeContent) == 0x000008, "Wrong alignment on UFeaturedCreativeContent");
static_assert(sizeof(UFeaturedCreativeContent) == 0x000230, "Wrong size on UFeaturedCreativeContent");

// Class FortniteUI.ReportablePlayerInfo
// 0x0038 (0x0060 - 0x0028)
class UReportablePlayerInfo final : public UObject
{
public:
	uint8                                         Pad_28[0x38];                                      // 0x0028(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReportablePlayerInfo">();
	}
	static class UReportablePlayerInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReportablePlayerInfo>();
	}
};
static_assert(alignof(UReportablePlayerInfo) == 0x000008, "Wrong alignment on UReportablePlayerInfo");
static_assert(sizeof(UReportablePlayerInfo) == 0x000060, "Wrong size on UReportablePlayerInfo");

// Class FortniteUI.FortMatchmakingKnobsSpinnerButton
// 0x0030 (0x0BA0 - 0x0B70)
class UFortMatchmakingKnobsSpinnerButton : public UCommonRotator
{
public:
	uint8                                         Pad_B70[0x20];                                     // 0x0B70(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class USocialUser*                            SocialUser;                                        // 0x0B90(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       OptionDisplayName;                                 // 0x0B98(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnLoadingStateChanged(bool bCurrentlyLoading);
	void OnSelectionRotated(int32 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMatchmakingKnobsSpinnerButton">();
	}
	static class UFortMatchmakingKnobsSpinnerButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMatchmakingKnobsSpinnerButton>();
	}
};
static_assert(alignof(UFortMatchmakingKnobsSpinnerButton) == 0x000008, "Wrong alignment on UFortMatchmakingKnobsSpinnerButton");
static_assert(sizeof(UFortMatchmakingKnobsSpinnerButton) == 0x000BA0, "Wrong size on UFortMatchmakingKnobsSpinnerButton");
static_assert(offsetof(UFortMatchmakingKnobsSpinnerButton, SocialUser) == 0x000B90, "Member 'UFortMatchmakingKnobsSpinnerButton::SocialUser' has a wrong offset!");
static_assert(offsetof(UFortMatchmakingKnobsSpinnerButton, OptionDisplayName) == 0x000B98, "Member 'UFortMatchmakingKnobsSpinnerButton::OptionDisplayName' has a wrong offset!");

// Class FortniteUI.FeedbackReportPlayerBase
// 0x0080 (0x03C8 - 0x0348)
class UFeedbackReportPlayerBase : public UFortActivatablePanel
{
public:
	TArray<class UReportablePlayerInfo*>          ReportablePlayers;                                 // 0x0348(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UPlayerReportReasonInfo*>        ReportReasons;                                     // 0x0358(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UReportablePlayerInfo*                  SelectedPlayer;                                    // 0x0368(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayerReportReasonInfo*                SelectedReportReason;                              // 0x0370(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OptionalReportReasonLength;                        // 0x0378(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumPlayerEntries;                                  // 0x037C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButton*                          Button_Cancel;                                     // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButton*                          Button_Send;                                       // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonGroup*                     TabButtonGroup;                                    // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_398[0x8];                                      // 0x0398(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonListView*                        ListView_ReportablePlayers;                        // 0x03A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonListView*                        ListView_ReportReasons;                            // 0x03A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEditableText*                          EditableText_ReasonField;                          // 0x03B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMultiLineEditableText*                 MultiLineEditableText_ReasonField;                 // 0x03B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_CharCount;                                    // 0x03C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CloseDialog();
	void DynamicHandlePlayerSelected(class UObject* SelectedItem);
	void DynamicHandleReportReasonSelected(class UObject* SelectedItem);
	void HandleBackAction();
	void HandleMessageChanged(const class FText& Text);
	void HandleTabClicked(EPlayerReportingStep ClickedStep);
	void OnFeedbackSentCallback(bool Succeeded);
	void OnListViewSelectionMade(EPlayerReportingStep ReportingStep, const class FText& SelectedText);
	void OnPopulateView(EPlayerReportingStep CurrentStep);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FeedbackReportPlayerBase">();
	}
	static class UFeedbackReportPlayerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFeedbackReportPlayerBase>();
	}
};
static_assert(alignof(UFeedbackReportPlayerBase) == 0x000008, "Wrong alignment on UFeedbackReportPlayerBase");
static_assert(sizeof(UFeedbackReportPlayerBase) == 0x0003C8, "Wrong size on UFeedbackReportPlayerBase");
static_assert(offsetof(UFeedbackReportPlayerBase, ReportablePlayers) == 0x000348, "Member 'UFeedbackReportPlayerBase::ReportablePlayers' has a wrong offset!");
static_assert(offsetof(UFeedbackReportPlayerBase, ReportReasons) == 0x000358, "Member 'UFeedbackReportPlayerBase::ReportReasons' has a wrong offset!");
static_assert(offsetof(UFeedbackReportPlayerBase, SelectedPlayer) == 0x000368, "Member 'UFeedbackReportPlayerBase::SelectedPlayer' has a wrong offset!");
static_assert(offsetof(UFeedbackReportPlayerBase, SelectedReportReason) == 0x000370, "Member 'UFeedbackReportPlayerBase::SelectedReportReason' has a wrong offset!");
static_assert(offsetof(UFeedbackReportPlayerBase, OptionalReportReasonLength) == 0x000378, "Member 'UFeedbackReportPlayerBase::OptionalReportReasonLength' has a wrong offset!");
static_assert(offsetof(UFeedbackReportPlayerBase, NumPlayerEntries) == 0x00037C, "Member 'UFeedbackReportPlayerBase::NumPlayerEntries' has a wrong offset!");
static_assert(offsetof(UFeedbackReportPlayerBase, Button_Cancel) == 0x000380, "Member 'UFeedbackReportPlayerBase::Button_Cancel' has a wrong offset!");
static_assert(offsetof(UFeedbackReportPlayerBase, Button_Send) == 0x000388, "Member 'UFeedbackReportPlayerBase::Button_Send' has a wrong offset!");
static_assert(offsetof(UFeedbackReportPlayerBase, TabButtonGroup) == 0x000390, "Member 'UFeedbackReportPlayerBase::TabButtonGroup' has a wrong offset!");
static_assert(offsetof(UFeedbackReportPlayerBase, ListView_ReportablePlayers) == 0x0003A0, "Member 'UFeedbackReportPlayerBase::ListView_ReportablePlayers' has a wrong offset!");
static_assert(offsetof(UFeedbackReportPlayerBase, ListView_ReportReasons) == 0x0003A8, "Member 'UFeedbackReportPlayerBase::ListView_ReportReasons' has a wrong offset!");
static_assert(offsetof(UFeedbackReportPlayerBase, EditableText_ReasonField) == 0x0003B0, "Member 'UFeedbackReportPlayerBase::EditableText_ReasonField' has a wrong offset!");
static_assert(offsetof(UFeedbackReportPlayerBase, MultiLineEditableText_ReasonField) == 0x0003B8, "Member 'UFeedbackReportPlayerBase::MultiLineEditableText_ReasonField' has a wrong offset!");
static_assert(offsetof(UFeedbackReportPlayerBase, Text_CharCount) == 0x0003C0, "Member 'UFeedbackReportPlayerBase::Text_CharCount' has a wrong offset!");

// Class FortniteUI.PlayerReportReasonInfo
// 0x0020 (0x0048 - 0x0028)
class UPlayerReportReasonInfo final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerReportReasonInfo">();
	}
	static class UPlayerReportReasonInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerReportReasonInfo>();
	}
};
static_assert(alignof(UPlayerReportReasonInfo) == 0x000008, "Wrong alignment on UPlayerReportReasonInfo");
static_assert(sizeof(UPlayerReportReasonInfo) == 0x000048, "Wrong size on UPlayerReportReasonInfo");

// Class FortniteUI.FortCampaignMap
// 0x0070 (0x02A8 - 0x0238)
class UFortCampaignMap : public UCommonUserWidget
{
public:
	struct FFortSwipeDetector                     SwipeDetector;                                     // 0x0238(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void OnShowNextPage();
	void OnShowPreviousPage();
	void OnSwipeLeft();
	void OnSwipeRight();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCampaignMap">();
	}
	static class UFortCampaignMap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCampaignMap>();
	}
};
static_assert(alignof(UFortCampaignMap) == 0x000008, "Wrong alignment on UFortCampaignMap");
static_assert(sizeof(UFortCampaignMap) == 0x0002A8, "Wrong size on UFortCampaignMap");
static_assert(offsetof(UFortCampaignMap, SwipeDetector) == 0x000238, "Member 'UFortCampaignMap::SwipeDetector' has a wrong offset!");

// Class FortniteUI.FortQuestMapViewer
// 0x0078 (0x0320 - 0x02A8)
class UFortQuestMapViewer final : public UFortCampaignMap
{
public:
	class UCanvasPanel*                           CosmeticCanvasPanel;                               // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USizeBox*                               FullQuestMap;                                      // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortQuestMapScreen*                    ParentScreen;                                      // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C0[0x38];                                     // 0x02C0(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortQuestMapNodeLayout*                NodeLayout;                                        // 0x02F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_300[0x20];                                     // 0x0300(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisposeQuestMap();
	void HandleLayoutOutroAnimationFinished();
	void HandleQuestIndexSelectionModelIndexChanged();
	void HandleQuestMapDataChangedBP();
	void NavigateToCurrentQuest();
	void NavigateToPage(EViewerNavigationDirection Direction);
	void PlayLayoutFadeInAnimation();
	void PlayLayoutOutroAnimation(EViewerNavigationDirection TravelDirection);
	void SetQuestMapNodeLayout(class UFortQuestMapNodeLayout* Value);

	struct FFortQuestMapPageCosmetics GetQuestMapCosmeticData() const;
	struct FFortQuestMapPage GetQuestMapData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQuestMapViewer">();
	}
	static class UFortQuestMapViewer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQuestMapViewer>();
	}
};
static_assert(alignof(UFortQuestMapViewer) == 0x000008, "Wrong alignment on UFortQuestMapViewer");
static_assert(sizeof(UFortQuestMapViewer) == 0x000320, "Wrong size on UFortQuestMapViewer");
static_assert(offsetof(UFortQuestMapViewer, CosmeticCanvasPanel) == 0x0002A8, "Member 'UFortQuestMapViewer::CosmeticCanvasPanel' has a wrong offset!");
static_assert(offsetof(UFortQuestMapViewer, FullQuestMap) == 0x0002B0, "Member 'UFortQuestMapViewer::FullQuestMap' has a wrong offset!");
static_assert(offsetof(UFortQuestMapViewer, ParentScreen) == 0x0002B8, "Member 'UFortQuestMapViewer::ParentScreen' has a wrong offset!");
static_assert(offsetof(UFortQuestMapViewer, NodeLayout) == 0x0002F8, "Member 'UFortQuestMapViewer::NodeLayout' has a wrong offset!");

// Class FortniteUI.FeedbackReportPlayerReasonBase
// 0x0018 (0x0B48 - 0x0B30)
class UFeedbackReportPlayerReasonBase : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerReportReasonInfo*                ReportReason;                                      // 0x0B38(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       TextBlock_Header;                                  // 0x0B40(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetSelectionState(bool bIsSelected, bool bAnimateOnSelect);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FeedbackReportPlayerReasonBase">();
	}
	static class UFeedbackReportPlayerReasonBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFeedbackReportPlayerReasonBase>();
	}
};
static_assert(alignof(UFeedbackReportPlayerReasonBase) == 0x000008, "Wrong alignment on UFeedbackReportPlayerReasonBase");
static_assert(sizeof(UFeedbackReportPlayerReasonBase) == 0x000B48, "Wrong size on UFeedbackReportPlayerReasonBase");
static_assert(offsetof(UFeedbackReportPlayerReasonBase, ReportReason) == 0x000B38, "Member 'UFeedbackReportPlayerReasonBase::ReportReason' has a wrong offset!");
static_assert(offsetof(UFeedbackReportPlayerReasonBase, TextBlock_Header) == 0x000B40, "Member 'UFeedbackReportPlayerReasonBase::TextBlock_Header' has a wrong offset!");

// Class FortniteUI.FortLoginUnavailable
// 0x0078 (0x02B0 - 0x0238)
class UFortLoginUnavailable : public UCommonUserWidget
{
public:
	class FText                                   DisableMessage;                                    // 0x0238(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   DisableButtonMsg;                                  // 0x0250(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   InviteClosedMessage;                               // 0x0268(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   InviteButtonMsg;                                   // 0x0280(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_Title;                                        // 0x02A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_DisplayMsg;                                   // 0x02A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void LaunchSpecificURL();
	void OnMessageSet(bool bDisableMessage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLoginUnavailable">();
	}
	static class UFortLoginUnavailable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLoginUnavailable>();
	}
};
static_assert(alignof(UFortLoginUnavailable) == 0x000008, "Wrong alignment on UFortLoginUnavailable");
static_assert(sizeof(UFortLoginUnavailable) == 0x0002B0, "Wrong size on UFortLoginUnavailable");
static_assert(offsetof(UFortLoginUnavailable, DisableMessage) == 0x000238, "Member 'UFortLoginUnavailable::DisableMessage' has a wrong offset!");
static_assert(offsetof(UFortLoginUnavailable, DisableButtonMsg) == 0x000250, "Member 'UFortLoginUnavailable::DisableButtonMsg' has a wrong offset!");
static_assert(offsetof(UFortLoginUnavailable, InviteClosedMessage) == 0x000268, "Member 'UFortLoginUnavailable::InviteClosedMessage' has a wrong offset!");
static_assert(offsetof(UFortLoginUnavailable, InviteButtonMsg) == 0x000280, "Member 'UFortLoginUnavailable::InviteButtonMsg' has a wrong offset!");
static_assert(offsetof(UFortLoginUnavailable, Text_Title) == 0x0002A0, "Member 'UFortLoginUnavailable::Text_Title' has a wrong offset!");
static_assert(offsetof(UFortLoginUnavailable, Text_DisplayMsg) == 0x0002A8, "Member 'UFortLoginUnavailable::Text_DisplayMsg' has a wrong offset!");

// Class FortniteUI.FortAbilitySystemContext
// 0x0050 (0x0078 - 0x0028)
class UFortAbilitySystemContext final : public UBlueprintContextBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RegisterForAttributeChanged(class UWidget* Widget, class UAbilitySystemComponent* ASC, const struct FGameplayAttribute& Attribute, TDelegate<void()> Callback);
	void RemoveDelegatesFromWidget(class UWidget* Widget);

	bool HasMatchingGameplayTag(const struct FGameplayTag& TagToCheck) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAbilitySystemContext">();
	}
	static class UFortAbilitySystemContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAbilitySystemContext>();
	}
};
static_assert(alignof(UFortAbilitySystemContext) == 0x000008, "Wrong alignment on UFortAbilitySystemContext");
static_assert(sizeof(UFortAbilitySystemContext) == 0x000078, "Wrong size on UFortAbilitySystemContext");

// Class FortniteUI.FortRichTextBlock
// 0x0A18 (0x0B20 - 0x0108)
class UFortRichTextBlock final : public UWidget
{
public:
	class FText                                   Text;                                              // 0x0108(0x0018)(Edit, NativeAccessSpecifierPublic)
	class UDataTable*                             StyleSet;                                          // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                TextMargin;                                        // 0x0128(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         WrapTextAt;                                        // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoWrapText;                                      // 0x013C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustify                                  Justification;                                     // 0x013D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E[0x2];                                      // 0x013E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           HyperlinkButtonStyle;                              // 0x0140(0x0278)(Edit, NativeAccessSpecifierPublic)
	struct FScrollBarStyle                        ScrollBarStyle;                                    // 0x03B8(0x04D0)(Edit, NativeAccessSpecifierPublic)
	bool                                          DisableTouchInput;                                 // 0x0888(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowContextMenu;                                  // 0x0889(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88A[0x6];                                      // 0x088A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortKeybindWidget>         KeybindWidgetClass;                                // 0x0890(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_898[0x288];                                    // 0x0898(0x0288)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class FString EscapeStringForRichText(const class FString& InString);

	void SetText(const class FText& InText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRichTextBlock">();
	}
	static class UFortRichTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRichTextBlock>();
	}
};
static_assert(alignof(UFortRichTextBlock) == 0x000008, "Wrong alignment on UFortRichTextBlock");
static_assert(sizeof(UFortRichTextBlock) == 0x000B20, "Wrong size on UFortRichTextBlock");
static_assert(offsetof(UFortRichTextBlock, Text) == 0x000108, "Member 'UFortRichTextBlock::Text' has a wrong offset!");
static_assert(offsetof(UFortRichTextBlock, StyleSet) == 0x000120, "Member 'UFortRichTextBlock::StyleSet' has a wrong offset!");
static_assert(offsetof(UFortRichTextBlock, TextMargin) == 0x000128, "Member 'UFortRichTextBlock::TextMargin' has a wrong offset!");
static_assert(offsetof(UFortRichTextBlock, WrapTextAt) == 0x000138, "Member 'UFortRichTextBlock::WrapTextAt' has a wrong offset!");
static_assert(offsetof(UFortRichTextBlock, AutoWrapText) == 0x00013C, "Member 'UFortRichTextBlock::AutoWrapText' has a wrong offset!");
static_assert(offsetof(UFortRichTextBlock, Justification) == 0x00013D, "Member 'UFortRichTextBlock::Justification' has a wrong offset!");
static_assert(offsetof(UFortRichTextBlock, HyperlinkButtonStyle) == 0x000140, "Member 'UFortRichTextBlock::HyperlinkButtonStyle' has a wrong offset!");
static_assert(offsetof(UFortRichTextBlock, ScrollBarStyle) == 0x0003B8, "Member 'UFortRichTextBlock::ScrollBarStyle' has a wrong offset!");
static_assert(offsetof(UFortRichTextBlock, DisableTouchInput) == 0x000888, "Member 'UFortRichTextBlock::DisableTouchInput' has a wrong offset!");
static_assert(offsetof(UFortRichTextBlock, AllowContextMenu) == 0x000889, "Member 'UFortRichTextBlock::AllowContextMenu' has a wrong offset!");
static_assert(offsetof(UFortRichTextBlock, KeybindWidgetClass) == 0x000890, "Member 'UFortRichTextBlock::KeybindWidgetClass' has a wrong offset!");

// Class FortniteUI.FortAccountNotFound
// 0x0028 (0x0260 - 0x0238)
class UFortAccountNotFound : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x10];                                     // 0x0238(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class URichTextBlock*                         Text_Desc;                                         // 0x0248(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Back;                                       // 0x0250(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Web;                                        // 0x0258(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAccountNotFound">();
	}
	static class UFortAccountNotFound* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAccountNotFound>();
	}
};
static_assert(alignof(UFortAccountNotFound) == 0x000008, "Wrong alignment on UFortAccountNotFound");
static_assert(sizeof(UFortAccountNotFound) == 0x000260, "Wrong size on UFortAccountNotFound");
static_assert(offsetof(UFortAccountNotFound, Text_Desc) == 0x000248, "Member 'UFortAccountNotFound::Text_Desc' has a wrong offset!");
static_assert(offsetof(UFortAccountNotFound, Button_Back) == 0x000250, "Member 'UFortAccountNotFound::Button_Back' has a wrong offset!");
static_assert(offsetof(UFortAccountNotFound, Button_Web) == 0x000258, "Member 'UFortAccountNotFound::Button_Web' has a wrong offset!");

// Class FortniteUI.FortExpeditionUtilities
// 0x0000 (0x0028 - 0x0028)
class UFortExpeditionUtilities final : public UBlueprintFunctionLibrary
{
public:
	static bool AreAnyExpeditionsComplete(const class UWidget* Widget);
	static bool AreExpeditionsUnlocked(class UObject* WorldContextObject, const struct FUniqueNetIdRepl& UniqueId);
	static float CalculateExpeditionPercentageChanceForSuccess(const class UFortExpeditionItem* Expedition, const float TotalPower);
	static void CalculateGlobalAndItemRatingModValuesBP(const class UFortExpeditionItem* Expedition, const TArray<class UFortItem*>& SlottedItems, float* GlobalPowerMod, TArray<float>* SlottedItemMods);
	static float CalculateTotalPower(class AFortPlayerController* FortPC, const class UFortExpeditionItem* Expedition, const class FName& SquadId, const TArray<class UFortItem*>& SlottedItems);
	static void GetAllExpeditionSquadIds(TArray<class FName>* OutExpeditionSquadIds);
	static float GetExpeditionSquadPower(class AFortPlayerController* FortPC, const class FName& SquadId);
	static bool GetExpeditionSquadsThatMatchRequirements(const struct FGameplayTagContainer& RequirementTags, class AFortPlayerController* FortPC, TArray<class FName>* OutExpeditionSquadIds);
	static void GetMatchedCriteriaTags(class UFortExpeditionItem* Expedition, const TArray<class UFortItem*>& SlottedItems, TArray<struct FGameplayTag>* OutMatchedCriteria);
	static void GetTotalExpeditionVehiclesAvailable(const class UWidget* Widget, class AFortPlayerController* FortPC, int32* OutLandVehicles, int32* OutLandVehiclesAvailable, int32* OutSeaVehicles, int32* OutSeaVehiclesAvailable, int32* OutAirVehicles, int32* OutAirVehiclesAvailable);
	static bool GetVehicleTagFromSquadId(const class FName& SquadId, struct FGameplayTag* OutFoundVehicleTag);
	static struct FGameplayTag GetVehicleTagRequiredForExpedition(const class UFortExpeditionItem* Expedition);
	static bool IsSquadOnExpedition(const class UWidget* Widget, const class FName& SquadId);
	static int32 TotalUnseenExpeditionsForTab(const class UWidget* Widget, const class FName& TabNameID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortExpeditionUtilities">();
	}
	static class UFortExpeditionUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortExpeditionUtilities>();
	}
};
static_assert(alignof(UFortExpeditionUtilities) == 0x000008, "Wrong alignment on UFortExpeditionUtilities");
static_assert(sizeof(UFortExpeditionUtilities) == 0x000028, "Wrong size on UFortExpeditionUtilities");

// Class FortniteUI.HUDLayoutToolButtonLayer
// 0x0030 (0x0268 - 0x0238)
class UHUDLayoutToolButtonLayer final : public UCommonUserWidget
{
public:
	class UCanvasPanel*                           CanvasPanel_Combat;                                // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           CanvasPanel_Build;                                 // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           CanvasPanel_Persistent;                            // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                               InternalSizeBox;                                   // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHUDLayoutToolPlacementWidget*>  PlacementWidgets;                                  // 0x0258(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDLayoutToolButtonLayer">();
	}
	static class UHUDLayoutToolButtonLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDLayoutToolButtonLayer>();
	}
};
static_assert(alignof(UHUDLayoutToolButtonLayer) == 0x000008, "Wrong alignment on UHUDLayoutToolButtonLayer");
static_assert(sizeof(UHUDLayoutToolButtonLayer) == 0x000268, "Wrong size on UHUDLayoutToolButtonLayer");
static_assert(offsetof(UHUDLayoutToolButtonLayer, CanvasPanel_Combat) == 0x000238, "Member 'UHUDLayoutToolButtonLayer::CanvasPanel_Combat' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolButtonLayer, CanvasPanel_Build) == 0x000240, "Member 'UHUDLayoutToolButtonLayer::CanvasPanel_Build' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolButtonLayer, CanvasPanel_Persistent) == 0x000248, "Member 'UHUDLayoutToolButtonLayer::CanvasPanel_Persistent' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolButtonLayer, InternalSizeBox) == 0x000250, "Member 'UHUDLayoutToolButtonLayer::InternalSizeBox' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolButtonLayer, PlacementWidgets) == 0x000258, "Member 'UHUDLayoutToolButtonLayer::PlacementWidgets' has a wrong offset!");

// Class FortniteUI.FortAccountOptions
// 0x0008 (0x0290 - 0x0288)
class UFortAccountOptions : public UFortOptionsTab
{
public:
	uint8                                         Pad_288[0x8];                                      // 0x0288(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeSamsungStoreSetting(int32 SettingIdx);
	void LoadSamsungOptions(TArray<class FText>* OutOptions, int32* CurrentOptionIdx);
	void SaveSettingsToMcp();
	void SetCanReceiveGifts(bool bInCanReceiveGifts);
	void SetPrivacySettings(const struct FMcpPrivacySettings& NewPrivacySettings);
	void SetRefundRequestText(int32 RefundsRemaining, int32 TotalRefunds, int32 DaysToRefund);

	bool CanLocalPlayerReceiveGifts() const;
	bool ShouldShowSamsungStore() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAccountOptions">();
	}
	static class UFortAccountOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAccountOptions>();
	}
};
static_assert(alignof(UFortAccountOptions) == 0x000008, "Wrong alignment on UFortAccountOptions");
static_assert(sizeof(UFortAccountOptions) == 0x000290, "Wrong size on UFortAccountOptions");

// Class FortniteUI.FortAccountWidgetBase
// 0x0038 (0x0270 - 0x0238)
class UFortAccountWidgetBase : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x38];                                     // 0x0238(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleCurrentlyViewedAccountInfoChanged(const struct FFortPublicAccountInfo& NewInfo);
	void OnAccountInfoChanged(const struct FFortPublicAccountInfo& Result);

	bool GetNextSeasonChaseReward(struct FFortItemQuantityPair* Reward, int32* RewardLevel, int32 StartingLevel) const;
	bool GetNextSeasonReward(struct FFortItemQuantityPair* Reward, int32* RewardLevel) const;
	struct FAthenaSeasonBannerLevel GetSeasonBannerInfo(int32 Level) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAccountWidgetBase">();
	}
	static class UFortAccountWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAccountWidgetBase>();
	}
};
static_assert(alignof(UFortAccountWidgetBase) == 0x000008, "Wrong alignment on UFortAccountWidgetBase");
static_assert(sizeof(UFortAccountWidgetBase) == 0x000270, "Wrong size on UFortAccountWidgetBase");

// Class FortniteUI.FortItemCompareModeActivatablePanel
// 0x0010 (0x0368 - 0x0358)
class UFortItemCompareModeActivatablePanel final : public UFortItemDetailsActivatablePanel
{
public:
	class UFortItemManagementItemDetailsPanel*    ComparisonModeLeftItemDetailsPanel;                // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemManagementItemDetailsPanel*    ComparisonModeRightItemDetailsPanel;               // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemCompareModeActivatablePanel">();
	}
	static class UFortItemCompareModeActivatablePanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemCompareModeActivatablePanel>();
	}
};
static_assert(alignof(UFortItemCompareModeActivatablePanel) == 0x000008, "Wrong alignment on UFortItemCompareModeActivatablePanel");
static_assert(sizeof(UFortItemCompareModeActivatablePanel) == 0x000368, "Wrong size on UFortItemCompareModeActivatablePanel");
static_assert(offsetof(UFortItemCompareModeActivatablePanel, ComparisonModeLeftItemDetailsPanel) == 0x000358, "Member 'UFortItemCompareModeActivatablePanel::ComparisonModeLeftItemDetailsPanel' has a wrong offset!");
static_assert(offsetof(UFortItemCompareModeActivatablePanel, ComparisonModeRightItemDetailsPanel) == 0x000360, "Member 'UFortItemCompareModeActivatablePanel::ComparisonModeRightItemDetailsPanel' has a wrong offset!");

// Class FortniteUI.FortStoreFrontOfferWidgetBase
// 0x0018 (0x0B48 - 0x0B30)
class UFortStoreFrontOfferWidgetBase : public UCommonButton
{
public:
	TArray<class UFortStoreFrontOfferInfo*>       GroupedOffers;                                     // 0x0B30(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UFortStoreFrontOfferInfo*               OfferData;                                         // 0x0B40(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AddOffer(class UFortStoreFrontOfferInfo* InOfferData);
	void HandleCurrentlyViewedAccountInfoChanged(const struct FFortPublicAccountInfo& NewInfo);
	void OnOfferAdded();
	void OnOfferSet();
	void OnUpdateStatus();
	void RemoveAllOffers();
	void SetupOffer(class UFortStoreFrontOfferInfo* InOfferData);

	class UFortStoreFrontOfferInfo* GetOfferInfo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortStoreFrontOfferWidgetBase">();
	}
	static class UFortStoreFrontOfferWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortStoreFrontOfferWidgetBase>();
	}
};
static_assert(alignof(UFortStoreFrontOfferWidgetBase) == 0x000008, "Wrong alignment on UFortStoreFrontOfferWidgetBase");
static_assert(sizeof(UFortStoreFrontOfferWidgetBase) == 0x000B48, "Wrong size on UFortStoreFrontOfferWidgetBase");
static_assert(offsetof(UFortStoreFrontOfferWidgetBase, GroupedOffers) == 0x000B30, "Member 'UFortStoreFrontOfferWidgetBase::GroupedOffers' has a wrong offset!");
static_assert(offsetof(UFortStoreFrontOfferWidgetBase, OfferData) == 0x000B40, "Member 'UFortStoreFrontOfferWidgetBase::OfferData' has a wrong offset!");

// Class FortniteUI.FortActorCanvas
// 0x0058 (0x0178 - 0x0120)
class UFortActorCanvas final : public UPanelWidget
{
public:
	struct FGameplayTagContainer                  DefaultHUDElementTags;                             // 0x0120(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                          bDrawElementsInOrder;                              // 0x0140(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_141[0x37];                                     // 0x0141(0x0037)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFortActorCanvasSlot* AddActorIndicator(class UFortActorIndicatorWidget* Indicator);
	void OnHUDElementVisibilityChanged(const struct FGameplayTagContainer& HiddenHUDElementTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActorCanvas">();
	}
	static class UFortActorCanvas* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActorCanvas>();
	}
};
static_assert(alignof(UFortActorCanvas) == 0x000008, "Wrong alignment on UFortActorCanvas");
static_assert(sizeof(UFortActorCanvas) == 0x000178, "Wrong size on UFortActorCanvas");
static_assert(offsetof(UFortActorCanvas, DefaultHUDElementTags) == 0x000120, "Member 'UFortActorCanvas::DefaultHUDElementTags' has a wrong offset!");
static_assert(offsetof(UFortActorCanvas, bDrawElementsInOrder) == 0x000140, "Member 'UFortActorCanvas::bDrawElementsInOrder' has a wrong offset!");

// Class FortniteUI.FortAffiliateEntry
// 0x0020 (0x0B50 - 0x0B30)
class UFortAffiliateEntry : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x18];                                     // 0x0B30(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       OptionDisplayName;                                 // 0x0B48(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAffiliateEntry">();
	}
	static class UFortAffiliateEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAffiliateEntry>();
	}
};
static_assert(alignof(UFortAffiliateEntry) == 0x000008, "Wrong alignment on UFortAffiliateEntry");
static_assert(sizeof(UFortAffiliateEntry) == 0x000B50, "Wrong size on UFortAffiliateEntry");
static_assert(offsetof(UFortAffiliateEntry, OptionDisplayName) == 0x000B48, "Member 'UFortAffiliateEntry::OptionDisplayName' has a wrong offset!");

// Class FortniteUI.FortPerkTierWidget_NUI
// 0x0050 (0x0288 - 0x0238)
class UFortPerkTierWidget_NUI : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortUIPerkTier                        FortPerkTier;                                      // 0x0240(0x0020)(BlueprintVisible, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	uint8                                         Pad_260[0x28];                                     // 0x0260(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGeneratePerk(const struct FFortUIPerk& Perk, class UFortPerkWidget_NUI* PerkWidget);
	void ProcessPerks();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPerkTierWidget_NUI">();
	}
	static class UFortPerkTierWidget_NUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPerkTierWidget_NUI>();
	}
};
static_assert(alignof(UFortPerkTierWidget_NUI) == 0x000008, "Wrong alignment on UFortPerkTierWidget_NUI");
static_assert(sizeof(UFortPerkTierWidget_NUI) == 0x000288, "Wrong size on UFortPerkTierWidget_NUI");
static_assert(offsetof(UFortPerkTierWidget_NUI, FortPerkTier) == 0x000240, "Member 'UFortPerkTierWidget_NUI::FortPerkTier' has a wrong offset!");

// Class FortniteUI.FortAffilateModal
// 0x0018 (0x0360 - 0x0348)
class UFortAffilateModal : public UFortActivatablePanel
{
public:
	class UCommonButton*                          AcceptButton;                                      // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEditableText*                          AffiliateKey;                                      // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UListView*                              AffiliateSuggestionList;                           // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAffilateModal">();
	}
	static class UFortAffilateModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAffilateModal>();
	}
};
static_assert(alignof(UFortAffilateModal) == 0x000008, "Wrong alignment on UFortAffilateModal");
static_assert(sizeof(UFortAffilateModal) == 0x000360, "Wrong size on UFortAffilateModal");
static_assert(offsetof(UFortAffilateModal, AcceptButton) == 0x000348, "Member 'UFortAffilateModal::AcceptButton' has a wrong offset!");
static_assert(offsetof(UFortAffilateModal, AffiliateKey) == 0x000350, "Member 'UFortAffilateModal::AffiliateKey' has a wrong offset!");
static_assert(offsetof(UFortAffilateModal, AffiliateSuggestionList) == 0x000358, "Member 'UFortAffilateModal::AffiliateSuggestionList' has a wrong offset!");

// Class FortniteUI.FortAlterationModOptinScreenBase
// 0x0018 (0x0338 - 0x0320)
class UFortAlterationModOptinScreenBase : public UCommonActivatablePanel
{
public:
	class UFortItem*                              ItemToOptin;                                       // 0x0320(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_328[0x10];                                     // 0x0328(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConvertItemAlterations();
	void OnItemConversionComplete();
	void OnSetupItem();
	void RequestClose(bool bCancelled);
	void SetupItem(class UFortItem* Item);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAlterationModOptinScreenBase">();
	}
	static class UFortAlterationModOptinScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAlterationModOptinScreenBase>();
	}
};
static_assert(alignof(UFortAlterationModOptinScreenBase) == 0x000008, "Wrong alignment on UFortAlterationModOptinScreenBase");
static_assert(sizeof(UFortAlterationModOptinScreenBase) == 0x000338, "Wrong size on UFortAlterationModOptinScreenBase");
static_assert(offsetof(UFortAlterationModOptinScreenBase, ItemToOptin) == 0x000320, "Member 'UFortAlterationModOptinScreenBase::ItemToOptin' has a wrong offset!");

// Class FortniteUI.FortAlterationOption
// 0x0048 (0x0B78 - 0x0B30)
class UFortAlterationOption : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAlterationOption                      AlterationOption;                                  // 0x0B38(0x0038)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_B70[0x8];                                      // 0x0B70(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSetup();
	void Setup(struct FAlterationOption* InAlterationOption, EFortAlterationOptionType InAlterationOptionType);

	class UFortAlterationItemDefinition* GetAlterationDefinition() const;
	EFortAlterationOptionType GetAlterationOptionType() const;
	float GetCurrentPipCount(float MaxPipCount) const;
	float GetNextPipCount(float MaxPipCount) const;
	TArray<struct FFortItemQuantityPair> GetRequiredIngredients() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAlterationOption">();
	}
	static class UFortAlterationOption* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAlterationOption>();
	}
};
static_assert(alignof(UFortAlterationOption) == 0x000008, "Wrong alignment on UFortAlterationOption");
static_assert(sizeof(UFortAlterationOption) == 0x000B78, "Wrong size on UFortAlterationOption");
static_assert(offsetof(UFortAlterationOption, AlterationOption) == 0x000B38, "Member 'UFortAlterationOption::AlterationOption' has a wrong offset!");

// Class FortniteUI.FortAlterationInfo
// 0x0028 (0x0050 - 0x0028)
class UFortAlterationInfo final : public UObject
{
public:
	class UFortItem*                              CorrespondingItem;                                 // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SlotIndex;                                         // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAlterationItemDefinition*          AlterationDef;                                     // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RequiredMinLevel;                                  // 0x0040(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsUpgrade;                                        // 0x0044(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentItemLevel;                                  // 0x0048(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bFreeAlterationSlot;                               // 0x004C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUnlockedByEvolution;                              // 0x004D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFortAlterationItemDefinition* GetAlterationDefintion() const;
	class UFortItem* GetCorrespondingItem() const;
	float GetCurrentPipCount(float MaxPips) const;
	EFortRarity GetRarity() const;
	int32 GetRequiredLevel() const;
	int32 GetSlotIndex() const;
	bool IsAlterationHighlighted() const;
	bool IsAlterationUnlocked() const;
	bool IsFreeAlterationChoice() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAlterationInfo">();
	}
	static class UFortAlterationInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAlterationInfo>();
	}
};
static_assert(alignof(UFortAlterationInfo) == 0x000008, "Wrong alignment on UFortAlterationInfo");
static_assert(sizeof(UFortAlterationInfo) == 0x000050, "Wrong size on UFortAlterationInfo");
static_assert(offsetof(UFortAlterationInfo, CorrespondingItem) == 0x000028, "Member 'UFortAlterationInfo::CorrespondingItem' has a wrong offset!");
static_assert(offsetof(UFortAlterationInfo, SlotIndex) == 0x000030, "Member 'UFortAlterationInfo::SlotIndex' has a wrong offset!");
static_assert(offsetof(UFortAlterationInfo, AlterationDef) == 0x000038, "Member 'UFortAlterationInfo::AlterationDef' has a wrong offset!");
static_assert(offsetof(UFortAlterationInfo, RequiredMinLevel) == 0x000040, "Member 'UFortAlterationInfo::RequiredMinLevel' has a wrong offset!");
static_assert(offsetof(UFortAlterationInfo, bIsUpgrade) == 0x000044, "Member 'UFortAlterationInfo::bIsUpgrade' has a wrong offset!");
static_assert(offsetof(UFortAlterationInfo, CurrentItemLevel) == 0x000048, "Member 'UFortAlterationInfo::CurrentItemLevel' has a wrong offset!");
static_assert(offsetof(UFortAlterationInfo, bFreeAlterationSlot) == 0x00004C, "Member 'UFortAlterationInfo::bFreeAlterationSlot' has a wrong offset!");
static_assert(offsetof(UFortAlterationInfo, bUnlockedByEvolution) == 0x00004D, "Member 'UFortAlterationInfo::bUnlockedByEvolution' has a wrong offset!");

// Class FortniteUI.FortItemTransform
// 0x0000 (0x0320 - 0x0320)
class UFortItemTransform final : public UCommonActivatablePanel
{
public:
	void OnRequestCloseItemPicker();
	void ProcessPendingSeenTransformKeys();

	void LogSelectedKey(const class UFortItem* SelectedKey) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemTransform">();
	}
	static class UFortItemTransform* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemTransform>();
	}
};
static_assert(alignof(UFortItemTransform) == 0x000008, "Wrong alignment on UFortItemTransform");
static_assert(sizeof(UFortItemTransform) == 0x000320, "Wrong size on UFortItemTransform");

// Class FortniteUI.FortAlterationWidget
// 0x0010 (0x0248 - 0x0238)
class UFortAlterationWidget : public UCommonUserWidget
{
public:
	float                                         MaxPipCount;                                       // 0x0238(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAlterationInfo*                    AlterationInfo;                                    // 0x0240(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnSetup();
	void Setup(class UFortAlterationInfo* InAlterationInfo);

	class UFortAlterationInfo* GetAlterationInfo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAlterationWidget">();
	}
	static class UFortAlterationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAlterationWidget>();
	}
};
static_assert(alignof(UFortAlterationWidget) == 0x000008, "Wrong alignment on UFortAlterationWidget");
static_assert(sizeof(UFortAlterationWidget) == 0x000248, "Wrong size on UFortAlterationWidget");
static_assert(offsetof(UFortAlterationWidget, MaxPipCount) == 0x000238, "Member 'UFortAlterationWidget::MaxPipCount' has a wrong offset!");
static_assert(offsetof(UFortAlterationWidget, AlterationInfo) == 0x000240, "Member 'UFortAlterationWidget::AlterationInfo' has a wrong offset!");

// Class FortniteUI.FortArmoryScreen
// 0x0000 (0x0348 - 0x0348)
class UFortArmoryScreen final : public UFortActivatablePanel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortArmoryScreen">();
	}
	static class UFortArmoryScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortArmoryScreen>();
	}
};
static_assert(alignof(UFortArmoryScreen) == 0x000008, "Wrong alignment on UFortArmoryScreen");
static_assert(sizeof(UFortArmoryScreen) == 0x000348, "Wrong size on UFortArmoryScreen");

// Class FortniteUI.FortAsyncAction_CreateWidgetAsync
// 0x0068 (0x0098 - 0x0030)
class UFortAsyncAction_CreateWidgetAsync final : public UBlueprintAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   OnComplete;                                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x58];                                      // 0x0040(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UFortAsyncAction_CreateWidgetAsync* CreateWidgetAsync(class UObject* WorldContextObject, TSoftClassPtr<class UClass> UserWidgetSoftClass, class APlayerController* OwningPlayer, bool bSuspendInputUntilComplete);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAsyncAction_CreateWidgetAsync">();
	}
	static class UFortAsyncAction_CreateWidgetAsync* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAsyncAction_CreateWidgetAsync>();
	}
};
static_assert(alignof(UFortAsyncAction_CreateWidgetAsync) == 0x000008, "Wrong alignment on UFortAsyncAction_CreateWidgetAsync");
static_assert(sizeof(UFortAsyncAction_CreateWidgetAsync) == 0x000098, "Wrong size on UFortAsyncAction_CreateWidgetAsync");
static_assert(offsetof(UFortAsyncAction_CreateWidgetAsync, OnComplete) == 0x000030, "Member 'UFortAsyncAction_CreateWidgetAsync::OnComplete' has a wrong offset!");

// Class FortniteUI.FortAsyncAction_LoadBannerAsset
// 0x0050 (0x0080 - 0x0030)
class UFortAsyncAction_LoadBannerAsset final : public UBlueprintAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   BannerAssetLoadComplete;                           // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x40];                                      // 0x0040(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UFortAsyncAction_LoadBannerAsset* AsyncLoadBannerAsset(class UObject* WorldContextObject, TSoftObjectPtr<class UObject> AssetToLoad, class UMaterialInstanceDynamic* MIDRef, class FName BannerColorName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAsyncAction_LoadBannerAsset">();
	}
	static class UFortAsyncAction_LoadBannerAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAsyncAction_LoadBannerAsset>();
	}
};
static_assert(alignof(UFortAsyncAction_LoadBannerAsset) == 0x000008, "Wrong alignment on UFortAsyncAction_LoadBannerAsset");
static_assert(sizeof(UFortAsyncAction_LoadBannerAsset) == 0x000080, "Wrong size on UFortAsyncAction_LoadBannerAsset");
static_assert(offsetof(UFortAsyncAction_LoadBannerAsset, BannerAssetLoadComplete) == 0x000030, "Member 'UFortAsyncAction_LoadBannerAsset::BannerAssetLoadComplete' has a wrong offset!");

// Class FortniteUI.FortAsyncAction_LoadCurrentSubgameProfiles
// 0x0028 (0x0058 - 0x0030)
class UFortAsyncAction_LoadCurrentSubgameProfiles final : public UBlueprintAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  PlayerController;                                  // 0x0050(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UFortAsyncAction_LoadCurrentSubgameProfiles* LoadCurrentSubgameProfiles(class AFortPlayerController* Param_PlayerController);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAsyncAction_LoadCurrentSubgameProfiles">();
	}
	static class UFortAsyncAction_LoadCurrentSubgameProfiles* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAsyncAction_LoadCurrentSubgameProfiles>();
	}
};
static_assert(alignof(UFortAsyncAction_LoadCurrentSubgameProfiles) == 0x000008, "Wrong alignment on UFortAsyncAction_LoadCurrentSubgameProfiles");
static_assert(sizeof(UFortAsyncAction_LoadCurrentSubgameProfiles) == 0x000058, "Wrong size on UFortAsyncAction_LoadCurrentSubgameProfiles");
static_assert(offsetof(UFortAsyncAction_LoadCurrentSubgameProfiles, OnSuccess) == 0x000030, "Member 'UFortAsyncAction_LoadCurrentSubgameProfiles::OnSuccess' has a wrong offset!");
static_assert(offsetof(UFortAsyncAction_LoadCurrentSubgameProfiles, OnFailure) == 0x000040, "Member 'UFortAsyncAction_LoadCurrentSubgameProfiles::OnFailure' has a wrong offset!");
static_assert(offsetof(UFortAsyncAction_LoadCurrentSubgameProfiles, PlayerController) == 0x000050, "Member 'UFortAsyncAction_LoadCurrentSubgameProfiles::PlayerController' has a wrong offset!");

// Class FortniteUI.FortOptionsMenuData
// 0x0050 (0x0080 - 0x0030)
class UFortOptionsMenuData final : public UDataAsset
{
public:
	TMap<ESettingTab, struct FOptionsTabData>     TabDatas;                                          // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortOptionsMenuData">();
	}
	static class UFortOptionsMenuData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortOptionsMenuData>();
	}
};
static_assert(alignof(UFortOptionsMenuData) == 0x000008, "Wrong alignment on UFortOptionsMenuData");
static_assert(sizeof(UFortOptionsMenuData) == 0x000080, "Wrong size on UFortOptionsMenuData");
static_assert(offsetof(UFortOptionsMenuData, TabDatas) == 0x000030, "Member 'UFortOptionsMenuData::TabDatas' has a wrong offset!");

// Class FortniteUI.FortAsyncAction_ShowAdvancedLatentConfirmation_NUI
// 0x0138 (0x0168 - 0x0030)
class UFortAsyncAction_ShowAdvancedLatentConfirmation_NUI final : public UBlueprintAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   DialogResult;                                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFortDialogDescription_NUI             Description;                                       // 0x0048(0x0120)(ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UFortAsyncAction_ShowAdvancedLatentConfirmation_NUI* ShowAdvancedLatentActionConfirmation(class UObject* InWorldContextObject, const struct FSlateBrush& Icon, const class FText& Title, const class FText& MESSAGE, const TArray<struct FConfirmationDialogAction>& ConfirmButtonInputActions, const class FName& DeclineButtonInputAction, class UWidget* AdditionalContent, class UWidget* LeftAdditionalContent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAsyncAction_ShowAdvancedLatentConfirmation_NUI">();
	}
	static class UFortAsyncAction_ShowAdvancedLatentConfirmation_NUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAsyncAction_ShowAdvancedLatentConfirmation_NUI>();
	}
};
static_assert(alignof(UFortAsyncAction_ShowAdvancedLatentConfirmation_NUI) == 0x000008, "Wrong alignment on UFortAsyncAction_ShowAdvancedLatentConfirmation_NUI");
static_assert(sizeof(UFortAsyncAction_ShowAdvancedLatentConfirmation_NUI) == 0x000168, "Wrong size on UFortAsyncAction_ShowAdvancedLatentConfirmation_NUI");
static_assert(offsetof(UFortAsyncAction_ShowAdvancedLatentConfirmation_NUI, DialogResult) == 0x000030, "Member 'UFortAsyncAction_ShowAdvancedLatentConfirmation_NUI::DialogResult' has a wrong offset!");
static_assert(offsetof(UFortAsyncAction_ShowAdvancedLatentConfirmation_NUI, WorldContextObject) == 0x000040, "Member 'UFortAsyncAction_ShowAdvancedLatentConfirmation_NUI::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UFortAsyncAction_ShowAdvancedLatentConfirmation_NUI, Description) == 0x000048, "Member 'UFortAsyncAction_ShowAdvancedLatentConfirmation_NUI::Description' has a wrong offset!");

// Class FortniteUI.FortRewardEpicQuestData
// 0x0008 (0x0038 - 0x0030)
class UFortRewardEpicQuestData final : public UFortRewardNotificationData
{
public:
	class UFortQuestItem*                         Quest;                                             // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRewardEpicQuestData">();
	}
	static class UFortRewardEpicQuestData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRewardEpicQuestData>();
	}
};
static_assert(alignof(UFortRewardEpicQuestData) == 0x000008, "Wrong alignment on UFortRewardEpicQuestData");
static_assert(sizeof(UFortRewardEpicQuestData) == 0x000038, "Wrong size on UFortRewardEpicQuestData");
static_assert(offsetof(UFortRewardEpicQuestData, Quest) == 0x000030, "Member 'UFortRewardEpicQuestData::Quest' has a wrong offset!");

// Class FortniteUI.FortAsyncAction_ShowPartyDialog
// 0x0330 (0x0360 - 0x0030)
class UFortAsyncAction_ShowPartyDialog final : public UBlueprintAsyncActionBase
{
public:
	class UObject*                                WorldContextObject;                                // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFortDialogDescription_NUI             Description;                                       // 0x0038(0x0120)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FFortTeamMemberInfo                    TeamMemberInfo;                                    // 0x0158(0x0200)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULocalPlayer*                           LocalPlayer;                                       // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UFortAsyncAction_ShowPartyDialog* ShowPartyLeaderManageDialog(class UObject* InWorldContextObject, const struct FFortTeamMemberInfo& Param_TeamMemberInfo, class ULocalPlayer* Param_LocalPlayer, class UUserWidget* LeftAdditionalContent);
	static class UFortAsyncAction_ShowPartyDialog* ShowPartyMemberManageDialog(class UObject* InWorldContextObject, const struct FFortTeamMemberInfo& Param_TeamMemberInfo, class ULocalPlayer* Param_LocalPlayer, class UUserWidget* LeftAdditionalContent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAsyncAction_ShowPartyDialog">();
	}
	static class UFortAsyncAction_ShowPartyDialog* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAsyncAction_ShowPartyDialog>();
	}
};
static_assert(alignof(UFortAsyncAction_ShowPartyDialog) == 0x000008, "Wrong alignment on UFortAsyncAction_ShowPartyDialog");
static_assert(sizeof(UFortAsyncAction_ShowPartyDialog) == 0x000360, "Wrong size on UFortAsyncAction_ShowPartyDialog");
static_assert(offsetof(UFortAsyncAction_ShowPartyDialog, WorldContextObject) == 0x000030, "Member 'UFortAsyncAction_ShowPartyDialog::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UFortAsyncAction_ShowPartyDialog, Description) == 0x000038, "Member 'UFortAsyncAction_ShowPartyDialog::Description' has a wrong offset!");
static_assert(offsetof(UFortAsyncAction_ShowPartyDialog, TeamMemberInfo) == 0x000158, "Member 'UFortAsyncAction_ShowPartyDialog::TeamMemberInfo' has a wrong offset!");
static_assert(offsetof(UFortAsyncAction_ShowPartyDialog, LocalPlayer) == 0x000358, "Member 'UFortAsyncAction_ShowPartyDialog::LocalPlayer' has a wrong offset!");

// Class FortniteUI.FortSquadManagementItemViewContextBase
// 0x00D0 (0x00F8 - 0x0028)
class UFortSquadManagementItemViewContextBase : public UObject
{
public:
	uint8                                         Pad_28[0xD0];                                      // 0x0028(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadManagementItemViewContextBase">();
	}
	static class UFortSquadManagementItemViewContextBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadManagementItemViewContextBase>();
	}
};
static_assert(alignof(UFortSquadManagementItemViewContextBase) == 0x000008, "Wrong alignment on UFortSquadManagementItemViewContextBase");
static_assert(sizeof(UFortSquadManagementItemViewContextBase) == 0x0000F8, "Wrong size on UFortSquadManagementItemViewContextBase");

// Class FortniteUI.FortItemViewContext_SquadSlotItemPicker
// 0x0010 (0x0108 - 0x00F8)
class UFortItemViewContext_SquadSlotItemPicker : public UFortSquadManagementItemViewContextBase
{
public:
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemViewContext_SquadSlotItemPicker">();
	}
	static class UFortItemViewContext_SquadSlotItemPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemViewContext_SquadSlotItemPicker>();
	}
};
static_assert(alignof(UFortItemViewContext_SquadSlotItemPicker) == 0x000008, "Wrong alignment on UFortItemViewContext_SquadSlotItemPicker");
static_assert(sizeof(UFortItemViewContext_SquadSlotItemPicker) == 0x000108, "Wrong size on UFortItemViewContext_SquadSlotItemPicker");

// Class FortniteUI.FortAthenaMatchmakingOptions
// 0x0118 (0x0460 - 0x0348)
class UFortAthenaMatchmakingOptions : public UFortActivatablePanel
{
public:
	TSubclassOf<class UFortActivatablePanel>      AthenaMatchmakingKnobsModalClass;                  // 0x0348(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortAthenaMatchmakingTile> TileItemClass;                                     // 0x0360(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonGroup*                     MatchmakingTileGroup;                              // 0x0368(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FAthenaPlaylistEntry                   RepresentedPlaylistCMSEntry;                       // 0x0370(0x0078)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	struct FPlaylistFrontEndData                  RepresentedPlaylist;                               // 0x03E8(0x0038)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_420[0x8];                                      // 0x0420(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UScrollBox*                             StandardGameModeBox;                               // 0x0428(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UScrollBox*                             LTMGameModeBox;                                    // 0x0430(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          TeamFillButton;                                    // 0x0438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          SpectateButton;                                    // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_ServerPrivacy;                              // 0x0448(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          MatchmakingKnobsButton;                            // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       MatchmakingWarningText;                            // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AcceptedPlaylist();
	void CanceledPlaylist();
	void CloseMatchmakingOptions();
	void HandleButtonGroupSelectionChanged(class UCommonButton* Button, int32 Param_Index);
	void HandleInputTypeChanged(ECommonInputType CurrentInputType);
	void OnTileDoubleClicked(class UCommonButton* ButtonClicked);
	void RepresentedPlaylistChanged(const struct FPlaylistFrontEndData& NewRepresentedPlaylist);
	void SetCustomMatchOptions(const TMap<class FString, class FString>& Options, const class FName& PlaylistName);
	void SetOwningMatchmakingWidget(class UFortAthenaMatchmakingWidget* InOwningMatchmakingWidget);
	void SetServerAccessText(EServerAccessSetting InServerAccessSetting);
	void SetSpectatorButtonText(ESpectatorQueueType InSpectatorQueueType);
	void SetSquadFillText(ESquadFillSetting InSquadFillSetting);
	void UpdateMMButtonStatusBP(bool bPlaylistIsEnabled, EFillDisableReason FillDisableReason);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMatchmakingOptions">();
	}
	static class UFortAthenaMatchmakingOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaMatchmakingOptions>();
	}
};
static_assert(alignof(UFortAthenaMatchmakingOptions) == 0x000008, "Wrong alignment on UFortAthenaMatchmakingOptions");
static_assert(sizeof(UFortAthenaMatchmakingOptions) == 0x000460, "Wrong size on UFortAthenaMatchmakingOptions");
static_assert(offsetof(UFortAthenaMatchmakingOptions, AthenaMatchmakingKnobsModalClass) == 0x000348, "Member 'UFortAthenaMatchmakingOptions::AthenaMatchmakingKnobsModalClass' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingOptions, TileItemClass) == 0x000360, "Member 'UFortAthenaMatchmakingOptions::TileItemClass' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingOptions, MatchmakingTileGroup) == 0x000368, "Member 'UFortAthenaMatchmakingOptions::MatchmakingTileGroup' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingOptions, RepresentedPlaylistCMSEntry) == 0x000370, "Member 'UFortAthenaMatchmakingOptions::RepresentedPlaylistCMSEntry' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingOptions, RepresentedPlaylist) == 0x0003E8, "Member 'UFortAthenaMatchmakingOptions::RepresentedPlaylist' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingOptions, StandardGameModeBox) == 0x000428, "Member 'UFortAthenaMatchmakingOptions::StandardGameModeBox' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingOptions, LTMGameModeBox) == 0x000430, "Member 'UFortAthenaMatchmakingOptions::LTMGameModeBox' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingOptions, TeamFillButton) == 0x000438, "Member 'UFortAthenaMatchmakingOptions::TeamFillButton' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingOptions, SpectateButton) == 0x000440, "Member 'UFortAthenaMatchmakingOptions::SpectateButton' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingOptions, Button_ServerPrivacy) == 0x000448, "Member 'UFortAthenaMatchmakingOptions::Button_ServerPrivacy' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingOptions, MatchmakingKnobsButton) == 0x000450, "Member 'UFortAthenaMatchmakingOptions::MatchmakingKnobsButton' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingOptions, MatchmakingWarningText) == 0x000458, "Member 'UFortAthenaMatchmakingOptions::MatchmakingWarningText' has a wrong offset!");

// Class FortniteUI.FortAthenaMatchmakingTile
// 0x00E8 (0x0C18 - 0x0B30)
class UFortAthenaMatchmakingTile : public UCommonButton
{
public:
	class UEpicCMSImage*                          GameModeImage;                                     // 0x0B30(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonBorder*                          AdSpace;                                           // 0x0B38(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       AdText;                                            // 0x0B40(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       SpecialAdText;                                     // 0x0B48(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       GameModeName;                                      // 0x0B50(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       SubGameModeName;                                   // 0x0B58(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BorderDisplayStyle;                                // 0x0B60(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B64[0x4];                                      // 0x0B64(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAthenaPlaylistEntry                   CMSPlaylistEntry;                                  // 0x0B68(0x0078)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FPlaylistFrontEndData                  TilePlaylistData;                                  // 0x0BE0(0x0038)(Transient, NativeAccessSpecifierPrivate)

public:
	void OnCMSDataUpdated();
	void PlaylistChanged(const struct FPlaylistFrontEndData& PlaylistToRepresent);
	void PopulateTextFieldsFromCMS();
	void SetDefaultImage();
	void SetTileSize(int32 NumRowTiles);
	void TilePlaylistSetAsMatchmakingPlaylist();
	void UpdateTileAvailability(bool Available);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMatchmakingTile">();
	}
	static class UFortAthenaMatchmakingTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaMatchmakingTile>();
	}
};
static_assert(alignof(UFortAthenaMatchmakingTile) == 0x000008, "Wrong alignment on UFortAthenaMatchmakingTile");
static_assert(sizeof(UFortAthenaMatchmakingTile) == 0x000C18, "Wrong size on UFortAthenaMatchmakingTile");
static_assert(offsetof(UFortAthenaMatchmakingTile, GameModeImage) == 0x000B30, "Member 'UFortAthenaMatchmakingTile::GameModeImage' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingTile, AdSpace) == 0x000B38, "Member 'UFortAthenaMatchmakingTile::AdSpace' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingTile, AdText) == 0x000B40, "Member 'UFortAthenaMatchmakingTile::AdText' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingTile, SpecialAdText) == 0x000B48, "Member 'UFortAthenaMatchmakingTile::SpecialAdText' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingTile, GameModeName) == 0x000B50, "Member 'UFortAthenaMatchmakingTile::GameModeName' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingTile, SubGameModeName) == 0x000B58, "Member 'UFortAthenaMatchmakingTile::SubGameModeName' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingTile, BorderDisplayStyle) == 0x000B60, "Member 'UFortAthenaMatchmakingTile::BorderDisplayStyle' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingTile, CMSPlaylistEntry) == 0x000B68, "Member 'UFortAthenaMatchmakingTile::CMSPlaylistEntry' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingTile, TilePlaylistData) == 0x000BE0, "Member 'UFortAthenaMatchmakingTile::TilePlaylistData' has a wrong offset!");

// Class FortniteUI.FortAthenaMatchmakingWidget
// 0x01F8 (0x0430 - 0x0238)
class UFortAthenaMatchmakingWidget : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x38];                                     // 0x0238(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortMissionGenerator>      DefaultMissionGen;                                 // 0x0270(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortMatchmakingViolatorStyle                 NewModeStyleOverride;                              // 0x0278(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HighPriorityEventId;                               // 0x0280(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_290[0x158];                                    // 0x0290(0x0158)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButton*                          PlayButton;                                        // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          CancelButton;                                      // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          StartMatchButton;                                  // 0x03F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          MatchmakingModeButton;                             // 0x0400(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                SpinnerAndTextContainer;                           // 0x0408(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       MatchmakingHeaderText;                             // 0x0410(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       MatchmakingMessageText;                            // 0x0418(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       NewModeText;                                       // 0x0420(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       TextBlock_PartySizeWarning;                        // 0x0428(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void GetCurrentTournamentAndEvent(class FString* TournamentId, class FString* EventId);
	void OnAvailablePlaylistsUpdated();
	void OnMatchmakingFinishedBlueprint(bool bSuccess);
	void OnNewModeViolatorUpdated(bool bShouldShow);
	void OnSetCancelButtonText(const class FText& CancelButtonText);
	void OnSetPlayButtonText(const class FText& PlayButtonText);
	void OpenCreativeOptions_NativizeMe();
	void PlaylistChanged(const struct FPlaylistFrontEndData& NewPlaylist, const class FText& PlaylistCMSOverrideName, EFortLobbyType LobbyType);
	void SetSquadFillText(bool InCurrentSquadFill);
	void UpdateCustomViolatorText(const class FText& ModeName, const class FText& SubText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMatchmakingWidget">();
	}
	static class UFortAthenaMatchmakingWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaMatchmakingWidget>();
	}
};
static_assert(alignof(UFortAthenaMatchmakingWidget) == 0x000008, "Wrong alignment on UFortAthenaMatchmakingWidget");
static_assert(sizeof(UFortAthenaMatchmakingWidget) == 0x000430, "Wrong size on UFortAthenaMatchmakingWidget");
static_assert(offsetof(UFortAthenaMatchmakingWidget, DefaultMissionGen) == 0x000270, "Member 'UFortAthenaMatchmakingWidget::DefaultMissionGen' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingWidget, NewModeStyleOverride) == 0x000278, "Member 'UFortAthenaMatchmakingWidget::NewModeStyleOverride' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingWidget, HighPriorityEventId) == 0x000280, "Member 'UFortAthenaMatchmakingWidget::HighPriorityEventId' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingWidget, PlayButton) == 0x0003E8, "Member 'UFortAthenaMatchmakingWidget::PlayButton' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingWidget, CancelButton) == 0x0003F0, "Member 'UFortAthenaMatchmakingWidget::CancelButton' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingWidget, StartMatchButton) == 0x0003F8, "Member 'UFortAthenaMatchmakingWidget::StartMatchButton' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingWidget, MatchmakingModeButton) == 0x000400, "Member 'UFortAthenaMatchmakingWidget::MatchmakingModeButton' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingWidget, SpinnerAndTextContainer) == 0x000408, "Member 'UFortAthenaMatchmakingWidget::SpinnerAndTextContainer' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingWidget, MatchmakingHeaderText) == 0x000410, "Member 'UFortAthenaMatchmakingWidget::MatchmakingHeaderText' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingWidget, MatchmakingMessageText) == 0x000418, "Member 'UFortAthenaMatchmakingWidget::MatchmakingMessageText' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingWidget, NewModeText) == 0x000420, "Member 'UFortAthenaMatchmakingWidget::NewModeText' has a wrong offset!");
static_assert(offsetof(UFortAthenaMatchmakingWidget, TextBlock_PartySizeWarning) == 0x000428, "Member 'UFortAthenaMatchmakingWidget::TextBlock_PartySizeWarning' has a wrong offset!");

// Class FortniteUI.FortAthenaNewsPanel
// 0x0000 (0x0348 - 0x0348)
class UFortAthenaNewsPanel : public UFortActivatablePanel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaNewsPanel">();
	}
	static class UFortAthenaNewsPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaNewsPanel>();
	}
};
static_assert(alignof(UFortAthenaNewsPanel) == 0x000008, "Wrong alignment on UFortAthenaNewsPanel");
static_assert(sizeof(UFortAthenaNewsPanel) == 0x000348, "Wrong size on UFortAthenaNewsPanel");

// Class FortniteUI.FortItemQuantityListBase
// 0x0080 (0x02B8 - 0x0238)
class UFortItemQuantityListBase : public UCommonUserWidget
{
public:
	EFortItemInspectionMode                       CurrentInspectMode;                                // 0x0238(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortItemQuantityListEntryBase> ListEntryWidgetType;                               // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class UObject*, class UFortItemQuantityListEntryBase*> ItemObjectToWidgetMap;                             // 0x0248(0x0050)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_298[0x20];                                     // 0x0298(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddListEntry(class UFortItemQuantityListEntryBase* ListEntry);
	TArray<class UFortItemDefinition*> GetItemDefinitions();
	void OnItemInspectModeChanged();
	void SetItemDefinitionsAndQuantities(const TArray<struct FFortItemQuantityPair>& ItemQuantityPairs, const bool ShouldResetWidgets);
	void SetItemInspectMode(EFortItemInspectionMode InspectMode);
	void SetItemInstancesAndQuantities(const TArray<struct FFortItemInstanceQuantityPair>& ItemQuantityPairs, const bool ShouldResetWidgets);
	void SetItemToCompareDefinitionsAndQuantities(const TArray<struct FFortItemQuantityPair>& ItemToCompareQuantityPairs);

	bool IsEmptyList() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemQuantityListBase">();
	}
	static class UFortItemQuantityListBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemQuantityListBase>();
	}
};
static_assert(alignof(UFortItemQuantityListBase) == 0x000008, "Wrong alignment on UFortItemQuantityListBase");
static_assert(sizeof(UFortItemQuantityListBase) == 0x0002B8, "Wrong size on UFortItemQuantityListBase");
static_assert(offsetof(UFortItemQuantityListBase, CurrentInspectMode) == 0x000238, "Member 'UFortItemQuantityListBase::CurrentInspectMode' has a wrong offset!");
static_assert(offsetof(UFortItemQuantityListBase, ListEntryWidgetType) == 0x000240, "Member 'UFortItemQuantityListBase::ListEntryWidgetType' has a wrong offset!");
static_assert(offsetof(UFortItemQuantityListBase, ItemObjectToWidgetMap) == 0x000248, "Member 'UFortItemQuantityListBase::ItemObjectToWidgetMap' has a wrong offset!");

// Class FortniteUI.FortAthenaNewsTile
// 0x0028 (0x0260 - 0x0238)
class UFortAthenaNewsTile : public UCommonUserWidget
{
public:
	class UEpicCMSImage*                          CMSImage_NewsImage;                                // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       Text_NewsTitle;                                    // 0x0240(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       Text_NewsBody;                                     // 0x0248(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonBorder*                          Border_AdSpace;                                    // 0x0250(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       Text_AdSpace;                                      // 0x0258(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void PlayIntroAnim();
	void SetDefaultImage();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaNewsTile">();
	}
	static class UFortAthenaNewsTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaNewsTile>();
	}
};
static_assert(alignof(UFortAthenaNewsTile) == 0x000008, "Wrong alignment on UFortAthenaNewsTile");
static_assert(sizeof(UFortAthenaNewsTile) == 0x000260, "Wrong size on UFortAthenaNewsTile");
static_assert(offsetof(UFortAthenaNewsTile, CMSImage_NewsImage) == 0x000238, "Member 'UFortAthenaNewsTile::CMSImage_NewsImage' has a wrong offset!");
static_assert(offsetof(UFortAthenaNewsTile, Text_NewsTitle) == 0x000240, "Member 'UFortAthenaNewsTile::Text_NewsTitle' has a wrong offset!");
static_assert(offsetof(UFortAthenaNewsTile, Text_NewsBody) == 0x000248, "Member 'UFortAthenaNewsTile::Text_NewsBody' has a wrong offset!");
static_assert(offsetof(UFortAthenaNewsTile, Border_AdSpace) == 0x000250, "Member 'UFortAthenaNewsTile::Border_AdSpace' has a wrong offset!");
static_assert(offsetof(UFortAthenaNewsTile, Text_AdSpace) == 0x000258, "Member 'UFortAthenaNewsTile::Text_AdSpace' has a wrong offset!");

// Class FortniteUI.FortMultiSizeItemCard
// 0x0038 (0x0168 - 0x0130)
class UFortMultiSizeItemCard final : public UFortItemWidget_NUI
{
public:
	EFortItemCardSize                             BPItemCardSize;                                    // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldDisplayItemAsReward;                         // 0x0131(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QuantityOverride;                                  // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRarity                                   RarityOverride;                                    // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemType                                 EmptyItemType;                                     // 0x0139(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldSuppressItemTypeIcon;                        // 0x013A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldSuppressTierMeter;                           // 0x013B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldCollapseBorderPadding;                       // 0x013C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldCollapseItem;                                // 0x013D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E[0x2A];                                     // 0x013E(0x002A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool ShouldUseNewItemCards();

	void SetCardSize(const EFortItemCardSize CardSize);
	void SetEmptyItemType(const EFortItemType NewEmptyItemType);
	void SetQuantityOverride(const int32 Param_QuantityOverride);
	void SetRarityOverride(const EFortRarity Param_RarityOverride);
	void SetShouldCollapseBorderPadding(const bool Value);
	void SetShouldCollapseItem(const bool Value);
	void SetShouldDisplayItemAsReward(const bool Value);

	EFortItemCardSize GetCardSize() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMultiSizeItemCard">();
	}
	static class UFortMultiSizeItemCard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMultiSizeItemCard>();
	}
};
static_assert(alignof(UFortMultiSizeItemCard) == 0x000008, "Wrong alignment on UFortMultiSizeItemCard");
static_assert(sizeof(UFortMultiSizeItemCard) == 0x000168, "Wrong size on UFortMultiSizeItemCard");
static_assert(offsetof(UFortMultiSizeItemCard, BPItemCardSize) == 0x000130, "Member 'UFortMultiSizeItemCard::BPItemCardSize' has a wrong offset!");
static_assert(offsetof(UFortMultiSizeItemCard, ShouldDisplayItemAsReward) == 0x000131, "Member 'UFortMultiSizeItemCard::ShouldDisplayItemAsReward' has a wrong offset!");
static_assert(offsetof(UFortMultiSizeItemCard, QuantityOverride) == 0x000134, "Member 'UFortMultiSizeItemCard::QuantityOverride' has a wrong offset!");
static_assert(offsetof(UFortMultiSizeItemCard, RarityOverride) == 0x000138, "Member 'UFortMultiSizeItemCard::RarityOverride' has a wrong offset!");
static_assert(offsetof(UFortMultiSizeItemCard, EmptyItemType) == 0x000139, "Member 'UFortMultiSizeItemCard::EmptyItemType' has a wrong offset!");
static_assert(offsetof(UFortMultiSizeItemCard, ShouldSuppressItemTypeIcon) == 0x00013A, "Member 'UFortMultiSizeItemCard::ShouldSuppressItemTypeIcon' has a wrong offset!");
static_assert(offsetof(UFortMultiSizeItemCard, ShouldSuppressTierMeter) == 0x00013B, "Member 'UFortMultiSizeItemCard::ShouldSuppressTierMeter' has a wrong offset!");
static_assert(offsetof(UFortMultiSizeItemCard, ShouldCollapseBorderPadding) == 0x00013C, "Member 'UFortMultiSizeItemCard::ShouldCollapseBorderPadding' has a wrong offset!");
static_assert(offsetof(UFortMultiSizeItemCard, ShouldCollapseItem) == 0x00013D, "Member 'UFortMultiSizeItemCard::ShouldCollapseItem' has a wrong offset!");

// Class FortniteUI.FortAthenaNewsWidget
// 0x0050 (0x0288 - 0x0238)
class UFortAthenaNewsWidget : public UCommonUserWidget
{
public:
	TSubclassOf<class UFortAthenaNewsTile>        NewsTileClass;                                     // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortAthenaNewsTile>        SpotlightNewsTileClass;                            // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortAthenaNewsTile>        SpecialEventNewsTileClass;                         // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortAthenaNewsTile>        SpotlightSpecialEventNewsTileClass;                // 0x0250(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortAthenaNewsTile*>            NewsTiles;                                         // 0x0258(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       CommonText_NewsHeader;                             // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UScrollBox*                             ScrollBox_NewsContainer;                           // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         HorizontalBox_NewsContainer;                       // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           VerticalBox_SpotlightNewsContainer;                // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleNewsStyle(EAthenaNewsStyle NewsStyle);
	void LogMotDCloseAction();
	void LogMotDLobbyNavAction();
	void PlayNewsTilesIntro();
	void ResetViewConfiguration();
	void SingleItemConfiguration();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaNewsWidget">();
	}
	static class UFortAthenaNewsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaNewsWidget>();
	}
};
static_assert(alignof(UFortAthenaNewsWidget) == 0x000008, "Wrong alignment on UFortAthenaNewsWidget");
static_assert(sizeof(UFortAthenaNewsWidget) == 0x000288, "Wrong size on UFortAthenaNewsWidget");
static_assert(offsetof(UFortAthenaNewsWidget, NewsTileClass) == 0x000238, "Member 'UFortAthenaNewsWidget::NewsTileClass' has a wrong offset!");
static_assert(offsetof(UFortAthenaNewsWidget, SpotlightNewsTileClass) == 0x000240, "Member 'UFortAthenaNewsWidget::SpotlightNewsTileClass' has a wrong offset!");
static_assert(offsetof(UFortAthenaNewsWidget, SpecialEventNewsTileClass) == 0x000248, "Member 'UFortAthenaNewsWidget::SpecialEventNewsTileClass' has a wrong offset!");
static_assert(offsetof(UFortAthenaNewsWidget, SpotlightSpecialEventNewsTileClass) == 0x000250, "Member 'UFortAthenaNewsWidget::SpotlightSpecialEventNewsTileClass' has a wrong offset!");
static_assert(offsetof(UFortAthenaNewsWidget, NewsTiles) == 0x000258, "Member 'UFortAthenaNewsWidget::NewsTiles' has a wrong offset!");
static_assert(offsetof(UFortAthenaNewsWidget, CommonText_NewsHeader) == 0x000268, "Member 'UFortAthenaNewsWidget::CommonText_NewsHeader' has a wrong offset!");
static_assert(offsetof(UFortAthenaNewsWidget, ScrollBox_NewsContainer) == 0x000270, "Member 'UFortAthenaNewsWidget::ScrollBox_NewsContainer' has a wrong offset!");
static_assert(offsetof(UFortAthenaNewsWidget, HorizontalBox_NewsContainer) == 0x000278, "Member 'UFortAthenaNewsWidget::HorizontalBox_NewsContainer' has a wrong offset!");
static_assert(offsetof(UFortAthenaNewsWidget, VerticalBox_SpotlightNewsContainer) == 0x000280, "Member 'UFortAthenaNewsWidget::VerticalBox_SpotlightNewsContainer' has a wrong offset!");

// Class FortniteUI.FortAthenaTabsScreenBase
// 0x0068 (0x03B0 - 0x0348)
class UFortAthenaTabsScreenBase : public UFortActivatablePanel
{
public:
	TMap<EFortUIFeature, class FName>             FeaturesTabsMap;                                   // 0x0348(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UFortTabListWidgetBase*                 TopTabList;                                        // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A0[0x10];                                     // 0x03A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleFeatureNavigateRequest(EFortUIFeature Feature);
	void HandleFeatureStateChanged(EFortUIFeature ChangedFeature, EFortUIFeatureState NewState, EFortUIFeatureStateReason Reason);
	void SetActiveInvitesCount(int32 NewActiveInvitesCount);
	void SetOnlineFriendsCount(int32 NewOnlineFriendsCount);
	void ShowReplayBrowser();

	bool CanShowPrototypeTab(class FName TabNameID) const;
	bool CanShowSeasonShopTab() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaTabsScreenBase">();
	}
	static class UFortAthenaTabsScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaTabsScreenBase>();
	}
};
static_assert(alignof(UFortAthenaTabsScreenBase) == 0x000008, "Wrong alignment on UFortAthenaTabsScreenBase");
static_assert(sizeof(UFortAthenaTabsScreenBase) == 0x0003B0, "Wrong size on UFortAthenaTabsScreenBase");
static_assert(offsetof(UFortAthenaTabsScreenBase, FeaturesTabsMap) == 0x000348, "Member 'UFortAthenaTabsScreenBase::FeaturesTabsMap' has a wrong offset!");
static_assert(offsetof(UFortAthenaTabsScreenBase, TopTabList) == 0x000398, "Member 'UFortAthenaTabsScreenBase::TopTabList' has a wrong offset!");

// Class FortniteUI.FortOptionsMenu
// 0x0000 (0x0348 - 0x0348)
class UFortOptionsMenu : public UFortActivatablePanel
{
public:
	void ClearCachedEula();
	void HandleBenchmarkComplete();
	void HandleSettingsErrorMessageClosed();
	void HandleSettingsSaveComplete();
	bool NeedsLanguageChangeConfirmation();
	bool NeedsVideoChangeConfirmation();
	void OnApply();
	void OnReset();
	void OnResetToDefaults(int32 PresetToSet);
	void OnVideoAccept();
	void OnVideoCancel();
	void ResetClientHUDSettings();
	void ResetGameOptionsSettings();
	bool ShowAccessibilityOptions();
	bool ShowAccountOptions();
	bool ShowBrightnessOptions();
	bool ShowControllerOptions();
	bool ShowInputOptions();
	bool ShowVideoOptions();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortOptionsMenu">();
	}
	static class UFortOptionsMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortOptionsMenu>();
	}
};
static_assert(alignof(UFortOptionsMenu) == 0x000008, "Wrong alignment on UFortOptionsMenu");
static_assert(sizeof(UFortOptionsMenu) == 0x000348, "Wrong size on UFortOptionsMenu");

// Class FortniteUI.FortResultsWidget
// 0x00C0 (0x03E0 - 0x0320)
class UFortResultsWidget final : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x78];                                     // 0x0320(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AdditionalGrantedMissionPoints;                    // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortItem*>                      RewardedBadges;                                    // 0x03A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UFortItem*>                      MissedBadges;                                      // 0x03B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UFortItem*>                      RewardedItems;                                     // 0x03C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UFortItem*>                      RewardedAccountItems;                              // 0x03D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void GetRewardsByType(EFortRewardItemType Type, TArray<class UFortItem*>* OutRewards);
	int32 GetTotalMissionPointsEarned();
	void LogXPData();
	void RequestExitZone();
	void SendEndOfRoundFriendInviteAnalytic(const struct FUniqueNetIdRepl& TargetId, const class FString& TargetPlayerName);
	void SendEndOfRoundScreenAnalytic(const class FString& ScreenName, bool Skipped, float TimeSpent);
	void SendEndOfRoundUpVoteAnalytic(const struct FUniqueNetIdRepl& TargetId, const class FString& TargetPlayerName);
	void TriggerSetupTeleportCameraEvent();

	EFortCompletionResult GetZoneCompletionResult() const;
	class FText GetZoneCompletionResultText() const;
	bool IsDataFinalized() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortResultsWidget">();
	}
	static class UFortResultsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortResultsWidget>();
	}
};
static_assert(alignof(UFortResultsWidget) == 0x000008, "Wrong alignment on UFortResultsWidget");
static_assert(sizeof(UFortResultsWidget) == 0x0003E0, "Wrong size on UFortResultsWidget");
static_assert(offsetof(UFortResultsWidget, AdditionalGrantedMissionPoints) == 0x000398, "Member 'UFortResultsWidget::AdditionalGrantedMissionPoints' has a wrong offset!");
static_assert(offsetof(UFortResultsWidget, RewardedBadges) == 0x0003A0, "Member 'UFortResultsWidget::RewardedBadges' has a wrong offset!");
static_assert(offsetof(UFortResultsWidget, MissedBadges) == 0x0003B0, "Member 'UFortResultsWidget::MissedBadges' has a wrong offset!");
static_assert(offsetof(UFortResultsWidget, RewardedItems) == 0x0003C0, "Member 'UFortResultsWidget::RewardedItems' has a wrong offset!");
static_assert(offsetof(UFortResultsWidget, RewardedAccountItems) == 0x0003D0, "Member 'UFortResultsWidget::RewardedAccountItems' has a wrong offset!");

// Class FortniteUI.FortItemManagementMulchPanel
// 0x0000 (0x0028 - 0x0028)
class IFortItemManagementMulchPanel final : public IInterface
{
public:
	void HideMulchConfirmationModal();
	void NotifyPanelActivated();
	void NotifyPanelDeactivated();
	void ShowMulchConfirmationModal();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemManagementMulchPanel">();
	}
	static class IFortItemManagementMulchPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFortItemManagementMulchPanel>();
	}
};
static_assert(alignof(IFortItemManagementMulchPanel) == 0x000008, "Wrong alignment on IFortItemManagementMulchPanel");
static_assert(sizeof(IFortItemManagementMulchPanel) == 0x000028, "Wrong size on IFortItemManagementMulchPanel");

// Class FortniteUI.FortAttributeList
// 0x0018 (0x0258 - 0x0240)
class UFortAttributeList final : public UFortUserWidget
{
public:
	TSubclassOf<class UFortAttributeListItem>     AttributeItemClass;                                // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHoverEnabledOnElements;                           // 0x0248(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVerticalBox*                           AttributeContainer;                                // 0x0250(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Clear();
	void ClearPreviewData();
	TArray<struct FFortDisplayAttribute> SetData(const TArray<struct FFortDisplayAttribute>& Data);
	void SetPreviewData(const TArray<struct FFortDisplayAttribute>& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAttributeList">();
	}
	static class UFortAttributeList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAttributeList>();
	}
};
static_assert(alignof(UFortAttributeList) == 0x000008, "Wrong alignment on UFortAttributeList");
static_assert(sizeof(UFortAttributeList) == 0x000258, "Wrong size on UFortAttributeList");
static_assert(offsetof(UFortAttributeList, AttributeItemClass) == 0x000240, "Member 'UFortAttributeList::AttributeItemClass' has a wrong offset!");
static_assert(offsetof(UFortAttributeList, bHoverEnabledOnElements) == 0x000248, "Member 'UFortAttributeList::bHoverEnabledOnElements' has a wrong offset!");
static_assert(offsetof(UFortAttributeList, AttributeContainer) == 0x000250, "Member 'UFortAttributeList::AttributeContainer' has a wrong offset!");

// Class FortniteUI.FortMtxStoreSelectionPopup
// 0x0028 (0x0348 - 0x0320)
class UFortMtxStoreSelectionPopup : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x18];                                     // 0x0320(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButton*                          Button_Epic;                                       // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Samsung;                                    // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMtxStoreSelectionPopup">();
	}
	static class UFortMtxStoreSelectionPopup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMtxStoreSelectionPopup>();
	}
};
static_assert(alignof(UFortMtxStoreSelectionPopup) == 0x000008, "Wrong alignment on UFortMtxStoreSelectionPopup");
static_assert(sizeof(UFortMtxStoreSelectionPopup) == 0x000348, "Wrong size on UFortMtxStoreSelectionPopup");
static_assert(offsetof(UFortMtxStoreSelectionPopup, Button_Epic) == 0x000338, "Member 'UFortMtxStoreSelectionPopup::Button_Epic' has a wrong offset!");
static_assert(offsetof(UFortMtxStoreSelectionPopup, Button_Samsung) == 0x000340, "Member 'UFortMtxStoreSelectionPopup::Button_Samsung' has a wrong offset!");

// Class FortniteUI.FortAttributeList_NUI
// 0x0030 (0x0268 - 0x0238)
class UFortAttributeList_NUI : public UCommonUserWidget
{
public:
	TSubclassOf<class UFortAttributeListItem_NUI> AttributeItemClass;                                // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHoverEnabledOnElements;                           // 0x0240(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortAttributeListItem_NUI*>     ShownAttributeWidgets;                             // 0x0248(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_258[0x10];                                     // 0x0258(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearPreviewData();
	void OnAddShownAttributeListItem(class UFortAttributeListItem_NUI* AttributeListItemWidget);
	void OnClearShownAttributes();
	void OnRemoveShownAttributeListItem(class UFortAttributeListItem_NUI* AttributeListItemWidget, int32 AtIndex);
	void SetData(const TArray<struct FFortDisplayAttribute>& Data);
	void SetPreviewData(const TArray<struct FFortDisplayAttribute>& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAttributeList_NUI">();
	}
	static class UFortAttributeList_NUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAttributeList_NUI>();
	}
};
static_assert(alignof(UFortAttributeList_NUI) == 0x000008, "Wrong alignment on UFortAttributeList_NUI");
static_assert(sizeof(UFortAttributeList_NUI) == 0x000268, "Wrong size on UFortAttributeList_NUI");
static_assert(offsetof(UFortAttributeList_NUI, AttributeItemClass) == 0x000238, "Member 'UFortAttributeList_NUI::AttributeItemClass' has a wrong offset!");
static_assert(offsetof(UFortAttributeList_NUI, bHoverEnabledOnElements) == 0x000240, "Member 'UFortAttributeList_NUI::bHoverEnabledOnElements' has a wrong offset!");
static_assert(offsetof(UFortAttributeList_NUI, ShownAttributeWidgets) == 0x000248, "Member 'UFortAttributeList_NUI::ShownAttributeWidgets' has a wrong offset!");

// Class FortniteUI.FortAttributeListItem
// 0x00E8 (0x0318 - 0x0230)
class UFortAttributeListItem final : public UUserWidget
{
public:
	bool                                          bHoverEnabled;                                     // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0xE7];                                     // 0x0231(0x00E7)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearPreview();
	void DisplayAttributeChanged();
	void PreviewEnded();
	void PreviewStarted();
	bool SetDisplayAttribute(const struct FFortDisplayAttribute& InDisplayAttribute, struct FFortDisplayAttribute* DeltaAttribute);
	void SetPreviewAttribute(const struct FFortDisplayAttribute& InPreviewAttribute);
	void ValueChanged(float Delta);

	void GetCurrentAttributeCopy(struct FFortDisplayAttribute* OutDisplayAttribute) const;
	void GetDisplayAttributeCopy(struct FFortDisplayAttribute* OutDisplayAttribute) const;
	void GetDisplayPreviewCopy(struct FFortDisplayAttribute* OutPreviewAttribute) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAttributeListItem">();
	}
	static class UFortAttributeListItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAttributeListItem>();
	}
};
static_assert(alignof(UFortAttributeListItem) == 0x000008, "Wrong alignment on UFortAttributeListItem");
static_assert(sizeof(UFortAttributeListItem) == 0x000318, "Wrong size on UFortAttributeListItem");
static_assert(offsetof(UFortAttributeListItem, bHoverEnabled) == 0x000230, "Member 'UFortAttributeListItem::bHoverEnabled' has a wrong offset!");

// Class FortniteUI.FortMissionTrackerSubEntry
// 0x0038 (0x0270 - 0x0238)
class UFortMissionTrackerSubEntry final : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnMissionSubEntryVisibilityChanged;                // 0x0240(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	bool                                          bConfigureAsHUD;                                   // 0x0250(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHiddenByHeightConstraint;                         // 0x0251(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_252[0x6];                                      // 0x0252(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortObjectiveBase*                     TrackedObjective;                                  // 0x0258(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnSizeEstimateChangedDelegate;                     // 0x0260(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void NotifyVisibilityChanged();
	void OnHiddenByHeightConstraintChanged();
	void OnObjectiveSet();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMissionTrackerSubEntry">();
	}
	static class UFortMissionTrackerSubEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMissionTrackerSubEntry>();
	}
};
static_assert(alignof(UFortMissionTrackerSubEntry) == 0x000008, "Wrong alignment on UFortMissionTrackerSubEntry");
static_assert(sizeof(UFortMissionTrackerSubEntry) == 0x000270, "Wrong size on UFortMissionTrackerSubEntry");
static_assert(offsetof(UFortMissionTrackerSubEntry, OnMissionSubEntryVisibilityChanged) == 0x000240, "Member 'UFortMissionTrackerSubEntry::OnMissionSubEntryVisibilityChanged' has a wrong offset!");
static_assert(offsetof(UFortMissionTrackerSubEntry, bConfigureAsHUD) == 0x000250, "Member 'UFortMissionTrackerSubEntry::bConfigureAsHUD' has a wrong offset!");
static_assert(offsetof(UFortMissionTrackerSubEntry, bHiddenByHeightConstraint) == 0x000251, "Member 'UFortMissionTrackerSubEntry::bHiddenByHeightConstraint' has a wrong offset!");
static_assert(offsetof(UFortMissionTrackerSubEntry, TrackedObjective) == 0x000258, "Member 'UFortMissionTrackerSubEntry::TrackedObjective' has a wrong offset!");
static_assert(offsetof(UFortMissionTrackerSubEntry, OnSizeEstimateChangedDelegate) == 0x000260, "Member 'UFortMissionTrackerSubEntry::OnSizeEstimateChangedDelegate' has a wrong offset!");

// Class FortniteUI.FortQuestTrackerEntry
// 0x0060 (0x0298 - 0x0238)
class UFortQuestTrackerEntry final : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x10];                                     // 0x0238(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       QuestNameText;                                     // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonListView*                        ObjectivesList;                                    // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortQuestItem*                         TrackedQuest;                                      // 0x0258(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnHUDQuestFinalObjectiveHiddenDelegate;            // 0x0260(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UFortQuestObjectiveInfo*>        HUDCachedObjectiveInfos;                           // 0x0270(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bConfigureAsHUD;                                   // 0x0280(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_281[0x7];                                      // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnSizeEstimateChangedDelegate;                     // 0x0288(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void HandleHUDObjectiveCompletion(class UFortQuestObjectiveInfo* QuestObjective);
	void OnSetup();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQuestTrackerEntry">();
	}
	static class UFortQuestTrackerEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQuestTrackerEntry>();
	}
};
static_assert(alignof(UFortQuestTrackerEntry) == 0x000008, "Wrong alignment on UFortQuestTrackerEntry");
static_assert(sizeof(UFortQuestTrackerEntry) == 0x000298, "Wrong size on UFortQuestTrackerEntry");
static_assert(offsetof(UFortQuestTrackerEntry, QuestNameText) == 0x000248, "Member 'UFortQuestTrackerEntry::QuestNameText' has a wrong offset!");
static_assert(offsetof(UFortQuestTrackerEntry, ObjectivesList) == 0x000250, "Member 'UFortQuestTrackerEntry::ObjectivesList' has a wrong offset!");
static_assert(offsetof(UFortQuestTrackerEntry, TrackedQuest) == 0x000258, "Member 'UFortQuestTrackerEntry::TrackedQuest' has a wrong offset!");
static_assert(offsetof(UFortQuestTrackerEntry, OnHUDQuestFinalObjectiveHiddenDelegate) == 0x000260, "Member 'UFortQuestTrackerEntry::OnHUDQuestFinalObjectiveHiddenDelegate' has a wrong offset!");
static_assert(offsetof(UFortQuestTrackerEntry, HUDCachedObjectiveInfos) == 0x000270, "Member 'UFortQuestTrackerEntry::HUDCachedObjectiveInfos' has a wrong offset!");
static_assert(offsetof(UFortQuestTrackerEntry, bConfigureAsHUD) == 0x000280, "Member 'UFortQuestTrackerEntry::bConfigureAsHUD' has a wrong offset!");
static_assert(offsetof(UFortQuestTrackerEntry, OnSizeEstimateChangedDelegate) == 0x000288, "Member 'UFortQuestTrackerEntry::OnSizeEstimateChangedDelegate' has a wrong offset!");

// Class FortniteUI.FortAttributeListItem_NUI
// 0x00F8 (0x0330 - 0x0238)
class UFortAttributeListItem_NUI : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHoverEnabled;                                     // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241[0x3];                                      // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           StatTag;                                           // 0x0244(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C[0xE4];                                     // 0x024C(0x00E4)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearPreview();
	void DisplayAttributeChanged();
	void PreviewEnded();
	void PreviewStarted();
	void SetDisplayAttribute(const struct FFortDisplayAttribute& InDisplayAttribute);
	void SetPreviewAttribute(const struct FFortDisplayAttribute& InPreviewAttribute);
	void ValueChanged(float Delta);

	void GetCurrentAttributeCopy(struct FFortDisplayAttribute* OutDisplayAttribute) const;
	void GetDisplayAttributeCopy(struct FFortDisplayAttribute* OutDisplayAttribute) const;
	void GetDisplayPreviewCopy(struct FFortDisplayAttribute* OutPreviewAttribute) const;
	bool HasPreviewAttribute() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAttributeListItem_NUI">();
	}
	static class UFortAttributeListItem_NUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAttributeListItem_NUI>();
	}
};
static_assert(alignof(UFortAttributeListItem_NUI) == 0x000008, "Wrong alignment on UFortAttributeListItem_NUI");
static_assert(sizeof(UFortAttributeListItem_NUI) == 0x000330, "Wrong size on UFortAttributeListItem_NUI");
static_assert(offsetof(UFortAttributeListItem_NUI, bHoverEnabled) == 0x000240, "Member 'UFortAttributeListItem_NUI::bHoverEnabled' has a wrong offset!");
static_assert(offsetof(UFortAttributeListItem_NUI, StatTag) == 0x000244, "Member 'UFortAttributeListItem_NUI::StatTag' has a wrong offset!");

// Class FortniteUI.FortAutorunLockZone
// 0x0008 (0x0398 - 0x0390)
class UFortAutorunLockZone final : public UBacchusHUDElement
{
public:
	bool                                          bIsInZone;                                         // 0x0390(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsAutorunLockEnabled;                             // 0x0391(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_392[0x6];                                      // 0x0392(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInZoneChanged(bool bNewIsInZone);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAutorunLockZone">();
	}
	static class UFortAutorunLockZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAutorunLockZone>();
	}
};
static_assert(alignof(UFortAutorunLockZone) == 0x000008, "Wrong alignment on UFortAutorunLockZone");
static_assert(sizeof(UFortAutorunLockZone) == 0x000398, "Wrong size on UFortAutorunLockZone");
static_assert(offsetof(UFortAutorunLockZone, bIsInZone) == 0x000390, "Member 'UFortAutorunLockZone::bIsInZone' has a wrong offset!");
static_assert(offsetof(UFortAutorunLockZone, bIsAutorunLockEnabled) == 0x000391, "Member 'UFortAutorunLockZone::bIsAutorunLockEnabled' has a wrong offset!");

// Class FortniteUI.FortBangWrapperOld
// 0x0040 (0x0160 - 0x0120)
class UFortBangWrapperOld final : public UContentWidget
{
public:
	uint8                                         Pad_120[0x8];                                      // 0x0120(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EFortBangSize                                 Size;                                              // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Offset;                                            // 0x012C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBangType                                 BangType;                                          // 0x0134(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TutorialNameID;                                    // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTutorialGlowType                         TutorialGlowType;                                  // 0x0140(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x1F];                                     // 0x0141(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBangVisibility(bool InVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBangWrapperOld">();
	}
	static class UFortBangWrapperOld* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBangWrapperOld>();
	}
};
static_assert(alignof(UFortBangWrapperOld) == 0x000008, "Wrong alignment on UFortBangWrapperOld");
static_assert(sizeof(UFortBangWrapperOld) == 0x000160, "Wrong size on UFortBangWrapperOld");
static_assert(offsetof(UFortBangWrapperOld, Size) == 0x000128, "Member 'UFortBangWrapperOld::Size' has a wrong offset!");
static_assert(offsetof(UFortBangWrapperOld, Offset) == 0x00012C, "Member 'UFortBangWrapperOld::Offset' has a wrong offset!");
static_assert(offsetof(UFortBangWrapperOld, BangType) == 0x000134, "Member 'UFortBangWrapperOld::BangType' has a wrong offset!");
static_assert(offsetof(UFortBangWrapperOld, TutorialNameID) == 0x000138, "Member 'UFortBangWrapperOld::TutorialNameID' has a wrong offset!");
static_assert(offsetof(UFortBangWrapperOld, TutorialGlowType) == 0x000140, "Member 'UFortBangWrapperOld::TutorialGlowType' has a wrong offset!");

// Class FortniteUI.FortBangWrapper_NUI
// 0x0020 (0x0258 - 0x0238)
class UFortBangWrapper_NUI : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EFortBangType                                 BangType;                                          // 0x0240(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241[0x3];                                      // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TutorialNameID;                                    // 0x0244(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNamedSlot*                             ContentSlot;                                       // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnBangStateChanged(bool bEnabled, int32 Count);
	void OnStartCallout(class FName TutorialObjectiveName, ETutorialType TutorialType);
	void OnStopCallout();
	void OnTutorialCalloutFinished();
	void SetBangStateBP(bool bEnabled, int32 Count);
	void SetBangType(EFortBangType NewBangType);
	void SetTutorialNameID(class FName InTutorialNameID);
	void UnregisterTutorialNameID();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBangWrapper_NUI">();
	}
	static class UFortBangWrapper_NUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBangWrapper_NUI>();
	}
};
static_assert(alignof(UFortBangWrapper_NUI) == 0x000008, "Wrong alignment on UFortBangWrapper_NUI");
static_assert(sizeof(UFortBangWrapper_NUI) == 0x000258, "Wrong size on UFortBangWrapper_NUI");
static_assert(offsetof(UFortBangWrapper_NUI, BangType) == 0x000240, "Member 'UFortBangWrapper_NUI::BangType' has a wrong offset!");
static_assert(offsetof(UFortBangWrapper_NUI, TutorialNameID) == 0x000244, "Member 'UFortBangWrapper_NUI::TutorialNameID' has a wrong offset!");
static_assert(offsetof(UFortBangWrapper_NUI, ContentSlot) == 0x000250, "Member 'UFortBangWrapper_NUI::ContentSlot' has a wrong offset!");

// Class FortniteUI.FortHeroLoadoutHeroPickerFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UFortHeroLoadoutHeroPickerFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHeroLoadoutHeroPickerFunctionLibrary">();
	}
	static class UFortHeroLoadoutHeroPickerFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHeroLoadoutHeroPickerFunctionLibrary>();
	}
};
static_assert(alignof(UFortHeroLoadoutHeroPickerFunctionLibrary) == 0x000008, "Wrong alignment on UFortHeroLoadoutHeroPickerFunctionLibrary");
static_assert(sizeof(UFortHeroLoadoutHeroPickerFunctionLibrary) == 0x000028, "Wrong size on UFortHeroLoadoutHeroPickerFunctionLibrary");

// Class FortniteUI.FortUIMessagesPageBase
// 0x0028 (0x0348 - 0x0320)
class UFortUIMessagesPageBase final : public UCommonActivatablePanel
{
public:
	int32                                         MaximumMessagesShown;                              // 0x0320(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonListView*                        MessagesList;                                      // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_330[0x8];                                      // 0x0330(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortUINotification*>            MessagesShown;                                     // 0x0338(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	void FillMessagesList();
	void OnMessageAvailable();
	void OnNotificationCleared(class UFortUINotification* ClearedMessage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIMessagesPageBase">();
	}
	static class UFortUIMessagesPageBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIMessagesPageBase>();
	}
};
static_assert(alignof(UFortUIMessagesPageBase) == 0x000008, "Wrong alignment on UFortUIMessagesPageBase");
static_assert(sizeof(UFortUIMessagesPageBase) == 0x000348, "Wrong size on UFortUIMessagesPageBase");
static_assert(offsetof(UFortUIMessagesPageBase, MaximumMessagesShown) == 0x000320, "Member 'UFortUIMessagesPageBase::MaximumMessagesShown' has a wrong offset!");
static_assert(offsetof(UFortUIMessagesPageBase, MessagesList) == 0x000328, "Member 'UFortUIMessagesPageBase::MessagesList' has a wrong offset!");
static_assert(offsetof(UFortUIMessagesPageBase, MessagesShown) == 0x000338, "Member 'UFortUIMessagesPageBase::MessagesShown' has a wrong offset!");

// Class FortniteUI.FortBangWrapperContentButton
// 0x0018 (0x0B48 - 0x0B30)
class UFortBangWrapperContentButton final : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x18];                                     // 0x0B30(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FinishTutorialCallout();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBangWrapperContentButton">();
	}
	static class UFortBangWrapperContentButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBangWrapperContentButton>();
	}
};
static_assert(alignof(UFortBangWrapperContentButton) == 0x000008, "Wrong alignment on UFortBangWrapperContentButton");
static_assert(sizeof(UFortBangWrapperContentButton) == 0x000B48, "Wrong size on UFortBangWrapperContentButton");

// Class FortniteUI.FortBangWrapperContentInterface
// 0x0000 (0x0028 - 0x0028)
class IFortBangWrapperContentInterface final : public IInterface
{
public:
	void OnBangStateChanged(bool bEnabled, int32 Count);
	void OnStartCallout(class FName TutorialObjectiveName, ETutorialType TutorialType);
	void OnStopCallout();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBangWrapperContentInterface">();
	}
	static class IFortBangWrapperContentInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFortBangWrapperContentInterface>();
	}
};
static_assert(alignof(IFortBangWrapperContentInterface) == 0x000008, "Wrong alignment on IFortBangWrapperContentInterface");
static_assert(sizeof(IFortBangWrapperContentInterface) == 0x000028, "Wrong size on IFortBangWrapperContentInterface");

// Class FortniteUI.FortBangWrapperContentWidget
// 0x0018 (0x0250 - 0x0238)
class UFortBangWrapperContentWidget final : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x18];                                     // 0x0238(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FinishTutorialCallout();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBangWrapperContentWidget">();
	}
	static class UFortBangWrapperContentWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBangWrapperContentWidget>();
	}
};
static_assert(alignof(UFortBangWrapperContentWidget) == 0x000008, "Wrong alignment on UFortBangWrapperContentWidget");
static_assert(sizeof(UFortBangWrapperContentWidget) == 0x000250, "Wrong size on UFortBangWrapperContentWidget");

// Class FortniteUI.FortBannerSelectorBase
// 0x0070 (0x0390 - 0x0320)
class UFortBannerSelectorBase : public UCommonActivatablePanel
{
public:
	class UEditableText*                          BannerName;                                        // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BannerNameMaxLength;                               // 0x0328(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBorder*                                ErrorBorder;                                       // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       ErrorText;                                         // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFilterHomeBaseNameWithOSS;                        // 0x0340(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_341[0x4F];                                     // 0x0341(0x004F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CompleteHomebaseBannerSelection();
	void CompleteHomebaseName();
	void HandleBannerNameChanged(const class FText& Text);
	void OnHomebaseNameCommitFailed();
	void OnHomebaseNameCommitSucceeded();
	void UpdateErrorText(const class FText& ErrorMessageText);

	bool HasIllegalChars(const class FString& NewBannerName) const;
	void IsPlayerNameValid(const class FText& PlayerName, bool* OutIsValid, class FText* OutErrorText) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBannerSelectorBase">();
	}
	static class UFortBannerSelectorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBannerSelectorBase>();
	}
};
static_assert(alignof(UFortBannerSelectorBase) == 0x000008, "Wrong alignment on UFortBannerSelectorBase");
static_assert(sizeof(UFortBannerSelectorBase) == 0x000390, "Wrong size on UFortBannerSelectorBase");
static_assert(offsetof(UFortBannerSelectorBase, BannerName) == 0x000320, "Member 'UFortBannerSelectorBase::BannerName' has a wrong offset!");
static_assert(offsetof(UFortBannerSelectorBase, BannerNameMaxLength) == 0x000328, "Member 'UFortBannerSelectorBase::BannerNameMaxLength' has a wrong offset!");
static_assert(offsetof(UFortBannerSelectorBase, ErrorBorder) == 0x000330, "Member 'UFortBannerSelectorBase::ErrorBorder' has a wrong offset!");
static_assert(offsetof(UFortBannerSelectorBase, ErrorText) == 0x000338, "Member 'UFortBannerSelectorBase::ErrorText' has a wrong offset!");
static_assert(offsetof(UFortBannerSelectorBase, bFilterHomeBaseNameWithOSS) == 0x000340, "Member 'UFortBannerSelectorBase::bFilterHomeBaseNameWithOSS' has a wrong offset!");

// Class FortniteUI.FortItemDisplayNameText
// 0x0030 (0x02F0 - 0x02C0)
class UFortItemDisplayNameText final : public UCommonTextBlock
{
public:
	TWeakObjectPtr<class UFortItem>               ItemToRepresent;                                   // 0x02C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C8[0x28];                                     // 0x02C8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetItemToRepresent(class UFortItem* Param_ItemToRepresent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemDisplayNameText">();
	}
	static class UFortItemDisplayNameText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemDisplayNameText>();
	}
};
static_assert(alignof(UFortItemDisplayNameText) == 0x000008, "Wrong alignment on UFortItemDisplayNameText");
static_assert(sizeof(UFortItemDisplayNameText) == 0x0002F0, "Wrong size on UFortItemDisplayNameText");
static_assert(offsetof(UFortItemDisplayNameText, ItemToRepresent) == 0x0002C0, "Member 'UFortItemDisplayNameText::ItemToRepresent' has a wrong offset!");

// Class FortniteUI.FortButtonStyle
// 0x1A00 (0x1A28 - 0x0028)
class UFortButtonStyle final : public UObject
{
public:
	struct FFortStateStyle                        NormalBase;                                        // 0x0028(0x0350)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortStateStyle                        NormalHovered;                                     // 0x0378(0x0350)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortStateStyle                        NormalPressed;                                     // 0x06C8(0x0350)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortStateStyle                        SelectedBase;                                      // 0x0A18(0x0350)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortStateStyle                        SelectedHovered;                                   // 0x0D68(0x0350)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortStateStyle                        SelectedPressed;                                   // 0x10B8(0x0350)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortStateStyle                        Disabled;                                          // 0x1408(0x0350)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortMultiSizeMargin                   ButtonPadding;                                     // 0x1758(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortMultiSizeFont                     Font;                                              // 0x17B8(0x01E0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortMultiSizeMargin                   CustomPadding;                                     // 0x1998(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            PressedSlateSound;                                 // 0x19F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            HoveredSlateSound;                                 // 0x1A10(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)

public:
	static const struct FSlateBrush GetBrushBySizeFromMultiSizeBrush(const struct FFortMultiSizeBrush& MultiSizeBrush, EFortBrushSize Size);
	static const struct FSlateFontInfo GetFontBySizeFromMultiSizeFont(const struct FFortMultiSizeFont& MultiSizeFont, EFortBrushSize Size);
	static const struct FMargin GetMarginBySizeFromMultiSizeMargin(const struct FFortMultiSizeMargin& MultiSizeMargin, EFortBrushSize Size);

	const struct FMargin GetButtonPaddingBySize(EFortBrushSize Size) const;
	const struct FMargin GetCustomPaddingBySize(EFortBrushSize Size) const;
	const struct FSlateFontInfo GetFontBySize(EFortBrushSize Size) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortButtonStyle">();
	}
	static class UFortButtonStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortButtonStyle>();
	}
};
static_assert(alignof(UFortButtonStyle) == 0x000008, "Wrong alignment on UFortButtonStyle");
static_assert(sizeof(UFortButtonStyle) == 0x001A28, "Wrong size on UFortButtonStyle");
static_assert(offsetof(UFortButtonStyle, NormalBase) == 0x000028, "Member 'UFortButtonStyle::NormalBase' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, NormalHovered) == 0x000378, "Member 'UFortButtonStyle::NormalHovered' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, NormalPressed) == 0x0006C8, "Member 'UFortButtonStyle::NormalPressed' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, SelectedBase) == 0x000A18, "Member 'UFortButtonStyle::SelectedBase' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, SelectedHovered) == 0x000D68, "Member 'UFortButtonStyle::SelectedHovered' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, SelectedPressed) == 0x0010B8, "Member 'UFortButtonStyle::SelectedPressed' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, Disabled) == 0x001408, "Member 'UFortButtonStyle::Disabled' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, ButtonPadding) == 0x001758, "Member 'UFortButtonStyle::ButtonPadding' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, Font) == 0x0017B8, "Member 'UFortButtonStyle::Font' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, CustomPadding) == 0x001998, "Member 'UFortButtonStyle::CustomPadding' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, PressedSlateSound) == 0x0019F8, "Member 'UFortButtonStyle::PressedSlateSound' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, HoveredSlateSound) == 0x001A10, "Member 'UFortButtonStyle::HoveredSlateSound' has a wrong offset!");

// Class FortniteUI.FortMaterialProgressBar
// 0x0138 (0x0370 - 0x0238)
class UFortMaterialProgressBar : public UCommonUserWidget
{
public:
	TSubclassOf<class UFortMaterialProgressBarStyle> Style;                                             // 0x0238(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   BackgroundColorParamName;                          // 0x0240(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           BackgroundColor;                                   // 0x0248(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortMaterialProgressBarSectionOverflowBehavior OverflowBehavior;                                  // 0x0258(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortMaterialProgressBarSectionInfo    BarSectionInfo[0x4];                               // 0x025C(0x0040)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonBorder*                          ProgressBar;                                       // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               ProgressBarMID;                                    // 0x0368(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetBackgroundColor(const struct FLinearColor& Color);
	void SetProgressBarSectionColor(EFortMaterialProgressBarSection BarSection, const struct FLinearColor& Color, EFortMaterialProgressBarSectionColorNumber ColorNumber);
	void SetProgressBarSectionPercent(EFortMaterialProgressBarSection BarSection, float Percent);
	void SetStyle(TSubclassOf<class UFortMaterialProgressBarStyle> BarStyle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMaterialProgressBar">();
	}
	static class UFortMaterialProgressBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMaterialProgressBar>();
	}
};
static_assert(alignof(UFortMaterialProgressBar) == 0x000008, "Wrong alignment on UFortMaterialProgressBar");
static_assert(sizeof(UFortMaterialProgressBar) == 0x000370, "Wrong size on UFortMaterialProgressBar");
static_assert(offsetof(UFortMaterialProgressBar, Style) == 0x000238, "Member 'UFortMaterialProgressBar::Style' has a wrong offset!");
static_assert(offsetof(UFortMaterialProgressBar, BackgroundColorParamName) == 0x000240, "Member 'UFortMaterialProgressBar::BackgroundColorParamName' has a wrong offset!");
static_assert(offsetof(UFortMaterialProgressBar, BackgroundColor) == 0x000248, "Member 'UFortMaterialProgressBar::BackgroundColor' has a wrong offset!");
static_assert(offsetof(UFortMaterialProgressBar, OverflowBehavior) == 0x000258, "Member 'UFortMaterialProgressBar::OverflowBehavior' has a wrong offset!");
static_assert(offsetof(UFortMaterialProgressBar, BarSectionInfo) == 0x00025C, "Member 'UFortMaterialProgressBar::BarSectionInfo' has a wrong offset!");
static_assert(offsetof(UFortMaterialProgressBar, ProgressBar) == 0x000360, "Member 'UFortMaterialProgressBar::ProgressBar' has a wrong offset!");
static_assert(offsetof(UFortMaterialProgressBar, ProgressBarMID) == 0x000368, "Member 'UFortMaterialProgressBar::ProgressBarMID' has a wrong offset!");

// Class FortniteUI.FortBaseButton
// 0x05C0 (0x0800 - 0x0240)
class UFortBaseButton : public UFortUserWidget
{
public:
	uint8                                         Pad_240[0x8];                                      // 0x0240(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   EnabledChanged;                                    // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   SelectedChanged;                                   // 0x0258(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   ButtonClicked;                                     // 0x0268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EFortBangSize                                 BangSize;                                          // 0x0278(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              BangOffset;                                        // 0x027C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortBangType                                 BangType;                                          // 0x0284(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_285[0x3];                                      // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TutorialNameID;                                    // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortTutorialGlowType                         TutorialGlowType;                                  // 0x0290(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortButtonStyle>           Style;                                             // 0x0298(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortBrushSize                                BrushSize;                                         // 0x02A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateSound                            PressedSlateSoundOverride;                         // 0x02A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSlateSound                            HoveredSlateSoundOverride;                         // 0x02C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bSelectable;                                       // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SelectionGroup;                                    // 0x02DC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bToggleable;                                       // 0x02E4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bClickable;                                        // 0x02E5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EButtonClickMethod                            ClickMethod;                                       // 0x02E6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E7[0x519];                                    // 0x02E7(0x0519)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForceClick();
	int32 GetSelectionGroupIndex();
	void OnButtonClicked();
	void SetBangVisibility(bool bVisible);
	void SetBrushSize(EFortBrushSize InSize);
	void SetClickable(bool InClickable);
	void SetClickMethod(EButtonClickMethod InClickMethod);
	void SetHovered(bool InHovered);
	void SetSelected(bool InSelected);
	void SetSelectionGroup(class FName InSelectionGroup);
	void SetStyle(TSubclassOf<class UFortButtonStyle> InStyle);

	const struct FMargin GetCurrentButtonPadding() const;
	const struct FMargin GetCurrentCustomPadding() const;
	const struct FSlateFontInfo GetCurrentFont() const;
	const struct FFortStateStyle GetCurrentStateStyle() const;
	bool GetSelected() const;
	class UFortButtonStyle* GetStyle() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBaseButton">();
	}
	static class UFortBaseButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBaseButton>();
	}
};
static_assert(alignof(UFortBaseButton) == 0x000008, "Wrong alignment on UFortBaseButton");
static_assert(sizeof(UFortBaseButton) == 0x000800, "Wrong size on UFortBaseButton");
static_assert(offsetof(UFortBaseButton, EnabledChanged) == 0x000248, "Member 'UFortBaseButton::EnabledChanged' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, SelectedChanged) == 0x000258, "Member 'UFortBaseButton::SelectedChanged' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, ButtonClicked) == 0x000268, "Member 'UFortBaseButton::ButtonClicked' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, BangSize) == 0x000278, "Member 'UFortBaseButton::BangSize' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, BangOffset) == 0x00027C, "Member 'UFortBaseButton::BangOffset' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, BangType) == 0x000284, "Member 'UFortBaseButton::BangType' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, TutorialNameID) == 0x000288, "Member 'UFortBaseButton::TutorialNameID' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, TutorialGlowType) == 0x000290, "Member 'UFortBaseButton::TutorialGlowType' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, Style) == 0x000298, "Member 'UFortBaseButton::Style' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, BrushSize) == 0x0002A0, "Member 'UFortBaseButton::BrushSize' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, PressedSlateSoundOverride) == 0x0002A8, "Member 'UFortBaseButton::PressedSlateSoundOverride' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, HoveredSlateSoundOverride) == 0x0002C0, "Member 'UFortBaseButton::HoveredSlateSoundOverride' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, bSelectable) == 0x0002D8, "Member 'UFortBaseButton::bSelectable' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, SelectionGroup) == 0x0002DC, "Member 'UFortBaseButton::SelectionGroup' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, bToggleable) == 0x0002E4, "Member 'UFortBaseButton::bToggleable' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, bClickable) == 0x0002E5, "Member 'UFortBaseButton::bClickable' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, ClickMethod) == 0x0002E6, "Member 'UFortBaseButton::ClickMethod' has a wrong offset!");

// Class FortniteUI.FortBluGloCounter
// 0x0008 (0x0248 - 0x0240)
class UFortBluGloCounter final : public UFortUserWidget
{
public:
	uint8                                         Pad_240[0x8];                                      // 0x0240(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBluGloQuantityChanged(int32 Quantity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBluGloCounter">();
	}
	static class UFortBluGloCounter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBluGloCounter>();
	}
};
static_assert(alignof(UFortBluGloCounter) == 0x000008, "Wrong alignment on UFortBluGloCounter");
static_assert(sizeof(UFortBluGloCounter) == 0x000248, "Wrong size on UFortBluGloCounter");

// Class FortniteUI.FortBorderStyleList
// 0x0008 (0x0240 - 0x0238)
class UFortBorderStyleList final : public UCommonUserWidget
{
public:
	class FName                                   BordersPath;                                       // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TArray<TSoftClassPtr<class UClass>> GetBorderStyles() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBorderStyleList">();
	}
	static class UFortBorderStyleList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBorderStyleList>();
	}
};
static_assert(alignof(UFortBorderStyleList) == 0x000008, "Wrong alignment on UFortBorderStyleList");
static_assert(sizeof(UFortBorderStyleList) == 0x000240, "Wrong size on UFortBorderStyleList");
static_assert(offsetof(UFortBorderStyleList, BordersPath) == 0x000238, "Member 'UFortBorderStyleList::BordersPath' has a wrong offset!");

// Class FortniteUI.FortBuildingInfoIndicatorWidget
// 0x0000 (0x02A0 - 0x02A0)
class UFortBuildingInfoIndicatorWidget final : public UFortActorIndicatorWidget
{
public:
	void SetKeyBindWidgetBoundAction(class UFortKeybindWidget* FortKeybindWidget, const class FName ActionName, const EFortBuildingInteraction InteractionType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBuildingInfoIndicatorWidget">();
	}
	static class UFortBuildingInfoIndicatorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBuildingInfoIndicatorWidget>();
	}
};
static_assert(alignof(UFortBuildingInfoIndicatorWidget) == 0x000008, "Wrong alignment on UFortBuildingInfoIndicatorWidget");
static_assert(sizeof(UFortBuildingInfoIndicatorWidget) == 0x0002A0, "Wrong size on UFortBuildingInfoIndicatorWidget");

// Class FortniteUI.FortButtonInternalWidget
// 0x0018 (0x0440 - 0x0428)
class UFortButtonInternalWidget final : public UButton
{
public:
	bool                                          IsClickable;                                       // 0x0428(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_429[0x17];                                     // 0x0429(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortButtonInternalWidget">();
	}
	static class UFortButtonInternalWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortButtonInternalWidget>();
	}
};
static_assert(alignof(UFortButtonInternalWidget) == 0x000008, "Wrong alignment on UFortButtonInternalWidget");
static_assert(sizeof(UFortButtonInternalWidget) == 0x000440, "Wrong size on UFortButtonInternalWidget");
static_assert(offsetof(UFortButtonInternalWidget, IsClickable) == 0x000428, "Member 'UFortButtonInternalWidget::IsClickable' has a wrong offset!");

// Class FortniteUI.FortCampaignTeamMemberStatEntry
// 0x0028 (0x0260 - 0x0238)
class UFortCampaignTeamMemberStatEntry final : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x18];                                     // 0x0238(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_StatValue;                                    // 0x0250(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_BaseStatValue;                                // 0x0258(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCampaignTeamMemberStatEntry">();
	}
	static class UFortCampaignTeamMemberStatEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCampaignTeamMemberStatEntry>();
	}
};
static_assert(alignof(UFortCampaignTeamMemberStatEntry) == 0x000008, "Wrong alignment on UFortCampaignTeamMemberStatEntry");
static_assert(sizeof(UFortCampaignTeamMemberStatEntry) == 0x000260, "Wrong size on UFortCampaignTeamMemberStatEntry");
static_assert(offsetof(UFortCampaignTeamMemberStatEntry, Text_StatValue) == 0x000250, "Member 'UFortCampaignTeamMemberStatEntry::Text_StatValue' has a wrong offset!");
static_assert(offsetof(UFortCampaignTeamMemberStatEntry, Text_BaseStatValue) == 0x000258, "Member 'UFortCampaignTeamMemberStatEntry::Text_BaseStatValue' has a wrong offset!");

// Class FortniteUI.FortFeatureUnlockWidget
// 0x0030 (0x0378 - 0x0348)
class UFortFeatureUnlockWidget : public UFortActivatablePanel
{
public:
	class UCommonWidgetSwitcher*                  MediaSwitcher;                                     // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                VideoContent;                                      // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                ImageContent;                                      // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortVideoPlayerWidget*                 VideoWidget;                                       // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonLazyImage*                       ImageWidget;                                       // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_370[0x8];                                      // 0x0370(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RefreshDataBP();
	void SetData(const class FString& HomebaseNodeTemplateId);
	void UpdateAsset();

	class FText GetDescription() const;
	TSoftObjectPtr<class UTexture2D> GetLargeIcon() const;
	TSoftObjectPtr<class UTexture2D> GetSmallIcon() const;
	class FText GetTitle() const;
	class UMediaSource* GetVideo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortFeatureUnlockWidget">();
	}
	static class UFortFeatureUnlockWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortFeatureUnlockWidget>();
	}
};
static_assert(alignof(UFortFeatureUnlockWidget) == 0x000008, "Wrong alignment on UFortFeatureUnlockWidget");
static_assert(sizeof(UFortFeatureUnlockWidget) == 0x000378, "Wrong size on UFortFeatureUnlockWidget");
static_assert(offsetof(UFortFeatureUnlockWidget, MediaSwitcher) == 0x000348, "Member 'UFortFeatureUnlockWidget::MediaSwitcher' has a wrong offset!");
static_assert(offsetof(UFortFeatureUnlockWidget, VideoContent) == 0x000350, "Member 'UFortFeatureUnlockWidget::VideoContent' has a wrong offset!");
static_assert(offsetof(UFortFeatureUnlockWidget, ImageContent) == 0x000358, "Member 'UFortFeatureUnlockWidget::ImageContent' has a wrong offset!");
static_assert(offsetof(UFortFeatureUnlockWidget, VideoWidget) == 0x000360, "Member 'UFortFeatureUnlockWidget::VideoWidget' has a wrong offset!");
static_assert(offsetof(UFortFeatureUnlockWidget, ImageWidget) == 0x000368, "Member 'UFortFeatureUnlockWidget::ImageWidget' has a wrong offset!");

// Class FortniteUI.FortSubsystemNameDisplay
// 0x0010 (0x0240 - 0x0230)
class UFortSubsystemNameDisplay : public UUserWidget
{
public:
	class UCommonTextBlock*                       Text_PlatformDisplayName;                          // 0x0230(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 Image_PlatformIcon;                                // 0x0238(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSubsystemNameDisplay">();
	}
	static class UFortSubsystemNameDisplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSubsystemNameDisplay>();
	}
};
static_assert(alignof(UFortSubsystemNameDisplay) == 0x000008, "Wrong alignment on UFortSubsystemNameDisplay");
static_assert(sizeof(UFortSubsystemNameDisplay) == 0x000240, "Wrong size on UFortSubsystemNameDisplay");
static_assert(offsetof(UFortSubsystemNameDisplay, Text_PlatformDisplayName) == 0x000230, "Member 'UFortSubsystemNameDisplay::Text_PlatformDisplayName' has a wrong offset!");
static_assert(offsetof(UFortSubsystemNameDisplay, Image_PlatformIcon) == 0x000238, "Member 'UFortSubsystemNameDisplay::Image_PlatformIcon' has a wrong offset!");

// Class FortniteUI.FortCampaignTeamMemberEntry
// 0x0008 (0x0278 - 0x0270)
class UFortCampaignTeamMemberEntry final : public UFortBasicTeamMemberEntry
{
public:
	class UDynamicEntryBox*                       EntryBox_MemberStats;                              // 0x0270(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnPlayerAttributesChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCampaignTeamMemberEntry">();
	}
	static class UFortCampaignTeamMemberEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCampaignTeamMemberEntry>();
	}
};
static_assert(alignof(UFortCampaignTeamMemberEntry) == 0x000008, "Wrong alignment on UFortCampaignTeamMemberEntry");
static_assert(sizeof(UFortCampaignTeamMemberEntry) == 0x000278, "Wrong size on UFortCampaignTeamMemberEntry");
static_assert(offsetof(UFortCampaignTeamMemberEntry, EntryBox_MemberStats) == 0x000270, "Member 'UFortCampaignTeamMemberEntry::EntryBox_MemberStats' has a wrong offset!");

// Class FortniteUI.FortMaterialProgressBarStyle
// 0x0108 (0x0130 - 0x0028)
class UFortMaterialProgressBarStyle final : public UObject
{
public:
	class FName                                   BackgroundColorParamName;                          // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortMaterialProgressBarSectionStyle   BarSectionStyles[0x4];                             // 0x0040(0x003C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMaterialProgressBarStyle">();
	}
	static class UFortMaterialProgressBarStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMaterialProgressBarStyle>();
	}
};
static_assert(alignof(UFortMaterialProgressBarStyle) == 0x000008, "Wrong alignment on UFortMaterialProgressBarStyle");
static_assert(sizeof(UFortMaterialProgressBarStyle) == 0x000130, "Wrong size on UFortMaterialProgressBarStyle");
static_assert(offsetof(UFortMaterialProgressBarStyle, BackgroundColorParamName) == 0x000028, "Member 'UFortMaterialProgressBarStyle::BackgroundColorParamName' has a wrong offset!");
static_assert(offsetof(UFortMaterialProgressBarStyle, BackgroundColor) == 0x000030, "Member 'UFortMaterialProgressBarStyle::BackgroundColor' has a wrong offset!");
static_assert(offsetof(UFortMaterialProgressBarStyle, BarSectionStyles) == 0x000040, "Member 'UFortMaterialProgressBarStyle::BarSectionStyles' has a wrong offset!");

// Class FortniteUI.FortShowdownTournamentTile
// 0x0038 (0x0B68 - 0x0B30)
class UFortShowdownTournamentTile : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x10];                                     // 0x0B30(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortShowdownDetailView*                ShowdownDetailView_Violator;                       // 0x0B40(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortShowdownDetailView*                ShowdownDetailView_Poster;                         // 0x0B48(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B50[0x18];                                     // 0x0B50(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetTileTournament();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortShowdownTournamentTile">();
	}
	static class UFortShowdownTournamentTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortShowdownTournamentTile>();
	}
};
static_assert(alignof(UFortShowdownTournamentTile) == 0x000008, "Wrong alignment on UFortShowdownTournamentTile");
static_assert(sizeof(UFortShowdownTournamentTile) == 0x000B68, "Wrong size on UFortShowdownTournamentTile");
static_assert(offsetof(UFortShowdownTournamentTile, ShowdownDetailView_Violator) == 0x000B40, "Member 'UFortShowdownTournamentTile::ShowdownDetailView_Violator' has a wrong offset!");
static_assert(offsetof(UFortShowdownTournamentTile, ShowdownDetailView_Poster) == 0x000B48, "Member 'UFortShowdownTournamentTile::ShowdownDetailView_Poster' has a wrong offset!");

// Class FortniteUI.FortCapturePointWidget
// 0x0010 (0x0250 - 0x0240)
class UFortCapturePointWidget final : public UFortUserWidget
{
public:
	uint8                                         Pad_240[0x10];                                     // 0x0240(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCapturePointDataChanged(bool bActivated, bool bLocked, float CapturePercentage, ECaptureState CaptureState, uint8 ControllingTeam);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCapturePointWidget">();
	}
	static class UFortCapturePointWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCapturePointWidget>();
	}
};
static_assert(alignof(UFortCapturePointWidget) == 0x000008, "Wrong alignment on UFortCapturePointWidget");
static_assert(sizeof(UFortCapturePointWidget) == 0x000250, "Wrong size on UFortCapturePointWidget");

// Class FortniteUI.FortChatContainer
// 0x0048 (0x02D0 - 0x0288)
class UFortChatContainer : public USocialChatContainer
{
public:
	uint8                                         Pad_288[0x18];                                     // 0x0288(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class USocialChatChannel>      CacheChannelForPlatformMessage;                    // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A8[0x8];                                      // 0x02A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USocialChatChannel*                     CombinedChannel;                                   // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortSocialInteractionMenu> ActionMenuClass;                                   // 0x02B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortSocialInteractionMenu*             ActionMenu;                                        // 0x02C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMenuAnchor*                            MenuAnchor_MessageActions;                         // 0x02C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UWidget* HandleGetMenuContentForAnchor();
	void OnSendButtonDisplayChanged(bool bShowSendButton);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortChatContainer">();
	}
	static class UFortChatContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortChatContainer>();
	}
};
static_assert(alignof(UFortChatContainer) == 0x000008, "Wrong alignment on UFortChatContainer");
static_assert(sizeof(UFortChatContainer) == 0x0002D0, "Wrong size on UFortChatContainer");
static_assert(offsetof(UFortChatContainer, CacheChannelForPlatformMessage) == 0x0002A0, "Member 'UFortChatContainer::CacheChannelForPlatformMessage' has a wrong offset!");
static_assert(offsetof(UFortChatContainer, CombinedChannel) == 0x0002B0, "Member 'UFortChatContainer::CombinedChannel' has a wrong offset!");
static_assert(offsetof(UFortChatContainer, ActionMenuClass) == 0x0002B8, "Member 'UFortChatContainer::ActionMenuClass' has a wrong offset!");
static_assert(offsetof(UFortChatContainer, ActionMenu) == 0x0002C0, "Member 'UFortChatContainer::ActionMenu' has a wrong offset!");
static_assert(offsetof(UFortChatContainer, MenuAnchor_MessageActions) == 0x0002C8, "Member 'UFortChatContainer::MenuAnchor_MessageActions' has a wrong offset!");

// Class FortniteUI.FortChatMessageEntry
// 0x0000 (0x0398 - 0x0398)
class UFortChatMessageEntry : public USocialChatMessageEntry
{
public:
	void OnFocusedChanged(bool bIsFocused);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortChatMessageEntry">();
	}
	static class UFortChatMessageEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortChatMessageEntry>();
	}
};
static_assert(alignof(UFortChatMessageEntry) == 0x000008, "Wrong alignment on UFortChatMessageEntry");
static_assert(sizeof(UFortChatMessageEntry) == 0x000398, "Wrong size on UFortChatMessageEntry");

// Class FortniteUI.FortChatPanel
// 0x0010 (0x0358 - 0x0348)
class UFortChatPanel : public UFortActivatablePanel
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortChatContainer*                     ChatContainer;                                     // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnWidgetIsOnFocusedPathChanged(bool bOnFocusPath);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortChatPanel">();
	}
	static class UFortChatPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortChatPanel>();
	}
};
static_assert(alignof(UFortChatPanel) == 0x000008, "Wrong alignment on UFortChatPanel");
static_assert(sizeof(UFortChatPanel) == 0x000358, "Wrong size on UFortChatPanel");
static_assert(offsetof(UFortChatPanel, ChatContainer) == 0x000350, "Member 'UFortChatPanel::ChatContainer' has a wrong offset!");

// Class FortniteUI.FortMainMenu
// 0x0040 (0x0278 - 0x0238)
class UFortMainMenu : public UCommonUserWidget
{
public:
	class FText                                   DefaultHelpText;                                   // 0x0238(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_250[0x10];                                     // 0x0250(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_CountDownTimer;                               // 0x0260(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonUserWidget*                      LeaveButton;                                       // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       ContextualHelpText;                                // 0x0270(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMainMenu">();
	}
	static class UFortMainMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMainMenu>();
	}
};
static_assert(alignof(UFortMainMenu) == 0x000008, "Wrong alignment on UFortMainMenu");
static_assert(sizeof(UFortMainMenu) == 0x000278, "Wrong size on UFortMainMenu");
static_assert(offsetof(UFortMainMenu, DefaultHelpText) == 0x000238, "Member 'UFortMainMenu::DefaultHelpText' has a wrong offset!");
static_assert(offsetof(UFortMainMenu, Text_CountDownTimer) == 0x000260, "Member 'UFortMainMenu::Text_CountDownTimer' has a wrong offset!");
static_assert(offsetof(UFortMainMenu, LeaveButton) == 0x000268, "Member 'UFortMainMenu::LeaveButton' has a wrong offset!");
static_assert(offsetof(UFortMainMenu, ContextualHelpText) == 0x000270, "Member 'UFortMainMenu::ContextualHelpText' has a wrong offset!");

// Class FortniteUI.FortSquadStatDetailsWidget
// 0x0030 (0x0268 - 0x0238)
class UFortSquadStatDetailsWidget : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x30];                                     // 0x0238(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadStatDetailsWidget">();
	}
	static class UFortSquadStatDetailsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadStatDetailsWidget>();
	}
};
static_assert(alignof(UFortSquadStatDetailsWidget) == 0x000008, "Wrong alignment on UFortSquadStatDetailsWidget");
static_assert(sizeof(UFortSquadStatDetailsWidget) == 0x000268, "Wrong size on UFortSquadStatDetailsWidget");

// Class FortniteUI.FortSurvivorSquadStatMatchesBase
// 0x0030 (0x0298 - 0x0268)
class UFortSurvivorSquadStatMatchesBase final : public UFortSquadStatDetailsWidget
{
public:
	TSubclassOf<class UFortSurvivorSquadStatMatchBase> StatMatchClass;                                    // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSummaryView;                                      // 0x0270(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortSurvivorSquadStatMatchBase*> StatMatches;                                       // 0x0278(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_288[0x10];                                     // 0x0288(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddStatMatch(class UFortSurvivorSquadStatMatchBase* SetBonus);
	void HandleDifferentSquadSetBP();
	void SetIdOfSquadToManageBP(const class FName& SquadId);
	void SetSummaryView(bool bInSummaryView);

	class FName GetIdOfSquadToManageBP() const;
	bool TryGetStaticSquadDataBP(struct FHomebaseSquad* OutSquadData) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSurvivorSquadStatMatchesBase">();
	}
	static class UFortSurvivorSquadStatMatchesBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSurvivorSquadStatMatchesBase>();
	}
};
static_assert(alignof(UFortSurvivorSquadStatMatchesBase) == 0x000008, "Wrong alignment on UFortSurvivorSquadStatMatchesBase");
static_assert(sizeof(UFortSurvivorSquadStatMatchesBase) == 0x000298, "Wrong size on UFortSurvivorSquadStatMatchesBase");
static_assert(offsetof(UFortSurvivorSquadStatMatchesBase, StatMatchClass) == 0x000268, "Member 'UFortSurvivorSquadStatMatchesBase::StatMatchClass' has a wrong offset!");
static_assert(offsetof(UFortSurvivorSquadStatMatchesBase, bSummaryView) == 0x000270, "Member 'UFortSurvivorSquadStatMatchesBase::bSummaryView' has a wrong offset!");
static_assert(offsetof(UFortSurvivorSquadStatMatchesBase, StatMatches) == 0x000278, "Member 'UFortSurvivorSquadStatMatchesBase::StatMatches' has a wrong offset!");

// Class FortniteUI.FortChatWidget
// 0x0048 (0x0160 - 0x0118)
class UFortChatWidget final : public UNativeWidgetHost
{
public:
	bool                                          MinimizeEnabled;                                   // 0x0118(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoReleaseFocus;                                  // 0x0119(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowEmotes;                                       // 0x011A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B[0x1];                                      // 0x011B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ListFadeTime;                                      // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimizedChatMessageNum;                           // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ThrottleChat;                                      // 0x0124(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThrottleTicketTime;                                // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThrottleTicketCount;                               // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnChatEnteredEvent;                                // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnUserListChanged;                                 // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x10];                                     // 0x0150(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FocusChatEntry();
	void MinimizeChatWidget();
	void SetControllerActionBrush(const struct FSlateBrush& SlateBrush);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortChatWidget">();
	}
	static class UFortChatWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortChatWidget>();
	}
};
static_assert(alignof(UFortChatWidget) == 0x000008, "Wrong alignment on UFortChatWidget");
static_assert(sizeof(UFortChatWidget) == 0x000160, "Wrong size on UFortChatWidget");
static_assert(offsetof(UFortChatWidget, MinimizeEnabled) == 0x000118, "Member 'UFortChatWidget::MinimizeEnabled' has a wrong offset!");
static_assert(offsetof(UFortChatWidget, AutoReleaseFocus) == 0x000119, "Member 'UFortChatWidget::AutoReleaseFocus' has a wrong offset!");
static_assert(offsetof(UFortChatWidget, AllowEmotes) == 0x00011A, "Member 'UFortChatWidget::AllowEmotes' has a wrong offset!");
static_assert(offsetof(UFortChatWidget, ListFadeTime) == 0x00011C, "Member 'UFortChatWidget::ListFadeTime' has a wrong offset!");
static_assert(offsetof(UFortChatWidget, MinimizedChatMessageNum) == 0x000120, "Member 'UFortChatWidget::MinimizedChatMessageNum' has a wrong offset!");
static_assert(offsetof(UFortChatWidget, ThrottleChat) == 0x000124, "Member 'UFortChatWidget::ThrottleChat' has a wrong offset!");
static_assert(offsetof(UFortChatWidget, ThrottleTicketTime) == 0x000128, "Member 'UFortChatWidget::ThrottleTicketTime' has a wrong offset!");
static_assert(offsetof(UFortChatWidget, ThrottleTicketCount) == 0x00012C, "Member 'UFortChatWidget::ThrottleTicketCount' has a wrong offset!");
static_assert(offsetof(UFortChatWidget, OnChatEnteredEvent) == 0x000130, "Member 'UFortChatWidget::OnChatEnteredEvent' has a wrong offset!");
static_assert(offsetof(UFortChatWidget, OnUserListChanged) == 0x000140, "Member 'UFortChatWidget::OnUserListChanged' has a wrong offset!");

// Class FortniteUI.FortCheatMenuFactory
// 0x0000 (0x0028 - 0x0028)
class UFortCheatMenuFactory final : public UObject
{
public:
	static void AddGrantCheatMenu(class UCommonUserWidget* Widget, const class FString& TemplateId, const class FString& InstanceId);
	static void AddStoreCheatMenu(class UCommonUserWidget* Widget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCheatMenuFactory">();
	}
	static class UFortCheatMenuFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCheatMenuFactory>();
	}
};
static_assert(alignof(UFortCheatMenuFactory) == 0x000008, "Wrong alignment on UFortCheatMenuFactory");
static_assert(sizeof(UFortCheatMenuFactory) == 0x000028, "Wrong size on UFortCheatMenuFactory");

// Class FortniteUI.FortCMSInfoCarousel
// 0x0088 (0x03D0 - 0x0348)
class UFortCMSInfoCarousel : public UFortActivatablePanel
{
public:
	TMap<class FString, TSubclassOf<class UEpicCMSSimpleMessage>> MessageWidgetLayoutMap;                            // 0x0348(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UCommonWidgetCarousel*                  Carousel;                                          // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonWidgetCarouselNavBar*            CarouselNavBar;                                    // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CMSInfoId;                                         // 0x03A8(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AutoScrollInterval;                                // 0x03B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3BC[0x14];                                     // 0x03BC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void NavigatePageLeft();
	void NavigatePageRight();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCMSInfoCarousel">();
	}
	static class UFortCMSInfoCarousel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCMSInfoCarousel>();
	}
};
static_assert(alignof(UFortCMSInfoCarousel) == 0x000008, "Wrong alignment on UFortCMSInfoCarousel");
static_assert(sizeof(UFortCMSInfoCarousel) == 0x0003D0, "Wrong size on UFortCMSInfoCarousel");
static_assert(offsetof(UFortCMSInfoCarousel, MessageWidgetLayoutMap) == 0x000348, "Member 'UFortCMSInfoCarousel::MessageWidgetLayoutMap' has a wrong offset!");
static_assert(offsetof(UFortCMSInfoCarousel, Carousel) == 0x000398, "Member 'UFortCMSInfoCarousel::Carousel' has a wrong offset!");
static_assert(offsetof(UFortCMSInfoCarousel, CarouselNavBar) == 0x0003A0, "Member 'UFortCMSInfoCarousel::CarouselNavBar' has a wrong offset!");
static_assert(offsetof(UFortCMSInfoCarousel, CMSInfoId) == 0x0003A8, "Member 'UFortCMSInfoCarousel::CMSInfoId' has a wrong offset!");
static_assert(offsetof(UFortCMSInfoCarousel, AutoScrollInterval) == 0x0003B8, "Member 'UFortCMSInfoCarousel::AutoScrollInterval' has a wrong offset!");

// Class FortniteUI.FortCollectionBookGenericRewardWidget
// 0x0018 (0x0250 - 0x0238)
class UFortCollectionBookGenericRewardWidget : public UCommonUserWidget
{
public:
	uint8                                         bUpdateVisibilityBasedOnRewardExistence : 1;       // 0x0238(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ESlateVisibility                              VisibilityWhenNoRewardSpecified;                   // 0x023C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              VisibilityWhenRewardSpecified;                     // 0x023D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_23E[0x2];                                      // 0x023E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortCollectionBookRewardCardWidget*    RewardCardWidget;                                  // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollectionBookRewardStatus                   RewardStatus;                                      // 0x0248(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearRewards();
	void OnRewardStatusChanged(ECollectionBookRewardStatus NewStatus);
	void SetCurrentItemToDisplay(class UFortItem* ItemToDisplay);
	void SetRewards(const struct FFortRewardInfo& Rewards);
	void SetRewardStatus(ECollectionBookRewardStatus Status);

	ECollectionBookRewardStatus GetRewardStatus() const;
	bool HasRewards() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookGenericRewardWidget">();
	}
	static class UFortCollectionBookGenericRewardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookGenericRewardWidget>();
	}
};
static_assert(alignof(UFortCollectionBookGenericRewardWidget) == 0x000008, "Wrong alignment on UFortCollectionBookGenericRewardWidget");
static_assert(sizeof(UFortCollectionBookGenericRewardWidget) == 0x000250, "Wrong size on UFortCollectionBookGenericRewardWidget");
static_assert(offsetof(UFortCollectionBookGenericRewardWidget, VisibilityWhenNoRewardSpecified) == 0x00023C, "Member 'UFortCollectionBookGenericRewardWidget::VisibilityWhenNoRewardSpecified' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookGenericRewardWidget, VisibilityWhenRewardSpecified) == 0x00023D, "Member 'UFortCollectionBookGenericRewardWidget::VisibilityWhenRewardSpecified' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookGenericRewardWidget, RewardCardWidget) == 0x000240, "Member 'UFortCollectionBookGenericRewardWidget::RewardCardWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookGenericRewardWidget, RewardStatus) == 0x000248, "Member 'UFortCollectionBookGenericRewardWidget::RewardStatus' has a wrong offset!");

// Class FortniteUI.FortExpeditionVehicleTileItemWidget
// 0x0010 (0x0B40 - 0x0B30)
class UFortExpeditionVehicleTileItemWidget : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UObject>                 SquadId;                                           // 0x0B38(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortExpeditionVehicleTileItemWidget">();
	}
	static class UFortExpeditionVehicleTileItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortExpeditionVehicleTileItemWidget>();
	}
};
static_assert(alignof(UFortExpeditionVehicleTileItemWidget) == 0x000008, "Wrong alignment on UFortExpeditionVehicleTileItemWidget");
static_assert(sizeof(UFortExpeditionVehicleTileItemWidget) == 0x000B40, "Wrong size on UFortExpeditionVehicleTileItemWidget");
static_assert(offsetof(UFortExpeditionVehicleTileItemWidget, SquadId) == 0x000B38, "Member 'UFortExpeditionVehicleTileItemWidget::SquadId' has a wrong offset!");

// Class FortniteUI.FortPopupMenu
// 0x0008 (0x0340 - 0x0338)
class UFortPopupMenu : public UCommonPopupMenu
{
public:
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPopupMenu">();
	}
	static class UFortPopupMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPopupMenu>();
	}
};
static_assert(alignof(UFortPopupMenu) == 0x000008, "Wrong alignment on UFortPopupMenu");
static_assert(sizeof(UFortPopupMenu) == 0x000340, "Wrong size on UFortPopupMenu");

// Class FortniteUI.FortItemCollectorWidget
// 0x0010 (0x0250 - 0x0240)
class UFortItemCollectorWidget final : public UFortUserWidget
{
public:
	class ABuildingItemCollectorActor*            ItemCollector;                                     // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_248[0x8];                                      // 0x0248(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnItemCollectorChanged(class ABuildingItemCollectorActor* OutItemCollector);
	void OnItemCollectorStateChanged(EFortItemCollectorState ItemCollectorState);
	void OnItemCollectorValuesChanged(class UFortWorldItemDefinition* InputItem, int32 Goal, int32 Deposit, int32 Captures);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemCollectorWidget">();
	}
	static class UFortItemCollectorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemCollectorWidget>();
	}
};
static_assert(alignof(UFortItemCollectorWidget) == 0x000008, "Wrong alignment on UFortItemCollectorWidget");
static_assert(sizeof(UFortItemCollectorWidget) == 0x000250, "Wrong size on UFortItemCollectorWidget");
static_assert(offsetof(UFortItemCollectorWidget, ItemCollector) == 0x000240, "Member 'UFortItemCollectorWidget::ItemCollector' has a wrong offset!");

// Class FortniteUI.FortCollectionBookItemPopupMenu
// 0x0008 (0x0348 - 0x0340)
class UFortCollectionBookItemPopupMenu final : public UFortPopupMenu
{
public:
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanItemBePurchased();
	bool CanItemBeUnslotted();
	void HandleItemChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);
	void HandleItemUpdated();

	class UFortCollectionBookSlotButton* GetHostButton() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookItemPopupMenu">();
	}
	static class UFortCollectionBookItemPopupMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookItemPopupMenu>();
	}
};
static_assert(alignof(UFortCollectionBookItemPopupMenu) == 0x000008, "Wrong alignment on UFortCollectionBookItemPopupMenu");
static_assert(sizeof(UFortCollectionBookItemPopupMenu) == 0x000348, "Wrong size on UFortCollectionBookItemPopupMenu");

// Class FortniteUI.FortCollectionBookOverviewWidget
// 0x0048 (0x0280 - 0x0238)
class UFortCollectionBookOverviewWidget final : public UCommonUserWidget
{
public:
	UMulticastDelegateProperty_                   OnCollectionBookPageSelected;                      // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnCollectionBookPageClicked;                       // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UFortCollectionBookPage*                LastSelectedPage;                                  // 0x0258(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortCollectionBookCategory*            LastSelectedCategory;                              // 0x0260(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UFortCollectionBookCategory*>    CategoryObjectPool;                                // 0x0268(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UCommonTreeView*                        PageTreeViewWidget;                                // 0x0278(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnActivated();
	void OnDeactivated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookOverviewWidget">();
	}
	static class UFortCollectionBookOverviewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookOverviewWidget>();
	}
};
static_assert(alignof(UFortCollectionBookOverviewWidget) == 0x000008, "Wrong alignment on UFortCollectionBookOverviewWidget");
static_assert(sizeof(UFortCollectionBookOverviewWidget) == 0x000280, "Wrong size on UFortCollectionBookOverviewWidget");
static_assert(offsetof(UFortCollectionBookOverviewWidget, OnCollectionBookPageSelected) == 0x000238, "Member 'UFortCollectionBookOverviewWidget::OnCollectionBookPageSelected' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookOverviewWidget, OnCollectionBookPageClicked) == 0x000248, "Member 'UFortCollectionBookOverviewWidget::OnCollectionBookPageClicked' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookOverviewWidget, LastSelectedPage) == 0x000258, "Member 'UFortCollectionBookOverviewWidget::LastSelectedPage' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookOverviewWidget, LastSelectedCategory) == 0x000260, "Member 'UFortCollectionBookOverviewWidget::LastSelectedCategory' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookOverviewWidget, CategoryObjectPool) == 0x000268, "Member 'UFortCollectionBookOverviewWidget::CategoryObjectPool' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookOverviewWidget, PageTreeViewWidget) == 0x000278, "Member 'UFortCollectionBookOverviewWidget::PageTreeViewWidget' has a wrong offset!");

// Class FortniteUI.FortItemMulchModeActivatablePanel
// 0x0010 (0x0368 - 0x0358)
class UFortItemMulchModeActivatablePanel final : public UFortItemDetailsActivatablePanel
{
public:
	class UFortItemManagementItemDetailsPanel*    MulchModeItemDetailsPanel;                         // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemManagementMulchDetailsPanel*   MulchDetailsPanel;                                 // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemMulchModeActivatablePanel">();
	}
	static class UFortItemMulchModeActivatablePanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemMulchModeActivatablePanel>();
	}
};
static_assert(alignof(UFortItemMulchModeActivatablePanel) == 0x000008, "Wrong alignment on UFortItemMulchModeActivatablePanel");
static_assert(sizeof(UFortItemMulchModeActivatablePanel) == 0x000368, "Wrong size on UFortItemMulchModeActivatablePanel");
static_assert(offsetof(UFortItemMulchModeActivatablePanel, MulchModeItemDetailsPanel) == 0x000358, "Member 'UFortItemMulchModeActivatablePanel::MulchModeItemDetailsPanel' has a wrong offset!");
static_assert(offsetof(UFortItemMulchModeActivatablePanel, MulchDetailsPanel) == 0x000360, "Member 'UFortItemMulchModeActivatablePanel::MulchDetailsPanel' has a wrong offset!");

// Class FortniteUI.FortCollectionBookPageCompletionRewardWidget
// 0x0000 (0x0250 - 0x0250)
class UFortCollectionBookPageCompletionRewardWidget final : public UFortCollectionBookGenericRewardWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookPageCompletionRewardWidget">();
	}
	static class UFortCollectionBookPageCompletionRewardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookPageCompletionRewardWidget>();
	}
};
static_assert(alignof(UFortCollectionBookPageCompletionRewardWidget) == 0x000008, "Wrong alignment on UFortCollectionBookPageCompletionRewardWidget");
static_assert(sizeof(UFortCollectionBookPageCompletionRewardWidget) == 0x000250, "Wrong size on UFortCollectionBookPageCompletionRewardWidget");

// Class FortniteUI.FortMainTabsScreenBase
// 0x0068 (0x0388 - 0x0320)
class UFortMainTabsScreenBase : public UCommonActivatablePanel
{
public:
	TMap<EFortUIFeature, class FName>             FeaturesTabsMap;                                   // 0x0320(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         TopTabContainer;                                   // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortTabListWidgetBase*                 TopTabList;                                        // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_380[0x8];                                      // 0x0380(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConstructTabs();
	void HandleFeatureNavigateRequest(EFortUIFeature Feature);
	void HandleFeatureStateChanged(EFortUIFeature ChangedFeature, EFortUIFeatureState NewState, EFortUIFeatureStateReason Reason);
	void HandleMainTabCreated(class FName TabNameID, class UCommonButton* TabButton);
	void HandleMainTabSelected(class FName TabNameID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMainTabsScreenBase">();
	}
	static class UFortMainTabsScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMainTabsScreenBase>();
	}
};
static_assert(alignof(UFortMainTabsScreenBase) == 0x000008, "Wrong alignment on UFortMainTabsScreenBase");
static_assert(sizeof(UFortMainTabsScreenBase) == 0x000388, "Wrong size on UFortMainTabsScreenBase");
static_assert(offsetof(UFortMainTabsScreenBase, FeaturesTabsMap) == 0x000320, "Member 'UFortMainTabsScreenBase::FeaturesTabsMap' has a wrong offset!");
static_assert(offsetof(UFortMainTabsScreenBase, TopTabContainer) == 0x000370, "Member 'UFortMainTabsScreenBase::TopTabContainer' has a wrong offset!");
static_assert(offsetof(UFortMainTabsScreenBase, TopTabList) == 0x000378, "Member 'UFortMainTabsScreenBase::TopTabList' has a wrong offset!");

// Class FortniteUI.FortLlamaStoreOfferWidgetBase
// 0x0048 (0x0B90 - 0x0B48)
class UFortLlamaStoreOfferWidgetBase final : public UFortStoreFrontOfferWidgetBase
{
public:
	uint8                                         Pad_B48[0x48];                                     // 0x0B48(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetCurrentRarity();
	void LoadInFinished();
	void OnOfferShown();
	void RequestPurchase(int32 Quantity);
	void RequestToInspect();
	void ShowHovered();
	void ShowInitialRarityState();
	void ShowRarity(int32 Rarity);
	void ShowUnhovered();
	void SilverUpgradeFinished();
	void UpgradeRarity(int32 RarityToUpgradeTo);
	void UpgradingFinished();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLlamaStoreOfferWidgetBase">();
	}
	static class UFortLlamaStoreOfferWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLlamaStoreOfferWidgetBase>();
	}
};
static_assert(alignof(UFortLlamaStoreOfferWidgetBase) == 0x000008, "Wrong alignment on UFortLlamaStoreOfferWidgetBase");
static_assert(sizeof(UFortLlamaStoreOfferWidgetBase) == 0x000B90, "Wrong size on UFortLlamaStoreOfferWidgetBase");

// Class FortniteUI.FortCollectionBookPageDetailsWidget
// 0x0070 (0x02A8 - 0x0238)
class UFortCollectionBookPageDetailsWidget final : public UCommonUserWidget
{
public:
	class UCommonTextBlock*                       PageCompletionText;                                // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortMaterialProgressBar*               ProgressBar;                                       // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCollectionBookPageCompletionRewardWidget* PageRewardWidget;                                  // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButton*                          RewardDetailsButton;                               // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCollectionBookPage*                DetailsPage;                                       // 0x0258(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   RewardDetailsModalWidgetClass;                     // 0x0260(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   ModalTitle;                                        // 0x0288(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class UFortCollectionBookRewardModalWidget*   RewardDetailsModalWidget;                          // 0x02A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleRewardDetailsModalWidgetDeactivated(class UCommonActivatablePanel* DeactivatedPanel);
	void OnDetailsPageChanged(const class UFortCollectionBookPage* InNewDetailsPage);
	void OnPageProgressionUpdated(int32 TotalFilledSlots, int32 TotalSlots, EFortCollectionBookState State);
	void OnSlotItemComplete(const class UFortAccountItem* SlottedItem, class FName SlotId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookPageDetailsWidget">();
	}
	static class UFortCollectionBookPageDetailsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookPageDetailsWidget>();
	}
};
static_assert(alignof(UFortCollectionBookPageDetailsWidget) == 0x000008, "Wrong alignment on UFortCollectionBookPageDetailsWidget");
static_assert(sizeof(UFortCollectionBookPageDetailsWidget) == 0x0002A8, "Wrong size on UFortCollectionBookPageDetailsWidget");
static_assert(offsetof(UFortCollectionBookPageDetailsWidget, PageCompletionText) == 0x000238, "Member 'UFortCollectionBookPageDetailsWidget::PageCompletionText' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPageDetailsWidget, ProgressBar) == 0x000240, "Member 'UFortCollectionBookPageDetailsWidget::ProgressBar' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPageDetailsWidget, PageRewardWidget) == 0x000248, "Member 'UFortCollectionBookPageDetailsWidget::PageRewardWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPageDetailsWidget, RewardDetailsButton) == 0x000250, "Member 'UFortCollectionBookPageDetailsWidget::RewardDetailsButton' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPageDetailsWidget, DetailsPage) == 0x000258, "Member 'UFortCollectionBookPageDetailsWidget::DetailsPage' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPageDetailsWidget, RewardDetailsModalWidgetClass) == 0x000260, "Member 'UFortCollectionBookPageDetailsWidget::RewardDetailsModalWidgetClass' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPageDetailsWidget, ModalTitle) == 0x000288, "Member 'UFortCollectionBookPageDetailsWidget::ModalTitle' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPageDetailsWidget, RewardDetailsModalWidget) == 0x0002A0, "Member 'UFortCollectionBookPageDetailsWidget::RewardDetailsModalWidget' has a wrong offset!");

// Class FortniteUI.FortPlayerProfileModalWidget
// 0x0000 (0x0348 - 0x0348)
class UFortPlayerProfileModalWidget : public UFortActivatablePanel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerProfileModalWidget">();
	}
	static class UFortPlayerProfileModalWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerProfileModalWidget>();
	}
};
static_assert(alignof(UFortPlayerProfileModalWidget) == 0x000008, "Wrong alignment on UFortPlayerProfileModalWidget");
static_assert(sizeof(UFortPlayerProfileModalWidget) == 0x000348, "Wrong size on UFortPlayerProfileModalWidget");

// Class FortniteUI.FortCollectionBookPageListWidget
// 0x0030 (0x0B60 - 0x0B30)
class UFortCollectionBookPageListWidget final : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       PageNameWidget;                                    // 0x0B38(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonNumericTextBlock*                AvailableSlotsWidget;                              // 0x0B40(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       PageCompletionWidget;                              // 0x0B48(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UObject>                 AssociatedPageOrCategory;                          // 0x0B50(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsExpanded;                                       // 0x0B58(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B59[0x7];                                      // 0x0B59(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCategoryDetailsUpdated(int32 AvailableSlots, int32 FilledSlots, int32 TotalSlots);
	void OnPageDetailsUpdated(int32 AvailableSlots, int32 FilledSlots, int32 TotalSlots, EFortCollectionBookState State);
	void OnSlotItemComplete(const class UFortAccountItem* SlottedItem, class FName SlotId);
	void SetupAsCategory(class UFortCollectionBookCategory* Category);
	void SetupAsPage(class UFortCollectionBookPage* Page);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookPageListWidget">();
	}
	static class UFortCollectionBookPageListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookPageListWidget>();
	}
};
static_assert(alignof(UFortCollectionBookPageListWidget) == 0x000008, "Wrong alignment on UFortCollectionBookPageListWidget");
static_assert(sizeof(UFortCollectionBookPageListWidget) == 0x000B60, "Wrong size on UFortCollectionBookPageListWidget");
static_assert(offsetof(UFortCollectionBookPageListWidget, PageNameWidget) == 0x000B38, "Member 'UFortCollectionBookPageListWidget::PageNameWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPageListWidget, AvailableSlotsWidget) == 0x000B40, "Member 'UFortCollectionBookPageListWidget::AvailableSlotsWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPageListWidget, PageCompletionWidget) == 0x000B48, "Member 'UFortCollectionBookPageListWidget::PageCompletionWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPageListWidget, AssociatedPageOrCategory) == 0x000B50, "Member 'UFortCollectionBookPageListWidget::AssociatedPageOrCategory' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPageListWidget, bIsExpanded) == 0x000B58, "Member 'UFortCollectionBookPageListWidget::bIsExpanded' has a wrong offset!");

// Class FortniteUI.FortCollectionBookPicker
// 0x0020 (0x0328 - 0x0308)
class UFortCollectionBookPicker final : public UFortItemPickerBase
{
public:
	UMulticastDelegateProperty_                   OnSlotItemConfirmationCompleteEvent;               // 0x0308(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_318[0x8];                                      // 0x0318(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAccountItem*                       CurrentSlottedItem;                                // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnSlotItemConfirmed__DelegateSignature(class UFortItem* ItemToSlot, class FName SlotId, const struct FFortDialogExternalLatentActionHandle& LatentActionHandle);
	void SlotItemConfirmationComplete(class UFortItem* CommittedItem, const struct FFortDialogExternalLatentActionHandle& LatentActionHandle);

	class UFortAccountItem* GetCurrentSlottedItem() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookPicker">();
	}
	static class UFortCollectionBookPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookPicker>();
	}
};
static_assert(alignof(UFortCollectionBookPicker) == 0x000008, "Wrong alignment on UFortCollectionBookPicker");
static_assert(sizeof(UFortCollectionBookPicker) == 0x000328, "Wrong size on UFortCollectionBookPicker");
static_assert(offsetof(UFortCollectionBookPicker, OnSlotItemConfirmationCompleteEvent) == 0x000308, "Member 'UFortCollectionBookPicker::OnSlotItemConfirmationCompleteEvent' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPicker, CurrentSlottedItem) == 0x000320, "Member 'UFortCollectionBookPicker::CurrentSlottedItem' has a wrong offset!");

// Class FortniteUI.FortPerkWidget_NUI
// 0x00C8 (0x0300 - 0x0238)
class UFortPerkWidget_NUI : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortUIPerk                            Perk;                                              // 0x0240(0x0098)(BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D8[0x8];                                      // 0x02D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortTooltipContext*                    CachedTooltipContext;                              // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E8[0x18];                                     // 0x02E8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFortTooltipContext* GetTooltipContext();
	void OnCombinedTooltipDescriptionReady(const class FText& Description);
	void OnPerkUpdated();
	void OnTooltipDescriptionReady(const TArray<class FText>& DescriptionList);
	void RequestCombinedTooltipDescription();
	void RequestTooltipDescription();
	void SetTooltipContext(const class UFortTooltipContext* InTooltipContext);

	bool GetIcon(struct FSlateBrush* Brush) const;
	EFortItemTier GetPerkTier() const;
	int32 GetRequiredLevel() const;
	EFortSupportBonusType GetSupportBonusType() const;
	class FText GetTooltipTitle() const;
	bool HasAbility() const;
	bool IsPerkEmpty() const;
	bool IsPerkHighlighted() const;
	bool IsPerkUnlocked() const;
	bool IsTierPerk() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPerkWidget_NUI">();
	}
	static class UFortPerkWidget_NUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPerkWidget_NUI>();
	}
};
static_assert(alignof(UFortPerkWidget_NUI) == 0x000008, "Wrong alignment on UFortPerkWidget_NUI");
static_assert(sizeof(UFortPerkWidget_NUI) == 0x000300, "Wrong size on UFortPerkWidget_NUI");
static_assert(offsetof(UFortPerkWidget_NUI, Perk) == 0x000240, "Member 'UFortPerkWidget_NUI::Perk' has a wrong offset!");
static_assert(offsetof(UFortPerkWidget_NUI, CachedTooltipContext) == 0x0002E0, "Member 'UFortPerkWidget_NUI::CachedTooltipContext' has a wrong offset!");

// Class FortniteUI.FortRewardInfoButton
// 0x0020 (0x0B50 - 0x0B30)
class UFortRewardInfoButton : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelWidget*                           ItemCardPanel;                                     // 0x0B38(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortItemCardSize                             ItemCardSize;                                      // 0x0B40(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisplayAsRewardCard;                              // 0x0B41(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B42[0x6];                                      // 0x0B42(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              ItemInstance;                                      // 0x0B48(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleDifferentItemOrQuantitySetBP();
	void SetItemInstanceQuantityPair(const struct FFortItemInstanceQuantityPair& ItemQuantityPair);
	void SetShowDescription(bool bInShowDescription);
	void SetShowDescriptionBP(bool bInShowDescription);

	class UFortItem* GetItemInstance() const;
	int32 GetQuantity() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRewardInfoButton">();
	}
	static class UFortRewardInfoButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRewardInfoButton>();
	}
};
static_assert(alignof(UFortRewardInfoButton) == 0x000008, "Wrong alignment on UFortRewardInfoButton");
static_assert(sizeof(UFortRewardInfoButton) == 0x000B50, "Wrong size on UFortRewardInfoButton");
static_assert(offsetof(UFortRewardInfoButton, ItemCardPanel) == 0x000B38, "Member 'UFortRewardInfoButton::ItemCardPanel' has a wrong offset!");
static_assert(offsetof(UFortRewardInfoButton, ItemCardSize) == 0x000B40, "Member 'UFortRewardInfoButton::ItemCardSize' has a wrong offset!");
static_assert(offsetof(UFortRewardInfoButton, bDisplayAsRewardCard) == 0x000B41, "Member 'UFortRewardInfoButton::bDisplayAsRewardCard' has a wrong offset!");
static_assert(offsetof(UFortRewardInfoButton, ItemInstance) == 0x000B48, "Member 'UFortRewardInfoButton::ItemInstance' has a wrong offset!");

// Class FortniteUI.FortCollectionBookPrimaryPanel
// 0x00C0 (0x03E0 - 0x0320)
class UFortCollectionBookPrimaryPanel final : public UCommonActivatablePanel
{
public:
	UMulticastDelegateProperty_                   OnCollectionBookPageSelectedDelegate;              // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnCollectionBookPageClickedDelegate;               // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnCollectionBookSectionClickedDelegate;            // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    BackActionRowHandle;                               // 0x0350(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    SummonInfoPanelActionRowHandle;                    // 0x0360(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UFortCollectionBookOverviewWidget*      OverviewWidget;                                    // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTileView*                        SectionTileViewWidget;                             // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollectionBookPrimaryNavTarget               CurrentNavTarget;                                  // 0x0380(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortCollectionBookSection*             LastClickedSection;                                // 0x0388(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_390[0x50];                                     // 0x0390(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackActionExecuted(bool* bPassThrough);
	void OnCollectionBookPageClicked(const class UFortCollectionBookPage* ClickedPage);
	void OnCollectionBookPageSelected(const class UFortCollectionBookPage* SelectedPage);
	void OnCollectionBookSectionClicked(const class UFortCollectionBookSection* ClickedSection);
	void OnInputMethodChanged(ECommonInputType CurrentInputType);
	void OnSummonInfoPanelExecuted(bool* bPassThrough);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookPrimaryPanel">();
	}
	static class UFortCollectionBookPrimaryPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookPrimaryPanel>();
	}
};
static_assert(alignof(UFortCollectionBookPrimaryPanel) == 0x000008, "Wrong alignment on UFortCollectionBookPrimaryPanel");
static_assert(sizeof(UFortCollectionBookPrimaryPanel) == 0x0003E0, "Wrong size on UFortCollectionBookPrimaryPanel");
static_assert(offsetof(UFortCollectionBookPrimaryPanel, OnCollectionBookPageSelectedDelegate) == 0x000320, "Member 'UFortCollectionBookPrimaryPanel::OnCollectionBookPageSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPrimaryPanel, OnCollectionBookPageClickedDelegate) == 0x000330, "Member 'UFortCollectionBookPrimaryPanel::OnCollectionBookPageClickedDelegate' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPrimaryPanel, OnCollectionBookSectionClickedDelegate) == 0x000340, "Member 'UFortCollectionBookPrimaryPanel::OnCollectionBookSectionClickedDelegate' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPrimaryPanel, BackActionRowHandle) == 0x000350, "Member 'UFortCollectionBookPrimaryPanel::BackActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPrimaryPanel, SummonInfoPanelActionRowHandle) == 0x000360, "Member 'UFortCollectionBookPrimaryPanel::SummonInfoPanelActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPrimaryPanel, OverviewWidget) == 0x000370, "Member 'UFortCollectionBookPrimaryPanel::OverviewWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPrimaryPanel, SectionTileViewWidget) == 0x000378, "Member 'UFortCollectionBookPrimaryPanel::SectionTileViewWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPrimaryPanel, CurrentNavTarget) == 0x000380, "Member 'UFortCollectionBookPrimaryPanel::CurrentNavTarget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookPrimaryPanel, LastClickedSection) == 0x000388, "Member 'UFortCollectionBookPrimaryPanel::LastClickedSection' has a wrong offset!");

// Class FortniteUI.FortCollectionBookProgressionRewardDetailInspectWidget
// 0x0018 (0x0250 - 0x0238)
class UFortCollectionBookProgressionRewardDetailInspectWidget final : public UCommonUserWidget
{
public:
	class UCommonNumericTextBlock*                LevelTextWidget;                                   // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortRewardInfoWidget*                  RewardWidget;                                      // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_248[0x8];                                      // 0x0248(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnXPRequiredChanged(int32 NewXPRequired);
	void SetAssociatedLevel(int32 Level);

	int32 GetXPRequired() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookProgressionRewardDetailInspectWidget">();
	}
	static class UFortCollectionBookProgressionRewardDetailInspectWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookProgressionRewardDetailInspectWidget>();
	}
};
static_assert(alignof(UFortCollectionBookProgressionRewardDetailInspectWidget) == 0x000008, "Wrong alignment on UFortCollectionBookProgressionRewardDetailInspectWidget");
static_assert(sizeof(UFortCollectionBookProgressionRewardDetailInspectWidget) == 0x000250, "Wrong size on UFortCollectionBookProgressionRewardDetailInspectWidget");
static_assert(offsetof(UFortCollectionBookProgressionRewardDetailInspectWidget, LevelTextWidget) == 0x000238, "Member 'UFortCollectionBookProgressionRewardDetailInspectWidget::LevelTextWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookProgressionRewardDetailInspectWidget, RewardWidget) == 0x000240, "Member 'UFortCollectionBookProgressionRewardDetailInspectWidget::RewardWidget' has a wrong offset!");

// Class FortniteUI.FortCollectionBookProgressionRewardsModalWidget
// 0x0068 (0x03B0 - 0x0348)
class UFortCollectionBookProgressionRewardsModalWidget final : public UFortActivatablePanel
{
public:
	TSoftClassPtr<class UClass>                   RewardWidgetClass;                                 // 0x0348(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                RewardWidgetPadding;                               // 0x0370(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	int32                                         NumRewardsToShow;                                  // 0x0380(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVerticalBox*                           RewardBoxWidget;                                   // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           MajorRewardBoxWidget;                              // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       XPTextWidget;                                      // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonNumericTextBlock*                LevelTextWidget;                                   // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonGroup*                     ButtonGroup;                                       // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void InspectItemBP(class UFortItem* Item);
	void OnInputMethodChanged(bool bUsingGamepad);
	void OnLevelProgressionSet(int32 CurrentLevel, float NextLvlPct);
	void OnSelectedButtonChanged(class UCommonButton* SelectedButton, int32 ButtonIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookProgressionRewardsModalWidget">();
	}
	static class UFortCollectionBookProgressionRewardsModalWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookProgressionRewardsModalWidget>();
	}
};
static_assert(alignof(UFortCollectionBookProgressionRewardsModalWidget) == 0x000008, "Wrong alignment on UFortCollectionBookProgressionRewardsModalWidget");
static_assert(sizeof(UFortCollectionBookProgressionRewardsModalWidget) == 0x0003B0, "Wrong size on UFortCollectionBookProgressionRewardsModalWidget");
static_assert(offsetof(UFortCollectionBookProgressionRewardsModalWidget, RewardWidgetClass) == 0x000348, "Member 'UFortCollectionBookProgressionRewardsModalWidget::RewardWidgetClass' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookProgressionRewardsModalWidget, RewardWidgetPadding) == 0x000370, "Member 'UFortCollectionBookProgressionRewardsModalWidget::RewardWidgetPadding' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookProgressionRewardsModalWidget, NumRewardsToShow) == 0x000380, "Member 'UFortCollectionBookProgressionRewardsModalWidget::NumRewardsToShow' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookProgressionRewardsModalWidget, RewardBoxWidget) == 0x000388, "Member 'UFortCollectionBookProgressionRewardsModalWidget::RewardBoxWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookProgressionRewardsModalWidget, MajorRewardBoxWidget) == 0x000390, "Member 'UFortCollectionBookProgressionRewardsModalWidget::MajorRewardBoxWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookProgressionRewardsModalWidget, XPTextWidget) == 0x000398, "Member 'UFortCollectionBookProgressionRewardsModalWidget::XPTextWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookProgressionRewardsModalWidget, LevelTextWidget) == 0x0003A0, "Member 'UFortCollectionBookProgressionRewardsModalWidget::LevelTextWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookProgressionRewardsModalWidget, ButtonGroup) == 0x0003A8, "Member 'UFortCollectionBookProgressionRewardsModalWidget::ButtonGroup' has a wrong offset!");

// Class FortniteUI.FortCollectionBookProgressionRewardsPreviewWidget
// 0x0010 (0x0248 - 0x0238)
class UFortCollectionBookProgressionRewardsPreviewWidget final : public UCommonUserWidget
{
public:
	class UFortCollectionBookProgressionRewardWidget* NextRewardWidget;                                  // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCollectionBookProgressionRewardWidget* NextMajorRewardWidget;                             // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookProgressionRewardsPreviewWidget">();
	}
	static class UFortCollectionBookProgressionRewardsPreviewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookProgressionRewardsPreviewWidget>();
	}
};
static_assert(alignof(UFortCollectionBookProgressionRewardsPreviewWidget) == 0x000008, "Wrong alignment on UFortCollectionBookProgressionRewardsPreviewWidget");
static_assert(sizeof(UFortCollectionBookProgressionRewardsPreviewWidget) == 0x000248, "Wrong size on UFortCollectionBookProgressionRewardsPreviewWidget");
static_assert(offsetof(UFortCollectionBookProgressionRewardsPreviewWidget, NextRewardWidget) == 0x000238, "Member 'UFortCollectionBookProgressionRewardsPreviewWidget::NextRewardWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookProgressionRewardsPreviewWidget, NextMajorRewardWidget) == 0x000240, "Member 'UFortCollectionBookProgressionRewardsPreviewWidget::NextMajorRewardWidget' has a wrong offset!");

// Class FortniteUI.FortItemCategoryIndicator
// 0x0010 (0x0138 - 0x0128)
class UFortItemCategoryIndicator final : public UFortIconWithLabel
{
public:
	TWeakObjectPtr<class UFortItem>               ItemToRepresent;                                   // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemCategoryOrdinal                      OrdinalOfCategoryToRepresent;                      // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearLabelColorOverride();
	void SetItemToRepresent(const class UFortItem* Param_ItemToRepresent);
	void SetLabelColorOverride(const struct FLinearColor& InLabelColorOverride);
	void SetOrdinalOfCategoryToRepresent(const EFortItemCategoryOrdinal ItemCategoryOrdinal);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemCategoryIndicator">();
	}
	static class UFortItemCategoryIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemCategoryIndicator>();
	}
};
static_assert(alignof(UFortItemCategoryIndicator) == 0x000008, "Wrong alignment on UFortItemCategoryIndicator");
static_assert(sizeof(UFortItemCategoryIndicator) == 0x000138, "Wrong size on UFortItemCategoryIndicator");
static_assert(offsetof(UFortItemCategoryIndicator, ItemToRepresent) == 0x000128, "Member 'UFortItemCategoryIndicator::ItemToRepresent' has a wrong offset!");
static_assert(offsetof(UFortItemCategoryIndicator, OrdinalOfCategoryToRepresent) == 0x000130, "Member 'UFortItemCategoryIndicator::OrdinalOfCategoryToRepresent' has a wrong offset!");

// Class FortniteUI.FortSocialDisplayData
// 0x00F0 (0x0120 - 0x0030)
class UFortSocialDisplayData final : public UDataAsset
{
public:
	TMap<class FString, struct FPlatformPrefixIconList> PlatformPrefixIconMap;                             // 0x0030(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TMap<class FString, struct FPlatformPrefixIconList> SubsystemDisplayIconMap;                           // 0x0080(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TMap<int32, class UTexture2D*>                PartySizeIconMap;                                  // 0x00D0(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSocialDisplayData">();
	}
	static class UFortSocialDisplayData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSocialDisplayData>();
	}
};
static_assert(alignof(UFortSocialDisplayData) == 0x000008, "Wrong alignment on UFortSocialDisplayData");
static_assert(sizeof(UFortSocialDisplayData) == 0x000120, "Wrong size on UFortSocialDisplayData");
static_assert(offsetof(UFortSocialDisplayData, PlatformPrefixIconMap) == 0x000030, "Member 'UFortSocialDisplayData::PlatformPrefixIconMap' has a wrong offset!");
static_assert(offsetof(UFortSocialDisplayData, SubsystemDisplayIconMap) == 0x000080, "Member 'UFortSocialDisplayData::SubsystemDisplayIconMap' has a wrong offset!");
static_assert(offsetof(UFortSocialDisplayData, PartySizeIconMap) == 0x0000D0, "Member 'UFortSocialDisplayData::PartySizeIconMap' has a wrong offset!");

// Class FortniteUI.FortCollectionBookProgressionRewardWidget
// 0x0010 (0x0260 - 0x0250)
class UFortCollectionBookProgressionRewardWidget final : public UFortCollectionBookGenericRewardWidget
{
public:
	class UCommonNumericTextBlock*                LevelTextWidget;                                   // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       DisplayNameWidget;                                 // 0x0258(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetAssociatedLevel(int32 Level);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookProgressionRewardWidget">();
	}
	static class UFortCollectionBookProgressionRewardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookProgressionRewardWidget>();
	}
};
static_assert(alignof(UFortCollectionBookProgressionRewardWidget) == 0x000008, "Wrong alignment on UFortCollectionBookProgressionRewardWidget");
static_assert(sizeof(UFortCollectionBookProgressionRewardWidget) == 0x000260, "Wrong size on UFortCollectionBookProgressionRewardWidget");
static_assert(offsetof(UFortCollectionBookProgressionRewardWidget, LevelTextWidget) == 0x000250, "Member 'UFortCollectionBookProgressionRewardWidget::LevelTextWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookProgressionRewardWidget, DisplayNameWidget) == 0x000258, "Member 'UFortCollectionBookProgressionRewardWidget::DisplayNameWidget' has a wrong offset!");

// Class FortniteUI.FortInfoWindow
// 0x0008 (0x0350 - 0x0348)
class UFortInfoWindow : public UFortActivatablePanel
{
public:
	class UCommonListView*                        InfoEntries;                                       // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class UWidget* GetListWidget(class UObject* Item);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortInfoWindow">();
	}
	static class UFortInfoWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortInfoWindow>();
	}
};
static_assert(alignof(UFortInfoWindow) == 0x000008, "Wrong alignment on UFortInfoWindow");
static_assert(sizeof(UFortInfoWindow) == 0x000350, "Wrong size on UFortInfoWindow");
static_assert(offsetof(UFortInfoWindow, InfoEntries) == 0x000348, "Member 'UFortInfoWindow::InfoEntries' has a wrong offset!");

// Class FortniteUI.FortCollectionBookProgressWidget
// 0x0060 (0x0298 - 0x0238)
class UFortCollectionBookProgressWidget final : public UCommonUserWidget
{
public:
	int32                                         CachedXPLevel;                                     // 0x0238(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CachedXPCompletionPct;                             // 0x023C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   RewardDetailsModalWidgetClass;                     // 0x0240(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCollectionBookProgressionRewardsPreviewWidget* ProgressionRewardsPreviewWidget;                   // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       XPTextWidget;                                      // 0x0270(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonNumericTextBlock*                LevelTextWidget;                                   // 0x0278(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButton*                          DetailsButtonWidget;                               // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCollectionBookPageDetailsWidget*   PageDetailsWidget;                                 // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCollectionBookProgressionRewardsModalWidget* DetailsModalWidget;                                // 0x0290(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleDetailsModalWidgetDeactivated(class UCommonActivatablePanel* DeactivatedPanel);
	void OnCollectionBookLevelChanged(int32 NewLevel);
	void OnCollectionBookLevelProgressionChanged(float NewCompletionPct);
	void OnCollectionBookPageSelected(const class UFortCollectionBookPage* SelectedPage);
	void OnCollectionBookPreviewXPChange(float PreviewCompletionPct);
	void OnSlottedItemOperationComplete(const class UFortAccountItem* ItemSlotted, class FName SlotId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookProgressWidget">();
	}
	static class UFortCollectionBookProgressWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookProgressWidget>();
	}
};
static_assert(alignof(UFortCollectionBookProgressWidget) == 0x000008, "Wrong alignment on UFortCollectionBookProgressWidget");
static_assert(sizeof(UFortCollectionBookProgressWidget) == 0x000298, "Wrong size on UFortCollectionBookProgressWidget");
static_assert(offsetof(UFortCollectionBookProgressWidget, CachedXPLevel) == 0x000238, "Member 'UFortCollectionBookProgressWidget::CachedXPLevel' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookProgressWidget, CachedXPCompletionPct) == 0x00023C, "Member 'UFortCollectionBookProgressWidget::CachedXPCompletionPct' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookProgressWidget, RewardDetailsModalWidgetClass) == 0x000240, "Member 'UFortCollectionBookProgressWidget::RewardDetailsModalWidgetClass' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookProgressWidget, ProgressionRewardsPreviewWidget) == 0x000268, "Member 'UFortCollectionBookProgressWidget::ProgressionRewardsPreviewWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookProgressWidget, XPTextWidget) == 0x000270, "Member 'UFortCollectionBookProgressWidget::XPTextWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookProgressWidget, LevelTextWidget) == 0x000278, "Member 'UFortCollectionBookProgressWidget::LevelTextWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookProgressWidget, DetailsButtonWidget) == 0x000280, "Member 'UFortCollectionBookProgressWidget::DetailsButtonWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookProgressWidget, PageDetailsWidget) == 0x000288, "Member 'UFortCollectionBookProgressWidget::PageDetailsWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookProgressWidget, DetailsModalWidget) == 0x000290, "Member 'UFortCollectionBookProgressWidget::DetailsModalWidget' has a wrong offset!");

// Class FortniteUI.FortCollectionBookRecycleSlotResultsWidget
// 0x0018 (0x0250 - 0x0238)
class UFortCollectionBookRecycleSlotResultsWidget final : public UCommonUserWidget
{
public:
	class UPanelWidget*                           RecycleResultsWidget;                              // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortItemCardSize                             ItemCardSize;                                      // 0x0240(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAccountItem*                       ItemToRecycle;                                     // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetCurrentItemToRecycle(class UFortAccountItem* InItemToRecycle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookRecycleSlotResultsWidget">();
	}
	static class UFortCollectionBookRecycleSlotResultsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookRecycleSlotResultsWidget>();
	}
};
static_assert(alignof(UFortCollectionBookRecycleSlotResultsWidget) == 0x000008, "Wrong alignment on UFortCollectionBookRecycleSlotResultsWidget");
static_assert(sizeof(UFortCollectionBookRecycleSlotResultsWidget) == 0x000250, "Wrong size on UFortCollectionBookRecycleSlotResultsWidget");
static_assert(offsetof(UFortCollectionBookRecycleSlotResultsWidget, RecycleResultsWidget) == 0x000238, "Member 'UFortCollectionBookRecycleSlotResultsWidget::RecycleResultsWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookRecycleSlotResultsWidget, ItemCardSize) == 0x000240, "Member 'UFortCollectionBookRecycleSlotResultsWidget::ItemCardSize' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookRecycleSlotResultsWidget, ItemToRecycle) == 0x000248, "Member 'UFortCollectionBookRecycleSlotResultsWidget::ItemToRecycle' has a wrong offset!");

// Class FortniteUI.FortCollectionBookRewardCardWidget
// 0x0080 (0x02B8 - 0x0238)
class UFortCollectionBookRewardCardWidget final : public UCommonUserWidget
{
public:
	UMulticastDelegateProperty_                   OnDisplayedItemChangedEvent;                       // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UFortMultiSizeItemCard*                 ItemCardWidget;                                    // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                MultiItemRewardOverlay;                            // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                ChoiceRewardOverlay;                               // 0x0258(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UpdateCardInterval;                                // 0x0260(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortItemCardSize                             ItemCardSize;                                      // 0x0264(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisplayAsRewardCard;                              // 0x0265(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_266[0x2];                                      // 0x0266(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortRewardInfo                        RepresentedRewards;                                // 0x0268(0x0030)(Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UFortItem*>                      DummyItems;                                        // 0x0298(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	struct FTimerHandle                           UpdateCardTimer;                                   // 0x02A8(0x0008)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B0[0x8];                                      // 0x02B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearRewards();
	void OnDisplayedItemChangedEvent__DelegateSignature(class UFortItem* DisplayedItem);
	void SetRewards(const struct FFortRewardInfo& Rewards);

	bool HasRewards() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookRewardCardWidget">();
	}
	static class UFortCollectionBookRewardCardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookRewardCardWidget>();
	}
};
static_assert(alignof(UFortCollectionBookRewardCardWidget) == 0x000008, "Wrong alignment on UFortCollectionBookRewardCardWidget");
static_assert(sizeof(UFortCollectionBookRewardCardWidget) == 0x0002B8, "Wrong size on UFortCollectionBookRewardCardWidget");
static_assert(offsetof(UFortCollectionBookRewardCardWidget, OnDisplayedItemChangedEvent) == 0x000238, "Member 'UFortCollectionBookRewardCardWidget::OnDisplayedItemChangedEvent' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookRewardCardWidget, ItemCardWidget) == 0x000248, "Member 'UFortCollectionBookRewardCardWidget::ItemCardWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookRewardCardWidget, MultiItemRewardOverlay) == 0x000250, "Member 'UFortCollectionBookRewardCardWidget::MultiItemRewardOverlay' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookRewardCardWidget, ChoiceRewardOverlay) == 0x000258, "Member 'UFortCollectionBookRewardCardWidget::ChoiceRewardOverlay' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookRewardCardWidget, UpdateCardInterval) == 0x000260, "Member 'UFortCollectionBookRewardCardWidget::UpdateCardInterval' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookRewardCardWidget, ItemCardSize) == 0x000264, "Member 'UFortCollectionBookRewardCardWidget::ItemCardSize' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookRewardCardWidget, bDisplayAsRewardCard) == 0x000265, "Member 'UFortCollectionBookRewardCardWidget::bDisplayAsRewardCard' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookRewardCardWidget, RepresentedRewards) == 0x000268, "Member 'UFortCollectionBookRewardCardWidget::RepresentedRewards' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookRewardCardWidget, DummyItems) == 0x000298, "Member 'UFortCollectionBookRewardCardWidget::DummyItems' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookRewardCardWidget, UpdateCardTimer) == 0x0002A8, "Member 'UFortCollectionBookRewardCardWidget::UpdateCardTimer' has a wrong offset!");

// Class FortniteUI.FortItemView
// 0x01A8 (0x01D0 - 0x0028)
class UFortItemView final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    UnifiedSupportsCameraControlInputAction;           // 0x0030(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    UnifiedZoomInputAction;                            // 0x0040(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ZoomOutInputAction;                                // 0x0050(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ZoomInInputAction;                                 // 0x0060(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    RotateInputAction;                                 // 0x0070(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemRotaionChanged;                              // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemZoomLevelChanged;                            // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x120];                                     // 0x00A0(0x0120)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDataTableRowHandle>            RegisteredInputActions;                            // 0x01C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void OnUserInputChangedView__DelegateSignature();
	void RegisterInputActions();
	void RestoreInitialTransform();
	void SetOwningPanel(class UCommonActivatablePanel* Panel);
	void SetSceneComponentToAffect(class USceneComponent* Component);
	void SetSettings(const struct FFortItemViewSettings& Settings);
	void UnregisterInputActions();

	struct FFortItemViewSettings GetSettings() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemView">();
	}
	static class UFortItemView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemView>();
	}
};
static_assert(alignof(UFortItemView) == 0x000008, "Wrong alignment on UFortItemView");
static_assert(sizeof(UFortItemView) == 0x0001D0, "Wrong size on UFortItemView");
static_assert(offsetof(UFortItemView, UnifiedSupportsCameraControlInputAction) == 0x000030, "Member 'UFortItemView::UnifiedSupportsCameraControlInputAction' has a wrong offset!");
static_assert(offsetof(UFortItemView, UnifiedZoomInputAction) == 0x000040, "Member 'UFortItemView::UnifiedZoomInputAction' has a wrong offset!");
static_assert(offsetof(UFortItemView, ZoomOutInputAction) == 0x000050, "Member 'UFortItemView::ZoomOutInputAction' has a wrong offset!");
static_assert(offsetof(UFortItemView, ZoomInInputAction) == 0x000060, "Member 'UFortItemView::ZoomInInputAction' has a wrong offset!");
static_assert(offsetof(UFortItemView, RotateInputAction) == 0x000070, "Member 'UFortItemView::RotateInputAction' has a wrong offset!");
static_assert(offsetof(UFortItemView, OnItemRotaionChanged) == 0x000080, "Member 'UFortItemView::OnItemRotaionChanged' has a wrong offset!");
static_assert(offsetof(UFortItemView, OnItemZoomLevelChanged) == 0x000090, "Member 'UFortItemView::OnItemZoomLevelChanged' has a wrong offset!");
static_assert(offsetof(UFortItemView, RegisteredInputActions) == 0x0001C0, "Member 'UFortItemView::RegisteredInputActions' has a wrong offset!");

// Class FortniteUI.FortCollectionBookRewardModalWidget
// 0x0050 (0x0370 - 0x0320)
class UFortCollectionBookRewardModalWidget final : public UCommonActivatablePanel
{
public:
	class UCommonTextBlock*                       TitleWidget;                                       // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortRewardInfoWidget*                  RewardWidget;                                      // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortMaterialProgressBar*               ProgressBar;                                       // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       ProgressTextWidget;                                // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_340[0x30];                                     // 0x0340(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookRewardModalWidget">();
	}
	static class UFortCollectionBookRewardModalWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookRewardModalWidget>();
	}
};
static_assert(alignof(UFortCollectionBookRewardModalWidget) == 0x000008, "Wrong alignment on UFortCollectionBookRewardModalWidget");
static_assert(sizeof(UFortCollectionBookRewardModalWidget) == 0x000370, "Wrong size on UFortCollectionBookRewardModalWidget");
static_assert(offsetof(UFortCollectionBookRewardModalWidget, TitleWidget) == 0x000320, "Member 'UFortCollectionBookRewardModalWidget::TitleWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookRewardModalWidget, RewardWidget) == 0x000328, "Member 'UFortCollectionBookRewardModalWidget::RewardWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookRewardModalWidget, ProgressBar) == 0x000330, "Member 'UFortCollectionBookRewardModalWidget::ProgressBar' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookRewardModalWidget, ProgressTextWidget) == 0x000338, "Member 'UFortCollectionBookRewardModalWidget::ProgressTextWidget' has a wrong offset!");

// Class FortniteUI.FortOptionsMenuInputData
// 0x00C0 (0x00F0 - 0x0030)
class UFortOptionsMenuInputData final : public UDataAsset
{
public:
	class FName                                   ActionName;                                        // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x0038(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   PrimaryText;                                       // 0x0050(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SecondaryText;                                     // 0x0068(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         ElementNumber;                                     // 0x0080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       TabText;                                           // 0x0088(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortActionKeyMapping                  ActionKeyMapping;                                  // 0x0090(0x0060)(NativeAccessSpecifierPublic)

public:
	EFortInputActionGroup GetInputActionGroup() const;
	float GetInputScale() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortOptionsMenuInputData">();
	}
	static class UFortOptionsMenuInputData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortOptionsMenuInputData>();
	}
};
static_assert(alignof(UFortOptionsMenuInputData) == 0x000008, "Wrong alignment on UFortOptionsMenuInputData");
static_assert(sizeof(UFortOptionsMenuInputData) == 0x0000F0, "Wrong size on UFortOptionsMenuInputData");
static_assert(offsetof(UFortOptionsMenuInputData, ActionName) == 0x000030, "Member 'UFortOptionsMenuInputData::ActionName' has a wrong offset!");
static_assert(offsetof(UFortOptionsMenuInputData, DisplayText) == 0x000038, "Member 'UFortOptionsMenuInputData::DisplayText' has a wrong offset!");
static_assert(offsetof(UFortOptionsMenuInputData, PrimaryText) == 0x000050, "Member 'UFortOptionsMenuInputData::PrimaryText' has a wrong offset!");
static_assert(offsetof(UFortOptionsMenuInputData, SecondaryText) == 0x000068, "Member 'UFortOptionsMenuInputData::SecondaryText' has a wrong offset!");
static_assert(offsetof(UFortOptionsMenuInputData, ElementNumber) == 0x000080, "Member 'UFortOptionsMenuInputData::ElementNumber' has a wrong offset!");
static_assert(offsetof(UFortOptionsMenuInputData, TabText) == 0x000088, "Member 'UFortOptionsMenuInputData::TabText' has a wrong offset!");
static_assert(offsetof(UFortOptionsMenuInputData, ActionKeyMapping) == 0x000090, "Member 'UFortOptionsMenuInputData::ActionKeyMapping' has a wrong offset!");

// Class FortniteUI.FortCollectionBookSectionCompletionRewardWidget
// 0x0058 (0x02A8 - 0x0250)
class UFortCollectionBookSectionCompletionRewardWidget final : public UFortCollectionBookGenericRewardWidget
{
public:
	class UCommonButton*                          RewardDetailsButton;                               // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   RewardDetailsModalWidgetClass;                     // 0x0258(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   ModalTitle;                                        // 0x0280(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class UFortCollectionBookRewardModalWidget*   RewardDetailsModalWidget;                          // 0x0298(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortCollectionBookSection*             Section;                                           // 0x02A0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleRewardDetailsModalWidgetDeactivated(class UCommonActivatablePanel* DeactivatedPanel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookSectionCompletionRewardWidget">();
	}
	static class UFortCollectionBookSectionCompletionRewardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookSectionCompletionRewardWidget>();
	}
};
static_assert(alignof(UFortCollectionBookSectionCompletionRewardWidget) == 0x000008, "Wrong alignment on UFortCollectionBookSectionCompletionRewardWidget");
static_assert(sizeof(UFortCollectionBookSectionCompletionRewardWidget) == 0x0002A8, "Wrong size on UFortCollectionBookSectionCompletionRewardWidget");
static_assert(offsetof(UFortCollectionBookSectionCompletionRewardWidget, RewardDetailsButton) == 0x000250, "Member 'UFortCollectionBookSectionCompletionRewardWidget::RewardDetailsButton' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionCompletionRewardWidget, RewardDetailsModalWidgetClass) == 0x000258, "Member 'UFortCollectionBookSectionCompletionRewardWidget::RewardDetailsModalWidgetClass' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionCompletionRewardWidget, ModalTitle) == 0x000280, "Member 'UFortCollectionBookSectionCompletionRewardWidget::ModalTitle' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionCompletionRewardWidget, RewardDetailsModalWidget) == 0x000298, "Member 'UFortCollectionBookSectionCompletionRewardWidget::RewardDetailsModalWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionCompletionRewardWidget, Section) == 0x0002A0, "Member 'UFortCollectionBookSectionCompletionRewardWidget::Section' has a wrong offset!");

// Class FortniteUI.FortCollectionBookSectionPanel
// 0x01C0 (0x04E0 - 0x0320)
class UFortCollectionBookSectionPanel final : public UCommonActivatablePanel
{
public:
	UMulticastDelegateProperty_                   OnSectionCloseRequest;                             // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPreviewXPChangeEvent;                            // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UCommonTextBlock*                       SectionNameTextWidget;                             // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCollectionBookSlotView*            SlotViewWidget;                                    // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCollectionBookPicker*              SlotItemPicker;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                ContextOverlayWidget;                              // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             ContextTextWidget;                                 // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCollectionBookSectionCompletionRewardWidget* SectionRewardWidget;                               // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                ItemAcquisitionSourceContainerWidget;              // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       ItemAcquisitionSourceDescWidget;                   // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       ItemAcquisitionSourceDesc2Widget;                  // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                ResearchRecruitUnslotContainerWidget;              // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       PersonRecruitUnavailableMessageWidget;             // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       ItemResearchUnavailableMessageWidget;              // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       UnslotUnavailableMessageWidget;                    // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    BackActionRowHandle;                               // 0x03A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    CloseActionRowHandle;                              // 0x03B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    SlotItemActionRowHandle;                           // 0x03C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    InspectItemActionRowHandle;                        // 0x03D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    InspectCollectionBookItemActionRowHandle;          // 0x03E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    InspectPreviewItemActionRowHandle;                 // 0x03F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    OpenPickerActionRowHandle;                         // 0x0408(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    LogAllowedItemsActionRowHandle;                    // 0x0418(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    ResearchItemActionRowHandle;                       // 0x0428(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    RecruitActionRowHandle;                            // 0x0438(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    UnslotItemActionRowHandle;                         // 0x0448(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	ECollectionBookSectionNavTarget               CurrentNavTarget;                                  // 0x0458(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_459[0x7];                                      // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortCollectionBookSection*             AssociatedSection;                                 // 0x0460(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasSummonedPanel;                                 // 0x0468(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_469[0x3];                                      // 0x0469(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortDialogExternalLatentActionHandle  SlotConfirmationDialogLatentHandle;                // 0x046C(0x0004)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnShowItemDetailEvent;                             // 0x0470(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnSlotItemConfirmEvent;                            // 0x0480(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnResearchItemConfirmEvent;                        // 0x0490(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnUnslotItemConfirmEvent;                          // 0x04A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnInspectItemEvent;                                // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C0[0x20];                                     // 0x04C0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackActionExecuted(bool* bPassThrough);
	void OnInputMethodChanged(ECommonInputType CurrentInputType);
	void OnInspectActionExecuted(bool* bPassThrough);
	void OnItemAction__DelegateSignature(class UFortItem* SelectedItem);
	void OnItemInspectAction__DelegateSignature(class UFortItem* SelectedItem, bool EnableItemActions, bool IsPlaceholderItem);
	void OnLogAllowedItemsActionExecuted(bool* bPassThrough);
	void OnOpenPickerActionExecuted(bool* bPassThrough);
	void OnPurchaseItemActionExecuted(bool* bPassThrough);
	void OnResearchItemAction__DelegateSignature(class UFortItem* SelectedItem, const struct FFortCollectionBookSlotData& SlotData);
	void OnResearchItemOperationComplete(const class UFortAccountItem* NewItem, const class FString& TemplateId);
	void OnSectionChanged(const class UFortCollectionBookSection* Section);
	void OnSlotButtonContextAction(EFortCollectionBookPopupButtonType ContextAction);
	void OnSlotButtonHovered(int32 ButtonIx);
	void OnSlotButtonSelected(const class UFortCollectionBookSlotButton* SlotButton);
	void OnSlotItemActionExecuted(bool* bPassThrough);
	void OnSlotItemComplete(const class UFortAccountItem* SlottedItem, class FName SlotId);
	void OnSlotItemConfirmationCompleted(class UFortItem* SelectedItem, class FName SlotId, const struct FFortDialogExternalLatentActionHandle& LatentActionHandle);
	void OnSlotPickerItemHovered(class UFortItem* HoveredItem);
	void OnSlotPickerItemSelected(class UFortItem* SelectedItem);
	void OnSlottedItemOperationComplete(const class UFortAccountItem* SlottedItem, class FName SlotId);
	void OnUnslotItemActionExecuted(bool* bPassThrough);
	void OnUnslotItemComplete(const class UFortItem* UnslottedItem, class FName SlotId);
	void OnUnslotItemOperationComplete(const class UFortAccountItem* UnslottedItem, const class UFortAccountItem* OldSlottedItem, class FName SlotId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookSectionPanel">();
	}
	static class UFortCollectionBookSectionPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookSectionPanel>();
	}
};
static_assert(alignof(UFortCollectionBookSectionPanel) == 0x000008, "Wrong alignment on UFortCollectionBookSectionPanel");
static_assert(sizeof(UFortCollectionBookSectionPanel) == 0x0004E0, "Wrong size on UFortCollectionBookSectionPanel");
static_assert(offsetof(UFortCollectionBookSectionPanel, OnSectionCloseRequest) == 0x000320, "Member 'UFortCollectionBookSectionPanel::OnSectionCloseRequest' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, OnPreviewXPChangeEvent) == 0x000330, "Member 'UFortCollectionBookSectionPanel::OnPreviewXPChangeEvent' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, SectionNameTextWidget) == 0x000340, "Member 'UFortCollectionBookSectionPanel::SectionNameTextWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, SlotViewWidget) == 0x000348, "Member 'UFortCollectionBookSectionPanel::SlotViewWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, SlotItemPicker) == 0x000350, "Member 'UFortCollectionBookSectionPanel::SlotItemPicker' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, ContextOverlayWidget) == 0x000358, "Member 'UFortCollectionBookSectionPanel::ContextOverlayWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, ContextTextWidget) == 0x000360, "Member 'UFortCollectionBookSectionPanel::ContextTextWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, SectionRewardWidget) == 0x000368, "Member 'UFortCollectionBookSectionPanel::SectionRewardWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, ItemAcquisitionSourceContainerWidget) == 0x000370, "Member 'UFortCollectionBookSectionPanel::ItemAcquisitionSourceContainerWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, ItemAcquisitionSourceDescWidget) == 0x000378, "Member 'UFortCollectionBookSectionPanel::ItemAcquisitionSourceDescWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, ItemAcquisitionSourceDesc2Widget) == 0x000380, "Member 'UFortCollectionBookSectionPanel::ItemAcquisitionSourceDesc2Widget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, ResearchRecruitUnslotContainerWidget) == 0x000388, "Member 'UFortCollectionBookSectionPanel::ResearchRecruitUnslotContainerWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, PersonRecruitUnavailableMessageWidget) == 0x000390, "Member 'UFortCollectionBookSectionPanel::PersonRecruitUnavailableMessageWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, ItemResearchUnavailableMessageWidget) == 0x000398, "Member 'UFortCollectionBookSectionPanel::ItemResearchUnavailableMessageWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, UnslotUnavailableMessageWidget) == 0x0003A0, "Member 'UFortCollectionBookSectionPanel::UnslotUnavailableMessageWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, BackActionRowHandle) == 0x0003A8, "Member 'UFortCollectionBookSectionPanel::BackActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, CloseActionRowHandle) == 0x0003B8, "Member 'UFortCollectionBookSectionPanel::CloseActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, SlotItemActionRowHandle) == 0x0003C8, "Member 'UFortCollectionBookSectionPanel::SlotItemActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, InspectItemActionRowHandle) == 0x0003D8, "Member 'UFortCollectionBookSectionPanel::InspectItemActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, InspectCollectionBookItemActionRowHandle) == 0x0003E8, "Member 'UFortCollectionBookSectionPanel::InspectCollectionBookItemActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, InspectPreviewItemActionRowHandle) == 0x0003F8, "Member 'UFortCollectionBookSectionPanel::InspectPreviewItemActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, OpenPickerActionRowHandle) == 0x000408, "Member 'UFortCollectionBookSectionPanel::OpenPickerActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, LogAllowedItemsActionRowHandle) == 0x000418, "Member 'UFortCollectionBookSectionPanel::LogAllowedItemsActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, ResearchItemActionRowHandle) == 0x000428, "Member 'UFortCollectionBookSectionPanel::ResearchItemActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, RecruitActionRowHandle) == 0x000438, "Member 'UFortCollectionBookSectionPanel::RecruitActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, UnslotItemActionRowHandle) == 0x000448, "Member 'UFortCollectionBookSectionPanel::UnslotItemActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, CurrentNavTarget) == 0x000458, "Member 'UFortCollectionBookSectionPanel::CurrentNavTarget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, AssociatedSection) == 0x000460, "Member 'UFortCollectionBookSectionPanel::AssociatedSection' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, bHasSummonedPanel) == 0x000468, "Member 'UFortCollectionBookSectionPanel::bHasSummonedPanel' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, SlotConfirmationDialogLatentHandle) == 0x00046C, "Member 'UFortCollectionBookSectionPanel::SlotConfirmationDialogLatentHandle' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, OnShowItemDetailEvent) == 0x000470, "Member 'UFortCollectionBookSectionPanel::OnShowItemDetailEvent' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, OnSlotItemConfirmEvent) == 0x000480, "Member 'UFortCollectionBookSectionPanel::OnSlotItemConfirmEvent' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, OnResearchItemConfirmEvent) == 0x000490, "Member 'UFortCollectionBookSectionPanel::OnResearchItemConfirmEvent' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, OnUnslotItemConfirmEvent) == 0x0004A0, "Member 'UFortCollectionBookSectionPanel::OnUnslotItemConfirmEvent' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionPanel, OnInspectItemEvent) == 0x0004B0, "Member 'UFortCollectionBookSectionPanel::OnInspectItemEvent' has a wrong offset!");

// Class FortniteUI.FortCollectionBookSectionTileWidget
// 0x0078 (0x0BA8 - 0x0B30)
class UFortCollectionBookSectionTileWidget final : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   SlotWidgetClass;                                   // 0x0B38(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                SlotWidgetPadding;                                 // 0x0B60(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          SlotWidgetHorizontalAlignment;                     // 0x0B70(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            SlotWidgetVerticalAlignment;                       // 0x0B71(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B72[0x2];                                      // 0x0B72(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxNumSlotsSupported;                              // 0x0B74(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         SlotBoxWidget;                                     // 0x0B78(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       SectionNameWidget;                                 // 0x0B80(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCollectionBookGenericRewardWidget* SectionRewardWidget;                               // 0x0B88(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCollectionBookSection*             AssociatedSection;                                 // 0x0B90(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UFortCollectionBookSlotWidget*>  SlotWidgets;                                       // 0x0B98(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void OnItemSlotted(const class UFortAccountItem* ItemSlotted, class FName SlotId);
	void OnItemUnslotted(const class UFortAccountItem* ItemUnslotted, const class UFortAccountItem* OldSlottedItem, class FName SlotId);
	void OnSectionSlotUpdate(int32 NumFilledSlots, int32 NumSlots, EFortCollectionBookState SectionState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookSectionTileWidget">();
	}
	static class UFortCollectionBookSectionTileWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookSectionTileWidget>();
	}
};
static_assert(alignof(UFortCollectionBookSectionTileWidget) == 0x000008, "Wrong alignment on UFortCollectionBookSectionTileWidget");
static_assert(sizeof(UFortCollectionBookSectionTileWidget) == 0x000BA8, "Wrong size on UFortCollectionBookSectionTileWidget");
static_assert(offsetof(UFortCollectionBookSectionTileWidget, SlotWidgetClass) == 0x000B38, "Member 'UFortCollectionBookSectionTileWidget::SlotWidgetClass' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionTileWidget, SlotWidgetPadding) == 0x000B60, "Member 'UFortCollectionBookSectionTileWidget::SlotWidgetPadding' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionTileWidget, SlotWidgetHorizontalAlignment) == 0x000B70, "Member 'UFortCollectionBookSectionTileWidget::SlotWidgetHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionTileWidget, SlotWidgetVerticalAlignment) == 0x000B71, "Member 'UFortCollectionBookSectionTileWidget::SlotWidgetVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionTileWidget, MaxNumSlotsSupported) == 0x000B74, "Member 'UFortCollectionBookSectionTileWidget::MaxNumSlotsSupported' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionTileWidget, SlotBoxWidget) == 0x000B78, "Member 'UFortCollectionBookSectionTileWidget::SlotBoxWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionTileWidget, SectionNameWidget) == 0x000B80, "Member 'UFortCollectionBookSectionTileWidget::SectionNameWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionTileWidget, SectionRewardWidget) == 0x000B88, "Member 'UFortCollectionBookSectionTileWidget::SectionRewardWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionTileWidget, AssociatedSection) == 0x000B90, "Member 'UFortCollectionBookSectionTileWidget::AssociatedSection' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSectionTileWidget, SlotWidgets) == 0x000B98, "Member 'UFortCollectionBookSectionTileWidget::SlotWidgets' has a wrong offset!");

// Class FortniteUI.FortCollectionBookSlotButton
// 0x0038 (0x0B68 - 0x0B30)
class UFortCollectionBookSlotButton final : public UCommonButton
{
public:
	class UFortCollectionBookSlotWidget*          CollectionBookSlotWidget;                          // 0x0B30(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuAnchor*                            PopupMenuAnchor;                                   // 0x0B38(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B40[0x28];                                     // 0x0B40(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UWidget* GetPopupMenu();
	void OnSlottedItemUpdated();
	void PopupMenuClosedWithAction(EFortCollectionBookPopupButtonType Selection);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookSlotButton">();
	}
	static class UFortCollectionBookSlotButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookSlotButton>();
	}
};
static_assert(alignof(UFortCollectionBookSlotButton) == 0x000008, "Wrong alignment on UFortCollectionBookSlotButton");
static_assert(sizeof(UFortCollectionBookSlotButton) == 0x000B68, "Wrong size on UFortCollectionBookSlotButton");
static_assert(offsetof(UFortCollectionBookSlotButton, CollectionBookSlotWidget) == 0x000B30, "Member 'UFortCollectionBookSlotButton::CollectionBookSlotWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotButton, PopupMenuAnchor) == 0x000B38, "Member 'UFortCollectionBookSlotButton::PopupMenuAnchor' has a wrong offset!");

// Class FortniteUI.FortCollectionBookSlotDetailsWidget
// 0x0000 (0x0238 - 0x0238)
class UFortCollectionBookSlotDetailsWidget final : public UCommonUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookSlotDetailsWidget">();
	}
	static class UFortCollectionBookSlotDetailsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookSlotDetailsWidget>();
	}
};
static_assert(alignof(UFortCollectionBookSlotDetailsWidget) == 0x000008, "Wrong alignment on UFortCollectionBookSlotDetailsWidget");
static_assert(sizeof(UFortCollectionBookSlotDetailsWidget) == 0x000238, "Wrong size on UFortCollectionBookSlotDetailsWidget");

// Class FortniteUI.FortCollectionBookSlotView
// 0x00A8 (0x02E0 - 0x0238)
class UFortCollectionBookSlotView final : public UCommonUserWidget
{
public:
	TSoftClassPtr<class UClass>                   CollectionBookButtonClass;                         // 0x0238(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         CollectionBookButtonBox;                           // 0x0260(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonGroup*                     CollectionBookSlotButtonGroup;                     // 0x0268(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UFortCollectionBookSlotButton*>  CollectionBookSlotButtons;                         // 0x0270(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UFortCollectionBookSection*             AssociatedSection;                                 // 0x0280(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_288[0x48];                                     // 0x0288(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreviousSelectedButtonIdx;                         // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CurrentSelectedButtonIdx;                          // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D8[0x8];                                      // 0x02D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSelectedSlotButtonChanged(class UCommonButton* SelectedButton, int32 ButtonIdx);
	void OnSlotButtonClicked(class UCommonButton* ClickedButton, int32 ButtonIdx);
	void OnSlotButtonHovered(class UCommonButton* HoveredButton, int32 ButtonIdx);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookSlotView">();
	}
	static class UFortCollectionBookSlotView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookSlotView>();
	}
};
static_assert(alignof(UFortCollectionBookSlotView) == 0x000008, "Wrong alignment on UFortCollectionBookSlotView");
static_assert(sizeof(UFortCollectionBookSlotView) == 0x0002E0, "Wrong size on UFortCollectionBookSlotView");
static_assert(offsetof(UFortCollectionBookSlotView, CollectionBookButtonClass) == 0x000238, "Member 'UFortCollectionBookSlotView::CollectionBookButtonClass' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotView, CollectionBookButtonBox) == 0x000260, "Member 'UFortCollectionBookSlotView::CollectionBookButtonBox' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotView, CollectionBookSlotButtonGroup) == 0x000268, "Member 'UFortCollectionBookSlotView::CollectionBookSlotButtonGroup' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotView, CollectionBookSlotButtons) == 0x000270, "Member 'UFortCollectionBookSlotView::CollectionBookSlotButtons' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotView, AssociatedSection) == 0x000280, "Member 'UFortCollectionBookSlotView::AssociatedSection' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotView, PreviousSelectedButtonIdx) == 0x0002D0, "Member 'UFortCollectionBookSlotView::PreviousSelectedButtonIdx' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotView, CurrentSelectedButtonIdx) == 0x0002D4, "Member 'UFortCollectionBookSlotView::CurrentSelectedButtonIdx' has a wrong offset!");

// Class FortniteUI.FortCollectionBookSlotWidget
// 0x0128 (0x0360 - 0x0238)
class UFortCollectionBookSlotWidget final : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x10];                                     // 0x0238(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EFortItemCardSize                             ItemCardSize;                                      // 0x0248(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsRewardCard;                                     // 0x0249(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_24A[0x6];                                      // 0x024A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMultiSizeItemCard*                 ItemCardWidget;                                    // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                UnslottedOverlayWidget;                            // 0x0258(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                ReadyToSlotOverlayWidget;                          // 0x0260(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                UnslottedButReadyOverlayWidget;                    // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SlotRowName;                                       // 0x0270(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   ItemAvailableToSlotText;                           // 0x0278(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   NoItemsAvailableToSlotText;                        // 0x0290(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   HigherQualityItemsAvailableToSlotAndUpgradeAvailableText; // 0x02A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   HigherQualityItemsAvailableToSlotAndEvolveAvailableText; // 0x02C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   HigherQualityItemsAvailableToSlotText;             // 0x02D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ItemInSlotFullyUpgradedText;                       // 0x02F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ItemInSlotCanBeUpgradedText;                       // 0x0308(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ItemInSlotCanBeEvolvedText;                        // 0x0320(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UFortItem*                              SlottedItemRepresentation;                         // 0x0338(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_340[0x20];                                     // 0x0340(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FortCollectionBookSlottedItemUpdatedDelegate__DelegateSignature();
	void OnItemCardUpdated();
	void OnItemDestroyed();
	void OnSlottedItemOperationComplete(const class UFortAccountItem* ItemSlotted, class FName SlotId);

	int32 GetNumItemsToSlot() const;
	const class FName GetSlotRowName() const;
	class UFortItem* GetSlottedItemRepresentation() const;
	bool HasItemsToSlot() const;
	bool IsItemSlotted() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookSlotWidget">();
	}
	static class UFortCollectionBookSlotWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookSlotWidget>();
	}
};
static_assert(alignof(UFortCollectionBookSlotWidget) == 0x000008, "Wrong alignment on UFortCollectionBookSlotWidget");
static_assert(sizeof(UFortCollectionBookSlotWidget) == 0x000360, "Wrong size on UFortCollectionBookSlotWidget");
static_assert(offsetof(UFortCollectionBookSlotWidget, ItemCardSize) == 0x000248, "Member 'UFortCollectionBookSlotWidget::ItemCardSize' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotWidget, bIsRewardCard) == 0x000249, "Member 'UFortCollectionBookSlotWidget::bIsRewardCard' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotWidget, ItemCardWidget) == 0x000250, "Member 'UFortCollectionBookSlotWidget::ItemCardWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotWidget, UnslottedOverlayWidget) == 0x000258, "Member 'UFortCollectionBookSlotWidget::UnslottedOverlayWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotWidget, ReadyToSlotOverlayWidget) == 0x000260, "Member 'UFortCollectionBookSlotWidget::ReadyToSlotOverlayWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotWidget, UnslottedButReadyOverlayWidget) == 0x000268, "Member 'UFortCollectionBookSlotWidget::UnslottedButReadyOverlayWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotWidget, SlotRowName) == 0x000270, "Member 'UFortCollectionBookSlotWidget::SlotRowName' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotWidget, ItemAvailableToSlotText) == 0x000278, "Member 'UFortCollectionBookSlotWidget::ItemAvailableToSlotText' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotWidget, NoItemsAvailableToSlotText) == 0x000290, "Member 'UFortCollectionBookSlotWidget::NoItemsAvailableToSlotText' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotWidget, HigherQualityItemsAvailableToSlotAndUpgradeAvailableText) == 0x0002A8, "Member 'UFortCollectionBookSlotWidget::HigherQualityItemsAvailableToSlotAndUpgradeAvailableText' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotWidget, HigherQualityItemsAvailableToSlotAndEvolveAvailableText) == 0x0002C0, "Member 'UFortCollectionBookSlotWidget::HigherQualityItemsAvailableToSlotAndEvolveAvailableText' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotWidget, HigherQualityItemsAvailableToSlotText) == 0x0002D8, "Member 'UFortCollectionBookSlotWidget::HigherQualityItemsAvailableToSlotText' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotWidget, ItemInSlotFullyUpgradedText) == 0x0002F0, "Member 'UFortCollectionBookSlotWidget::ItemInSlotFullyUpgradedText' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotWidget, ItemInSlotCanBeUpgradedText) == 0x000308, "Member 'UFortCollectionBookSlotWidget::ItemInSlotCanBeUpgradedText' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotWidget, ItemInSlotCanBeEvolvedText) == 0x000320, "Member 'UFortCollectionBookSlotWidget::ItemInSlotCanBeEvolvedText' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookSlotWidget, SlottedItemRepresentation) == 0x000338, "Member 'UFortCollectionBookSlotWidget::SlottedItemRepresentation' has a wrong offset!");

// Class FortniteUI.FortSquadSlotsView
// 0x00F0 (0x0328 - 0x0238)
class UFortSquadSlotsView : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x10];                                     // 0x0238(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnDifferentSquadSlotSelectedEvent;                 // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnRequestOpenSquadSlotEvent;                       // 0x0258(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnRequestViewInAllEvent;                           // 0x0268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         IndexOfSelectedSquadSlot;                          // 0x0278(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSlotButtonsRequireSelection;                      // 0x027C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInPreviewMode;                                    // 0x027D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_27E[0x2];                                      // 0x027E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ESquadSlotType, struct FSquadSlotSortTypes> SquadSlotSortTypesMap;                             // 0x0280(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortDisableAutoSlottingPromptAction> DisableAutoSlottingToOpenSquadSlotPromptAction;    // 0x02D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCommittableButtonGroup*            SquadSlotButtonGroup;                              // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E0[0x30];                                     // 0x02E0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IFortItemViewContextInterface> ItemViewContext;                                   // 0x0310(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFortSquadSlotSelectorButton* CreateAndAddSquadSlotButton(const int32 SquadSlotIndex, const struct FHomebaseSquadSlot& SquadSlotDefinition, class UWidget** OutSquadSlotButtonHost);
	void HandleButtonClicked(class UCommonButton* CommittedButton, int32 ButtonIndex);
	void HandleButtonDoubleClicked(class UCommonButton* CommittedButton, int32 ButtonIndex);
	void HandleHoveredButtonChanged(class UCommonButton* HoveredButton, int32 ButtonIndex);
	void HandleRequestOpenSquadSlot(int32 SquadSlotIndex);
	void HandleRequestViewInAll(int32 SquadSlotIndex);
	void HandleSelectedButtonChanged(class UCommonButton* SelectedButton, int32 ButtonIndex);
	void OnDifferentSquadSlotSelected__DelegateSignature(int32 SquadSlotIndex);
	void SelectSlot(int32 SquadSlotIndex);
	void SetIdOfSquadToManageBP(const class FName& SquadId);
	void SetInPreviewMode(const bool bPreview);
	void SetIsSelectionLocked(const bool ShouldSelectionBeLocked);
	bool TryGetSelectedSquadSlotSortTypes(struct FSquadSlotSortTypes* OutSlotSortTypes);

	class FName GetIdOfSquadToManageBP() const;
	int32 GetIndexOfSelectedSquadSlot() const;
	bool TryGetStaticSquadDataBP(struct FHomebaseSquad* OutSquadData) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadSlotsView">();
	}
	static class UFortSquadSlotsView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadSlotsView>();
	}
};
static_assert(alignof(UFortSquadSlotsView) == 0x000008, "Wrong alignment on UFortSquadSlotsView");
static_assert(sizeof(UFortSquadSlotsView) == 0x000328, "Wrong size on UFortSquadSlotsView");
static_assert(offsetof(UFortSquadSlotsView, OnDifferentSquadSlotSelectedEvent) == 0x000248, "Member 'UFortSquadSlotsView::OnDifferentSquadSlotSelectedEvent' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotsView, OnRequestOpenSquadSlotEvent) == 0x000258, "Member 'UFortSquadSlotsView::OnRequestOpenSquadSlotEvent' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotsView, OnRequestViewInAllEvent) == 0x000268, "Member 'UFortSquadSlotsView::OnRequestViewInAllEvent' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotsView, IndexOfSelectedSquadSlot) == 0x000278, "Member 'UFortSquadSlotsView::IndexOfSelectedSquadSlot' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotsView, bSlotButtonsRequireSelection) == 0x00027C, "Member 'UFortSquadSlotsView::bSlotButtonsRequireSelection' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotsView, bInPreviewMode) == 0x00027D, "Member 'UFortSquadSlotsView::bInPreviewMode' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotsView, SquadSlotSortTypesMap) == 0x000280, "Member 'UFortSquadSlotsView::SquadSlotSortTypesMap' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotsView, DisableAutoSlottingToOpenSquadSlotPromptAction) == 0x0002D0, "Member 'UFortSquadSlotsView::DisableAutoSlottingToOpenSquadSlotPromptAction' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotsView, SquadSlotButtonGroup) == 0x0002D8, "Member 'UFortSquadSlotsView::SquadSlotButtonGroup' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotsView, ItemViewContext) == 0x000310, "Member 'UFortSquadSlotsView::ItemViewContext' has a wrong offset!");

// Class FortniteUI.FortCollectionBookWidget
// 0x0030 (0x0378 - 0x0348)
class UFortCollectionBookWidget final : public UFortActivatablePanel
{
public:
	class UFortCollectionBookProgressWidget*      ProgressWidget;                                    // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonWidgetSwitcher*                  MainWidgetSwitcher;                                // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCollectionBookPrimaryPanel*        PrimaryPanelWidget;                                // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCollectionBookSectionPanel*        SectionPanelWidget;                                // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PrimaryPanelIdx;                                   // 0x0368(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SectionPanelIdx;                                   // 0x036C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_370[0x8];                                      // 0x0370(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCollectionBookPageClicked(const class UFortCollectionBookPage* ClickedPage);
	void OnCollectionBookPageSelected(const class UFortCollectionBookPage* SelectedPage);
	void OnCollectionBookSectionClicked(const class UFortCollectionBookSection* ClickedSection);
	void OnCollectionBookSectionCloseRequest();
	void OnPreviewXPChangeRequest(int32 XPChange);
	void RequestToClose();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionBookWidget">();
	}
	static class UFortCollectionBookWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionBookWidget>();
	}
};
static_assert(alignof(UFortCollectionBookWidget) == 0x000008, "Wrong alignment on UFortCollectionBookWidget");
static_assert(sizeof(UFortCollectionBookWidget) == 0x000378, "Wrong size on UFortCollectionBookWidget");
static_assert(offsetof(UFortCollectionBookWidget, ProgressWidget) == 0x000348, "Member 'UFortCollectionBookWidget::ProgressWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookWidget, MainWidgetSwitcher) == 0x000350, "Member 'UFortCollectionBookWidget::MainWidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookWidget, PrimaryPanelWidget) == 0x000358, "Member 'UFortCollectionBookWidget::PrimaryPanelWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookWidget, SectionPanelWidget) == 0x000360, "Member 'UFortCollectionBookWidget::SectionPanelWidget' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookWidget, PrimaryPanelIdx) == 0x000368, "Member 'UFortCollectionBookWidget::PrimaryPanelIdx' has a wrong offset!");
static_assert(offsetof(UFortCollectionBookWidget, SectionPanelIdx) == 0x00036C, "Member 'UFortCollectionBookWidget::SectionPanelIdx' has a wrong offset!");

// Class FortniteUI.FortOptionsMenuDefaults
// 0x00A0 (0x00D0 - 0x0030)
class UFortOptionsMenuDefaults final : public UDataAsset
{
public:
	TMap<ESettingType, int32>                     SettingRotatorDefaults;                            // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<ESettingType, float>                     SettingSliderDefaults;                             // 0x0080(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortOptionsMenuDefaults">();
	}
	static class UFortOptionsMenuDefaults* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortOptionsMenuDefaults>();
	}
};
static_assert(alignof(UFortOptionsMenuDefaults) == 0x000008, "Wrong alignment on UFortOptionsMenuDefaults");
static_assert(sizeof(UFortOptionsMenuDefaults) == 0x0000D0, "Wrong size on UFortOptionsMenuDefaults");
static_assert(offsetof(UFortOptionsMenuDefaults, SettingRotatorDefaults) == 0x000030, "Member 'UFortOptionsMenuDefaults::SettingRotatorDefaults' has a wrong offset!");
static_assert(offsetof(UFortOptionsMenuDefaults, SettingSliderDefaults) == 0x000080, "Member 'UFortOptionsMenuDefaults::SettingSliderDefaults' has a wrong offset!");

// Class FortniteUI.FortSquadSlotItemDetailElementWidget
// 0x0028 (0x02A8 - 0x0280)
class UFortSquadSlotItemDetailElementWidget : public UFortItemDetailElementWidget
{
public:
	uint8                                         Pad_280[0x28];                                     // 0x0280(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandlePostDifferentSquadSlotSetBP();
	void SetIdOfSquadSlotToManageBP(const class FName& SquadId, const int32 SquadSlotIndex);

	void GetIdOfSquadSlotToManageBP(class FName* OutSquadId, int32* OutSquadSlotIndex) const;
	class UFortItem* GetItemInSquadSlotBP(const class ULocalPlayer* LocalPlayer) const;
	bool IsSquadSlotLockedBP() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadSlotItemDetailElementWidget">();
	}
	static class UFortSquadSlotItemDetailElementWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadSlotItemDetailElementWidget>();
	}
};
static_assert(alignof(UFortSquadSlotItemDetailElementWidget) == 0x000008, "Wrong alignment on UFortSquadSlotItemDetailElementWidget");
static_assert(sizeof(UFortSquadSlotItemDetailElementWidget) == 0x0002A8, "Wrong size on UFortSquadSlotItemDetailElementWidget");

// Class FortniteUI.FortCommandRoomPedestal
// 0x0018 (0x03F8 - 0x03E0)
class AFortCommandRoomPedestal : public AFortItemPreviewPedestal
{
public:
	uint8                                         Pad_3E0[0x18];                                     // 0x03E0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleDifferentHeroSet();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCommandRoomPedestal">();
	}
	static class AFortCommandRoomPedestal* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortCommandRoomPedestal>();
	}
};
static_assert(alignof(AFortCommandRoomPedestal) == 0x000008, "Wrong alignment on AFortCommandRoomPedestal");
static_assert(sizeof(AFortCommandRoomPedestal) == 0x0003F8, "Wrong size on AFortCommandRoomPedestal");

// Class FortniteUI.FortCommittableButtonGroup
// 0x0010 (0x00A8 - 0x0098)
class UFortCommittableButtonGroup final : public UCommonButtonGroup
{
public:
	UMulticastDelegateProperty_                   OnButtonCommitted;                                 // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCommittableButtonGroup">();
	}
	static class UFortCommittableButtonGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCommittableButtonGroup>();
	}
};
static_assert(alignof(UFortCommittableButtonGroup) == 0x000008, "Wrong alignment on UFortCommittableButtonGroup");
static_assert(sizeof(UFortCommittableButtonGroup) == 0x0000A8, "Wrong size on UFortCommittableButtonGroup");
static_assert(offsetof(UFortCommittableButtonGroup, OnButtonCommitted) == 0x000098, "Member 'UFortCommittableButtonGroup::OnButtonCommitted' has a wrong offset!");

// Class FortniteUI.FortTwitchLoginModalWidget
// 0x0008 (0x0350 - 0x0348)
class UFortTwitchLoginModalWidget : public UFortActivatablePanel
{
public:
	class UNativeWidgetHost*                      NativeHost;                                        // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnNativeHostContentChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTwitchLoginModalWidget">();
	}
	static class UFortTwitchLoginModalWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTwitchLoginModalWidget>();
	}
};
static_assert(alignof(UFortTwitchLoginModalWidget) == 0x000008, "Wrong alignment on UFortTwitchLoginModalWidget");
static_assert(sizeof(UFortTwitchLoginModalWidget) == 0x000350, "Wrong size on UFortTwitchLoginModalWidget");
static_assert(offsetof(UFortTwitchLoginModalWidget, NativeHost) == 0x000348, "Member 'UFortTwitchLoginModalWidget::NativeHost' has a wrong offset!");

// Class FortniteUI.FortComparisonResultIndicator
// 0x0008 (0x0468 - 0x0460)
class UFortComparisonResultIndicator final : public UFortMultiSizeImage
{
public:
	bool                                          bShouldCollapseWhenNotShown;                       // 0x0460(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuffState                                ComparisonResult;                                  // 0x0461(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_462[0x6];                                      // 0x0462(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetComparisonResult(EFortBuffState Param_ComparisonResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortComparisonResultIndicator">();
	}
	static class UFortComparisonResultIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortComparisonResultIndicator>();
	}
};
static_assert(alignof(UFortComparisonResultIndicator) == 0x000008, "Wrong alignment on UFortComparisonResultIndicator");
static_assert(sizeof(UFortComparisonResultIndicator) == 0x000468, "Wrong size on UFortComparisonResultIndicator");
static_assert(offsetof(UFortComparisonResultIndicator, bShouldCollapseWhenNotShown) == 0x000460, "Member 'UFortComparisonResultIndicator::bShouldCollapseWhenNotShown' has a wrong offset!");
static_assert(offsetof(UFortComparisonResultIndicator, ComparisonResult) == 0x000461, "Member 'UFortComparisonResultIndicator::ComparisonResult' has a wrong offset!");

// Class FortniteUI.FortCraftingBarWidget
// 0x0028 (0x0290 - 0x0268)
class UFortCraftingBarWidget final : public UFortHUDElementWidget
{
public:
	class UCommonTextBlock*                       CraftingText;                                      // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UProgressBar*                           CraftingProgressBar;                               // 0x0270(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CompletedRemainVisibleTime;                        // 0x0278(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_27C[0x14];                                     // 0x027C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandlePlayerStartedCrafting();
	void HandlePlayerStoppedCrafting(bool bSuccess, EFortCraftFailCause CraftFailureCause);
	void OnCompletedSetHidden();
	void SetHideCraftingBar(bool bInHideCraftBar);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCraftingBarWidget">();
	}
	static class UFortCraftingBarWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCraftingBarWidget>();
	}
};
static_assert(alignof(UFortCraftingBarWidget) == 0x000008, "Wrong alignment on UFortCraftingBarWidget");
static_assert(sizeof(UFortCraftingBarWidget) == 0x000290, "Wrong size on UFortCraftingBarWidget");
static_assert(offsetof(UFortCraftingBarWidget, CraftingText) == 0x000268, "Member 'UFortCraftingBarWidget::CraftingText' has a wrong offset!");
static_assert(offsetof(UFortCraftingBarWidget, CraftingProgressBar) == 0x000270, "Member 'UFortCraftingBarWidget::CraftingProgressBar' has a wrong offset!");
static_assert(offsetof(UFortCraftingBarWidget, CompletedRemainVisibleTime) == 0x000278, "Member 'UFortCraftingBarWidget::CompletedRemainVisibleTime' has a wrong offset!");

// Class FortniteUI.FortSquadSlotDetailsPanel
// 0x0060 (0x0298 - 0x0238)
class UFortSquadSlotDetailsPanel : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x28];                                     // 0x0238(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortSquadSlotItemDetailsHostPanel*     ItemDetailsPanel;                                  // 0x0260(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TScriptInterface<class IFortItemViewContextInterface> ItemViewContext;                                   // 0x0268(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_278[0x20];                                     // 0x0278(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleDifferentSquadSlotSetBP();
	void HandleSquadSlotRestrictionFactorsChangedBP();
	void HandleSquadSlotStateChangedBP();
	void SetIdOfSquadSlotToManageBP(const class FName& SquadId, const int32 SquadSlotIndex);
	void SetScrollWidget();

	void GetIdOfSquadSlotToManageBP(class FName* OutSquadId, int32* OutSquadSlotIndex) const;
	class UFortItem* GetItemInSquadSlotBP(const class ULocalPlayer* LocalPlayer) const;
	TArray<EFortSquadSlottingRestrictionReason> GetSlottingRestrictionReasons() const;
	bool IsSquadSlotLockedBP() const;
	bool TryGetItemToPreviewInSlot(class UFortItem** OutItemToPreviewInSlot) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadSlotDetailsPanel">();
	}
	static class UFortSquadSlotDetailsPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadSlotDetailsPanel>();
	}
};
static_assert(alignof(UFortSquadSlotDetailsPanel) == 0x000008, "Wrong alignment on UFortSquadSlotDetailsPanel");
static_assert(sizeof(UFortSquadSlotDetailsPanel) == 0x000298, "Wrong size on UFortSquadSlotDetailsPanel");
static_assert(offsetof(UFortSquadSlotDetailsPanel, ItemDetailsPanel) == 0x000260, "Member 'UFortSquadSlotDetailsPanel::ItemDetailsPanel' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotDetailsPanel, ItemViewContext) == 0x000268, "Member 'UFortSquadSlotDetailsPanel::ItemViewContext' has a wrong offset!");

// Class FortniteUI.FortCreativeAdsView
// 0x0010 (0x0240 - 0x0230)
class UFortCreativeAdsView final : public UUserWidget
{
public:
	TArray<struct FCreativeAdData>                CreativeAdList;                                    // 0x0230(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativeAdsView">();
	}
	static class UFortCreativeAdsView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativeAdsView>();
	}
};
static_assert(alignof(UFortCreativeAdsView) == 0x000008, "Wrong alignment on UFortCreativeAdsView");
static_assert(sizeof(UFortCreativeAdsView) == 0x000240, "Wrong size on UFortCreativeAdsView");
static_assert(offsetof(UFortCreativeAdsView, CreativeAdList) == 0x000230, "Member 'UFortCreativeAdsView::CreativeAdList' has a wrong offset!");

// Class FortniteUI.FortNewAccountWarning
// 0x0030 (0x0350 - 0x0320)
class UFortNewAccountWarning : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x20];                                     // 0x0320(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButton*                          Button_NewAccount;                                 // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Back;                                       // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortNewAccountWarning">();
	}
	static class UFortNewAccountWarning* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortNewAccountWarning>();
	}
};
static_assert(alignof(UFortNewAccountWarning) == 0x000008, "Wrong alignment on UFortNewAccountWarning");
static_assert(sizeof(UFortNewAccountWarning) == 0x000350, "Wrong size on UFortNewAccountWarning");
static_assert(offsetof(UFortNewAccountWarning, Button_NewAccount) == 0x000340, "Member 'UFortNewAccountWarning::Button_NewAccount' has a wrong offset!");
static_assert(offsetof(UFortNewAccountWarning, Button_Back) == 0x000348, "Member 'UFortNewAccountWarning::Button_Back' has a wrong offset!");

// Class FortniteUI.FortCreativeAdTile
// 0x0070 (0x02A8 - 0x0238)
class UFortCreativeAdTile final : public UCommonUserWidget
{
public:
	class UEpicCMSImage*                          Image_CreativeAd;                                  // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FCreativeAdData                        CMSAdEntry;                                        // 0x0240(0x0068)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void OnCMSDataUpdated();
	void PopulateAdTile(const struct FCreativeAdData& Entry);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativeAdTile">();
	}
	static class UFortCreativeAdTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativeAdTile>();
	}
};
static_assert(alignof(UFortCreativeAdTile) == 0x000008, "Wrong alignment on UFortCreativeAdTile");
static_assert(sizeof(UFortCreativeAdTile) == 0x0002A8, "Wrong size on UFortCreativeAdTile");
static_assert(offsetof(UFortCreativeAdTile, Image_CreativeAd) == 0x000238, "Member 'UFortCreativeAdTile::Image_CreativeAd' has a wrong offset!");
static_assert(offsetof(UFortCreativeAdTile, CMSAdEntry) == 0x000240, "Member 'UFortCreativeAdTile::CMSAdEntry' has a wrong offset!");

// Class FortniteUI.FortCreativeInfoIndicatorWidget
// 0x0000 (0x02A0 - 0x02A0)
class UFortCreativeInfoIndicatorWidget final : public UFortActorIndicatorWidget
{
public:
	void SetKeyBindWidgetBoundAction(class UFortKeybindWidget* FortKeybindWidget, const class FName ActionName, const EFortBuildingInteraction InteractionType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativeInfoIndicatorWidget">();
	}
	static class UFortCreativeInfoIndicatorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativeInfoIndicatorWidget>();
	}
};
static_assert(alignof(UFortCreativeInfoIndicatorWidget) == 0x000008, "Wrong alignment on UFortCreativeInfoIndicatorWidget");
static_assert(sizeof(UFortCreativeInfoIndicatorWidget) == 0x0002A0, "Wrong size on UFortCreativeInfoIndicatorWidget");

// Class FortniteUI.FortReticle
// 0x0038 (0x02A0 - 0x0268)
class UFortReticle final : public UFortHUDElementWidget
{
public:
	uint8                                         Pad_268[0x30];                                     // 0x0268(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     ReticleWeaponCooldownMI;                           // 0x0298(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnContextualReticleChanged();
	void OnPawnSet();
	void OnReticleColorChanged();
	void OnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortReticle">();
	}
	static class UFortReticle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortReticle>();
	}
};
static_assert(alignof(UFortReticle) == 0x000008, "Wrong alignment on UFortReticle");
static_assert(sizeof(UFortReticle) == 0x0002A0, "Wrong size on UFortReticle");
static_assert(offsetof(UFortReticle, ReticleWeaponCooldownMI) == 0x000298, "Member 'UFortReticle::ReticleWeaponCooldownMI' has a wrong offset!");

// Class FortniteUI.FortCreativeIslandLink
// 0x0050 (0x0078 - 0x0028)
class UFortCreativeIslandLink final : public UObject
{
public:
	class FString                                 Mnemonic;                                          // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatorUsername;                                   // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tagline;                                           // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCreativeIslandLinkCategory               Category;                                          // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDummyLink;                                        // 0x0069(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              SortDate;                                          // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativeIslandLink">();
	}
	static class UFortCreativeIslandLink* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativeIslandLink>();
	}
};
static_assert(alignof(UFortCreativeIslandLink) == 0x000008, "Wrong alignment on UFortCreativeIslandLink");
static_assert(sizeof(UFortCreativeIslandLink) == 0x000078, "Wrong size on UFortCreativeIslandLink");
static_assert(offsetof(UFortCreativeIslandLink, Mnemonic) == 0x000028, "Member 'UFortCreativeIslandLink::Mnemonic' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandLink, CreatorUsername) == 0x000038, "Member 'UFortCreativeIslandLink::CreatorUsername' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandLink, Title) == 0x000048, "Member 'UFortCreativeIslandLink::Title' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandLink, Tagline) == 0x000058, "Member 'UFortCreativeIslandLink::Tagline' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandLink, Category) == 0x000068, "Member 'UFortCreativeIslandLink::Category' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandLink, bDummyLink) == 0x000069, "Member 'UFortCreativeIslandLink::bDummyLink' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandLink, SortDate) == 0x000070, "Member 'UFortCreativeIslandLink::SortDate' has a wrong offset!");

// Class FortniteUI.FortCreativeIslandLinkEntry
// 0x0008 (0x0B38 - 0x0B30)
class UFortCreativeIslandLinkEntry final : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativeIslandLinkEntry">();
	}
	static class UFortCreativeIslandLinkEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativeIslandLinkEntry>();
	}
};
static_assert(alignof(UFortCreativeIslandLinkEntry) == 0x000008, "Wrong alignment on UFortCreativeIslandLinkEntry");
static_assert(sizeof(UFortCreativeIslandLinkEntry) == 0x000B38, "Wrong size on UFortCreativeIslandLinkEntry");

// Class FortniteUI.FortMulchItemTileButton
// 0x0000 (0x0B68 - 0x0B68)
class UFortMulchItemTileButton final : public UFortItemTileButton
{
public:
	void HandleItemChanged_BP(class UFortItem* NewItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMulchItemTileButton">();
	}
	static class UFortMulchItemTileButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMulchItemTileButton>();
	}
};
static_assert(alignof(UFortMulchItemTileButton) == 0x000008, "Wrong alignment on UFortMulchItemTileButton");
static_assert(sizeof(UFortMulchItemTileButton) == 0x000B68, "Wrong size on UFortMulchItemTileButton");

// Class FortniteUI.FortSplashScreenWidget
// 0x0010 (0x0330 - 0x0320)
class UFortSplashScreenWidget : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSplashScreenWidget">();
	}
	static class UFortSplashScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSplashScreenWidget>();
	}
};
static_assert(alignof(UFortSplashScreenWidget) == 0x000008, "Wrong alignment on UFortSplashScreenWidget");
static_assert(sizeof(UFortSplashScreenWidget) == 0x000330, "Wrong size on UFortSplashScreenWidget");

// Class FortniteUI.FortCreativeIslandLinkScreen
// 0x0098 (0x03E0 - 0x0348)
class UFortCreativeIslandLinkScreen final : public UFortActivatablePanel
{
public:
	int32                                         NumDebugIslandLinks;                               // 0x0348(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnCreativeIslandCodeConfirmed;                     // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UEditableText*                          EditableText_IslandLink;                           // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UListView*                              ListView_IslandLinks;                              // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButton*                          Button_Select;                                     // 0x0370(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Cancel;                                     // 0x0378(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Refresh;                                    // 0x0380(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UFortCreativeIslandLink*>        FavoriteIslandLinks;                               // 0x0388(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UFortCreativeIslandLink*>        RecentIslandLinks;                                 // 0x0398(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class AFortAthenaCreativePortal*              TargetPortal;                                      // 0x03A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDateTime                              LastRefreshTime;                                   // 0x03B0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 LastTestedMnemonic;                                // 0x03B8(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bCodeLookupRequestInFlight;                        // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bFriendsGetRequestInFlight;                        // 0x03C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3CA[0x16];                                     // 0x03CA(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleIslandLinkChanged(const class FText& Text);
	void HandleIslandLinkCommitted(const class FText& InText, ETextCommit CommitInfo);
	void HandleIslandSelectionChanged(class UObject* Item);
	void OnCreativeIslandLinksPopulated();
	void OnCreativeIslandLinkValidated(EFortCreativeIslandLinkValidationResult ValidateResult);
	void RemoveIslandFromFavorites(const class FString& LinkCode);
	void SetTargetPortal(class AFortAthenaCreativePortal* Portal);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativeIslandLinkScreen">();
	}
	static class UFortCreativeIslandLinkScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativeIslandLinkScreen>();
	}
};
static_assert(alignof(UFortCreativeIslandLinkScreen) == 0x000008, "Wrong alignment on UFortCreativeIslandLinkScreen");
static_assert(sizeof(UFortCreativeIslandLinkScreen) == 0x0003E0, "Wrong size on UFortCreativeIslandLinkScreen");
static_assert(offsetof(UFortCreativeIslandLinkScreen, NumDebugIslandLinks) == 0x000348, "Member 'UFortCreativeIslandLinkScreen::NumDebugIslandLinks' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandLinkScreen, OnCreativeIslandCodeConfirmed) == 0x000350, "Member 'UFortCreativeIslandLinkScreen::OnCreativeIslandCodeConfirmed' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandLinkScreen, EditableText_IslandLink) == 0x000360, "Member 'UFortCreativeIslandLinkScreen::EditableText_IslandLink' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandLinkScreen, ListView_IslandLinks) == 0x000368, "Member 'UFortCreativeIslandLinkScreen::ListView_IslandLinks' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandLinkScreen, Button_Select) == 0x000370, "Member 'UFortCreativeIslandLinkScreen::Button_Select' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandLinkScreen, Button_Cancel) == 0x000378, "Member 'UFortCreativeIslandLinkScreen::Button_Cancel' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandLinkScreen, Button_Refresh) == 0x000380, "Member 'UFortCreativeIslandLinkScreen::Button_Refresh' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandLinkScreen, FavoriteIslandLinks) == 0x000388, "Member 'UFortCreativeIslandLinkScreen::FavoriteIslandLinks' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandLinkScreen, RecentIslandLinks) == 0x000398, "Member 'UFortCreativeIslandLinkScreen::RecentIslandLinks' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandLinkScreen, TargetPortal) == 0x0003A8, "Member 'UFortCreativeIslandLinkScreen::TargetPortal' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandLinkScreen, LastRefreshTime) == 0x0003B0, "Member 'UFortCreativeIslandLinkScreen::LastRefreshTime' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandLinkScreen, LastTestedMnemonic) == 0x0003B8, "Member 'UFortCreativeIslandLinkScreen::LastTestedMnemonic' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandLinkScreen, bCodeLookupRequestInFlight) == 0x0003C8, "Member 'UFortCreativeIslandLinkScreen::bCodeLookupRequestInFlight' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandLinkScreen, bFriendsGetRequestInFlight) == 0x0003C9, "Member 'UFortCreativeIslandLinkScreen::bFriendsGetRequestInFlight' has a wrong offset!");

// Class FortniteUI.FortCreativeIslandPanel
// 0x0018 (0x0280 - 0x0268)
class UFortCreativeIslandPanel final : public UFortHUDElementWidget
{
public:
	UMulticastDelegateProperty_                   OnSupportCreator;                                  // 0x0268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UInputComponent*                        PanelInputComponent;                               // 0x0278(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class FText GetCreatorName();
	void PopPanelInputComponent(class APlayerController* PlayerController);
	void PushPanelInputComponent(class APlayerController* PlayerController);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativeIslandPanel">();
	}
	static class UFortCreativeIslandPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativeIslandPanel>();
	}
};
static_assert(alignof(UFortCreativeIslandPanel) == 0x000008, "Wrong alignment on UFortCreativeIslandPanel");
static_assert(sizeof(UFortCreativeIslandPanel) == 0x000280, "Wrong size on UFortCreativeIslandPanel");
static_assert(offsetof(UFortCreativeIslandPanel, OnSupportCreator) == 0x000268, "Member 'UFortCreativeIslandPanel::OnSupportCreator' has a wrong offset!");
static_assert(offsetof(UFortCreativeIslandPanel, PanelInputComponent) == 0x000278, "Member 'UFortCreativeIslandPanel::PanelInputComponent' has a wrong offset!");

// Class FortniteUI.FortQuestTrackerList
// 0x0038 (0x0270 - 0x0238)
class UFortQuestTrackerList final : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bConfigureAsHUD;                                   // 0x0240(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonListView*                        QuestList;                                         // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UFortQuestItem*>                 HUDCachedQuests;                                   // 0x0250(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnSizeEstimateChangedDelegate;                     // 0x0260(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	TArray<class UFortQuestItem*> GetQuestsToDisplay();
	void HandleHUDFinalObjectiveHidden(class UFortQuestItem* QuestItem);
	void HandlePinnedQuestsChanged();
	void HandleQuestsUpdated();
	void HandleSizeEstimateChanged(class UObject* ChangedElement);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQuestTrackerList">();
	}
	static class UFortQuestTrackerList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQuestTrackerList>();
	}
};
static_assert(alignof(UFortQuestTrackerList) == 0x000008, "Wrong alignment on UFortQuestTrackerList");
static_assert(sizeof(UFortQuestTrackerList) == 0x000270, "Wrong size on UFortQuestTrackerList");
static_assert(offsetof(UFortQuestTrackerList, bConfigureAsHUD) == 0x000240, "Member 'UFortQuestTrackerList::bConfigureAsHUD' has a wrong offset!");
static_assert(offsetof(UFortQuestTrackerList, QuestList) == 0x000248, "Member 'UFortQuestTrackerList::QuestList' has a wrong offset!");
static_assert(offsetof(UFortQuestTrackerList, HUDCachedQuests) == 0x000250, "Member 'UFortQuestTrackerList::HUDCachedQuests' has a wrong offset!");
static_assert(offsetof(UFortQuestTrackerList, OnSizeEstimateChangedDelegate) == 0x000260, "Member 'UFortQuestTrackerList::OnSizeEstimateChangedDelegate' has a wrong offset!");

// Class FortniteUI.FortCreativeItemListMenu
// 0x0030 (0x0378 - 0x0348)
class UFortCreativeItemListMenu final : public UFortActivatablePanel
{
public:
	TSubclassOf<class UFortCreativeItemListPanelData> PanelDataClass;                                    // 0x0348(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             ItemListSource;                                    // 0x0350(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             ItemListCategorySource;                            // 0x0358(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortCreativeItemListPanelData*         ItemListPanelData;                                 // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemSelected;                                    // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void BroadcastOnItemSelected(const struct FFortItemEntry& ItemToSpawn);
	void LoadItems();
	void OnItemsLoaded();

	bool CanPlayerCreateInVolume(const class UObject* WorldContextObject) const;
	EFortItemCardSize GetCardSizeForCategory(const class FName& ItemListCategoryName) const;
	bool GetCollapseBorderPadFlagForCategory(const class FName& ItemListCategoryName) const;
	class FName GetTabNameFromLabel(const class FText& TabLabel) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativeItemListMenu">();
	}
	static class UFortCreativeItemListMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativeItemListMenu>();
	}
};
static_assert(alignof(UFortCreativeItemListMenu) == 0x000008, "Wrong alignment on UFortCreativeItemListMenu");
static_assert(sizeof(UFortCreativeItemListMenu) == 0x000378, "Wrong size on UFortCreativeItemListMenu");
static_assert(offsetof(UFortCreativeItemListMenu, PanelDataClass) == 0x000348, "Member 'UFortCreativeItemListMenu::PanelDataClass' has a wrong offset!");
static_assert(offsetof(UFortCreativeItemListMenu, ItemListSource) == 0x000350, "Member 'UFortCreativeItemListMenu::ItemListSource' has a wrong offset!");
static_assert(offsetof(UFortCreativeItemListMenu, ItemListCategorySource) == 0x000358, "Member 'UFortCreativeItemListMenu::ItemListCategorySource' has a wrong offset!");
static_assert(offsetof(UFortCreativeItemListMenu, ItemListPanelData) == 0x000360, "Member 'UFortCreativeItemListMenu::ItemListPanelData' has a wrong offset!");
static_assert(offsetof(UFortCreativeItemListMenu, OnItemSelected) == 0x000368, "Member 'UFortCreativeItemListMenu::OnItemSelected' has a wrong offset!");

// Class FortniteUI.FortCreativeItemListPanelData
// 0x0040 (0x0068 - 0x0028)
class UFortCreativeItemListPanelData : public UObject
{
public:
	TArray<class UFortItemDefinition*>            AllItems;                                          // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FItemListCategoryArray>         CategoryList;                                      // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLoadItemsComplete;                               // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UDataTable*                             ItemListTable;                                     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             ItemListCategoryTable;                             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UFortCreativeItemListPanelData* GetCreativeItemListPanelData(class UObject* Target, TSubclassOf<class UFortCreativeItemListPanelData> PanelDataClass, class UDataTable* InItemListSource, class UDataTable* InItemListCategorySource);

	void LoadItems(class UObject* Target);

	class FText GetInteractionText() const;
	struct FFortItemEntry GetItemToSpawn(class UFortItemDefinition* InItemDefinition) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativeItemListPanelData">();
	}
	static class UFortCreativeItemListPanelData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativeItemListPanelData>();
	}
};
static_assert(alignof(UFortCreativeItemListPanelData) == 0x000008, "Wrong alignment on UFortCreativeItemListPanelData");
static_assert(sizeof(UFortCreativeItemListPanelData) == 0x000068, "Wrong size on UFortCreativeItemListPanelData");
static_assert(offsetof(UFortCreativeItemListPanelData, AllItems) == 0x000028, "Member 'UFortCreativeItemListPanelData::AllItems' has a wrong offset!");
static_assert(offsetof(UFortCreativeItemListPanelData, CategoryList) == 0x000038, "Member 'UFortCreativeItemListPanelData::CategoryList' has a wrong offset!");
static_assert(offsetof(UFortCreativeItemListPanelData, OnLoadItemsComplete) == 0x000048, "Member 'UFortCreativeItemListPanelData::OnLoadItemsComplete' has a wrong offset!");
static_assert(offsetof(UFortCreativeItemListPanelData, ItemListTable) == 0x000058, "Member 'UFortCreativeItemListPanelData::ItemListTable' has a wrong offset!");
static_assert(offsetof(UFortCreativeItemListPanelData, ItemListCategoryTable) == 0x000060, "Member 'UFortCreativeItemListPanelData::ItemListCategoryTable' has a wrong offset!");

// Class FortniteUI.FortGridWidget
// 0x0010 (0x0278 - 0x0268)
class UFortGridWidget final : public UFortGridWidgetBase
{
public:
	uint8                                         Pad_268[0x10];                                     // 0x0268(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGridWidget">();
	}
	static class UFortGridWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGridWidget>();
	}
};
static_assert(alignof(UFortGridWidget) == 0x000008, "Wrong alignment on UFortGridWidget");
static_assert(sizeof(UFortGridWidget) == 0x000278, "Wrong size on UFortGridWidget");

// Class FortniteUI.FortCreativeMiniGameInfo
// 0x0040 (0x0270 - 0x0230)
class UFortCreativeMiniGameInfo final : public UUserWidget
{
public:
	UMulticastDelegateProperty_                   OnSupportCreator;                                  // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       Text_Name;                                         // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_CreatorName;                                  // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Bullet1;                                      // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Bullet2;                                      // 0x0258(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Bullet3;                                      // 0x0260(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInputComponent*                        PanelInputComponent;                               // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnMiniGameStartedFromInputComponent();
	void OnTextSet();
	void OnVisible();
	void PopPanelInputComponent();
	void PushPanelInputComponent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativeMiniGameInfo">();
	}
	static class UFortCreativeMiniGameInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativeMiniGameInfo>();
	}
};
static_assert(alignof(UFortCreativeMiniGameInfo) == 0x000008, "Wrong alignment on UFortCreativeMiniGameInfo");
static_assert(sizeof(UFortCreativeMiniGameInfo) == 0x000270, "Wrong size on UFortCreativeMiniGameInfo");
static_assert(offsetof(UFortCreativeMiniGameInfo, OnSupportCreator) == 0x000230, "Member 'UFortCreativeMiniGameInfo::OnSupportCreator' has a wrong offset!");
static_assert(offsetof(UFortCreativeMiniGameInfo, Text_Name) == 0x000240, "Member 'UFortCreativeMiniGameInfo::Text_Name' has a wrong offset!");
static_assert(offsetof(UFortCreativeMiniGameInfo, Text_CreatorName) == 0x000248, "Member 'UFortCreativeMiniGameInfo::Text_CreatorName' has a wrong offset!");
static_assert(offsetof(UFortCreativeMiniGameInfo, Text_Bullet1) == 0x000250, "Member 'UFortCreativeMiniGameInfo::Text_Bullet1' has a wrong offset!");
static_assert(offsetof(UFortCreativeMiniGameInfo, Text_Bullet2) == 0x000258, "Member 'UFortCreativeMiniGameInfo::Text_Bullet2' has a wrong offset!");
static_assert(offsetof(UFortCreativeMiniGameInfo, Text_Bullet3) == 0x000260, "Member 'UFortCreativeMiniGameInfo::Text_Bullet3' has a wrong offset!");
static_assert(offsetof(UFortCreativeMiniGameInfo, PanelInputComponent) == 0x000268, "Member 'UFortCreativeMiniGameInfo::PanelInputComponent' has a wrong offset!");

// Class FortniteUI.FortCreativeMoreInfoPanel
// 0x0038 (0x0380 - 0x0348)
class UFortCreativeMoreInfoPanel : public UFortActivatablePanel
{
public:
	class UFortEditableFilteredCountedTextBox*    FilteredTextEntryWidget_Name;                      // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortEditableFilteredCountedTextBox*    FilteredTextEntryWidget_0;                         // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortEditableFilteredCountedTextBox*    FilteredTextEntryWidget_1;                         // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortEditableFilteredCountedTextBox*    FilteredTextEntryWidget_2;                         // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Apply;                                      // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Preview;                                    // 0x0370(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Clear;                                      // 0x0378(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleAcceptClicked();
	void HandleClearClicked();
	void HandlePreviewClicked();
	void OnAccept();
	void OnPreview();
	void OnPublishComplete(const class FString& Result);
	void OnSaveCallBack(bool bSuccess);
	void ShowError(const class FString& Error);
	void ShowSpinner(bool bShow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativeMoreInfoPanel">();
	}
	static class UFortCreativeMoreInfoPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativeMoreInfoPanel>();
	}
};
static_assert(alignof(UFortCreativeMoreInfoPanel) == 0x000008, "Wrong alignment on UFortCreativeMoreInfoPanel");
static_assert(sizeof(UFortCreativeMoreInfoPanel) == 0x000380, "Wrong size on UFortCreativeMoreInfoPanel");
static_assert(offsetof(UFortCreativeMoreInfoPanel, FilteredTextEntryWidget_Name) == 0x000348, "Member 'UFortCreativeMoreInfoPanel::FilteredTextEntryWidget_Name' has a wrong offset!");
static_assert(offsetof(UFortCreativeMoreInfoPanel, FilteredTextEntryWidget_0) == 0x000350, "Member 'UFortCreativeMoreInfoPanel::FilteredTextEntryWidget_0' has a wrong offset!");
static_assert(offsetof(UFortCreativeMoreInfoPanel, FilteredTextEntryWidget_1) == 0x000358, "Member 'UFortCreativeMoreInfoPanel::FilteredTextEntryWidget_1' has a wrong offset!");
static_assert(offsetof(UFortCreativeMoreInfoPanel, FilteredTextEntryWidget_2) == 0x000360, "Member 'UFortCreativeMoreInfoPanel::FilteredTextEntryWidget_2' has a wrong offset!");
static_assert(offsetof(UFortCreativeMoreInfoPanel, Button_Apply) == 0x000368, "Member 'UFortCreativeMoreInfoPanel::Button_Apply' has a wrong offset!");
static_assert(offsetof(UFortCreativeMoreInfoPanel, Button_Preview) == 0x000370, "Member 'UFortCreativeMoreInfoPanel::Button_Preview' has a wrong offset!");
static_assert(offsetof(UFortCreativeMoreInfoPanel, Button_Clear) == 0x000378, "Member 'UFortCreativeMoreInfoPanel::Button_Clear' has a wrong offset!");

// Class FortniteUI.FortCreativeOptions
// 0x0018 (0x0040 - 0x0028)
class UFortCreativeOptions final : public UObject
{
public:
	int32                                         CurrentReleaseVersion;                             // 0x0028(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FOptionsReleaseInfo>            ReleaseInfo;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static bool GetVisibleOptionsForTab(ESettingTab TabType, TArray<ESettingType>* VisibleOptions);
	static bool IsVisibleOption(ESettingType SettingType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativeOptions">();
	}
	static class UFortCreativeOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativeOptions>();
	}
};
static_assert(alignof(UFortCreativeOptions) == 0x000008, "Wrong alignment on UFortCreativeOptions");
static_assert(sizeof(UFortCreativeOptions) == 0x000040, "Wrong size on UFortCreativeOptions");
static_assert(offsetof(UFortCreativeOptions, CurrentReleaseVersion) == 0x000028, "Member 'UFortCreativeOptions::CurrentReleaseVersion' has a wrong offset!");
static_assert(offsetof(UFortCreativeOptions, ReleaseInfo) == 0x000030, "Member 'UFortCreativeOptions::ReleaseInfo' has a wrong offset!");

// Class FortniteUI.FortItemManagementScreen
// 0x0148 (0x0490 - 0x0348)
class UFortItemManagementScreen final : public UFortActivatablePanel
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnItemViewRefreshed;                               // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_360[0xC0];                                     // 0x0360(0x00C0)(Fixing Size After Last Property [ Dumper-7 ])
	EFortItemManagementMode                       Mode;                                              // 0x0420(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFrontendInventoryFilter                  FrontendInventoryFilter;                           // 0x0421(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReadOnlyModeWIFE;                                 // 0x0422(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConsumeItemRequestInProgress;                      // 0x0423(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemManagementInventoryPanel*      InventoryPanel;                                    // 0x0428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItemManagementModeDetailsPanel*    ModeDetailsPanel;                                  // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFortItem>               ItemToDetail;                                      // 0x0438(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_440[0x8];                                      // 0x0440(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortMulchConfirmationModalWidget> MulchConfirmationModalClass;                       // 0x0448(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortItemManagementCustomFilterModalWidget> CustomFilterModalClass;                            // 0x0450(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_458[0x18];                                     // 0x0458(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMulchConfirmationModalWidget*      MulchConfirmationModal;                            // 0x0470(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortItemManagementCustomFilterModalWidget* CustomFilterModal;                                 // 0x0478(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_480[0x8];                                      // 0x0480(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortInventoryContext*                  InventoryContext;                                  // 0x0488(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CancelInventoryPanelTileViewRefresh();
	bool CanRequestPopupMenuForSelectedItem();
	void ConsumeItem(class UFortConsumableAccountItem* ConsumableItem);
	void CraftAndSlotItem(class UFortSchematicItem* SchematicItem, EFortItemTier RequestedTier, int32 CraftCount);
	void CraftItem(class UFortSchematicItem* SchematicItem, EFortItemTier RequestedTier, int32 CraftCount);
	void CycleSortType();
	void DropItem(class UFortItem* Item);
	void EnterComparisonMode(class UFortItem* ItemToCompareDetailsWith);
	void EnterDetailsMode(class UFortItem* Param_ItemToDetail);
	void EnterMulchMode(class UFortItem* ItemToMulch);
	void EquipItem(class UFortItem* Item);
	void HandleConsumeItemBP(class UFortConsumableAccountItem* ConsumableItem);
	void HandleCraftAndSlotItemBP(class UFortSchematicItem* SchematicItem, EFortItemTier RequestedTier, int32 CraftCount);
	void HandleCraftItemBP(class UFortSchematicItem* SchematicItem, EFortItemTier RequestedTier, int32 CraftCount);
	void HandleDifferentItemManagementModeSetBP();
	void HandleDropItemBP(class UFortItem* Item);
	void HandleEquipItemBP(class UFortItem* Item);
	void HandleInspectItemBP(class UFortItem* Item);
	void HandleItemToCompareWithChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);
	void HandleItemToDetailChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);
	void HandleMulchQuantitySelection(class UFortItem* Item);
	void HandleOpenCraftingOptionsBP(class UFortSchematicItem* SchematicItem);
	void HandleTransferItemBP(class UFortItem* Item);
	void HideCustomFilterModal();
	void HideMulchConfirmationModal();
	void InspectItem(class UFortItem* Item);
	void MarkAllItemsAsSeen();
	void NotifyPanelActivated();
	void NotifyPanelDeactivated();
	void OpenCraftingOptions(class UFortSchematicItem* SchematicItem);
	void RequestPopupMenuForSelectedItem();
	void SetConsumeItemRequestInProgress(bool InProgress);
	void SetFrontendInventoryFilter(EFortFrontendInventoryFilter Param_FrontendInventoryFilter);
	void ShowCustomFilterModal();
	void ShowMulchConfirmationModal();
	void ToggleShowCollectionBookIndicator();
	void ToggleShowRefundIndicator();
	void TransferItem(class UFortItem* Item);

	class UFortItem* GetItemToCompareDetailsWith() const;
	class UFortItem* GetItemToDetail() const;
	bool GetShouldShowCollectionBookIndicator() const;
	bool GetShouldShowRefundIndicator() const;
	bool HasItemBeenSeen(class UFortAccountItem* AccountItem) const;
	bool IsScreenWIFE() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemManagementScreen">();
	}
	static class UFortItemManagementScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemManagementScreen>();
	}
};
static_assert(alignof(UFortItemManagementScreen) == 0x000008, "Wrong alignment on UFortItemManagementScreen");
static_assert(sizeof(UFortItemManagementScreen) == 0x000490, "Wrong size on UFortItemManagementScreen");
static_assert(offsetof(UFortItemManagementScreen, OnItemViewRefreshed) == 0x000350, "Member 'UFortItemManagementScreen::OnItemViewRefreshed' has a wrong offset!");
static_assert(offsetof(UFortItemManagementScreen, Mode) == 0x000420, "Member 'UFortItemManagementScreen::Mode' has a wrong offset!");
static_assert(offsetof(UFortItemManagementScreen, FrontendInventoryFilter) == 0x000421, "Member 'UFortItemManagementScreen::FrontendInventoryFilter' has a wrong offset!");
static_assert(offsetof(UFortItemManagementScreen, bReadOnlyModeWIFE) == 0x000422, "Member 'UFortItemManagementScreen::bReadOnlyModeWIFE' has a wrong offset!");
static_assert(offsetof(UFortItemManagementScreen, ConsumeItemRequestInProgress) == 0x000423, "Member 'UFortItemManagementScreen::ConsumeItemRequestInProgress' has a wrong offset!");
static_assert(offsetof(UFortItemManagementScreen, InventoryPanel) == 0x000428, "Member 'UFortItemManagementScreen::InventoryPanel' has a wrong offset!");
static_assert(offsetof(UFortItemManagementScreen, ModeDetailsPanel) == 0x000430, "Member 'UFortItemManagementScreen::ModeDetailsPanel' has a wrong offset!");
static_assert(offsetof(UFortItemManagementScreen, ItemToDetail) == 0x000438, "Member 'UFortItemManagementScreen::ItemToDetail' has a wrong offset!");
static_assert(offsetof(UFortItemManagementScreen, MulchConfirmationModalClass) == 0x000448, "Member 'UFortItemManagementScreen::MulchConfirmationModalClass' has a wrong offset!");
static_assert(offsetof(UFortItemManagementScreen, CustomFilterModalClass) == 0x000450, "Member 'UFortItemManagementScreen::CustomFilterModalClass' has a wrong offset!");
static_assert(offsetof(UFortItemManagementScreen, MulchConfirmationModal) == 0x000470, "Member 'UFortItemManagementScreen::MulchConfirmationModal' has a wrong offset!");
static_assert(offsetof(UFortItemManagementScreen, CustomFilterModal) == 0x000478, "Member 'UFortItemManagementScreen::CustomFilterModal' has a wrong offset!");
static_assert(offsetof(UFortItemManagementScreen, InventoryContext) == 0x000488, "Member 'UFortItemManagementScreen::InventoryContext' has a wrong offset!");

// Class FortniteUI.SeasonPassLevelWidget
// 0x0018 (0x0250 - 0x0238)
class USeasonPassLevelWidget : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x10];                                     // 0x0238(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortSeasonPassLevelInfo*               LevelInfo;                                         // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AttemptClaim();
	void OnAttemptClaimFinished(bool FreeClaimed, bool PaidClaimed);
	void OnLockedStatusChanged(bool FreeUnlocked, bool PaidUnlocked);
	void OnNavigateTo();
	void OnSetup();
	void PlayIntro();

	class UFortSeasonPassLevelInfo* GetLevelInfo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SeasonPassLevelWidget">();
	}
	static class USeasonPassLevelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USeasonPassLevelWidget>();
	}
};
static_assert(alignof(USeasonPassLevelWidget) == 0x000008, "Wrong alignment on USeasonPassLevelWidget");
static_assert(sizeof(USeasonPassLevelWidget) == 0x000250, "Wrong size on USeasonPassLevelWidget");
static_assert(offsetof(USeasonPassLevelWidget, LevelInfo) == 0x000248, "Member 'USeasonPassLevelWidget::LevelInfo' has a wrong offset!");

// Class FortniteUI.FortCreativeOptionsDisplay
// 0x0000 (0x0348 - 0x0348)
class UFortCreativeOptionsDisplay final : public UFortActivatablePanel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativeOptionsDisplay">();
	}
	static class UFortCreativeOptionsDisplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativeOptionsDisplay>();
	}
};
static_assert(alignof(UFortCreativeOptionsDisplay) == 0x000008, "Wrong alignment on UFortCreativeOptionsDisplay");
static_assert(sizeof(UFortCreativeOptionsDisplay) == 0x000348, "Wrong size on UFortCreativeOptionsDisplay");

// Class FortniteUI.FortItemManagementCustomFilterModalWidget
// 0x0068 (0x03B0 - 0x0348)
class UFortItemManagementCustomFilterModalWidget final : public UFortActivatablePanel
{
public:
	TWeakObjectPtr<class UFortItemManagementScreen> HostItemManagementScreen;                          // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<EFortInventoryCustomFilter>            AvailableFilters;                                  // 0x0350(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSet<EFortInventoryCustomFilter>              LocalCustomFilterSet;                              // 0x0360(0x0050)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	void CommitCustomFilters();
	void DisableAllFilters();
	void EnableAllFilters();
	void OnBeginCommitCustomFilter();
	void OnCustomFilterSetUpdated();
	void OnEndCommitCustomFilter(bool bWasSuccessful);
	void ToggleFilter(EFortInventoryCustomFilter Filter);

	bool IsCustomFilterEnabled(EFortInventoryCustomFilter Filter) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemManagementCustomFilterModalWidget">();
	}
	static class UFortItemManagementCustomFilterModalWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemManagementCustomFilterModalWidget>();
	}
};
static_assert(alignof(UFortItemManagementCustomFilterModalWidget) == 0x000008, "Wrong alignment on UFortItemManagementCustomFilterModalWidget");
static_assert(sizeof(UFortItemManagementCustomFilterModalWidget) == 0x0003B0, "Wrong size on UFortItemManagementCustomFilterModalWidget");
static_assert(offsetof(UFortItemManagementCustomFilterModalWidget, HostItemManagementScreen) == 0x000348, "Member 'UFortItemManagementCustomFilterModalWidget::HostItemManagementScreen' has a wrong offset!");
static_assert(offsetof(UFortItemManagementCustomFilterModalWidget, AvailableFilters) == 0x000350, "Member 'UFortItemManagementCustomFilterModalWidget::AvailableFilters' has a wrong offset!");
static_assert(offsetof(UFortItemManagementCustomFilterModalWidget, LocalCustomFilterSet) == 0x000360, "Member 'UFortItemManagementCustomFilterModalWidget::LocalCustomFilterSet' has a wrong offset!");

// Class FortniteUI.FortCreativeSpawnDisplay
// 0x0020 (0x0368 - 0x0348)
class UFortCreativeSpawnDisplay final : public UFortActivatablePanel
{
public:
	TArray<struct FRarityArray>                   ItemArray;                                         // 0x0348(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UFortItemDefinition*>            AllItems;                                          // 0x0358(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void LoadItems();
	void OnLoadedItems();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativeSpawnDisplay">();
	}
	static class UFortCreativeSpawnDisplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativeSpawnDisplay>();
	}
};
static_assert(alignof(UFortCreativeSpawnDisplay) == 0x000008, "Wrong alignment on UFortCreativeSpawnDisplay");
static_assert(sizeof(UFortCreativeSpawnDisplay) == 0x000368, "Wrong size on UFortCreativeSpawnDisplay");
static_assert(offsetof(UFortCreativeSpawnDisplay, ItemArray) == 0x000348, "Member 'UFortCreativeSpawnDisplay::ItemArray' has a wrong offset!");
static_assert(offsetof(UFortCreativeSpawnDisplay, AllItems) == 0x000358, "Member 'UFortCreativeSpawnDisplay::AllItems' has a wrong offset!");

// Class FortniteUI.FortMatchmakingKnobsModal
// 0x0128 (0x0470 - 0x0348)
class UFortMatchmakingKnobsModal : public UFortActivatablePanel
{
public:
	class AFortMinigameSettingsBuilding*          Machine;                                           // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ScrolledOffWhitelistedPlayers;                     // 0x0350(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class APlayerState*>                   LoadedPlayerArray;                                 // 0x0360(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UFortUserPermissions*>           PermissionsUserList;                               // 0x0370(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UPlaylistUserOptions*                   OptionsAsset;                                      // 0x0380(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPlaylistFrontEndData                  FrontEndData;                                      // 0x0388(0x0038)(Transient, NativeAccessSpecifierPrivate)
	TMap<class FString, class FString>            LoadedOptionValues;                                // 0x03C0(0x0050)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UFortPlaylistAthena*                    CurrentPlaylist;                                   // 0x0410(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_418[0x18];                                     // 0x0418(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UListView*                              OptionsList;                                       // 0x0430(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonButton*                          AcceptButton;                                      // 0x0438(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonButton*                          CancelButton;                                      // 0x0440(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonButton*                          RestoreDefaultsButton;                             // 0x0448(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonTextBlock*                       TextBlock_HeaderText;                              // 0x0450(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonTextBlock*                       TextBlock_TitleText;                               // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonTextBlock*                       TextBlock_DescriptionText;                         // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Image_DisplayImage;                                // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ApplyChanges();
	TArray<class FString> GetScrolledOffWhitelistedPlayers();
	void HandleCancelClicked();
	void HandleNoOptionsLoaded();
	void InitForOptionsComponent(class UFortActorOptionsComponent* OptionsComponent);
	void OnAcceptAnimationComplete();
	void OnCurrentItemSelectionChanged(class UObject* Item);
	void OnHoveredItemChanged(class UObject* Item, bool bIsHovered);
	void OnSelectionUpdated(class UFortMatchmakingKnobsSpinnerButton* CurrentSelection);
	void SetInGameMode(bool bIsInGame);
	void SetInScrimmage();
	void SetListDataSource(EUFortMatchmakingKnobsDataSource ListType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMatchmakingKnobsModal">();
	}
	static class UFortMatchmakingKnobsModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMatchmakingKnobsModal>();
	}
};
static_assert(alignof(UFortMatchmakingKnobsModal) == 0x000008, "Wrong alignment on UFortMatchmakingKnobsModal");
static_assert(sizeof(UFortMatchmakingKnobsModal) == 0x000470, "Wrong size on UFortMatchmakingKnobsModal");
static_assert(offsetof(UFortMatchmakingKnobsModal, Machine) == 0x000348, "Member 'UFortMatchmakingKnobsModal::Machine' has a wrong offset!");
static_assert(offsetof(UFortMatchmakingKnobsModal, ScrolledOffWhitelistedPlayers) == 0x000350, "Member 'UFortMatchmakingKnobsModal::ScrolledOffWhitelistedPlayers' has a wrong offset!");
static_assert(offsetof(UFortMatchmakingKnobsModal, LoadedPlayerArray) == 0x000360, "Member 'UFortMatchmakingKnobsModal::LoadedPlayerArray' has a wrong offset!");
static_assert(offsetof(UFortMatchmakingKnobsModal, PermissionsUserList) == 0x000370, "Member 'UFortMatchmakingKnobsModal::PermissionsUserList' has a wrong offset!");
static_assert(offsetof(UFortMatchmakingKnobsModal, OptionsAsset) == 0x000380, "Member 'UFortMatchmakingKnobsModal::OptionsAsset' has a wrong offset!");
static_assert(offsetof(UFortMatchmakingKnobsModal, FrontEndData) == 0x000388, "Member 'UFortMatchmakingKnobsModal::FrontEndData' has a wrong offset!");
static_assert(offsetof(UFortMatchmakingKnobsModal, LoadedOptionValues) == 0x0003C0, "Member 'UFortMatchmakingKnobsModal::LoadedOptionValues' has a wrong offset!");
static_assert(offsetof(UFortMatchmakingKnobsModal, CurrentPlaylist) == 0x000410, "Member 'UFortMatchmakingKnobsModal::CurrentPlaylist' has a wrong offset!");
static_assert(offsetof(UFortMatchmakingKnobsModal, OptionsList) == 0x000430, "Member 'UFortMatchmakingKnobsModal::OptionsList' has a wrong offset!");
static_assert(offsetof(UFortMatchmakingKnobsModal, AcceptButton) == 0x000438, "Member 'UFortMatchmakingKnobsModal::AcceptButton' has a wrong offset!");
static_assert(offsetof(UFortMatchmakingKnobsModal, CancelButton) == 0x000440, "Member 'UFortMatchmakingKnobsModal::CancelButton' has a wrong offset!");
static_assert(offsetof(UFortMatchmakingKnobsModal, RestoreDefaultsButton) == 0x000448, "Member 'UFortMatchmakingKnobsModal::RestoreDefaultsButton' has a wrong offset!");
static_assert(offsetof(UFortMatchmakingKnobsModal, TextBlock_HeaderText) == 0x000450, "Member 'UFortMatchmakingKnobsModal::TextBlock_HeaderText' has a wrong offset!");
static_assert(offsetof(UFortMatchmakingKnobsModal, TextBlock_TitleText) == 0x000458, "Member 'UFortMatchmakingKnobsModal::TextBlock_TitleText' has a wrong offset!");
static_assert(offsetof(UFortMatchmakingKnobsModal, TextBlock_DescriptionText) == 0x000460, "Member 'UFortMatchmakingKnobsModal::TextBlock_DescriptionText' has a wrong offset!");
static_assert(offsetof(UFortMatchmakingKnobsModal, Image_DisplayImage) == 0x000468, "Member 'UFortMatchmakingKnobsModal::Image_DisplayImage' has a wrong offset!");

// Class FortniteUI.FortCreativePermissionOptions
// 0x0018 (0x0488 - 0x0470)
class UFortCreativePermissionOptions : public UFortMatchmakingKnobsModal
{
public:
	EFortCreativePlotPermission                   CurrentPermissionsEnum;                            // 0x0470(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_471[0x7];                                      // 0x0471(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortCreativeWhitelistUserEntry> WhitelistedUsers;                                  // 0x0478(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void CloseDialog();
	void ShowWhitelistLimitError();
	void UpdatePermissions(EFortCreativePlotPermission Permissions, const TArray<class FString>& WhiteList);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativePermissionOptions">();
	}
	static class UFortCreativePermissionOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativePermissionOptions>();
	}
};
static_assert(alignof(UFortCreativePermissionOptions) == 0x000008, "Wrong alignment on UFortCreativePermissionOptions");
static_assert(sizeof(UFortCreativePermissionOptions) == 0x000488, "Wrong size on UFortCreativePermissionOptions");
static_assert(offsetof(UFortCreativePermissionOptions, CurrentPermissionsEnum) == 0x000470, "Member 'UFortCreativePermissionOptions::CurrentPermissionsEnum' has a wrong offset!");
static_assert(offsetof(UFortCreativePermissionOptions, WhitelistedUsers) == 0x000478, "Member 'UFortCreativePermissionOptions::WhitelistedUsers' has a wrong offset!");

// Class FortniteUI.FortMicIndicatorWidget
// 0x0038 (0x0270 - 0x0238)
class UFortMicIndicatorWidget : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x38];                                     // 0x0238(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerMicAvailable(bool bIsTalking);
	void OnPlayerMuted(bool bIsMuted);
	void OnPlayerTalkingChanged(bool bIsTalking);
	void SetPlayerUniqueId(const struct FUniqueNetIdRepl& InPlayerUniqueId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMicIndicatorWidget">();
	}
	static class UFortMicIndicatorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMicIndicatorWidget>();
	}
};
static_assert(alignof(UFortMicIndicatorWidget) == 0x000008, "Wrong alignment on UFortMicIndicatorWidget");
static_assert(sizeof(UFortMicIndicatorWidget) == 0x000270, "Wrong size on UFortMicIndicatorWidget");

// Class FortniteUI.FortQuestMapDetailsPanel
// 0x0010 (0x0248 - 0x0238)
class UFortQuestMapDetailsPanel final : public UCommonUserWidget
{
public:
	struct FDataTableRowHandle                    PlayButtonTriggeringAction;                        // 0x0238(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void DisplayActiveQuest(class UFortQuestItem* QuestItem);
	void DisplayInactiveQuest(class UFortQuestItemDefinition* QuestDef);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQuestMapDetailsPanel">();
	}
	static class UFortQuestMapDetailsPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQuestMapDetailsPanel>();
	}
};
static_assert(alignof(UFortQuestMapDetailsPanel) == 0x000008, "Wrong alignment on UFortQuestMapDetailsPanel");
static_assert(sizeof(UFortQuestMapDetailsPanel) == 0x000248, "Wrong size on UFortQuestMapDetailsPanel");
static_assert(offsetof(UFortQuestMapDetailsPanel, PlayButtonTriggeringAction) == 0x000238, "Member 'UFortQuestMapDetailsPanel::PlayButtonTriggeringAction' has a wrong offset!");

// Class FortniteUI.FortCreativePlayOptions
// 0x0020 (0x0368 - 0x0348)
class UFortCreativePlayOptions final : public UFortActivatablePanel
{
public:
	class UFortCreativeServersView*               CreativeOptionsServers;                            // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButton*                          PlayButton;                                        // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButton*                          CancelButton;                                      // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_360[0x8];                                      // 0x0360(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ImportPlatformFriends();
	void SetMatchmakingWidget(class UFortAthenaMatchmakingWidget* InWidget);
	bool ShouldShowImportPlatformFriendsOption();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativePlayOptions">();
	}
	static class UFortCreativePlayOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativePlayOptions>();
	}
};
static_assert(alignof(UFortCreativePlayOptions) == 0x000008, "Wrong alignment on UFortCreativePlayOptions");
static_assert(sizeof(UFortCreativePlayOptions) == 0x000368, "Wrong size on UFortCreativePlayOptions");
static_assert(offsetof(UFortCreativePlayOptions, CreativeOptionsServers) == 0x000348, "Member 'UFortCreativePlayOptions::CreativeOptionsServers' has a wrong offset!");
static_assert(offsetof(UFortCreativePlayOptions, PlayButton) == 0x000350, "Member 'UFortCreativePlayOptions::PlayButton' has a wrong offset!");
static_assert(offsetof(UFortCreativePlayOptions, CancelButton) == 0x000358, "Member 'UFortCreativePlayOptions::CancelButton' has a wrong offset!");

// Class FortniteUI.FortCreativePublishModal
// 0x0098 (0x03E0 - 0x0348)
class UFortCreativePublishModal : public UFortActivatablePanel
{
public:
	int32                                         DescriptionEntryCharLimit;                         // 0x0348(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NameEntryCharLimit;                                // 0x034C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFakePublishingFlow;                               // 0x0350(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DescriptionTextOkForSubmit;                        // 0x0351(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          NameTextOkForSubmit;                               // 0x0352(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_353[0x5];                                      // 0x0353(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                Container_YoutubeStuff;                            // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonWidgetSwitcher*                  Switcher_Content;                                  // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_IslandCode;                                   // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_ErrorInNameField;                             // 0x0370(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_ErrorInDescriptionField;                      // 0x0378(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_ErrorOnPublish;                               // 0x0380(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_CharCountTitle;                               // 0x0388(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_CharCountDesc;                                // 0x0390(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_IslandPublishedSuccess;                       // 0x0398(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Submit;                                     // 0x03A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_CopyCode;                                   // 0x03A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEditableTextBox*                       EditText_Name;                                     // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMultiLineEditableTextBox*              MultiLineEditText_Description;                     // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEditableTextBox*                       EditText_YoutubeVideoId;                           // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AFortVolume*                            VolumeToPublish;                                   // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D0[0x10];                                     // 0x03D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleCodeConfirmation();
	void HandleCopyCode();
	void HandleDescriptionTextChanged(const class FText& Text);
	void HandleDescriptionTextCommitted(const class FText& Text, ETextCommit CommittMethod);
	void HandleNameTextChanged(const class FText& Text);
	void HandleNameTextCommitted(const class FText& Text, ETextCommit CommittMethod);
	void HandleSubmitClicked();
	void OnCodeConfirmation();
	void OnCodeCopied();
	void OnDescriptionTextCommitted();
	void OnNameTextCommitted();
	void OnPublishBegin();
	void OnPublishedLinksChanged(const class FString& ErrorCode, const class FString& Mnemonic);
	void OnPublishError();
	void OnValidCheckComplete(bool bSuccess);
	void PublishMyCurrentCreativePlot(const struct FCreativePublishOptions& MyPublishOptions);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativePublishModal">();
	}
	static class UFortCreativePublishModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativePublishModal>();
	}
};
static_assert(alignof(UFortCreativePublishModal) == 0x000008, "Wrong alignment on UFortCreativePublishModal");
static_assert(sizeof(UFortCreativePublishModal) == 0x0003E0, "Wrong size on UFortCreativePublishModal");
static_assert(offsetof(UFortCreativePublishModal, DescriptionEntryCharLimit) == 0x000348, "Member 'UFortCreativePublishModal::DescriptionEntryCharLimit' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishModal, NameEntryCharLimit) == 0x00034C, "Member 'UFortCreativePublishModal::NameEntryCharLimit' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishModal, bFakePublishingFlow) == 0x000350, "Member 'UFortCreativePublishModal::bFakePublishingFlow' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishModal, DescriptionTextOkForSubmit) == 0x000351, "Member 'UFortCreativePublishModal::DescriptionTextOkForSubmit' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishModal, NameTextOkForSubmit) == 0x000352, "Member 'UFortCreativePublishModal::NameTextOkForSubmit' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishModal, Container_YoutubeStuff) == 0x000358, "Member 'UFortCreativePublishModal::Container_YoutubeStuff' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishModal, Switcher_Content) == 0x000360, "Member 'UFortCreativePublishModal::Switcher_Content' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishModal, Text_IslandCode) == 0x000368, "Member 'UFortCreativePublishModal::Text_IslandCode' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishModal, Text_ErrorInNameField) == 0x000370, "Member 'UFortCreativePublishModal::Text_ErrorInNameField' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishModal, Text_ErrorInDescriptionField) == 0x000378, "Member 'UFortCreativePublishModal::Text_ErrorInDescriptionField' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishModal, Text_ErrorOnPublish) == 0x000380, "Member 'UFortCreativePublishModal::Text_ErrorOnPublish' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishModal, Text_CharCountTitle) == 0x000388, "Member 'UFortCreativePublishModal::Text_CharCountTitle' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishModal, Text_CharCountDesc) == 0x000390, "Member 'UFortCreativePublishModal::Text_CharCountDesc' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishModal, Text_IslandPublishedSuccess) == 0x000398, "Member 'UFortCreativePublishModal::Text_IslandPublishedSuccess' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishModal, Button_Submit) == 0x0003A0, "Member 'UFortCreativePublishModal::Button_Submit' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishModal, Button_CopyCode) == 0x0003A8, "Member 'UFortCreativePublishModal::Button_CopyCode' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishModal, EditText_Name) == 0x0003B0, "Member 'UFortCreativePublishModal::EditText_Name' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishModal, MultiLineEditText_Description) == 0x0003B8, "Member 'UFortCreativePublishModal::MultiLineEditText_Description' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishModal, EditText_YoutubeVideoId) == 0x0003C0, "Member 'UFortCreativePublishModal::EditText_YoutubeVideoId' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishModal, VolumeToPublish) == 0x0003C8, "Member 'UFortCreativePublishModal::VolumeToPublish' has a wrong offset!");

// Class FortniteUI.FortCreativePublishOptions
// 0x0068 (0x03B0 - 0x0348)
class UFortCreativePublishOptions : public UFortActivatablePanel
{
public:
	EFortCreativePlotPermission                   CurrentPermissionsEnum;                            // 0x0348(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortCreativeWhitelistUserEntry> WhitelistedUsers;                                  // 0x0350(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         IslandPublishBox;                                  // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHorizontalBox*                         IslandRestoreBox;                                  // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UVerticalBox*                           CheckpointBox;                                     // 0x0370(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_378[0x18];                                     // 0x0378(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortLevelSaveComponent*                SaveComponent;                                     // 0x0390(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_RestoreTime;                                  // 0x0398(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_OnCooldown;                                   // 0x03A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Restore;                                    // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void BackupMyIsland();
	void CheckpointRestoreStateChanged(EBackupSaveState SaveState);
	void CheckpointSaveStateChanged(EBackupSaveState SaveState);
	void OnBackupMyIsland(bool bSuccess);
	void OnRestoreMyIslandFromBackup(bool bSuccess);
	void OnRestoreStateChanged(bool bReady);
	void OnSaveStateChanged(bool bSuccess);
	void ResetMyCurrentCreativePlot();
	void RestoreMyIslandFromBackup();
	void UpdatePermissions(EFortCreativePlotPermission Permissions);
	void UpdateTimeSinceLastBackup(const struct FDateTime& LastBackup);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativePublishOptions">();
	}
	static class UFortCreativePublishOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativePublishOptions>();
	}
};
static_assert(alignof(UFortCreativePublishOptions) == 0x000008, "Wrong alignment on UFortCreativePublishOptions");
static_assert(sizeof(UFortCreativePublishOptions) == 0x0003B0, "Wrong size on UFortCreativePublishOptions");
static_assert(offsetof(UFortCreativePublishOptions, CurrentPermissionsEnum) == 0x000348, "Member 'UFortCreativePublishOptions::CurrentPermissionsEnum' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishOptions, WhitelistedUsers) == 0x000350, "Member 'UFortCreativePublishOptions::WhitelistedUsers' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishOptions, IslandPublishBox) == 0x000360, "Member 'UFortCreativePublishOptions::IslandPublishBox' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishOptions, IslandRestoreBox) == 0x000368, "Member 'UFortCreativePublishOptions::IslandRestoreBox' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishOptions, CheckpointBox) == 0x000370, "Member 'UFortCreativePublishOptions::CheckpointBox' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishOptions, SaveComponent) == 0x000390, "Member 'UFortCreativePublishOptions::SaveComponent' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishOptions, Text_RestoreTime) == 0x000398, "Member 'UFortCreativePublishOptions::Text_RestoreTime' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishOptions, Text_OnCooldown) == 0x0003A0, "Member 'UFortCreativePublishOptions::Text_OnCooldown' has a wrong offset!");
static_assert(offsetof(UFortCreativePublishOptions, Button_Restore) == 0x0003A8, "Member 'UFortCreativePublishOptions::Button_Restore' has a wrong offset!");

// Class FortniteUI.FortCreativeServerOptionTile
// 0x0010 (0x0B40 - 0x0B30)
class UFortCreativeServerOptionTile final : public UCommonButton
{
public:
	class UCommonTextBlock*                       Text_JoinServerPlayerCount;                        // 0x0B30(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortCreativeServerInfo*                Server;                                            // 0x0B38(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetBPData(const class UFortCreativeServerInfo* ServerInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativeServerOptionTile">();
	}
	static class UFortCreativeServerOptionTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativeServerOptionTile>();
	}
};
static_assert(alignof(UFortCreativeServerOptionTile) == 0x000008, "Wrong alignment on UFortCreativeServerOptionTile");
static_assert(sizeof(UFortCreativeServerOptionTile) == 0x000B40, "Wrong size on UFortCreativeServerOptionTile");
static_assert(offsetof(UFortCreativeServerOptionTile, Text_JoinServerPlayerCount) == 0x000B30, "Member 'UFortCreativeServerOptionTile::Text_JoinServerPlayerCount' has a wrong offset!");
static_assert(offsetof(UFortCreativeServerOptionTile, Server) == 0x000B38, "Member 'UFortCreativeServerOptionTile::Server' has a wrong offset!");

// Class FortniteUI.FortGridPickerGrid
// 0x0000 (0x0240 - 0x0240)
class UFortGridPickerGrid final : public UFortUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGridPickerGrid">();
	}
	static class UFortGridPickerGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGridPickerGrid>();
	}
};
static_assert(alignof(UFortGridPickerGrid) == 0x000008, "Wrong alignment on UFortGridPickerGrid");
static_assert(sizeof(UFortGridPickerGrid) == 0x000240, "Wrong size on UFortGridPickerGrid");

// Class FortniteUI.FortItemViewContext_SquadSlotsView
// 0x0008 (0x0100 - 0x00F8)
class UFortItemViewContext_SquadSlotsView : public UFortSquadManagementItemViewContextBase
{
public:
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemViewContext_SquadSlotsView">();
	}
	static class UFortItemViewContext_SquadSlotsView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemViewContext_SquadSlotsView>();
	}
};
static_assert(alignof(UFortItemViewContext_SquadSlotsView) == 0x000008, "Wrong alignment on UFortItemViewContext_SquadSlotsView");
static_assert(sizeof(UFortItemViewContext_SquadSlotsView) == 0x000100, "Wrong size on UFortItemViewContext_SquadSlotsView");

// Class FortniteUI.FortCreativeServerInfo
// 0x0038 (0x0060 - 0x0028)
class UFortCreativeServerInfo final : public UObject
{
public:
	int32                                         CurrentPlayerCount;                                // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayerCount;                                    // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         MatchFriendsList;                                  // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 OwnerName;                                         // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortSocialUser*                        FriendInMatch;                                     // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCreativeServerPrivacySetting             PrivacySetting;                                    // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNewServer;                                       // 0x0059(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativeServerInfo">();
	}
	static class UFortCreativeServerInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativeServerInfo>();
	}
};
static_assert(alignof(UFortCreativeServerInfo) == 0x000008, "Wrong alignment on UFortCreativeServerInfo");
static_assert(sizeof(UFortCreativeServerInfo) == 0x000060, "Wrong size on UFortCreativeServerInfo");
static_assert(offsetof(UFortCreativeServerInfo, CurrentPlayerCount) == 0x000028, "Member 'UFortCreativeServerInfo::CurrentPlayerCount' has a wrong offset!");
static_assert(offsetof(UFortCreativeServerInfo, MaxPlayerCount) == 0x00002C, "Member 'UFortCreativeServerInfo::MaxPlayerCount' has a wrong offset!");
static_assert(offsetof(UFortCreativeServerInfo, MatchFriendsList) == 0x000030, "Member 'UFortCreativeServerInfo::MatchFriendsList' has a wrong offset!");
static_assert(offsetof(UFortCreativeServerInfo, OwnerName) == 0x000040, "Member 'UFortCreativeServerInfo::OwnerName' has a wrong offset!");
static_assert(offsetof(UFortCreativeServerInfo, FriendInMatch) == 0x000050, "Member 'UFortCreativeServerInfo::FriendInMatch' has a wrong offset!");
static_assert(offsetof(UFortCreativeServerInfo, PrivacySetting) == 0x000058, "Member 'UFortCreativeServerInfo::PrivacySetting' has a wrong offset!");
static_assert(offsetof(UFortCreativeServerInfo, IsNewServer) == 0x000059, "Member 'UFortCreativeServerInfo::IsNewServer' has a wrong offset!");

// Class FortniteUI.FortInputOptions
// 0x0028 (0x02B0 - 0x0288)
class UFortInputOptions : public UFortOptionsTab
{
public:
	TArray<class UFortOptionsMenuInputData*>      InputData;                                         // 0x0288(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UCommonListView*                        InputCommonListView;                               // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       TooltipDisplay;                                    // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A8[0x8];                                      // 0x02A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeBinding(bool bIsPrimarySlot, int32 Input, const struct FKey& NewKey);
	void ConstructKeyBindList();
	class UWidget* GetListWidget(class UObject* Item);
	void HandleUsingGamepadChanged(ECommonInputType NewInputType);

	struct FFortActionBeingUnbound GetActionBeingUnbound(bool bIsPrimarySlot, int32 Input, const struct FKey& NewKey) const;
	TArray<class UFortOptionsMenuInputData*> GetActionItemsInGroup(const EFortInputActionGroup InputActionGroup) const;
	class FText GetBindedKeyNameBP(int32 KeyBind, bool IsPrimary) const;
	int32 GetInputDataIndexForActionName(const class FName ActionName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortInputOptions">();
	}
	static class UFortInputOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortInputOptions>();
	}
};
static_assert(alignof(UFortInputOptions) == 0x000008, "Wrong alignment on UFortInputOptions");
static_assert(sizeof(UFortInputOptions) == 0x0002B0, "Wrong size on UFortInputOptions");
static_assert(offsetof(UFortInputOptions, InputData) == 0x000288, "Member 'UFortInputOptions::InputData' has a wrong offset!");
static_assert(offsetof(UFortInputOptions, InputCommonListView) == 0x000298, "Member 'UFortInputOptions::InputCommonListView' has a wrong offset!");
static_assert(offsetof(UFortInputOptions, TooltipDisplay) == 0x0002A0, "Member 'UFortInputOptions::TooltipDisplay' has a wrong offset!");

// Class FortniteUI.FortCreativeServersView
// 0x0040 (0x0278 - 0x0238)
class UFortCreativeServersView final : public UCommonUserWidget
{
public:
	int32                                         MaxSuggestedServers;                               // 0x0238(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowDebugServers;                                 // 0x023C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortCreativeServerOptionTile> TileItemClass;                                     // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonButtonGroup*                     ServerButtonGroup;                                 // 0x0248(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UScrollBox*                             ScrollBox_ServerList;                              // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UFortCreativeServerInfo*>        ServerList;                                        // 0x0258(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_268[0x10];                                     // 0x0268(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void NavigateServerLeft();
	void NavigateServerRight();
	void OnCreativeServerListRefreshed();
	void RefreshServerList();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativeServersView">();
	}
	static class UFortCreativeServersView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativeServersView>();
	}
};
static_assert(alignof(UFortCreativeServersView) == 0x000008, "Wrong alignment on UFortCreativeServersView");
static_assert(sizeof(UFortCreativeServersView) == 0x000278, "Wrong size on UFortCreativeServersView");
static_assert(offsetof(UFortCreativeServersView, MaxSuggestedServers) == 0x000238, "Member 'UFortCreativeServersView::MaxSuggestedServers' has a wrong offset!");
static_assert(offsetof(UFortCreativeServersView, bShowDebugServers) == 0x00023C, "Member 'UFortCreativeServersView::bShowDebugServers' has a wrong offset!");
static_assert(offsetof(UFortCreativeServersView, TileItemClass) == 0x000240, "Member 'UFortCreativeServersView::TileItemClass' has a wrong offset!");
static_assert(offsetof(UFortCreativeServersView, ServerButtonGroup) == 0x000248, "Member 'UFortCreativeServersView::ServerButtonGroup' has a wrong offset!");
static_assert(offsetof(UFortCreativeServersView, ScrollBox_ServerList) == 0x000250, "Member 'UFortCreativeServersView::ScrollBox_ServerList' has a wrong offset!");
static_assert(offsetof(UFortCreativeServersView, ServerList) == 0x000258, "Member 'UFortCreativeServersView::ServerList' has a wrong offset!");

// Class FortniteUI.FortCreativeSettingsFlow
// 0x0008 (0x0350 - 0x0348)
class UFortCreativeSettingsFlow : public UFortActivatablePanel
{
public:
	class UCommonButtonGroup*                     TabButtonGroup;                                    // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HasActiveModalWidget(bool* OutWidgetActive);
	void OnClose();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCreativeSettingsFlow">();
	}
	static class UFortCreativeSettingsFlow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCreativeSettingsFlow>();
	}
};
static_assert(alignof(UFortCreativeSettingsFlow) == 0x000008, "Wrong alignment on UFortCreativeSettingsFlow");
static_assert(sizeof(UFortCreativeSettingsFlow) == 0x000350, "Wrong size on UFortCreativeSettingsFlow");
static_assert(offsetof(UFortCreativeSettingsFlow, TabButtonGroup) == 0x000348, "Member 'UFortCreativeSettingsFlow::TabButtonGroup' has a wrong offset!");

// Class FortniteUI.FortDailyRewards
// 0x0008 (0x0350 - 0x0348)
class UFortDailyRewards : public UFortActivatablePanel
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetupDailyRewards();
	bool TryGetDailyRewardsData(struct FFortDailyRewardsData* OutDailyRewardsData, int32 ItemCardsPerSchedule, int32 MinEpicRewards);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDailyRewards">();
	}
	static class UFortDailyRewards* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDailyRewards>();
	}
};
static_assert(alignof(UFortDailyRewards) == 0x000008, "Wrong alignment on UFortDailyRewards");
static_assert(sizeof(UFortDailyRewards) == 0x000350, "Wrong size on UFortDailyRewards");

// Class FortniteUI.FortItemCraftingOptionsActivatablePanel
// 0x00A0 (0x03E8 - 0x0348)
class UFortItemCraftingOptionsActivatablePanel final : public UFortActivatablePanel
{
public:
	class UFortSchematicItem*                     BaseItem;                                          // 0x0348(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortSchematicItem*                     TargetItem;                                        // 0x0350(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxCraftingTierIndex;                              // 0x0358(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TargetCraftingTierIndex;                           // 0x035C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxQuantity;                                       // 0x0360(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SelectedQuantity;                                  // 0x0364(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanCraftTargetItem;                                // 0x0368(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                TierImageParent_1;                                 // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                TierImageParent_2;                                 // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                TierImageParent_3;                                 // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                TierImageParent_4;                                 // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                TierImageParent_5;                                 // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 TierImage_1;                                       // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 TierImage_2;                                       // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 TierImage_3;                                       // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 TierImage_4;                                       // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 TierImage_5;                                       // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C0[0x28];                                     // 0x03C0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CraftAndSlotTargetItem();
	void CraftTargetItem();
	void DecreaseSelectedQuantity();
	void IncreaseSelectedQuantity();
	void OnBaseItemChanged(class UFortSchematicItem* NewBaseItem);
	void OnMaxQuantityChanged(int32 NewMaxQuantity);
	void OnSelectedQuantityChanged(int32 NewSelectedQuantity);
	void OnTargetItemChanged(class UFortSchematicItem* NewTargetItem);
	void SelectNextTier();
	void SelectPreviousTier();
	void SetBaseSchematicItem(class UFortSchematicItem* InBaseItem);
	void SetItemManagementScreen(class UFortItemManagementScreen* InItemManagementScreen);
	void SetSelectedQuantity_BP(int32 NewQuantity);
	void SetTargetCraftingTierIndex(int32 NewTierIndex);
	void UpdateTierImages();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemCraftingOptionsActivatablePanel">();
	}
	static class UFortItemCraftingOptionsActivatablePanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemCraftingOptionsActivatablePanel>();
	}
};
static_assert(alignof(UFortItemCraftingOptionsActivatablePanel) == 0x000008, "Wrong alignment on UFortItemCraftingOptionsActivatablePanel");
static_assert(sizeof(UFortItemCraftingOptionsActivatablePanel) == 0x0003E8, "Wrong size on UFortItemCraftingOptionsActivatablePanel");
static_assert(offsetof(UFortItemCraftingOptionsActivatablePanel, BaseItem) == 0x000348, "Member 'UFortItemCraftingOptionsActivatablePanel::BaseItem' has a wrong offset!");
static_assert(offsetof(UFortItemCraftingOptionsActivatablePanel, TargetItem) == 0x000350, "Member 'UFortItemCraftingOptionsActivatablePanel::TargetItem' has a wrong offset!");
static_assert(offsetof(UFortItemCraftingOptionsActivatablePanel, MaxCraftingTierIndex) == 0x000358, "Member 'UFortItemCraftingOptionsActivatablePanel::MaxCraftingTierIndex' has a wrong offset!");
static_assert(offsetof(UFortItemCraftingOptionsActivatablePanel, TargetCraftingTierIndex) == 0x00035C, "Member 'UFortItemCraftingOptionsActivatablePanel::TargetCraftingTierIndex' has a wrong offset!");
static_assert(offsetof(UFortItemCraftingOptionsActivatablePanel, MaxQuantity) == 0x000360, "Member 'UFortItemCraftingOptionsActivatablePanel::MaxQuantity' has a wrong offset!");
static_assert(offsetof(UFortItemCraftingOptionsActivatablePanel, SelectedQuantity) == 0x000364, "Member 'UFortItemCraftingOptionsActivatablePanel::SelectedQuantity' has a wrong offset!");
static_assert(offsetof(UFortItemCraftingOptionsActivatablePanel, CanCraftTargetItem) == 0x000368, "Member 'UFortItemCraftingOptionsActivatablePanel::CanCraftTargetItem' has a wrong offset!");
static_assert(offsetof(UFortItemCraftingOptionsActivatablePanel, TierImageParent_1) == 0x000370, "Member 'UFortItemCraftingOptionsActivatablePanel::TierImageParent_1' has a wrong offset!");
static_assert(offsetof(UFortItemCraftingOptionsActivatablePanel, TierImageParent_2) == 0x000378, "Member 'UFortItemCraftingOptionsActivatablePanel::TierImageParent_2' has a wrong offset!");
static_assert(offsetof(UFortItemCraftingOptionsActivatablePanel, TierImageParent_3) == 0x000380, "Member 'UFortItemCraftingOptionsActivatablePanel::TierImageParent_3' has a wrong offset!");
static_assert(offsetof(UFortItemCraftingOptionsActivatablePanel, TierImageParent_4) == 0x000388, "Member 'UFortItemCraftingOptionsActivatablePanel::TierImageParent_4' has a wrong offset!");
static_assert(offsetof(UFortItemCraftingOptionsActivatablePanel, TierImageParent_5) == 0x000390, "Member 'UFortItemCraftingOptionsActivatablePanel::TierImageParent_5' has a wrong offset!");
static_assert(offsetof(UFortItemCraftingOptionsActivatablePanel, TierImage_1) == 0x000398, "Member 'UFortItemCraftingOptionsActivatablePanel::TierImage_1' has a wrong offset!");
static_assert(offsetof(UFortItemCraftingOptionsActivatablePanel, TierImage_2) == 0x0003A0, "Member 'UFortItemCraftingOptionsActivatablePanel::TierImage_2' has a wrong offset!");
static_assert(offsetof(UFortItemCraftingOptionsActivatablePanel, TierImage_3) == 0x0003A8, "Member 'UFortItemCraftingOptionsActivatablePanel::TierImage_3' has a wrong offset!");
static_assert(offsetof(UFortItemCraftingOptionsActivatablePanel, TierImage_4) == 0x0003B0, "Member 'UFortItemCraftingOptionsActivatablePanel::TierImage_4' has a wrong offset!");
static_assert(offsetof(UFortItemCraftingOptionsActivatablePanel, TierImage_5) == 0x0003B8, "Member 'UFortItemCraftingOptionsActivatablePanel::TierImage_5' has a wrong offset!");

// Class FortniteUI.FortTheaterSelect
// 0x0018 (0x0338 - 0x0320)
class UFortTheaterSelect final : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               OverlayMain;                                       // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnNavigationLeft();
	void OnNavigationRight();

	bool GetSurvivalCMSText(class FText* Title, class FText* Body) const;
	bool GetTheaterRecommendedRatingRange(const class FString& UniqueId, int32* Minimum, int32* Maximum) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTheaterSelect">();
	}
	static class UFortTheaterSelect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTheaterSelect>();
	}
};
static_assert(alignof(UFortTheaterSelect) == 0x000008, "Wrong alignment on UFortTheaterSelect");
static_assert(sizeof(UFortTheaterSelect) == 0x000338, "Wrong size on UFortTheaterSelect");
static_assert(offsetof(UFortTheaterSelect, OverlayMain) == 0x000330, "Member 'UFortTheaterSelect::OverlayMain' has a wrong offset!");

// Class FortniteUI.FortDailyRewardsItem
// 0x0010 (0x0248 - 0x0238)
class UFortDailyRewardsItem : public UCommonUserWidget
{
public:
	struct FFortDailyRewardsItemData              ItemData;                                          // 0x0238(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDailyRewardsItem">();
	}
	static class UFortDailyRewardsItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDailyRewardsItem>();
	}
};
static_assert(alignof(UFortDailyRewardsItem) == 0x000008, "Wrong alignment on UFortDailyRewardsItem");
static_assert(sizeof(UFortDailyRewardsItem) == 0x000248, "Wrong size on UFortDailyRewardsItem");
static_assert(offsetof(UFortDailyRewardsItem, ItemData) == 0x000238, "Member 'UFortDailyRewardsItem::ItemData' has a wrong offset!");

// Class FortniteUI.FortSZAwareImage
// 0x0008 (0x0218 - 0x0210)
class UFortSZAwareImage final : public UImage
{
public:
	bool                                          AnchorLeft;                                        // 0x0210(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AnchorRight;                                       // 0x0211(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AnchorTop;                                         // 0x0212(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AnchorBottom;                                      // 0x0213(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSZAwareImage">();
	}
	static class UFortSZAwareImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSZAwareImage>();
	}
};
static_assert(alignof(UFortSZAwareImage) == 0x000008, "Wrong alignment on UFortSZAwareImage");
static_assert(sizeof(UFortSZAwareImage) == 0x000218, "Wrong size on UFortSZAwareImage");
static_assert(offsetof(UFortSZAwareImage, AnchorLeft) == 0x000210, "Member 'UFortSZAwareImage::AnchorLeft' has a wrong offset!");
static_assert(offsetof(UFortSZAwareImage, AnchorRight) == 0x000211, "Member 'UFortSZAwareImage::AnchorRight' has a wrong offset!");
static_assert(offsetof(UFortSZAwareImage, AnchorTop) == 0x000212, "Member 'UFortSZAwareImage::AnchorTop' has a wrong offset!");
static_assert(offsetof(UFortSZAwareImage, AnchorBottom) == 0x000213, "Member 'UFortSZAwareImage::AnchorBottom' has a wrong offset!");

// Class FortniteUI.FortDailyRewardsSchedule
// 0x0098 (0x02D0 - 0x0238)
class UFortDailyRewardsSchedule : public UCommonUserWidget
{
public:
	struct FFortDailyRewardsScheduleData          ScheduleData;                                      // 0x0238(0x0098)(BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDailyRewardsSchedule">();
	}
	static class UFortDailyRewardsSchedule* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDailyRewardsSchedule>();
	}
};
static_assert(alignof(UFortDailyRewardsSchedule) == 0x000008, "Wrong alignment on UFortDailyRewardsSchedule");
static_assert(sizeof(UFortDailyRewardsSchedule) == 0x0002D0, "Wrong size on UFortDailyRewardsSchedule");
static_assert(offsetof(UFortDailyRewardsSchedule, ScheduleData) == 0x000238, "Member 'UFortDailyRewardsSchedule::ScheduleData' has a wrong offset!");

// Class FortniteUI.FortDefenderConfigPanel
// 0x0028 (0x0348 - 0x0320)
class UFortDefenderConfigPanel final : public UCommonActivatablePanel
{
public:
	TWeakObjectPtr<class UFortItem>               SelectedDefenderItem;                              // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFortItem>               SelectedWeaponItem;                                // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFortItem>               SelectedAmmoItem;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SelectedAmmoQuantity;                              // 0x0338(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ABuildingTrapDefender>   DefenderTrap;                                      // 0x033C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetAmmoCountFromDefender(const class UFortWorldItemDefinition* AmmoItemDef) const;
	int32 GetAmmoCountFromPlayer(const class UFortWorldItemDefinition* AmmoItemDef) const;
	class UFortWorldItem* GetCompatibleAmmo() const;
	class UFortWorldItemDefinition* GetCompatibleAmmoDef() const;
	class UFortWorldItem* GetDefenderPawnWeaponItem(const class AFortAIPawn* DefenderPawn) const;
	class UFortSchematicItemDefinition* GetSourceSchematic(const class UFortWorldItemDefinition* ItemDefUsedForCrafting) const;
	bool HasAnyDefenders() const;
	bool HasWeaponForSelectedDefender() const;
	bool IsWeaponSelectionValid() const;
	bool SpawnDefender() const;
	bool UnsummonDefender() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDefenderConfigPanel">();
	}
	static class UFortDefenderConfigPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDefenderConfigPanel>();
	}
};
static_assert(alignof(UFortDefenderConfigPanel) == 0x000008, "Wrong alignment on UFortDefenderConfigPanel");
static_assert(sizeof(UFortDefenderConfigPanel) == 0x000348, "Wrong size on UFortDefenderConfigPanel");
static_assert(offsetof(UFortDefenderConfigPanel, SelectedDefenderItem) == 0x000320, "Member 'UFortDefenderConfigPanel::SelectedDefenderItem' has a wrong offset!");
static_assert(offsetof(UFortDefenderConfigPanel, SelectedWeaponItem) == 0x000328, "Member 'UFortDefenderConfigPanel::SelectedWeaponItem' has a wrong offset!");
static_assert(offsetof(UFortDefenderConfigPanel, SelectedAmmoItem) == 0x000330, "Member 'UFortDefenderConfigPanel::SelectedAmmoItem' has a wrong offset!");
static_assert(offsetof(UFortDefenderConfigPanel, SelectedAmmoQuantity) == 0x000338, "Member 'UFortDefenderConfigPanel::SelectedAmmoQuantity' has a wrong offset!");
static_assert(offsetof(UFortDefenderConfigPanel, DefenderTrap) == 0x00033C, "Member 'UFortDefenderConfigPanel::DefenderTrap' has a wrong offset!");

// Class FortniteUI.FortDefenderItemTileButton
// 0x0000 (0x0B68 - 0x0B68)
class UFortDefenderItemTileButton final : public UFortItemTileButton
{
public:
	void HandleEquipSlotChanged(int32 EquipSlot);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDefenderItemTileButton">();
	}
	static class UFortDefenderItemTileButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDefenderItemTileButton>();
	}
};
static_assert(alignof(UFortDefenderItemTileButton) == 0x000008, "Wrong alignment on UFortDefenderItemTileButton");
static_assert(sizeof(UFortDefenderItemTileButton) == 0x000B68, "Wrong size on UFortDefenderItemTileButton");

// Class FortniteUI.FortItemTileView
// 0x0128 (0x0480 - 0x0358)
class UFortItemTileView : public UCommonTileView
{
public:
	uint8                                         Pad_358[0xE0];                                     // 0x0358(0x00E0)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShouldShowNullItemListEntry;                      // 0x0438(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutomaticallyLoadItemDetails;                     // 0x0439(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemListViewDisplayType                      DisplayType;                                       // 0x043A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43B[0x5];                                      // 0x043B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnInventoryUpdatedEvent;                           // 0x0440(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UFortItem>>       CustomItemList;                                    // 0x0450(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class UFortItem>>       ItemsForListView;                                  // 0x0460(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TScriptInterface<class IFortItemViewContextInterface> ItemViewContext;                                   // 0x0470(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemTileView">();
	}
	static class UFortItemTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemTileView>();
	}
};
static_assert(alignof(UFortItemTileView) == 0x000008, "Wrong alignment on UFortItemTileView");
static_assert(sizeof(UFortItemTileView) == 0x000480, "Wrong size on UFortItemTileView");
static_assert(offsetof(UFortItemTileView, bShouldShowNullItemListEntry) == 0x000438, "Member 'UFortItemTileView::bShouldShowNullItemListEntry' has a wrong offset!");
static_assert(offsetof(UFortItemTileView, bAutomaticallyLoadItemDetails) == 0x000439, "Member 'UFortItemTileView::bAutomaticallyLoadItemDetails' has a wrong offset!");
static_assert(offsetof(UFortItemTileView, DisplayType) == 0x00043A, "Member 'UFortItemTileView::DisplayType' has a wrong offset!");
static_assert(offsetof(UFortItemTileView, OnInventoryUpdatedEvent) == 0x000440, "Member 'UFortItemTileView::OnInventoryUpdatedEvent' has a wrong offset!");
static_assert(offsetof(UFortItemTileView, CustomItemList) == 0x000450, "Member 'UFortItemTileView::CustomItemList' has a wrong offset!");
static_assert(offsetof(UFortItemTileView, ItemsForListView) == 0x000460, "Member 'UFortItemTileView::ItemsForListView' has a wrong offset!");
static_assert(offsetof(UFortItemTileView, ItemViewContext) == 0x000470, "Member 'UFortItemTileView::ItemViewContext' has a wrong offset!");

// Class FortniteUI.FortVariantEditorWidgetBase
// 0x0068 (0x02A0 - 0x0238)
class UFortVariantEditorWidgetBase : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x68];                                     // 0x0238(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVariantEditorWidgetBase">();
	}
	static class UFortVariantEditorWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVariantEditorWidgetBase>();
	}
};
static_assert(alignof(UFortVariantEditorWidgetBase) == 0x000008, "Wrong alignment on UFortVariantEditorWidgetBase");
static_assert(sizeof(UFortVariantEditorWidgetBase) == 0x0002A0, "Wrong size on UFortVariantEditorWidgetBase");

// Class FortniteUI.FortVariantNumericalPicker
// 0x0048 (0x02E8 - 0x02A0)
class UFortVariantNumericalPicker : public UFortVariantEditorWidgetBase
{
public:
	int32                                         MinNum;                                            // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxNum;                                            // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumericDelta;                                      // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CurrentNumber;                                     // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortCosmeticNumericalVariant*          NumericalVariant;                                  // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_ZeroDigitUp;                                // 0x02B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_ZeroDigitDown;                              // 0x02C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_TenDigitUp;                                 // 0x02C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_TenDigitDown;                               // 0x02D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_NumericalValue;                               // 0x02D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_VariantName;                                  // 0x02E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVariantNumericalPicker">();
	}
	static class UFortVariantNumericalPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVariantNumericalPicker>();
	}
};
static_assert(alignof(UFortVariantNumericalPicker) == 0x000008, "Wrong alignment on UFortVariantNumericalPicker");
static_assert(sizeof(UFortVariantNumericalPicker) == 0x0002E8, "Wrong size on UFortVariantNumericalPicker");
static_assert(offsetof(UFortVariantNumericalPicker, MinNum) == 0x0002A0, "Member 'UFortVariantNumericalPicker::MinNum' has a wrong offset!");
static_assert(offsetof(UFortVariantNumericalPicker, MaxNum) == 0x0002A4, "Member 'UFortVariantNumericalPicker::MaxNum' has a wrong offset!");
static_assert(offsetof(UFortVariantNumericalPicker, NumericDelta) == 0x0002A8, "Member 'UFortVariantNumericalPicker::NumericDelta' has a wrong offset!");
static_assert(offsetof(UFortVariantNumericalPicker, CurrentNumber) == 0x0002AC, "Member 'UFortVariantNumericalPicker::CurrentNumber' has a wrong offset!");
static_assert(offsetof(UFortVariantNumericalPicker, NumericalVariant) == 0x0002B0, "Member 'UFortVariantNumericalPicker::NumericalVariant' has a wrong offset!");
static_assert(offsetof(UFortVariantNumericalPicker, Button_ZeroDigitUp) == 0x0002B8, "Member 'UFortVariantNumericalPicker::Button_ZeroDigitUp' has a wrong offset!");
static_assert(offsetof(UFortVariantNumericalPicker, Button_ZeroDigitDown) == 0x0002C0, "Member 'UFortVariantNumericalPicker::Button_ZeroDigitDown' has a wrong offset!");
static_assert(offsetof(UFortVariantNumericalPicker, Button_TenDigitUp) == 0x0002C8, "Member 'UFortVariantNumericalPicker::Button_TenDigitUp' has a wrong offset!");
static_assert(offsetof(UFortVariantNumericalPicker, Button_TenDigitDown) == 0x0002D0, "Member 'UFortVariantNumericalPicker::Button_TenDigitDown' has a wrong offset!");
static_assert(offsetof(UFortVariantNumericalPicker, Text_NumericalValue) == 0x0002D8, "Member 'UFortVariantNumericalPicker::Text_NumericalValue' has a wrong offset!");
static_assert(offsetof(UFortVariantNumericalPicker, Text_VariantName) == 0x0002E0, "Member 'UFortVariantNumericalPicker::Text_VariantName' has a wrong offset!");

// Class FortniteUI.FortDefenderItemTileView
// 0x0010 (0x0490 - 0x0480)
class UFortDefenderItemTileView final : public UFortItemTileView
{
public:
	TWeakObjectPtr<class UFortDefenderConfigPanel> DefenderConfigPanel;                               // 0x0480(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_488[0x8];                                      // 0x0488(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDefenderItemTileView">();
	}
	static class UFortDefenderItemTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDefenderItemTileView>();
	}
};
static_assert(alignof(UFortDefenderItemTileView) == 0x000008, "Wrong alignment on UFortDefenderItemTileView");
static_assert(sizeof(UFortDefenderItemTileView) == 0x000490, "Wrong size on UFortDefenderItemTileView");
static_assert(offsetof(UFortDefenderItemTileView, DefenderConfigPanel) == 0x000480, "Member 'UFortDefenderItemTileView::DefenderConfigPanel' has a wrong offset!");

// Class FortniteUI.FortDefenderSlotButton
// 0x0000 (0x0B30 - 0x0B30)
class UFortDefenderSlotButton final : public UCommonButton
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDefenderSlotButton">();
	}
	static class UFortDefenderSlotButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDefenderSlotButton>();
	}
};
static_assert(alignof(UFortDefenderSlotButton) == 0x000008, "Wrong alignment on UFortDefenderSlotButton");
static_assert(sizeof(UFortDefenderSlotButton) == 0x000B30, "Wrong size on UFortDefenderSlotButton");

// Class FortniteUI.FortDefenderSlotItemPicker
// 0x0020 (0x0328 - 0x0308)
class UFortDefenderSlotItemPicker final : public UFortItemPickerBase
{
public:
	EFortDefenderSlotType                         DefenderSlotType;                                  // 0x0308(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EInventoryContentSortType>             SortTypesList;                                     // 0x0310(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	EInventoryContentSortType                     CurrentSortType;                                   // 0x0320(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void NextSortType();
	void OnCurrentSortTypeChanged(EInventoryContentSortType SortType);
	void PopulateDefenderSlotItems(const class UFortDefenderItem* DefenderItem);
	void SetSortType(EInventoryContentSortType SortType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDefenderSlotItemPicker">();
	}
	static class UFortDefenderSlotItemPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDefenderSlotItemPicker>();
	}
};
static_assert(alignof(UFortDefenderSlotItemPicker) == 0x000008, "Wrong alignment on UFortDefenderSlotItemPicker");
static_assert(sizeof(UFortDefenderSlotItemPicker) == 0x000328, "Wrong size on UFortDefenderSlotItemPicker");
static_assert(offsetof(UFortDefenderSlotItemPicker, DefenderSlotType) == 0x000308, "Member 'UFortDefenderSlotItemPicker::DefenderSlotType' has a wrong offset!");
static_assert(offsetof(UFortDefenderSlotItemPicker, SortTypesList) == 0x000310, "Member 'UFortDefenderSlotItemPicker::SortTypesList' has a wrong offset!");
static_assert(offsetof(UFortDefenderSlotItemPicker, CurrentSortType) == 0x000320, "Member 'UFortDefenderSlotItemPicker::CurrentSortType' has a wrong offset!");

// Class FortniteUI.FortDefenderSlotView
// 0x0000 (0x0238 - 0x0238)
class UFortDefenderSlotView final : public UCommonUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDefenderSlotView">();
	}
	static class UFortDefenderSlotView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDefenderSlotView>();
	}
};
static_assert(alignof(UFortDefenderSlotView) == 0x000008, "Wrong alignment on UFortDefenderSlotView");
static_assert(sizeof(UFortDefenderSlotView) == 0x000238, "Wrong size on UFortDefenderSlotView");

// Class FortniteUI.FortItemCooldownWidget
// 0x0098 (0x02D0 - 0x0238)
class UFortItemCooldownWidget final : public UCommonUserWidget
{
public:
	UMulticastDelegateProperty_                   OnCooldownStarted_Delegate;                        // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnCooldownStopped_Delegate;                        // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UCommonTextBlock*                       CooldownText;                                      // 0x0258(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 CooldownImage;                                     // 0x0260(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CooldownMaterialParameterName;                     // 0x0268(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<EFortItemCooldownType>                 CooldownTypesSupported;                            // 0x0270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               CooldownPercentageMID;                             // 0x0280(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_288[0x48];                                     // 0x0288(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCooldownStarted(EFortItemCooldownType CooldownType);
	void OnCooldownStopped(EFortItemCooldownType CooldownType);
	void OnWorldItemDestroyed();
	void SetItem(const class UFortWorldItem* InWorldItem);
	void TryStartUpdateCooldown_BP();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemCooldownWidget">();
	}
	static class UFortItemCooldownWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemCooldownWidget>();
	}
};
static_assert(alignof(UFortItemCooldownWidget) == 0x000008, "Wrong alignment on UFortItemCooldownWidget");
static_assert(sizeof(UFortItemCooldownWidget) == 0x0002D0, "Wrong size on UFortItemCooldownWidget");
static_assert(offsetof(UFortItemCooldownWidget, OnCooldownStarted_Delegate) == 0x000238, "Member 'UFortItemCooldownWidget::OnCooldownStarted_Delegate' has a wrong offset!");
static_assert(offsetof(UFortItemCooldownWidget, OnCooldownStopped_Delegate) == 0x000248, "Member 'UFortItemCooldownWidget::OnCooldownStopped_Delegate' has a wrong offset!");
static_assert(offsetof(UFortItemCooldownWidget, CooldownText) == 0x000258, "Member 'UFortItemCooldownWidget::CooldownText' has a wrong offset!");
static_assert(offsetof(UFortItemCooldownWidget, CooldownImage) == 0x000260, "Member 'UFortItemCooldownWidget::CooldownImage' has a wrong offset!");
static_assert(offsetof(UFortItemCooldownWidget, CooldownMaterialParameterName) == 0x000268, "Member 'UFortItemCooldownWidget::CooldownMaterialParameterName' has a wrong offset!");
static_assert(offsetof(UFortItemCooldownWidget, CooldownTypesSupported) == 0x000270, "Member 'UFortItemCooldownWidget::CooldownTypesSupported' has a wrong offset!");
static_assert(offsetof(UFortItemCooldownWidget, CooldownPercentageMID) == 0x000280, "Member 'UFortItemCooldownWidget::CooldownPercentageMID' has a wrong offset!");

// Class FortniteUI.FortDefenderSlotWidget
// 0x0000 (0x0238 - 0x0238)
class UFortDefenderSlotWidget final : public UCommonUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDefenderSlotWidget">();
	}
	static class UFortDefenderSlotWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDefenderSlotWidget>();
	}
};
static_assert(alignof(UFortDefenderSlotWidget) == 0x000008, "Wrong alignment on UFortDefenderSlotWidget");
static_assert(sizeof(UFortDefenderSlotWidget) == 0x000238, "Wrong size on UFortDefenderSlotWidget");

// Class FortniteUI.FortLocalUserEntry
// 0x0030 (0x0B60 - 0x0B30)
class UFortLocalUserEntry : public UCommonButton
{
public:
	TSubclassOf<class UFortOnlineStatusPanel>     OnlineStatusPanelClass;                            // 0x0B30(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortOnlineStatusPanel*                 OnlineStatusPanel;                                 // 0x0B38(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortPlayerBanner*                      PlayerBanner;                                      // 0x0B40(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextBlock*                             Text_UserName;                                     // 0x0B48(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextBlock*                             Text_RichPresence;                                 // 0x0B50(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMenuAnchor*                            MenuAnchor_OnlineStatusPanel;                      // 0x0B58(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UWidget* HandleGetMenuContent();
	void OnOnlineStatusChanged(ELocalUserOnlineStatus OnlineStatus);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLocalUserEntry">();
	}
	static class UFortLocalUserEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLocalUserEntry>();
	}
};
static_assert(alignof(UFortLocalUserEntry) == 0x000008, "Wrong alignment on UFortLocalUserEntry");
static_assert(sizeof(UFortLocalUserEntry) == 0x000B60, "Wrong size on UFortLocalUserEntry");
static_assert(offsetof(UFortLocalUserEntry, OnlineStatusPanelClass) == 0x000B30, "Member 'UFortLocalUserEntry::OnlineStatusPanelClass' has a wrong offset!");
static_assert(offsetof(UFortLocalUserEntry, OnlineStatusPanel) == 0x000B38, "Member 'UFortLocalUserEntry::OnlineStatusPanel' has a wrong offset!");
static_assert(offsetof(UFortLocalUserEntry, PlayerBanner) == 0x000B40, "Member 'UFortLocalUserEntry::PlayerBanner' has a wrong offset!");
static_assert(offsetof(UFortLocalUserEntry, Text_UserName) == 0x000B48, "Member 'UFortLocalUserEntry::Text_UserName' has a wrong offset!");
static_assert(offsetof(UFortLocalUserEntry, Text_RichPresence) == 0x000B50, "Member 'UFortLocalUserEntry::Text_RichPresence' has a wrong offset!");
static_assert(offsetof(UFortLocalUserEntry, MenuAnchor_OnlineStatusPanel) == 0x000B58, "Member 'UFortLocalUserEntry::MenuAnchor_OnlineStatusPanel' has a wrong offset!");

// Class FortniteUI.FortSquadSelectorButton
// 0x0020 (0x0B50 - 0x0B30)
class UFortSquadSelectorButton : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x10];                                     // 0x0B30(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortSquadManagementScreenBase> SquadManagementScreenType;                         // 0x0B40(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B48[0x8];                                      // 0x0B48(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleDifferentSquadSetBP();
	void HandleSquadChangedBP();
	void SetIdOfSquadToManageBP(const class FName& SquadId);

	class FName GetIdOfSquadToManageBP() const;
	bool TryGetStaticSquadDataBP(struct FHomebaseSquad* OutSquadData) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadSelectorButton">();
	}
	static class UFortSquadSelectorButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadSelectorButton>();
	}
};
static_assert(alignof(UFortSquadSelectorButton) == 0x000008, "Wrong alignment on UFortSquadSelectorButton");
static_assert(sizeof(UFortSquadSelectorButton) == 0x000B50, "Wrong size on UFortSquadSelectorButton");
static_assert(offsetof(UFortSquadSelectorButton, SquadManagementScreenType) == 0x000B40, "Member 'UFortSquadSelectorButton::SquadManagementScreenType' has a wrong offset!");

// Class FortniteUI.FortDefenderSquadSelectorButton
// 0x0000 (0x0B50 - 0x0B50)
class UFortDefenderSquadSelectorButton final : public UFortSquadSelectorButton
{
public:
	bool TryGetPowerLevel(int32* OutPowerLevel);

	bool TryGetTheaterUniqueId(class FString* OutTheaterUniqueId, bool* OutIsUnlocked) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDefenderSquadSelectorButton">();
	}
	static class UFortDefenderSquadSelectorButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDefenderSquadSelectorButton>();
	}
};
static_assert(alignof(UFortDefenderSquadSelectorButton) == 0x000008, "Wrong alignment on UFortDefenderSquadSelectorButton");
static_assert(sizeof(UFortDefenderSquadSelectorButton) == 0x000B50, "Wrong size on UFortDefenderSquadSelectorButton");

// Class FortniteUI.FortUserPermissions
// 0x0028 (0x0050 - 0x0028)
class UFortUserPermissions final : public UObject
{
public:
	uint8                                         Pad_28[0x28];                                      // 0x0028(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUserPermissions">();
	}
	static class UFortUserPermissions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUserPermissions>();
	}
};
static_assert(alignof(UFortUserPermissions) == 0x000008, "Wrong alignment on UFortUserPermissions");
static_assert(sizeof(UFortUserPermissions) == 0x000050, "Wrong size on UFortUserPermissions");

// Class FortniteUI.FortPurchaseHistoryScreen
// 0x00C8 (0x03E8 - 0x0320)
class UFortPurchaseHistoryScreen : public UCommonActivatablePanel
{
public:
	struct FDataTableRowHandle                    PreviousStepRowHandle;                             // 0x0320(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortRefundConfirmation>    RefundConfirmationClass;                           // 0x0330(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortRefundConfirmation*                RefundConfirmationWidget;                          // 0x0338(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FText>                           ReturnReasons;                                     // 0x0340(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UReturnReasonDataWrapper*>       WrapperArray;                                      // 0x0350(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_360[0x10];                                     // 0x0360(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortItemDefinition*>            SelectedItemDefs;                                  // 0x0370(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_380[0x18];                                     // 0x0380(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonGroup*                     TabButtonGroup;                                    // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRefundConfirmationProcessing;                     // 0x03A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A1[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortPurchaseHistoryListView*           ListView_Purchases;                                // 0x03A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonListView*                        ListView_Reasons;                                  // 0x03B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Desc;                                         // 0x03B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_RefundCount;                                  // 0x03C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_RequestRefund;                              // 0x03C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortRichTextBlock*                     RichText_WarningMsg;                               // 0x03D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_RefundValue;                                  // 0x03D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_RefundReason;                                 // 0x03E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ConsumeComplete();
	void HandlePreviousStepAction(bool* bPassThrough);
	void HandleTabButtonClicked(EPurchaseReturnStep ClickedStep);
	void InitializeTickets(int32 NumTicketsAvailableToUse);
	void OnBeginRefundSubmission();
	void OnEndRefundSubmission(bool bSuccess, int32 MtxRefunded, class UFortItemDefinition* ReturnedItem, int32 TicketIndex);
	void OnItemRefresh(const struct FMtxPurchaseHistory& PurchaseHistory);
	void OnNoPurchasesAvailable();
	void OnPopulateView(EPurchaseReturnStep CurrentStep);
	void UpdateItemList(const TArray<class UCommonTextBlock*>& ItemsToReturn);

	EPurchaseReturnStep GetCurrentStep() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPurchaseHistoryScreen">();
	}
	static class UFortPurchaseHistoryScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPurchaseHistoryScreen>();
	}
};
static_assert(alignof(UFortPurchaseHistoryScreen) == 0x000008, "Wrong alignment on UFortPurchaseHistoryScreen");
static_assert(sizeof(UFortPurchaseHistoryScreen) == 0x0003E8, "Wrong size on UFortPurchaseHistoryScreen");
static_assert(offsetof(UFortPurchaseHistoryScreen, PreviousStepRowHandle) == 0x000320, "Member 'UFortPurchaseHistoryScreen::PreviousStepRowHandle' has a wrong offset!");
static_assert(offsetof(UFortPurchaseHistoryScreen, RefundConfirmationClass) == 0x000330, "Member 'UFortPurchaseHistoryScreen::RefundConfirmationClass' has a wrong offset!");
static_assert(offsetof(UFortPurchaseHistoryScreen, RefundConfirmationWidget) == 0x000338, "Member 'UFortPurchaseHistoryScreen::RefundConfirmationWidget' has a wrong offset!");
static_assert(offsetof(UFortPurchaseHistoryScreen, ReturnReasons) == 0x000340, "Member 'UFortPurchaseHistoryScreen::ReturnReasons' has a wrong offset!");
static_assert(offsetof(UFortPurchaseHistoryScreen, WrapperArray) == 0x000350, "Member 'UFortPurchaseHistoryScreen::WrapperArray' has a wrong offset!");
static_assert(offsetof(UFortPurchaseHistoryScreen, SelectedItemDefs) == 0x000370, "Member 'UFortPurchaseHistoryScreen::SelectedItemDefs' has a wrong offset!");
static_assert(offsetof(UFortPurchaseHistoryScreen, TabButtonGroup) == 0x000398, "Member 'UFortPurchaseHistoryScreen::TabButtonGroup' has a wrong offset!");
static_assert(offsetof(UFortPurchaseHistoryScreen, bRefundConfirmationProcessing) == 0x0003A0, "Member 'UFortPurchaseHistoryScreen::bRefundConfirmationProcessing' has a wrong offset!");
static_assert(offsetof(UFortPurchaseHistoryScreen, ListView_Purchases) == 0x0003A8, "Member 'UFortPurchaseHistoryScreen::ListView_Purchases' has a wrong offset!");
static_assert(offsetof(UFortPurchaseHistoryScreen, ListView_Reasons) == 0x0003B0, "Member 'UFortPurchaseHistoryScreen::ListView_Reasons' has a wrong offset!");
static_assert(offsetof(UFortPurchaseHistoryScreen, Text_Desc) == 0x0003B8, "Member 'UFortPurchaseHistoryScreen::Text_Desc' has a wrong offset!");
static_assert(offsetof(UFortPurchaseHistoryScreen, Text_RefundCount) == 0x0003C0, "Member 'UFortPurchaseHistoryScreen::Text_RefundCount' has a wrong offset!");
static_assert(offsetof(UFortPurchaseHistoryScreen, Button_RequestRefund) == 0x0003C8, "Member 'UFortPurchaseHistoryScreen::Button_RequestRefund' has a wrong offset!");
static_assert(offsetof(UFortPurchaseHistoryScreen, RichText_WarningMsg) == 0x0003D0, "Member 'UFortPurchaseHistoryScreen::RichText_WarningMsg' has a wrong offset!");
static_assert(offsetof(UFortPurchaseHistoryScreen, Text_RefundValue) == 0x0003D8, "Member 'UFortPurchaseHistoryScreen::Text_RefundValue' has a wrong offset!");
static_assert(offsetof(UFortPurchaseHistoryScreen, Text_RefundReason) == 0x0003E0, "Member 'UFortPurchaseHistoryScreen::Text_RefundReason' has a wrong offset!");

// Class FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase
// 0x0048 (0x0488 - 0x0440)
class UFortDirectAcquisitionOfferDetailsWidgetBase final : public UFortActivatablePanelWithItemPreview
{
public:
	uint8                                         Pad_440[0x10];                                     // 0x0440(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    EnterViewModeInputActionRowHandle;                 // 0x0450(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          IsInItemViewMode;                                  // 0x0460(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ShouldAllowItemViewModeAction;                     // 0x0461(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_462[0x6];                                      // 0x0462(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortStoreFrontOfferInfo*>       PagedItems;                                        // 0x0468(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UFortStoreFrontOfferInfo*               OfferData;                                         // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortVariantPicker*                     Picker_VariantSelector;                            // 0x0480(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AutoEquip();
	bool CanAutoEquip();
	void HandleCurrentlyViewedAccountInfoChanged(const struct FFortPublicAccountInfo& NewInfo);
	void OnEnterViewModeActionCommitted(bool* PassThrough);
	void OnOfferSet();
	void OnUpdateStatus();
	void PurchaseAmountLeft();
	void PurchaseAmountRight();
	void RefreshOfferInfo();
	void SetIsInItemViewMode(const bool Value);
	void SetPagedItems(const TArray<class UFortStoreFrontOfferInfo*>& InPagedItems);
	void SetShouldAllowItemViewModeAction(const bool Value);
	void SetupOffer(class UFortStoreFrontOfferInfo* InOfferData);
	void UpdateItemViewModeBP();

	class UFortStoreFrontOfferInfo* GetOfferInfo() const;
	void SendShopInteractionAnalytic(const class FString& Interaction) const;
	bool ShouldHavePurchaseConfirmation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDirectAcquisitionOfferDetailsWidgetBase">();
	}
	static class UFortDirectAcquisitionOfferDetailsWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDirectAcquisitionOfferDetailsWidgetBase>();
	}
};
static_assert(alignof(UFortDirectAcquisitionOfferDetailsWidgetBase) == 0x000008, "Wrong alignment on UFortDirectAcquisitionOfferDetailsWidgetBase");
static_assert(sizeof(UFortDirectAcquisitionOfferDetailsWidgetBase) == 0x000488, "Wrong size on UFortDirectAcquisitionOfferDetailsWidgetBase");
static_assert(offsetof(UFortDirectAcquisitionOfferDetailsWidgetBase, EnterViewModeInputActionRowHandle) == 0x000450, "Member 'UFortDirectAcquisitionOfferDetailsWidgetBase::EnterViewModeInputActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortDirectAcquisitionOfferDetailsWidgetBase, IsInItemViewMode) == 0x000460, "Member 'UFortDirectAcquisitionOfferDetailsWidgetBase::IsInItemViewMode' has a wrong offset!");
static_assert(offsetof(UFortDirectAcquisitionOfferDetailsWidgetBase, ShouldAllowItemViewModeAction) == 0x000461, "Member 'UFortDirectAcquisitionOfferDetailsWidgetBase::ShouldAllowItemViewModeAction' has a wrong offset!");
static_assert(offsetof(UFortDirectAcquisitionOfferDetailsWidgetBase, PagedItems) == 0x000468, "Member 'UFortDirectAcquisitionOfferDetailsWidgetBase::PagedItems' has a wrong offset!");
static_assert(offsetof(UFortDirectAcquisitionOfferDetailsWidgetBase, OfferData) == 0x000478, "Member 'UFortDirectAcquisitionOfferDetailsWidgetBase::OfferData' has a wrong offset!");
static_assert(offsetof(UFortDirectAcquisitionOfferDetailsWidgetBase, Picker_VariantSelector) == 0x000480, "Member 'UFortDirectAcquisitionOfferDetailsWidgetBase::Picker_VariantSelector' has a wrong offset!");

// Class FortniteUI.FortPlayerTrackerBase
// 0x0040 (0x0278 - 0x0238)
class UFortPlayerTrackerBase : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       UniqueId;                                          // 0x0240(0x0028)(BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFortRegisteredPlayerInfo> PlayerInfo;                                        // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PartyIndex;                                        // 0x0270(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsLocalPlayer;                                     // 0x0274(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ShouldDeferAttributesChangedEvents;                // 0x0275(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_276[0x2];                                      // 0x0276(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleDelayedOnPlayerAttributesChanged();
	void HandleOnLocalPlayerInfoUpdated(const struct FFortTeamMemberInfo& NewInfo);
	void HandleOnPlayerIdUpdated(const struct FUniqueNetIdRepl& NewInfo);
	void HandlePartyLeft();
	void HandleTeamMemberAdded(const struct FFortTeamMemberInfo& NewInfo);
	void HandleTeamMemberRemoved(int32 RemovedIndex);
	void HandleTeamMemberStateChanged(const struct FFortTeamMemberInfo& NewInfo);
	void HandleTeamMemberStateChangedId(const struct FFortTeamMemberInfo& NewInfo);
	void HandleTooltipAttributeChanged();
	void OnPlayerAttributesChanged();
	void OnPlayerInfoChanged(const struct FFortTeamMemberInfo& NewInfo);
	void RegisterAttributeChangedDelegates();
	void ReRegisterAttributeChangedDelegates();
	void ResetPartyEvents();
	void SetTeamMember(int32 InPlayerIndex);
	void SetUniqueId(const struct FUniqueNetIdRepl& InUniqueId);
	void SetUniqueIdInternal(const struct FUniqueNetIdRepl& InUniqueId);
	void UpdateBasedOnId();

	int32 GetBaseFortitude() const;
	int32 GetBaseOffense() const;
	int32 GetBaseResistance() const;
	int32 GetBaseTech() const;
	int32 GetBuffedFortitude() const;
	int32 GetBuffedOffense() const;
	int32 GetBuffedResistance() const;
	int32 GetBuffedTech() const;
	bool GetHomebaseRating(int32* Rating, float* ProgressFraction) const;
	bool GetModifiedHomebaseRating(int32* Rating, float* ProgressFraction) const;
	int32 GetTeamFortitude() const;
	int32 GetTeamOffense() const;
	int32 GetTeamResistance() const;
	int32 GetTeamTech() const;
	bool HasModifiedStats() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerTrackerBase">();
	}
	static class UFortPlayerTrackerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerTrackerBase>();
	}
};
static_assert(alignof(UFortPlayerTrackerBase) == 0x000008, "Wrong alignment on UFortPlayerTrackerBase");
static_assert(sizeof(UFortPlayerTrackerBase) == 0x000278, "Wrong size on UFortPlayerTrackerBase");
static_assert(offsetof(UFortPlayerTrackerBase, UniqueId) == 0x000240, "Member 'UFortPlayerTrackerBase::UniqueId' has a wrong offset!");
static_assert(offsetof(UFortPlayerTrackerBase, PlayerInfo) == 0x000268, "Member 'UFortPlayerTrackerBase::PlayerInfo' has a wrong offset!");
static_assert(offsetof(UFortPlayerTrackerBase, PartyIndex) == 0x000270, "Member 'UFortPlayerTrackerBase::PartyIndex' has a wrong offset!");
static_assert(offsetof(UFortPlayerTrackerBase, IsLocalPlayer) == 0x000274, "Member 'UFortPlayerTrackerBase::IsLocalPlayer' has a wrong offset!");
static_assert(offsetof(UFortPlayerTrackerBase, ShouldDeferAttributesChangedEvents) == 0x000275, "Member 'UFortPlayerTrackerBase::ShouldDeferAttributesChangedEvents' has a wrong offset!");

// Class FortniteUI.FortStoreSummary
// 0x0048 (0x0368 - 0x0320)
class UFortStoreSummary final : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStoreCardObject*>               StoreCardObjects;                                  // 0x0328(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UCommonTileView*                        TileView;                                          // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortMulchConfirmationModalWidget> MulchConfirmationModalClass;                       // 0x0340(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_348[0x18];                                     // 0x0348(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMulchConfirmationModalWidget*      MulchConfirmationModal;                            // 0x0360(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CloseSummaryScreen();
	void FinalizeFavoriteStatus();
	void HandleContextMenuOpenChanged(bool bIsOpen);
	void HandleContextMenuOpenChangedBP(bool bIsOpen);
	void HideMulchConfirmationModal();
	void NotifyPanelActivated();
	void NotifyPanelDeactivated();
	void SetCards(const TArray<struct FCard>& Cards);
	void ShowMulchConfirmationModal();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortStoreSummary">();
	}
	static class UFortStoreSummary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortStoreSummary>();
	}
};
static_assert(alignof(UFortStoreSummary) == 0x000008, "Wrong alignment on UFortStoreSummary");
static_assert(sizeof(UFortStoreSummary) == 0x000368, "Wrong size on UFortStoreSummary");
static_assert(offsetof(UFortStoreSummary, StoreCardObjects) == 0x000328, "Member 'UFortStoreSummary::StoreCardObjects' has a wrong offset!");
static_assert(offsetof(UFortStoreSummary, TileView) == 0x000338, "Member 'UFortStoreSummary::TileView' has a wrong offset!");
static_assert(offsetof(UFortStoreSummary, MulchConfirmationModalClass) == 0x000340, "Member 'UFortStoreSummary::MulchConfirmationModalClass' has a wrong offset!");
static_assert(offsetof(UFortStoreSummary, MulchConfirmationModal) == 0x000360, "Member 'UFortStoreSummary::MulchConfirmationModal' has a wrong offset!");

// Class FortniteUI.FortMtxStoreRootBase
// 0x0050 (0x0398 - 0x0348)
class UFortMtxStoreRootBase : public UFortActivatablePanel
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMtxStoreSelectionPopup*            MtxStoreSelectionWidget;                           // 0x0350(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortMtxStoreSelectionPopup> MtxStoreSelectionClass;                            // 0x0358(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         StorefrontNames;                                   // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_370[0x10];                                     // 0x0370(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortStoreFrontOfferInfo*>       AcquisitionOfferData;                              // 0x0380(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_390[0x8];                                      // 0x0390(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearOfferWidgets();
	void GenerateOfferWidget(class UFortStoreFrontOfferInfo* OfferData);
	void NoOffersAvailable();
	void OnOffersGenerated();
	void OnPurchasingDisabled();
	void OnStartReadingOffers();
	void OnUpdateOtherPlatformMTXMessage(bool HasOtherPlatformCurrency, const class FText& CurrencyMessageLocText);
	void PushStoreSelection();
	void SetStorefrontNames(const TArray<class FString>& InStorefrontNames);

	bool AreOffersLoaded() const;
	struct FMtxBreakdown GetMtxBreakdown() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMtxStoreRootBase">();
	}
	static class UFortMtxStoreRootBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMtxStoreRootBase>();
	}
};
static_assert(alignof(UFortMtxStoreRootBase) == 0x000008, "Wrong alignment on UFortMtxStoreRootBase");
static_assert(sizeof(UFortMtxStoreRootBase) == 0x000398, "Wrong size on UFortMtxStoreRootBase");
static_assert(offsetof(UFortMtxStoreRootBase, MtxStoreSelectionWidget) == 0x000350, "Member 'UFortMtxStoreRootBase::MtxStoreSelectionWidget' has a wrong offset!");
static_assert(offsetof(UFortMtxStoreRootBase, MtxStoreSelectionClass) == 0x000358, "Member 'UFortMtxStoreRootBase::MtxStoreSelectionClass' has a wrong offset!");
static_assert(offsetof(UFortMtxStoreRootBase, StorefrontNames) == 0x000360, "Member 'UFortMtxStoreRootBase::StorefrontNames' has a wrong offset!");
static_assert(offsetof(UFortMtxStoreRootBase, AcquisitionOfferData) == 0x000380, "Member 'UFortMtxStoreRootBase::AcquisitionOfferData' has a wrong offset!");

// Class FortniteUI.FortDirectAcquisitionWidgetBase
// 0x0028 (0x03C0 - 0x0398)
class UFortDirectAcquisitionWidgetBase : public UFortMtxStoreRootBase
{
public:
	uint8                                         Pad_398[0x8];                                      // 0x0398(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShowIneligible;                                   // 0x03A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A1[0x1F];                                     // 0x03A1(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleAffiliateButtonClicked();
	void OnAffiliateUpdated(const class FString& AffiliateName);
	void OnDisplayToast(const bool bDisplayToast);

	struct FDateTime GetDailyStoreEndDate() const;
	struct FDateTime GetSeasonStoreEndDate() const;
	TArray<class UFortAccountItemDefinition*> GetStoreCurrencies() const;
	struct FDateTime GetWeeklyStoreEndDate() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDirectAcquisitionWidgetBase">();
	}
	static class UFortDirectAcquisitionWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDirectAcquisitionWidgetBase>();
	}
};
static_assert(alignof(UFortDirectAcquisitionWidgetBase) == 0x000008, "Wrong alignment on UFortDirectAcquisitionWidgetBase");
static_assert(sizeof(UFortDirectAcquisitionWidgetBase) == 0x0003C0, "Wrong size on UFortDirectAcquisitionWidgetBase");
static_assert(offsetof(UFortDirectAcquisitionWidgetBase, bShowIneligible) == 0x0003A0, "Member 'UFortDirectAcquisitionWidgetBase::bShowIneligible' has a wrong offset!");

// Class FortniteUI.FortRewardInfoWidget
// 0x0088 (0x02C0 - 0x0238)
class UFortRewardInfoWidget : public UCommonUserWidget
{
public:
	class UPanelWidget*                           RewardListWidget;                                  // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                RewardWidgetPadding;                               // 0x0240(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0250(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0251(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowDescription;                                  // 0x0252(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowItemInteraction;                             // 0x0253(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxNumRewardsShown;                                // 0x0254(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortRewardInfoButton>      OrWidgetType;                                      // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortRewardInfoButton>      RewardInfoButtonType;                              // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_268[0x20];                                     // 0x0268(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonGroup*                     ButtonGroup;                                       // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_290[0x30];                                     // 0x0290(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ContainsReward(const class FString& TemplateIdToCheck);
	void SetButtonGroup(class UCommonButtonGroup* InButtonGroup);
	void SetReward(const struct FFortItemQuantityPair& RewardIn);
	void SetRewards(const struct FFortRewardInfo& RewardsIn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRewardInfoWidget">();
	}
	static class UFortRewardInfoWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRewardInfoWidget>();
	}
};
static_assert(alignof(UFortRewardInfoWidget) == 0x000008, "Wrong alignment on UFortRewardInfoWidget");
static_assert(sizeof(UFortRewardInfoWidget) == 0x0002C0, "Wrong size on UFortRewardInfoWidget");
static_assert(offsetof(UFortRewardInfoWidget, RewardListWidget) == 0x000238, "Member 'UFortRewardInfoWidget::RewardListWidget' has a wrong offset!");
static_assert(offsetof(UFortRewardInfoWidget, RewardWidgetPadding) == 0x000240, "Member 'UFortRewardInfoWidget::RewardWidgetPadding' has a wrong offset!");
static_assert(offsetof(UFortRewardInfoWidget, HorizontalAlignment) == 0x000250, "Member 'UFortRewardInfoWidget::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UFortRewardInfoWidget, VerticalAlignment) == 0x000251, "Member 'UFortRewardInfoWidget::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UFortRewardInfoWidget, bShowDescription) == 0x000252, "Member 'UFortRewardInfoWidget::bShowDescription' has a wrong offset!");
static_assert(offsetof(UFortRewardInfoWidget, bAllowItemInteraction) == 0x000253, "Member 'UFortRewardInfoWidget::bAllowItemInteraction' has a wrong offset!");
static_assert(offsetof(UFortRewardInfoWidget, MaxNumRewardsShown) == 0x000254, "Member 'UFortRewardInfoWidget::MaxNumRewardsShown' has a wrong offset!");
static_assert(offsetof(UFortRewardInfoWidget, OrWidgetType) == 0x000258, "Member 'UFortRewardInfoWidget::OrWidgetType' has a wrong offset!");
static_assert(offsetof(UFortRewardInfoWidget, RewardInfoButtonType) == 0x000260, "Member 'UFortRewardInfoWidget::RewardInfoButtonType' has a wrong offset!");
static_assert(offsetof(UFortRewardInfoWidget, ButtonGroup) == 0x000288, "Member 'UFortRewardInfoWidget::ButtonGroup' has a wrong offset!");

// Class FortniteUI.FortDisplayNameWidget
// 0x0088 (0x03A8 - 0x0320)
class UFortDisplayNameWidget : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ButtonDisableReason;                               // 0x0330(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   NameTakenText;                                     // 0x0348(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   NameInvalidFormatText;                             // 0x0360(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   NameTooShortText;                                  // 0x0378(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class UCommonButton*                          Button_Enter;                                      // 0x0390(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Error;                                        // 0x0398(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEditableText*                          EditText_DisplayName;                              // 0x03A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleTextChanged(const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDisplayNameWidget">();
	}
	static class UFortDisplayNameWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDisplayNameWidget>();
	}
};
static_assert(alignof(UFortDisplayNameWidget) == 0x000008, "Wrong alignment on UFortDisplayNameWidget");
static_assert(sizeof(UFortDisplayNameWidget) == 0x0003A8, "Wrong size on UFortDisplayNameWidget");
static_assert(offsetof(UFortDisplayNameWidget, ButtonDisableReason) == 0x000330, "Member 'UFortDisplayNameWidget::ButtonDisableReason' has a wrong offset!");
static_assert(offsetof(UFortDisplayNameWidget, NameTakenText) == 0x000348, "Member 'UFortDisplayNameWidget::NameTakenText' has a wrong offset!");
static_assert(offsetof(UFortDisplayNameWidget, NameInvalidFormatText) == 0x000360, "Member 'UFortDisplayNameWidget::NameInvalidFormatText' has a wrong offset!");
static_assert(offsetof(UFortDisplayNameWidget, NameTooShortText) == 0x000378, "Member 'UFortDisplayNameWidget::NameTooShortText' has a wrong offset!");
static_assert(offsetof(UFortDisplayNameWidget, Button_Enter) == 0x000390, "Member 'UFortDisplayNameWidget::Button_Enter' has a wrong offset!");
static_assert(offsetof(UFortDisplayNameWidget, Text_Error) == 0x000398, "Member 'UFortDisplayNameWidget::Text_Error' has a wrong offset!");
static_assert(offsetof(UFortDisplayNameWidget, EditText_DisplayName) == 0x0003A0, "Member 'UFortDisplayNameWidget::EditText_DisplayName' has a wrong offset!");

// Class FortniteUI.FortDropdownMenu
// 0x0020 (0x0358 - 0x0338)
class UFortDropdownMenu : public UCommonPopupMenu
{
public:
	UMulticastDelegateProperty_                   OnOptionSelected;                                  // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UCommonButtonGroup*                     ButtonGroup;                                       // 0x0348(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCloseOnSelection;                                 // 0x0350(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearRegisteredButtons();
	void DeselectAll();
	void InternalOnButtonClicked(class UCommonButton* AssociatedButton, int32 ButtonIndex);
	void InternalOnSelectionChanged(class UCommonButton* AssociatedButton, int32 ButtonIndex);
	void RegisterButton(class UCommonButton* Button);

	class UCommonButton* GetSelectedButton() const;
	int32 GetSelectedButtonIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDropdownMenu">();
	}
	static class UFortDropdownMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDropdownMenu>();
	}
};
static_assert(alignof(UFortDropdownMenu) == 0x000008, "Wrong alignment on UFortDropdownMenu");
static_assert(sizeof(UFortDropdownMenu) == 0x000358, "Wrong size on UFortDropdownMenu");
static_assert(offsetof(UFortDropdownMenu, OnOptionSelected) == 0x000338, "Member 'UFortDropdownMenu::OnOptionSelected' has a wrong offset!");
static_assert(offsetof(UFortDropdownMenu, ButtonGroup) == 0x000348, "Member 'UFortDropdownMenu::ButtonGroup' has a wrong offset!");
static_assert(offsetof(UFortDropdownMenu, bCloseOnSelection) == 0x000350, "Member 'UFortDropdownMenu::bCloseOnSelection' has a wrong offset!");

// Class FortniteUI.FortInviteRequest
// 0x0020 (0x0258 - 0x0238)
class UFortInviteRequest : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x10];                                     // 0x0238(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButton*                          Button_RequestInvite;                              // 0x0248(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Logout;                                     // 0x0250(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortInviteRequest">();
	}
	static class UFortInviteRequest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortInviteRequest>();
	}
};
static_assert(alignof(UFortInviteRequest) == 0x000008, "Wrong alignment on UFortInviteRequest");
static_assert(sizeof(UFortInviteRequest) == 0x000258, "Wrong size on UFortInviteRequest");
static_assert(offsetof(UFortInviteRequest, Button_RequestInvite) == 0x000248, "Member 'UFortInviteRequest::Button_RequestInvite' has a wrong offset!");
static_assert(offsetof(UFortInviteRequest, Button_Logout) == 0x000250, "Member 'UFortInviteRequest::Button_Logout' has a wrong offset!");

// Class FortniteUI.FortDropdownDelegateRegistrar
// 0x0030 (0x0058 - 0x0028)
class UFortDropdownDelegateRegistrar final : public UObject
{
public:
	class UObject*                                ContextProvider;                                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button;                                            // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMenuAnchor*                            MenuAnchor;                                        // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortDropdownMenu*                      CachedDropdownMenu;                                // 0x0050(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UWidget* GetOrCreateDropdownMenu();
	void OnOpenStatusChanged(bool Open);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDropdownDelegateRegistrar">();
	}
	static class UFortDropdownDelegateRegistrar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDropdownDelegateRegistrar>();
	}
};
static_assert(alignof(UFortDropdownDelegateRegistrar) == 0x000008, "Wrong alignment on UFortDropdownDelegateRegistrar");
static_assert(sizeof(UFortDropdownDelegateRegistrar) == 0x000058, "Wrong size on UFortDropdownDelegateRegistrar");
static_assert(offsetof(UFortDropdownDelegateRegistrar, ContextProvider) == 0x000028, "Member 'UFortDropdownDelegateRegistrar::ContextProvider' has a wrong offset!");
static_assert(offsetof(UFortDropdownDelegateRegistrar, Button) == 0x000030, "Member 'UFortDropdownDelegateRegistrar::Button' has a wrong offset!");
static_assert(offsetof(UFortDropdownDelegateRegistrar, MenuAnchor) == 0x000038, "Member 'UFortDropdownDelegateRegistrar::MenuAnchor' has a wrong offset!");
static_assert(offsetof(UFortDropdownDelegateRegistrar, CachedDropdownMenu) == 0x000050, "Member 'UFortDropdownDelegateRegistrar::CachedDropdownMenu' has a wrong offset!");

// Class FortniteUI.FortDynamicEntryBox
// 0x0038 (0x0210 - 0x01D8)
class UFortDynamicEntryBox final : public UDynamicEntryBox
{
public:
	int32                                         MaximumEntries;                                    // 0x01D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EDynamicEntryPatternDirection                 PatternDirection;                                  // 0x01DC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1DD[0x3];                                      // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 RenderOpacityPattern;                              // 0x01E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FWidgetTransform>               RenderTransformPattern;                            // 0x01F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVector2D>                      RenderTransformPivotPattern;                       // 0x0200(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDynamicEntryBox">();
	}
	static class UFortDynamicEntryBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDynamicEntryBox>();
	}
};
static_assert(alignof(UFortDynamicEntryBox) == 0x000008, "Wrong alignment on UFortDynamicEntryBox");
static_assert(sizeof(UFortDynamicEntryBox) == 0x000210, "Wrong size on UFortDynamicEntryBox");
static_assert(offsetof(UFortDynamicEntryBox, MaximumEntries) == 0x0001D8, "Member 'UFortDynamicEntryBox::MaximumEntries' has a wrong offset!");
static_assert(offsetof(UFortDynamicEntryBox, PatternDirection) == 0x0001DC, "Member 'UFortDynamicEntryBox::PatternDirection' has a wrong offset!");
static_assert(offsetof(UFortDynamicEntryBox, RenderOpacityPattern) == 0x0001E0, "Member 'UFortDynamicEntryBox::RenderOpacityPattern' has a wrong offset!");
static_assert(offsetof(UFortDynamicEntryBox, RenderTransformPattern) == 0x0001F0, "Member 'UFortDynamicEntryBox::RenderTransformPattern' has a wrong offset!");
static_assert(offsetof(UFortDynamicEntryBox, RenderTransformPivotPattern) == 0x000200, "Member 'UFortDynamicEntryBox::RenderTransformPivotPattern' has a wrong offset!");

// Class FortniteUI.FortErrorWindow
// 0x0018 (0x0360 - 0x0348)
class UFortErrorWindow : public UFortActivatablePanel
{
public:
	TSubclassOf<class UCommonUserWidget>          ErrorEntryClass;                                   // 0x0348(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCommonUserWidget*>              ErrorEntriesPool;                                  // 0x0350(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void DismissErrors(const TArray<struct FFortErrorInfo>& ErrorInfos);
	class UCommonUserWidget* GetErrorEntry();
	void PutErrorEntries(TArray<class UCommonUserWidget*>& ErrorEntries);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortErrorWindow">();
	}
	static class UFortErrorWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortErrorWindow>();
	}
};
static_assert(alignof(UFortErrorWindow) == 0x000008, "Wrong alignment on UFortErrorWindow");
static_assert(sizeof(UFortErrorWindow) == 0x000360, "Wrong size on UFortErrorWindow");
static_assert(offsetof(UFortErrorWindow, ErrorEntryClass) == 0x000348, "Member 'UFortErrorWindow::ErrorEntryClass' has a wrong offset!");
static_assert(offsetof(UFortErrorWindow, ErrorEntriesPool) == 0x000350, "Member 'UFortErrorWindow::ErrorEntriesPool' has a wrong offset!");

// Class FortniteUI.FortLobbyAddPlayer
// 0x0030 (0x0278 - 0x0248)
class UFortLobbyAddPlayer : public UFortTeamMemberEntryBase
{
public:
	uint8                                         Pad_248[0x10];                                     // 0x0248(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortSocialPanel>           SocialPanelClass;                                  // 0x0258(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_260[0x8];                                      // 0x0260(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButton*                          Button_EmptySlot;                                  // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortPartySuggestionButton*             PartySuggestion;                                   // 0x0270(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLobbyAddPlayer">();
	}
	static class UFortLobbyAddPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLobbyAddPlayer>();
	}
};
static_assert(alignof(UFortLobbyAddPlayer) == 0x000008, "Wrong alignment on UFortLobbyAddPlayer");
static_assert(sizeof(UFortLobbyAddPlayer) == 0x000278, "Wrong size on UFortLobbyAddPlayer");
static_assert(offsetof(UFortLobbyAddPlayer, SocialPanelClass) == 0x000258, "Member 'UFortLobbyAddPlayer::SocialPanelClass' has a wrong offset!");
static_assert(offsetof(UFortLobbyAddPlayer, Button_EmptySlot) == 0x000268, "Member 'UFortLobbyAddPlayer::Button_EmptySlot' has a wrong offset!");
static_assert(offsetof(UFortLobbyAddPlayer, PartySuggestion) == 0x000270, "Member 'UFortLobbyAddPlayer::PartySuggestion' has a wrong offset!");

// Class FortniteUI.FortTeamMemberXPBoostInfo
// 0x0018 (0x0260 - 0x0248)
class UFortTeamMemberXPBoostInfo : public UFortTeamMemberEntryBase
{
public:
	class UPanelWidget*                           Panel_BattlePassOwnerInfo;                         // 0x0248(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextBlock*                             Text_BattlePassSelfXPBoost;                        // 0x0250(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextBlock*                             Text_EventXPBoost;                                 // 0x0258(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTeamMemberXPBoostInfo">();
	}
	static class UFortTeamMemberXPBoostInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTeamMemberXPBoostInfo>();
	}
};
static_assert(alignof(UFortTeamMemberXPBoostInfo) == 0x000008, "Wrong alignment on UFortTeamMemberXPBoostInfo");
static_assert(sizeof(UFortTeamMemberXPBoostInfo) == 0x000260, "Wrong size on UFortTeamMemberXPBoostInfo");
static_assert(offsetof(UFortTeamMemberXPBoostInfo, Panel_BattlePassOwnerInfo) == 0x000248, "Member 'UFortTeamMemberXPBoostInfo::Panel_BattlePassOwnerInfo' has a wrong offset!");
static_assert(offsetof(UFortTeamMemberXPBoostInfo, Text_BattlePassSelfXPBoost) == 0x000250, "Member 'UFortTeamMemberXPBoostInfo::Text_BattlePassSelfXPBoost' has a wrong offset!");
static_assert(offsetof(UFortTeamMemberXPBoostInfo, Text_EventXPBoost) == 0x000258, "Member 'UFortTeamMemberXPBoostInfo::Text_EventXPBoost' has a wrong offset!");

// Class FortniteUI.FortEulaWidget
// 0x0038 (0x0358 - 0x0320)
class UFortEulaWidget : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x18];                                     // 0x0320(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortRichTextBlock*                     Text_Description;                                  // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UScrollBox*                             ScrollBox_License;                                 // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Confirm;                                    // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Decline;                                    // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEulaWidget">();
	}
	static class UFortEulaWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEulaWidget>();
	}
};
static_assert(alignof(UFortEulaWidget) == 0x000008, "Wrong alignment on UFortEulaWidget");
static_assert(sizeof(UFortEulaWidget) == 0x000358, "Wrong size on UFortEulaWidget");
static_assert(offsetof(UFortEulaWidget, Text_Description) == 0x000338, "Member 'UFortEulaWidget::Text_Description' has a wrong offset!");
static_assert(offsetof(UFortEulaWidget, ScrollBox_License) == 0x000340, "Member 'UFortEulaWidget::ScrollBox_License' has a wrong offset!");
static_assert(offsetof(UFortEulaWidget, Button_Confirm) == 0x000348, "Member 'UFortEulaWidget::Button_Confirm' has a wrong offset!");
static_assert(offsetof(UFortEulaWidget, Button_Decline) == 0x000350, "Member 'UFortEulaWidget::Button_Decline' has a wrong offset!");

// Class FortniteUI.FortLevelIndicator
// 0x0088 (0x0190 - 0x0108)
class UFortLevelIndicator final : public UWidget
{
public:
	TWeakObjectPtr<class UFortItem>               ItemToRepresent;                                   // 0x0108(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UFortItem>               ItemForComparison;                                 // 0x0110(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldShowLabel;                                   // 0x0118(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonTextStyle>           TextStyle;                                         // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldShowMaximumLevel;                            // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentLevel;                                      // 0x012C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumLevel;                                      // 0x0130(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsComparingLevels;                                 // 0x0134(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBrushSize                                ComparisonResultIndicatorSize;                     // 0x0135(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136[0x2];                                      // 0x0136(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentLevelForComparison;                         // 0x0138(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumLevelForComparison;                         // 0x013C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonTextBlock*                       LabelTextBlock;                                    // 0x0140(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonNumericTextBlock*                CurrentLevelNumericTextBlock;                      // 0x0148(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_150[0x10];                                     // 0x0150(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       DivisionOperatorTextBlock;                         // 0x0160(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonNumericTextBlock*                MaximumLevelNumericTextBlock;                      // 0x0168(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_170[0x20];                                     // 0x0170(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleItemForComparisonChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);
	void HandleItemToRepresentChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);
	void SetItemForComparison(class UFortItem* Param_ItemForComparison);
	void SetItemToRepresent(class UFortItem* Param_ItemToRepresent);
	void SetShouldShowMaximumLevel(bool InShouldShowMaximumLevel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLevelIndicator">();
	}
	static class UFortLevelIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLevelIndicator>();
	}
};
static_assert(alignof(UFortLevelIndicator) == 0x000008, "Wrong alignment on UFortLevelIndicator");
static_assert(sizeof(UFortLevelIndicator) == 0x000190, "Wrong size on UFortLevelIndicator");
static_assert(offsetof(UFortLevelIndicator, ItemToRepresent) == 0x000108, "Member 'UFortLevelIndicator::ItemToRepresent' has a wrong offset!");
static_assert(offsetof(UFortLevelIndicator, ItemForComparison) == 0x000110, "Member 'UFortLevelIndicator::ItemForComparison' has a wrong offset!");
static_assert(offsetof(UFortLevelIndicator, ShouldShowLabel) == 0x000118, "Member 'UFortLevelIndicator::ShouldShowLabel' has a wrong offset!");
static_assert(offsetof(UFortLevelIndicator, TextStyle) == 0x000120, "Member 'UFortLevelIndicator::TextStyle' has a wrong offset!");
static_assert(offsetof(UFortLevelIndicator, ShouldShowMaximumLevel) == 0x000128, "Member 'UFortLevelIndicator::ShouldShowMaximumLevel' has a wrong offset!");
static_assert(offsetof(UFortLevelIndicator, CurrentLevel) == 0x00012C, "Member 'UFortLevelIndicator::CurrentLevel' has a wrong offset!");
static_assert(offsetof(UFortLevelIndicator, MaximumLevel) == 0x000130, "Member 'UFortLevelIndicator::MaximumLevel' has a wrong offset!");
static_assert(offsetof(UFortLevelIndicator, IsComparingLevels) == 0x000134, "Member 'UFortLevelIndicator::IsComparingLevels' has a wrong offset!");
static_assert(offsetof(UFortLevelIndicator, ComparisonResultIndicatorSize) == 0x000135, "Member 'UFortLevelIndicator::ComparisonResultIndicatorSize' has a wrong offset!");
static_assert(offsetof(UFortLevelIndicator, CurrentLevelForComparison) == 0x000138, "Member 'UFortLevelIndicator::CurrentLevelForComparison' has a wrong offset!");
static_assert(offsetof(UFortLevelIndicator, MaximumLevelForComparison) == 0x00013C, "Member 'UFortLevelIndicator::MaximumLevelForComparison' has a wrong offset!");
static_assert(offsetof(UFortLevelIndicator, LabelTextBlock) == 0x000140, "Member 'UFortLevelIndicator::LabelTextBlock' has a wrong offset!");
static_assert(offsetof(UFortLevelIndicator, CurrentLevelNumericTextBlock) == 0x000148, "Member 'UFortLevelIndicator::CurrentLevelNumericTextBlock' has a wrong offset!");
static_assert(offsetof(UFortLevelIndicator, DivisionOperatorTextBlock) == 0x000160, "Member 'UFortLevelIndicator::DivisionOperatorTextBlock' has a wrong offset!");
static_assert(offsetof(UFortLevelIndicator, MaximumLevelNumericTextBlock) == 0x000168, "Member 'UFortLevelIndicator::MaximumLevelNumericTextBlock' has a wrong offset!");

// Class FortniteUI.FortEventLeaderboardEntryData
// 0x0128 (0x0150 - 0x0028)
class UFortEventLeaderboardEntryData final : public UObject
{
public:
	uint8                                         Pad_28[0x128];                                     // 0x0028(0x0128)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetAverageMatchScore() const;
	float GetAveragePlacement() const;
	int32 GetNumTeammates() const;
	int32 GetPageIndex() const;
	int32 GetRank() const;
	int32 GetScore() const;
	class FText GetTeamDisplayNameText() const;
	void GetTeammateDisplayNames(TArray<class FString>* DisplayNames) const;
	int32 GetTotalEliminations() const;
	int32 GetTotalMatchesPlayed() const;
	int32 GetTotalPointsForCategory(class FName ScoreCategoryId) const;
	int32 GetTotalVictoryRoyales() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventLeaderboardEntryData">();
	}
	static class UFortEventLeaderboardEntryData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventLeaderboardEntryData>();
	}
};
static_assert(alignof(UFortEventLeaderboardEntryData) == 0x000008, "Wrong alignment on UFortEventLeaderboardEntryData");
static_assert(sizeof(UFortEventLeaderboardEntryData) == 0x000150, "Wrong size on UFortEventLeaderboardEntryData");

// Class FortniteUI.FortEventLeaderboardEntry
// 0x0008 (0x0B38 - 0x0B30)
class UFortEventLeaderboardEntry : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTeammateDisplayNameAdded(const class UFortEventLeaderboardEntryData* LeaderboardEntryData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventLeaderboardEntry">();
	}
	static class UFortEventLeaderboardEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventLeaderboardEntry>();
	}
};
static_assert(alignof(UFortEventLeaderboardEntry) == 0x000008, "Wrong alignment on UFortEventLeaderboardEntry");
static_assert(sizeof(UFortEventLeaderboardEntry) == 0x000B38, "Wrong size on UFortEventLeaderboardEntry");

// Class FortniteUI.FortEventLeaderboardScreen
// 0x0050 (0x0398 - 0x0348)
class UFortEventLeaderboardScreen : public UFortActivatablePanel
{
public:
	class UListView*                              ListView_LeaderboardEntries;                       // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_350[0x48];                                     // 0x0350(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLeaderboardEntrySelected(const class UFortEventLeaderboardEntryData* EntryData);
	void OnLeaderboardPageRequestComplete();
	void OnLeaderboardPageRequested();
	void RequestNextPage();
	void SetEvent(const class FString& EventWindowId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventLeaderboardScreen">();
	}
	static class UFortEventLeaderboardScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventLeaderboardScreen>();
	}
};
static_assert(alignof(UFortEventLeaderboardScreen) == 0x000008, "Wrong alignment on UFortEventLeaderboardScreen");
static_assert(sizeof(UFortEventLeaderboardScreen) == 0x000398, "Wrong size on UFortEventLeaderboardScreen");
static_assert(offsetof(UFortEventLeaderboardScreen, ListView_LeaderboardEntries) == 0x000348, "Member 'UFortEventLeaderboardScreen::ListView_LeaderboardEntries' has a wrong offset!");

// Class FortniteUI.FortOptionsMenuSetting
// 0x0030 (0x0268 - 0x0238)
class UFortOptionsMenuSetting : public UCommonUserWidget
{
public:
	UMulticastDelegateProperty_                   SettingValueChanged;                               // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	ESettingType                                  SettingType;                                       // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NameText;                                          // 0x0250(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void CenterOnWidget();
	void UpdateSetting(class UCommonTextBlock* TooltipTextBlock);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortOptionsMenuSetting">();
	}
	static class UFortOptionsMenuSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortOptionsMenuSetting>();
	}
};
static_assert(alignof(UFortOptionsMenuSetting) == 0x000008, "Wrong alignment on UFortOptionsMenuSetting");
static_assert(sizeof(UFortOptionsMenuSetting) == 0x000268, "Wrong size on UFortOptionsMenuSetting");
static_assert(offsetof(UFortOptionsMenuSetting, SettingValueChanged) == 0x000238, "Member 'UFortOptionsMenuSetting::SettingValueChanged' has a wrong offset!");
static_assert(offsetof(UFortOptionsMenuSetting, SettingType) == 0x000248, "Member 'UFortOptionsMenuSetting::SettingType' has a wrong offset!");
static_assert(offsetof(UFortOptionsMenuSetting, NameText) == 0x000250, "Member 'UFortOptionsMenuSetting::NameText' has a wrong offset!");

// Class FortniteUI.FortRewardCollectionBookData
// 0x0068 (0x0098 - 0x0030)
class UFortRewardCollectionBookData final : public UFortRewardNotificationData
{
public:
	struct FFortCollectionBookRewards             CollectionBookRewards;                             // 0x0030(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRewardCollectionBookData">();
	}
	static class UFortRewardCollectionBookData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRewardCollectionBookData>();
	}
};
static_assert(alignof(UFortRewardCollectionBookData) == 0x000008, "Wrong alignment on UFortRewardCollectionBookData");
static_assert(sizeof(UFortRewardCollectionBookData) == 0x000098, "Wrong size on UFortRewardCollectionBookData");
static_assert(offsetof(UFortRewardCollectionBookData, CollectionBookRewards) == 0x000030, "Member 'UFortRewardCollectionBookData::CollectionBookRewards' has a wrong offset!");

// Class FortniteUI.FortEvolveIndicator
// 0x0000 (0x0468 - 0x0468)
class UFortEvolveIndicator final : public UFortSimpleItemConditionIconIndicator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEvolveIndicator">();
	}
	static class UFortEvolveIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEvolveIndicator>();
	}
};
static_assert(alignof(UFortEvolveIndicator) == 0x000008, "Wrong alignment on UFortEvolveIndicator");
static_assert(sizeof(UFortEvolveIndicator) == 0x000468, "Wrong size on UFortEvolveIndicator");

// Class FortniteUI.FortExpeditionBuildSquadWidget
// 0x0060 (0x0380 - 0x0320)
class UFortExpeditionBuildSquadWidget : public UCommonActivatablePanel
{
public:
	TWeakObjectPtr<class UFortExpeditionItem>     Item;                                              // 0x0320(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CurrentSquadId;                                    // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortSquadSlotsView*                    ExpeditionSquadSlotsView;                          // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortSquadSlotDetailsPanel*             ExpeditionSquadSlotDetails;                        // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortSquadSlotItemPicker*               ExpeditionSquadSlotPicker;                         // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItemViewContext_ExpeditionSquadSlotsView* ItemViewContext_ExpeditionSlotsView;               // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortItemViewContext_ExpeditionSquadSlotItemPicker* ItemViewContext_ExpeditionSlotItemPicker;          // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_358[0x28];                                     // 0x0358(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearTemporaryExpeditionSquadState(bool bPreviewOnly);
	void HandleDifferentSquadSlotSelected(const int32 SquadSlotIndex);
	void HandleStartExpeditionCompleted(const class UFortExpeditionItem* Expedition, bool bSucceeded);
	bool IsExpeditionValidToStart();
	void OnRefreshBuildSquadWidget();
	void OnRequestClosePicker();
	void OnStartExpeditionCompleted();
	void SetCurrentSquadId(class FName SquadId);
	void SetData(class UFortExpeditionItem* InItem);
	bool StartExpedition();

	bool IsSquadSlotLocked(int32 SlotIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortExpeditionBuildSquadWidget">();
	}
	static class UFortExpeditionBuildSquadWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortExpeditionBuildSquadWidget>();
	}
};
static_assert(alignof(UFortExpeditionBuildSquadWidget) == 0x000008, "Wrong alignment on UFortExpeditionBuildSquadWidget");
static_assert(sizeof(UFortExpeditionBuildSquadWidget) == 0x000380, "Wrong size on UFortExpeditionBuildSquadWidget");
static_assert(offsetof(UFortExpeditionBuildSquadWidget, Item) == 0x000320, "Member 'UFortExpeditionBuildSquadWidget::Item' has a wrong offset!");
static_assert(offsetof(UFortExpeditionBuildSquadWidget, CurrentSquadId) == 0x000328, "Member 'UFortExpeditionBuildSquadWidget::CurrentSquadId' has a wrong offset!");
static_assert(offsetof(UFortExpeditionBuildSquadWidget, ExpeditionSquadSlotsView) == 0x000330, "Member 'UFortExpeditionBuildSquadWidget::ExpeditionSquadSlotsView' has a wrong offset!");
static_assert(offsetof(UFortExpeditionBuildSquadWidget, ExpeditionSquadSlotDetails) == 0x000338, "Member 'UFortExpeditionBuildSquadWidget::ExpeditionSquadSlotDetails' has a wrong offset!");
static_assert(offsetof(UFortExpeditionBuildSquadWidget, ExpeditionSquadSlotPicker) == 0x000340, "Member 'UFortExpeditionBuildSquadWidget::ExpeditionSquadSlotPicker' has a wrong offset!");
static_assert(offsetof(UFortExpeditionBuildSquadWidget, ItemViewContext_ExpeditionSlotsView) == 0x000348, "Member 'UFortExpeditionBuildSquadWidget::ItemViewContext_ExpeditionSlotsView' has a wrong offset!");
static_assert(offsetof(UFortExpeditionBuildSquadWidget, ItemViewContext_ExpeditionSlotItemPicker) == 0x000350, "Member 'UFortExpeditionBuildSquadWidget::ItemViewContext_ExpeditionSlotItemPicker' has a wrong offset!");

// Class FortniteUI.FortExpeditionDetailsWidget
// 0x0040 (0x0278 - 0x0238)
class UFortExpeditionDetailsWidget : public UCommonUserWidget
{
public:
	TWeakObjectPtr<class UFortExpeditionItem>     Item;                                              // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortSquadSlotsView*                    ExpeditionSquadSlotsView;                          // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CurrentSquadId;                                    // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItemViewContext_ExpeditionSquadSlotsView* ItemViewContext_ExpeditionSlotsView;               // 0x0250(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_258[0x20];                                     // 0x0258(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AbandonExpedition();
	void HandleAbandonExpeditionCompleted(const class UFortExpeditionItem* Expedition, bool bSuccess);
	void OnAbandonExpeditionCompleted();
	void SetCurrentSquadId(class FName SquadId);
	void SetData(class UFortExpeditionItem* InItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortExpeditionDetailsWidget">();
	}
	static class UFortExpeditionDetailsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortExpeditionDetailsWidget>();
	}
};
static_assert(alignof(UFortExpeditionDetailsWidget) == 0x000008, "Wrong alignment on UFortExpeditionDetailsWidget");
static_assert(sizeof(UFortExpeditionDetailsWidget) == 0x000278, "Wrong size on UFortExpeditionDetailsWidget");
static_assert(offsetof(UFortExpeditionDetailsWidget, Item) == 0x000238, "Member 'UFortExpeditionDetailsWidget::Item' has a wrong offset!");
static_assert(offsetof(UFortExpeditionDetailsWidget, ExpeditionSquadSlotsView) == 0x000240, "Member 'UFortExpeditionDetailsWidget::ExpeditionSquadSlotsView' has a wrong offset!");
static_assert(offsetof(UFortExpeditionDetailsWidget, CurrentSquadId) == 0x000248, "Member 'UFortExpeditionDetailsWidget::CurrentSquadId' has a wrong offset!");
static_assert(offsetof(UFortExpeditionDetailsWidget, ItemViewContext_ExpeditionSlotsView) == 0x000250, "Member 'UFortExpeditionDetailsWidget::ItemViewContext_ExpeditionSlotsView' has a wrong offset!");

// Class FortniteUI.FortInventoryContext
// 0x02E0 (0x0308 - 0x0028)
class UFortInventoryContext final : public UBlueprintContextBase
{
public:
	UMulticastDelegateProperty_                   OnMcpWorldItemsChanged;                            // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMcpOutpostItemsChanged;                          // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnWorldItemListChanged;                            // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnOutpostItemListChanged;                          // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemPickedUp;                                    // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnQuickbarContentsChanged;                         // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnQuickbarSlotFocusChanged;                        // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnQuickbarSecondarySlotFocusChanged;               // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnQuickbarForceFullUpdate;                         // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnWorldItemsChanged;                               // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPinnedSchematicsChanged;                         // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSchematicsLockedChanged;                         // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSchematicUnlocked;                               // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnCraftItemStarted;                                // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnCraftItemFailed;                                 // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnVaultItemLimitStateChangedEvent;                 // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnInventoryFiltersWithUnseenItemsChanged;          // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x18];                                     // 0x0138(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnItemTypesWithUnseenItemsChanged;                 // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_160[0x30];                                     // 0x0160(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UFortSchematicItemDefinition*, bool> SchematicLockedStates;                             // 0x0190(0x0050)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E0[0x128];                                    // 0x01E0(0x0128)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool AreAnyItemsAnimate(const TArray<class UFortItem*>& Items);
	static class FText GetDisassembleRestrictionReasonText(const EItemDisassembleRestrictionReason Reason);
	static class FText GetEvolveRestrictionReasonText(const EItemEvolutionRestrictionReason Reason);
	static int32 GetItemLevelRecyclingWarningThreshold();
	static EFortRarity GetItemRarityRecyclingWarningThreshold();
	static EFortItemTier GetItemTierRecyclingWarningThreshold();
	static class FText GetRecycleRestrictionReasonText(const EItemRecyclingRestrictionReason Reason);
	static class FText GetRecyclingCatalystDisplayName(const class UFortItem* Item);
	static class FText GetRecyclingWarningText(EItemRecyclingWarning Warning, const bool WereAnyItemsAnimate);
	static class FText GetShorthandItemStackCount(const int32 Quantity, const int32 MiniumFractionalDigits, const int32 MaximumFractionalDigits);
	static class FText GetTierText(EFortItemTier Tier);
	static TArray<class FText> GetUserFriendlyTags(const class UFortItem* Item);
	static struct FFortItemQuantityPair MakeItemQuantityPair(const class UFortItemDefinition* ItemDefinition, int32 ItemQuantity);

	bool ActivateItem(class UFortItem* Item);
	bool CanSwapItem(class UFortItem* Item, EFortQuickBars TargetQuickbar, int32 TargetSlot);
	bool CanUpgradeItemRarity(const class UFortItem* Item, TArray<EItemEvolutionRestrictionReason>* OutRestrictionReasons);
	bool CraftAndSlotSchematic(class UFortSchematicItem* SchematicItem, int32 PostCraftSlot, EFortCraftFailCause* FailCause, EFortItemTier RequestedTier, int32 CraftCount);
	bool CraftSchematic(class UFortSchematicItem* SchematicItem, EFortCraftFailCause* FailCause, EFortItemTier RequestedTier, int32 CraftCount);
	void DestroyWorldItem(class UFortItem* Item);
	void DropItem(const class UFortWorldItem* ItemBeingDropped, int32 Quantity);
	bool DropItemOnQuickBar(class UFortItem* Item, EFortQuickBars TargetQuickbar, int32 TargetSlot);
	void EnumerateRecyclingWarningsForItems(const TArray<class UFortItem*>& Items, TArray<EItemRecyclingWarning>* OutWarnings);
	void EquipItem(class UFortItem* Item);
	TArray<struct FRecipe> GetConversionRecipesFromItemDefintion(class UFortItemDefinition* ItemDefinition);
	bool GetGameplayTagByIndex(const struct FGameplayTagContainer& GameplayTagContainer, int32 Param_Index, struct FGameplayTag* Result);
	void GetTransformKeys(EConversionControlKeyRequest RequestType, const EInventoryContentSortType SortType, TArray<class UFortAccountItem*>* TransformKeys);
	void GetUnseenTransformKeys(EConversionControlKeyRequest RequestType, const EInventoryContentSortType SortType, TArray<class UFortAccountItem*>* TransformKeys);
	struct FRecipe GetUpgradeItemRarityRecipeFromItemDefintion(class UFortItemDefinition* ItemDefinition);
	void HandleMcpProfilesInitialized();
	bool HasRecyclingWarnings(class UFortItem* Item);
	void LockAllSchematics();
	void OnInventoryFiltersWithUnseenItemsChanged__DelegateSignature(const TSet<EFortFrontendInventoryFilter>& AffectedInventoryFilters);
	void OnItemTypesWithUnseenItemsChanged__DelegateSignature(const TSet<EFortItemType>& AffectedItemTypes);
	bool RemoveItemFromQuickBar(class UFortItem* Item);
	bool SetSchematicPinned(class UFortSchematicItem* Schematic, bool bEnabled);
	void UnlockAllSchematics();
	void UnlockSchematic(class UFortSchematicItemDefinition* SchematicDefinition);
	void UpdateLastSeenHomebasePoints();
	void UpdateLastSeenResearchPointCollectionNodes();

	bool AreAnyItemsUnseenForInventoryFilter(const EFortFrontendInventoryFilter InventoryFilter) const;
	bool AreAnyItemsUnseenForItemType(const EFortItemType ItemType) const;
	bool AreRecipeRequirementsMet(const TArray<struct FFortItemQuantityPair>& RecipeCosts) const;
	bool CanBulkCraftSchematic(class UFortSchematicItem* SchematicItem) const;
	bool CanCraftSchematic(class UFortSchematicItem* SchematicItem, EFortCraftFailCause* FailCause, EFortItemTier RequestedTier, int32 CraftCount) const;
	bool CanDisassembleItem(const class UFortWorldItem* Item, TArray<EItemDisassembleRestrictionReason>* OutRestrictionReasons) const;
	bool CanEvolve(const class UFortItem* Item, TArray<EItemEvolutionRestrictionReason>* OutRestrictionReasons) const;
	bool CanItemBeMulched(class UFortItem* Item, class FText* OutRestrictionReasons) const;
	bool CanPinSchematic(class UFortSchematicItem* Schematic) const;
	bool CanRecycle(const class UFortItem* Item, TArray<EItemRecyclingRestrictionReason>* OutRestrictionReasons) const;
	bool DoesItemMatchFilter(class UFortItem* Item, const struct FFortItemListFilter& FilterSettings) const;
	void GetAccountItemsByFilterType(const class FString& SearchText, const EInventoryContentSortType SortType, const EFortInventoryFilter SubType, TArray<class UFortAccountItem*>* OutItemList) const;
	void GetAccountItemsByType(EFortItemType ItemType, TArray<class UFortAccountItem*>* Items) const;
	void GetBackpackItemCounts(int32* ItemsCount, int32* MaxItemsCount, int32* OverflowItemsCount) const;
	int32 GetBackpackOverflowFromAddingItem(class UFortWorldItem* Item, int32 Count) const;
	void GetCoreItemsByFilterType(const class FString& SearchText, const EInventoryContentSortType SortType, const EFortInventoryFilter SubType, TArray<class UFortAccountItem*>* OutItemList) const;
	void GetCoreItemsByType(EFortItemType ItemType, TArray<class UFortAccountItem*>* Items) const;
	int32 GetCountOfHeroItems() const;
	int32 GetCountOfVaultLimitedItems() const;
	class UFortWorldItemDefinition* GetCurrentAmmoItemDefinition() const;
	int32 GetCurrentResourceCount() const;
	class UFortResourceItemDefinition* GetCurrentResourceItemDefinition() const;
	void GetDeployableBaseItemCounts(int32* ItemsCount, int32* MaxItemsCount, int32* OverflowItemsCount) const;
	int32 GetDeployableBaseOverflowFromAddingItem(class UFortWorldItem* Item, int32 Count) const;
	class AFortWeapon* GetEquippedWeapon() const;
	bool GetHeroAbilityPerks(class UFortHero* Hero, TArray<struct FFortUIPerk>* HeroAbilityPerks) const;
	class UFortPersistentResourceItemDefinition* GetHeroResourceItemDefinition() const;
	void GetHomebaseUnlockedTransmogKeys(TArray<class UFortAccountItem*>* TransmogKeys) const;
	void GetItemInstancesByDefinition(class UFortItemDefinition* ItemDefinition, TArray<class UFortItem*>* Items) const;
	TArray<class UFortItem*> GetItemsToMulchBP() const;
	int32 GetNumGiftingStamps() const;
	int32 GetNumInInventory(class UFortItemDefinition* ItemDefinition, bool bIncludeReserved) const;
	int32 GetNumItemsToMulch() const;
	class UFortPersistentResourceItemDefinition* GetPersonnelResourceItemDefinition() const;
	void GetPinnedSchematicList(TArray<class UFortSchematicItem*>* PinnedItems) const;
	void GetProfileItemsByFilterType(class UFortMcpProfile* Profile, const class FString& SearchText, const EInventoryContentSortType SortType, const EFortInventoryFilter SubType, TArray<class UFortAccountItem*>* OutItemList) const;
	void GetProfileItemsByType(class UFortMcpProfile* Profile, EFortItemType ItemType, TArray<class UFortAccountItem*>* Items) const;
	void GetQuickbarFocus(EFortQuickBars* OutQuickBar, int32* OutSlot, int32* OutSecondarySlot, int32* OutPreviousFocusedSlot) const;
	class UFortItem* GetQuickBarSlottedItem(EFortQuickBars InQuickBar, int32 Slot) const;
	int32 GetResourceCount(EFortResourceType ResourceType) const;
	class UTexture2D* GetResourceIcon(EFortResourceType ResourceType) const;
	class UFortResourceItemDefinition* GetResourceItemDefinition(EFortResourceType ResourceType) const;
	int32 GetResourceItemMaxStackSize(EFortResourceType ResourceType) const;
	class UFortPersistentResourceItemDefinition* GetSchematicResourceItemDefinition() const;
	int32 GetStorageCapacity() const;
	int32 GetStorageNumItems() const;
	int32 GetStorageOverflowFromAddingItem(class UFortWorldItem* Item, int32 Count) const;
	bool GetSupportBonusPerks(class UFortHero* Hero, TArray<struct FFortUIPerk>* SupportBonusPerks) const;
	int32 GetTotalItemQuantityByDefinition(class UFortItemDefinition* ItemDefinition) const;
	bool GetTransmogSacrificeDataFromItemDefintion(const class UFortItemDefinition* ItemDefinition, struct FTransmogSacrifice* OutTransmogData) const;
	class FText GetTrapAttachTypeName(class ABuildingSMActor* Actor) const;
	int32 GetVaultItemLimit() const;
	EVaultItemLimitStatus GetVaultItemLimitStatus() const;
	class UFortPersistentResourceItemDefinition* GetVoucherResourceItemDefinition() const;
	void GetWorldItemList(TArray<class UFortWorldItem*>* Items, const struct FFortItemListFilter& FilterSettings) const;
	void GetWorldItemListForDeployableBaseThePlayerIsIn(TArray<class UFortWorldItem*>* Items, const struct FFortItemListFilter& FilterSettings) const;
	bool HasEvolutions(const class UFortItem* Item) const;
	bool HasGameplayTagContainer(const struct FGameplayTagContainer& GameplayTagContainer) const;
	bool HasGameplayTagContainerExact(const struct FGameplayTagContainer& GameplayTagContainer) const;
	bool HasTrapReadyForBuilding(const class ABuildingSMActor* BuildingToAttachTo) const;
	bool HasUnavailableItemsInStorage() const;
	bool HasUnseenHomebasePoints() const;
	bool HasUnseenResearchPointCollectionNodes() const;
	bool IsSchematicPinned(class UFortSchematicItem* Schematic) const;
	bool IsSlotHidden(EFortQuickBars InQuickBar, int32 Slot) const;
	bool IsTrapAvailableForBuilding(class ABuildingSMActor* Actor) const;
	void SortAccountItemArrayForTransmog(TArray<class UFortAccountItem*>& VaultItems, TArray<class UFortAccountItem*>* SortedItems) const;
	bool WouldExceedMaxStackSize(class UFortItemDefinition* ItemDefinition, int32 QuantityToTest) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortInventoryContext">();
	}
	static class UFortInventoryContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortInventoryContext>();
	}
};
static_assert(alignof(UFortInventoryContext) == 0x000008, "Wrong alignment on UFortInventoryContext");
static_assert(sizeof(UFortInventoryContext) == 0x000308, "Wrong size on UFortInventoryContext");
static_assert(offsetof(UFortInventoryContext, OnMcpWorldItemsChanged) == 0x000028, "Member 'UFortInventoryContext::OnMcpWorldItemsChanged' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnMcpOutpostItemsChanged) == 0x000038, "Member 'UFortInventoryContext::OnMcpOutpostItemsChanged' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnWorldItemListChanged) == 0x000048, "Member 'UFortInventoryContext::OnWorldItemListChanged' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnOutpostItemListChanged) == 0x000058, "Member 'UFortInventoryContext::OnOutpostItemListChanged' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnItemPickedUp) == 0x000068, "Member 'UFortInventoryContext::OnItemPickedUp' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnQuickbarContentsChanged) == 0x000078, "Member 'UFortInventoryContext::OnQuickbarContentsChanged' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnQuickbarSlotFocusChanged) == 0x000088, "Member 'UFortInventoryContext::OnQuickbarSlotFocusChanged' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnQuickbarSecondarySlotFocusChanged) == 0x000098, "Member 'UFortInventoryContext::OnQuickbarSecondarySlotFocusChanged' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnQuickbarForceFullUpdate) == 0x0000A8, "Member 'UFortInventoryContext::OnQuickbarForceFullUpdate' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnWorldItemsChanged) == 0x0000B8, "Member 'UFortInventoryContext::OnWorldItemsChanged' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnPinnedSchematicsChanged) == 0x0000C8, "Member 'UFortInventoryContext::OnPinnedSchematicsChanged' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnSchematicsLockedChanged) == 0x0000D8, "Member 'UFortInventoryContext::OnSchematicsLockedChanged' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnSchematicUnlocked) == 0x0000E8, "Member 'UFortInventoryContext::OnSchematicUnlocked' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnCraftItemStarted) == 0x0000F8, "Member 'UFortInventoryContext::OnCraftItemStarted' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnCraftItemFailed) == 0x000108, "Member 'UFortInventoryContext::OnCraftItemFailed' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnVaultItemLimitStateChangedEvent) == 0x000118, "Member 'UFortInventoryContext::OnVaultItemLimitStateChangedEvent' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnInventoryFiltersWithUnseenItemsChanged) == 0x000128, "Member 'UFortInventoryContext::OnInventoryFiltersWithUnseenItemsChanged' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnItemTypesWithUnseenItemsChanged) == 0x000150, "Member 'UFortInventoryContext::OnItemTypesWithUnseenItemsChanged' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, SchematicLockedStates) == 0x000190, "Member 'UFortInventoryContext::SchematicLockedStates' has a wrong offset!");

// Class FortniteUI.FortSurvivorSquadStatMatchBase
// 0x0378 (0x05B0 - 0x0238)
class UFortSurvivorSquadStatMatchBase final : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortUISurvivorSquadStatMatch          StatMatch;                                         // 0x0240(0x0370)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void OnStatMatchUpdated(const struct FFortUISurvivorSquadStatMatch& UpdatedMatch);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSurvivorSquadStatMatchBase">();
	}
	static class UFortSurvivorSquadStatMatchBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSurvivorSquadStatMatchBase>();
	}
};
static_assert(alignof(UFortSurvivorSquadStatMatchBase) == 0x000008, "Wrong alignment on UFortSurvivorSquadStatMatchBase");
static_assert(sizeof(UFortSurvivorSquadStatMatchBase) == 0x0005B0, "Wrong size on UFortSurvivorSquadStatMatchBase");
static_assert(offsetof(UFortSurvivorSquadStatMatchBase, StatMatch) == 0x000240, "Member 'UFortSurvivorSquadStatMatchBase::StatMatch' has a wrong offset!");

// Class FortniteUI.FortExpeditionExpiresWidget
// 0x0010 (0x0248 - 0x0238)
class UFortExpeditionExpiresWidget : public UCommonUserWidget
{
public:
	TWeakObjectPtr<class UFortExpeditionItem>     Item;                                              // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_240[0x8];                                      // 0x0240(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnExpeditionExpirationUpdated();
	void SetData(class UFortExpeditionItem* InItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortExpeditionExpiresWidget">();
	}
	static class UFortExpeditionExpiresWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortExpeditionExpiresWidget>();
	}
};
static_assert(alignof(UFortExpeditionExpiresWidget) == 0x000008, "Wrong alignment on UFortExpeditionExpiresWidget");
static_assert(sizeof(UFortExpeditionExpiresWidget) == 0x000248, "Wrong size on UFortExpeditionExpiresWidget");
static_assert(offsetof(UFortExpeditionExpiresWidget, Item) == 0x000238, "Member 'UFortExpeditionExpiresWidget::Item' has a wrong offset!");

// Class FortniteUI.FortHomebaseUIContext
// 0x0120 (0x0148 - 0x0028)
class UFortHomebaseUIContext final : public UBlueprintContextBase
{
public:
	UMulticastDelegateProperty_                   OnShouldAutoSlotSurvivorSquadsChanged;             // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSquadSlotChanged;                                // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSurvivorSquadsAutoSlotted;                       // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnNodePurchased;                                   // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSlottedPrimaryHeroChanged;                       // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnDifferentHeroLoadoutViewed;                      // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnDifferentHeroLoadoutSlotFocused;                 // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              SquadIconDataTableAsset;                           // 0x0098(0x0028)(Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C0[0x38];                                      // 0x00C0(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UFortGadgetItemDefinition*, class UFortWorldItem*> GadgetDefinitionToInstanceMap;                     // 0x00F8(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void AutoSlotAllSurvivorSquads();
	bool GetLocalPlayerHasHeroBackpack();
	bool GetLocalPlayerHasHeroHeadAccessories();
	bool GetShowHeroBackpackForLocalPlayer();
	bool GetShowHeroHeadAccessoriesForLocalPlayer();
	void HandleDifferentHeroLoadoutActivated(class UFortMcpProfileCampaign* Profile);
	void OnDifferentHeroLoadoutSlotFocused__DelegateSignature(class FName SlotName);
	void OnDifferentHeroLoadoutViewed__DelegateSignature(const class UFortCampaignHeroLoadoutItem* PreviousLoadout, const class UFortCampaignHeroLoadoutItem* NewLoadout);
	void OnNodesPurchased__DelegateSignature(class FName NodeId);
	void OnShouldAutoSlotSurvivorSquadsChanged__DelegateSignature();
	void OnSlottedPrimaryHeroChanged__DelegateSignature();
	void OnSquadSlotChanged__DelegateSignature(class FName SquadName, int32 SlotIndex);
	void OnSurvivorSquadsAutoSlotted__DelegateSignature();
	void SetCurrentlyFocusedHeroLoadoutSlotName(const class FName& SlotName);
	void SetCurrentlyViewedHeroLoadout(const class UFortCampaignHeroLoadoutItem* Loadout);
	void SetShouldAutoSlotSurvivorSquads(const bool Value);
	void SetShowHeroBackpackForLocalPlayer(bool bShow);
	void SetShowHeroHeadAccessoriesForLocalPlayer(bool bShow);

	class FName GetCurrentlyFocusedHeroLoadoutSlotName() const;
	class UFortCampaignHeroLoadoutItem* GetCurrentlyViewedHeroLoadout() const;
	class UFortItem* GetItemInSquadSlot(class FName SquadName, int32 SlotIndex) const;
	TArray<class UFortItem*> GetItemsInSquad(const class FName SquadId, bool bRemoveEmptySquadSlots) const;
	bool GetShouldAutoSlotSurvivorSquads() const;
	class UFortHero* GetSlottedPrimaryHero() const;
	struct FFortMultiSizeBrush GetSquadIcon(const class FName SquadId) const;
	bool GetUnlockedGadgets(TArray<class UFortItem*>* UnlockedGadgets) const;
	class UFortQuestItemDefinition* GetUnlockingQuestDefinitionForHeroLoadoutSlot(const class FName& SlotName, const class UFortCampaignHeroLoadoutItem* Loadout) const;
	class UFortQuestItemDefinition* GetUnlockingQuestDefinitionForSquadSlot(const class FName& SquadName, const int32 SlotIndex) const;
	void GetWorkerSetBonusEffectModifiers(const struct FGameplayTag& SetBonusTag, TArray<struct FFortAttributeModifierDisplayData>* OutModifiers) const;
	bool IsAnySquadSlotUnlocked(const class FName SquadId) const;
	bool IsHeroLoadoutSlotUnlocked(const class FName& SlotName, const class UFortCampaignHeroLoadoutItem* Loadout) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHomebaseUIContext">();
	}
	static class UFortHomebaseUIContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHomebaseUIContext>();
	}
};
static_assert(alignof(UFortHomebaseUIContext) == 0x000008, "Wrong alignment on UFortHomebaseUIContext");
static_assert(sizeof(UFortHomebaseUIContext) == 0x000148, "Wrong size on UFortHomebaseUIContext");
static_assert(offsetof(UFortHomebaseUIContext, OnShouldAutoSlotSurvivorSquadsChanged) == 0x000028, "Member 'UFortHomebaseUIContext::OnShouldAutoSlotSurvivorSquadsChanged' has a wrong offset!");
static_assert(offsetof(UFortHomebaseUIContext, OnSquadSlotChanged) == 0x000038, "Member 'UFortHomebaseUIContext::OnSquadSlotChanged' has a wrong offset!");
static_assert(offsetof(UFortHomebaseUIContext, OnSurvivorSquadsAutoSlotted) == 0x000048, "Member 'UFortHomebaseUIContext::OnSurvivorSquadsAutoSlotted' has a wrong offset!");
static_assert(offsetof(UFortHomebaseUIContext, OnNodePurchased) == 0x000058, "Member 'UFortHomebaseUIContext::OnNodePurchased' has a wrong offset!");
static_assert(offsetof(UFortHomebaseUIContext, OnSlottedPrimaryHeroChanged) == 0x000068, "Member 'UFortHomebaseUIContext::OnSlottedPrimaryHeroChanged' has a wrong offset!");
static_assert(offsetof(UFortHomebaseUIContext, OnDifferentHeroLoadoutViewed) == 0x000078, "Member 'UFortHomebaseUIContext::OnDifferentHeroLoadoutViewed' has a wrong offset!");
static_assert(offsetof(UFortHomebaseUIContext, OnDifferentHeroLoadoutSlotFocused) == 0x000088, "Member 'UFortHomebaseUIContext::OnDifferentHeroLoadoutSlotFocused' has a wrong offset!");
static_assert(offsetof(UFortHomebaseUIContext, SquadIconDataTableAsset) == 0x000098, "Member 'UFortHomebaseUIContext::SquadIconDataTableAsset' has a wrong offset!");
static_assert(offsetof(UFortHomebaseUIContext, GadgetDefinitionToInstanceMap) == 0x0000F8, "Member 'UFortHomebaseUIContext::GadgetDefinitionToInstanceMap' has a wrong offset!");

// Class FortniteUI.FortExpeditionListItemWidget
// 0x0018 (0x0B48 - 0x0B30)
class UFortExpeditionListItemWidget : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UFortExpeditionItem>     Item;                                              // 0x0B38(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B40[0x8];                                      // 0x0B40(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnItemChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortExpeditionListItemWidget">();
	}
	static class UFortExpeditionListItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortExpeditionListItemWidget>();
	}
};
static_assert(alignof(UFortExpeditionListItemWidget) == 0x000008, "Wrong alignment on UFortExpeditionListItemWidget");
static_assert(sizeof(UFortExpeditionListItemWidget) == 0x000B48, "Wrong size on UFortExpeditionListItemWidget");
static_assert(offsetof(UFortExpeditionListItemWidget, Item) == 0x000B38, "Member 'UFortExpeditionListItemWidget::Item' has a wrong offset!");

// Class FortniteUI.FortExpeditionListViewWidget
// 0x0038 (0x0270 - 0x0238)
class UFortExpeditionListViewWidget : public UCommonUserWidget
{
public:
	UMulticastDelegateProperty_                   OnExpeditionSelected;                              // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnExpeditionListViewRefreshed;                     // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UCommonListView*                        ExpeditionListView;                                // 0x0258(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CurrentTabNameId;                                  // 0x0260(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortExpeditionListSort                       SortType;                                          // 0x0268(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetExpeditionListSortType(EFortExpeditionListSort InSortType);

	class FText GetExpeditionListSortName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortExpeditionListViewWidget">();
	}
	static class UFortExpeditionListViewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortExpeditionListViewWidget>();
	}
};
static_assert(alignof(UFortExpeditionListViewWidget) == 0x000008, "Wrong alignment on UFortExpeditionListViewWidget");
static_assert(sizeof(UFortExpeditionListViewWidget) == 0x000270, "Wrong size on UFortExpeditionListViewWidget");
static_assert(offsetof(UFortExpeditionListViewWidget, OnExpeditionSelected) == 0x000238, "Member 'UFortExpeditionListViewWidget::OnExpeditionSelected' has a wrong offset!");
static_assert(offsetof(UFortExpeditionListViewWidget, OnExpeditionListViewRefreshed) == 0x000248, "Member 'UFortExpeditionListViewWidget::OnExpeditionListViewRefreshed' has a wrong offset!");
static_assert(offsetof(UFortExpeditionListViewWidget, ExpeditionListView) == 0x000258, "Member 'UFortExpeditionListViewWidget::ExpeditionListView' has a wrong offset!");
static_assert(offsetof(UFortExpeditionListViewWidget, CurrentTabNameId) == 0x000260, "Member 'UFortExpeditionListViewWidget::CurrentTabNameId' has a wrong offset!");
static_assert(offsetof(UFortExpeditionListViewWidget, SortType) == 0x000268, "Member 'UFortExpeditionListViewWidget::SortType' has a wrong offset!");

// Class FortniteUI.FortExpeditionMasterWidget
// 0x0020 (0x0340 - 0x0320)
class UFortExpeditionMasterWidget : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x20];                                     // 0x0320(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortExpeditionMasterWidget">();
	}
	static class UFortExpeditionMasterWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortExpeditionMasterWidget>();
	}
};
static_assert(alignof(UFortExpeditionMasterWidget) == 0x000008, "Wrong alignment on UFortExpeditionMasterWidget");
static_assert(sizeof(UFortExpeditionMasterWidget) == 0x000340, "Wrong size on UFortExpeditionMasterWidget");

// Class FortniteUI.FortUINotificationQueue
// 0x0028 (0x0050 - 0x0028)
class UFortUINotificationQueue final : public UObject
{
public:
	int32                                         MaxNotificationsInQueue;                           // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortUINotification*>            NotificationQueue;                                 // 0x0030(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFortUINotification* GetNextNotification();
	void QueueNotification(class UFortUINotification* Notification, bool bShowImmediately);
	void RegisterToReceiveNotifications(const TDelegate<void()>& NotificationDelegate);
	void RemoveNotification(const class UFortUINotification* InNotificationDescription);
	void UnregisterToReceiveNotifications();

	bool CanNotificationBeQueued(EFortNotificationPriority Priority) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUINotificationQueue">();
	}
	static class UFortUINotificationQueue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUINotificationQueue>();
	}
};
static_assert(alignof(UFortUINotificationQueue) == 0x000008, "Wrong alignment on UFortUINotificationQueue");
static_assert(sizeof(UFortUINotificationQueue) == 0x000050, "Wrong size on UFortUINotificationQueue");
static_assert(offsetof(UFortUINotificationQueue, MaxNotificationsInQueue) == 0x000028, "Member 'UFortUINotificationQueue::MaxNotificationsInQueue' has a wrong offset!");
static_assert(offsetof(UFortUINotificationQueue, NotificationQueue) == 0x000030, "Member 'UFortUINotificationQueue::NotificationQueue' has a wrong offset!");

// Class FortniteUI.FortExpeditionOverviewWidget
// 0x0028 (0x0260 - 0x0238)
class UFortExpeditionOverviewWidget : public UCommonUserWidget
{
public:
	TSubclassOf<class UCommonButton>              TabButtonType;                                     // 0x0238(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FExpeditionTabInfo>             TabListRegistrationInfo;                           // 0x0240(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UFortTabListWidgetBase*                 ExpeditionTabList;                                 // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortExpeditionListViewWidget*          ExpeditionListView;                                // 0x0258(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleExpeditionTabButtonCreated(class FName TabNameID, class UCommonButton* TabButton);
	void HandleExpeditionTabSelected(class FName TabNameID);
	void OnExpeditionOverviewRefresh();
	void OnExpeditionTabSelected(const class FName& TabNameID);
	void UpdateExpeditionTabs();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortExpeditionOverviewWidget">();
	}
	static class UFortExpeditionOverviewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortExpeditionOverviewWidget>();
	}
};
static_assert(alignof(UFortExpeditionOverviewWidget) == 0x000008, "Wrong alignment on UFortExpeditionOverviewWidget");
static_assert(sizeof(UFortExpeditionOverviewWidget) == 0x000260, "Wrong size on UFortExpeditionOverviewWidget");
static_assert(offsetof(UFortExpeditionOverviewWidget, TabButtonType) == 0x000238, "Member 'UFortExpeditionOverviewWidget::TabButtonType' has a wrong offset!");
static_assert(offsetof(UFortExpeditionOverviewWidget, TabListRegistrationInfo) == 0x000240, "Member 'UFortExpeditionOverviewWidget::TabListRegistrationInfo' has a wrong offset!");
static_assert(offsetof(UFortExpeditionOverviewWidget, ExpeditionTabList) == 0x000250, "Member 'UFortExpeditionOverviewWidget::ExpeditionTabList' has a wrong offset!");
static_assert(offsetof(UFortExpeditionOverviewWidget, ExpeditionListView) == 0x000258, "Member 'UFortExpeditionOverviewWidget::ExpeditionListView' has a wrong offset!");

// Class FortniteUI.FortUIManagerWidget_NUI
// 0x0198 (0x03D0 - 0x0238)
class UFortUIManagerWidget_NUI : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnPreShowConfirmation_NUI;                         // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnBeginSpokenDialog;                               // 0x0250(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnEndSpokenDialog;                                 // 0x0260(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnShouldOpenTalkingHead;                           // 0x0270(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnShouldCloseTalkingHead;                          // 0x0280(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnShouldBlockSubtitlePortraitChanged;              // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EFortUIState                                  CurrentState;                                      // 0x02A0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFortUIState                                  PendingState;                                      // 0x02A1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A2[0x6];                                      // 0x02A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortUIStateWidget_NUI*                 CurrentStateWidget;                                // 0x02A8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B0[0x10];                                     // 0x02B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortUIStateTrigger*>            StateTriggers;                                     // 0x02C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D0[0x8];                                      // 0x02D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsStateContentDisplayed;                          // 0x02D8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortUINavigationManager*               NavigationManager;                                 // 0x02E0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortUINotificationManager*             NotificationManager;                               // 0x02E8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class UClass*, class UUserWidget*>       TypedWidgetCache;                                  // 0x02F0(0x0050)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_340[0x68];                                     // 0x0340(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bSupressErrors;                                    // 0x03A8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A9[0x17];                                     // 0x03A9(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortPlayerBanned>          PlayerBannedScreen;                                // 0x03C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BlockSubtitlePortraitRefcount;                     // 0x03C8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UFortUIStateTrigger* CreateUIStateTrigger(TSubclassOf<class UFortUIStateTrigger> Param_Class, class UObject* WorldContextObject);
	static class UFortUIManagerWidget_NUI* GetUIManagerWidget(class UObject* WorldContextObject);
	static class UFortUINavigationManager* GetUINavigationManager(class UObject* WorldContextObject);
	static class UFortUINotificationQueue* GetUINotificationQueue(class UObject* WorldContextObject, EFortNotificationQueueType QueueType);
	static void KillConfirmationDialog(class UObject* WorldContextObject);
	static void ShowErrorDialog(class UObject* WorldContextObject, const class FText& OperationDesc, const class FText& DisplayMessage, const class FString& ErrorNote, EFortErrorSeverity ErrorSeverity);

	void CloseConfirmationWindow();
	void CloseErrorWindow();
	class UFortUINotification* CreateNotification(TSubclassOf<class UFortUINotification> UINotificationClass);
	void DecrementShouldBlockSubtitlePortrait();
	void DisplayErrorDialog(const struct FFortErrorInfo& Info);
	void DisplayStateContent(bool bDisplay);
	class UUserWidget* GetCachedWidget(class UClass* InClass);
	bool HasActiveModalWidget();
	void IncrementShouldBlockSubtitlePortrait();
	bool IsShowingModalsConfirmationsErrors();
	void NotifyPreShowConfirmation_NUI(const struct FFortDialogDescription_NUI& DialogDescription);
	void OnBeginSpokenDialog__DelegateSignature();
	void OnEndLatentWaitForConfirmationDialog(struct FFortDialogExternalLatentActionHandle& WaitingDialogHandle);
	void OnEndSpokenDialog__DelegateSignature();
	void OnPreShowConfirmation_NUI__DelegateSignature(class UFortUIManagerWidget_NUI* Source, const struct FFortDialogDescription_NUI& DialogDescription);
	void OnShouldBlockSubtitlePortraitChanged__DelegateSignature(bool bShouldBlockSubtitlePortrait);
	void OnShouldCloseTalkingHead__DelegateSignature();
	void OnShouldOpenTalkingHead__DelegateSignature(class UTexture2D* Image, const class FText& Title, const class FText& Subtitle, EFortAnnouncementDisplayPreference DisplayPreference);
	void OnShowConfirmation(const struct FFortDialogDescription& Description);
	void OnShowConfirmation_NUI(const struct FFortDialogDescription_NUI& Description);
	void OnStateEnded();
	void OnStateStarted();
	void PopActivatablePanelInModalLayer(const class UCommonActivatablePanel* Panel);
	void PopAllContentWidgets();
	void QueueActivatablePanelIntoModalLayer(const class UCommonActivatablePanel* Panel);
	void QueueNotification(EFortNotificationQueueType QueueType, class UFortUINotification* Notification);
	void RegisterStateTrigger(class UFortUIStateTrigger* StateTrigger);
	void ReleaseNotification(class UFortUINotification* Notification);
	void SetStateContentDisplayed(bool bDisplay);
	void UnregisterStateTrigger(class UFortUIStateTrigger* TriggerToRemove);
	void UpdateStateWidgetContent(class UFortUIStateWidget_NUI* StateWidget);

	EFortUIState _BPGetCurrentUIState() const;
	bool CanNotificationBeQueued(EFortNotificationQueueType QueueType, EFortNotificationPriority NotificationPriority) const;
	class UFortUIStateWidget_NUI* GetCurrentUIStateWidget() const;
	class UFortUINavigationManager* GetNavigationManager() const;
	bool IsStateContentDisplayed() const;
	void PopContentWidget() const;
	void PushContentWidget(class UWidget* Widget) const;
	void PushContentWidgetAdvanced(class UWidget* Widget, bool bHideHeader, bool bHideFooter, bool bHideChatWidget) const;
	void SetFrontEndVisibility(bool bHideHeader, bool bHideFooter, bool bHideChatWidget) const;
	bool ShouldBlockSubtitlePortrait() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIManagerWidget_NUI">();
	}
	static class UFortUIManagerWidget_NUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIManagerWidget_NUI>();
	}
};
static_assert(alignof(UFortUIManagerWidget_NUI) == 0x000008, "Wrong alignment on UFortUIManagerWidget_NUI");
static_assert(sizeof(UFortUIManagerWidget_NUI) == 0x0003D0, "Wrong size on UFortUIManagerWidget_NUI");
static_assert(offsetof(UFortUIManagerWidget_NUI, OnPreShowConfirmation_NUI) == 0x000240, "Member 'UFortUIManagerWidget_NUI::OnPreShowConfirmation_NUI' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget_NUI, OnBeginSpokenDialog) == 0x000250, "Member 'UFortUIManagerWidget_NUI::OnBeginSpokenDialog' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget_NUI, OnEndSpokenDialog) == 0x000260, "Member 'UFortUIManagerWidget_NUI::OnEndSpokenDialog' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget_NUI, OnShouldOpenTalkingHead) == 0x000270, "Member 'UFortUIManagerWidget_NUI::OnShouldOpenTalkingHead' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget_NUI, OnShouldCloseTalkingHead) == 0x000280, "Member 'UFortUIManagerWidget_NUI::OnShouldCloseTalkingHead' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget_NUI, OnShouldBlockSubtitlePortraitChanged) == 0x000290, "Member 'UFortUIManagerWidget_NUI::OnShouldBlockSubtitlePortraitChanged' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget_NUI, CurrentState) == 0x0002A0, "Member 'UFortUIManagerWidget_NUI::CurrentState' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget_NUI, PendingState) == 0x0002A1, "Member 'UFortUIManagerWidget_NUI::PendingState' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget_NUI, CurrentStateWidget) == 0x0002A8, "Member 'UFortUIManagerWidget_NUI::CurrentStateWidget' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget_NUI, StateTriggers) == 0x0002C0, "Member 'UFortUIManagerWidget_NUI::StateTriggers' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget_NUI, bIsStateContentDisplayed) == 0x0002D8, "Member 'UFortUIManagerWidget_NUI::bIsStateContentDisplayed' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget_NUI, NavigationManager) == 0x0002E0, "Member 'UFortUIManagerWidget_NUI::NavigationManager' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget_NUI, NotificationManager) == 0x0002E8, "Member 'UFortUIManagerWidget_NUI::NotificationManager' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget_NUI, TypedWidgetCache) == 0x0002F0, "Member 'UFortUIManagerWidget_NUI::TypedWidgetCache' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget_NUI, bSupressErrors) == 0x0003A8, "Member 'UFortUIManagerWidget_NUI::bSupressErrors' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget_NUI, PlayerBannedScreen) == 0x0003C0, "Member 'UFortUIManagerWidget_NUI::PlayerBannedScreen' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget_NUI, BlockSubtitlePortraitRefcount) == 0x0003C8, "Member 'UFortUIManagerWidget_NUI::BlockSubtitlePortraitRefcount' has a wrong offset!");

// Class FortniteUI.FortExpeditionPickVehicleWidget
// 0x0008 (0x0328 - 0x0320)
class UFortExpeditionPickVehicleWidget : public UCommonActivatablePanel
{
public:
	TWeakObjectPtr<class UFortExpeditionItem>     Item;                                              // 0x0320(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetData(class UFortExpeditionItem* InItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortExpeditionPickVehicleWidget">();
	}
	static class UFortExpeditionPickVehicleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortExpeditionPickVehicleWidget>();
	}
};
static_assert(alignof(UFortExpeditionPickVehicleWidget) == 0x000008, "Wrong alignment on UFortExpeditionPickVehicleWidget");
static_assert(sizeof(UFortExpeditionPickVehicleWidget) == 0x000328, "Wrong size on UFortExpeditionPickVehicleWidget");
static_assert(offsetof(UFortExpeditionPickVehicleWidget, Item) == 0x000320, "Member 'UFortExpeditionPickVehicleWidget::Item' has a wrong offset!");

// Class FortniteUI.FortExpeditionReturnsWidget
// 0x0010 (0x0248 - 0x0238)
class UFortExpeditionReturnsWidget : public UCommonUserWidget
{
public:
	TWeakObjectPtr<class UFortExpeditionItem>     Item;                                              // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_240[0x8];                                      // 0x0240(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnExpeditionInProgressUpdated();
	void SetData(class UFortExpeditionItem* InItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortExpeditionReturnsWidget">();
	}
	static class UFortExpeditionReturnsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortExpeditionReturnsWidget>();
	}
};
static_assert(alignof(UFortExpeditionReturnsWidget) == 0x000008, "Wrong alignment on UFortExpeditionReturnsWidget");
static_assert(sizeof(UFortExpeditionReturnsWidget) == 0x000248, "Wrong size on UFortExpeditionReturnsWidget");
static_assert(offsetof(UFortExpeditionReturnsWidget, Item) == 0x000238, "Member 'UFortExpeditionReturnsWidget::Item' has a wrong offset!");

// Class FortniteUI.FortExpeditionRewardsWidget
// 0x0028 (0x0260 - 0x0238)
class UFortExpeditionRewardsWidget final : public UCommonUserWidget
{
public:
	UMulticastDelegateProperty_                   OnAllExpeditionsCollected;                         // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UCommonTileView*                        RewardsTileView;                                   // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPendingCollection;                                // 0x0250(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_251[0xF];                                      // 0x0251(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleCollectionExpeditionCompleted(bool bMcpSuccess, const class UFortExpeditionItem* Expedition, bool bExpeditionSuccess, const TArray<struct FFortItemInstanceQuantityPair>& Rewards);
	void ProcessNextReward();
	void RefreshRewardsUI(const class UFortExpeditionItem* Expedition, bool bExpeditionSucceeded, const TArray<struct FFortItemInstanceQuantityPair>& Rewards);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortExpeditionRewardsWidget">();
	}
	static class UFortExpeditionRewardsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortExpeditionRewardsWidget>();
	}
};
static_assert(alignof(UFortExpeditionRewardsWidget) == 0x000008, "Wrong alignment on UFortExpeditionRewardsWidget");
static_assert(sizeof(UFortExpeditionRewardsWidget) == 0x000260, "Wrong size on UFortExpeditionRewardsWidget");
static_assert(offsetof(UFortExpeditionRewardsWidget, OnAllExpeditionsCollected) == 0x000238, "Member 'UFortExpeditionRewardsWidget::OnAllExpeditionsCollected' has a wrong offset!");
static_assert(offsetof(UFortExpeditionRewardsWidget, RewardsTileView) == 0x000248, "Member 'UFortExpeditionRewardsWidget::RewardsTileView' has a wrong offset!");
static_assert(offsetof(UFortExpeditionRewardsWidget, bPendingCollection) == 0x000250, "Member 'UFortExpeditionRewardsWidget::bPendingCollection' has a wrong offset!");

// Class FortniteUI.FortExpeditionSummaryWidget
// 0x0058 (0x0290 - 0x0238)
class UFortExpeditionSummaryWidget final : public UCommonUserWidget
{
public:
	int32                                         AvailableExpeditions;                              // 0x0238(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CompletedExpeditions;                              // 0x023C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LandVehiclesTotal;                                 // 0x0240(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LandVehiclesAvailable;                             // 0x0244(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AirVehiclesTotal;                                  // 0x0248(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AirVehiclesAvailable;                              // 0x024C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SeaVehiclesTotal;                                  // 0x0250(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SeaVehiclesAvailable;                              // 0x0254(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LandExpeditionsTotal;                              // 0x0258(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LandExpeditionsAvailable;                          // 0x025C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AirExpeditionsTotal;                               // 0x0260(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AirExpeditionsAvailable;                           // 0x0264(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SeaExpeditionsTotal;                               // 0x0268(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SeaExpeditionsAvailable;                           // 0x026C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UFortExpeditionItem*>            InProgressExpeditions;                             // 0x0270(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_280[0x10];                                     // 0x0280(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindInventoryDelegates();
	void OnRefreshSummaryWidget();
	void UnbindInventoryDelegates();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortExpeditionSummaryWidget">();
	}
	static class UFortExpeditionSummaryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortExpeditionSummaryWidget>();
	}
};
static_assert(alignof(UFortExpeditionSummaryWidget) == 0x000008, "Wrong alignment on UFortExpeditionSummaryWidget");
static_assert(sizeof(UFortExpeditionSummaryWidget) == 0x000290, "Wrong size on UFortExpeditionSummaryWidget");
static_assert(offsetof(UFortExpeditionSummaryWidget, AvailableExpeditions) == 0x000238, "Member 'UFortExpeditionSummaryWidget::AvailableExpeditions' has a wrong offset!");
static_assert(offsetof(UFortExpeditionSummaryWidget, CompletedExpeditions) == 0x00023C, "Member 'UFortExpeditionSummaryWidget::CompletedExpeditions' has a wrong offset!");
static_assert(offsetof(UFortExpeditionSummaryWidget, LandVehiclesTotal) == 0x000240, "Member 'UFortExpeditionSummaryWidget::LandVehiclesTotal' has a wrong offset!");
static_assert(offsetof(UFortExpeditionSummaryWidget, LandVehiclesAvailable) == 0x000244, "Member 'UFortExpeditionSummaryWidget::LandVehiclesAvailable' has a wrong offset!");
static_assert(offsetof(UFortExpeditionSummaryWidget, AirVehiclesTotal) == 0x000248, "Member 'UFortExpeditionSummaryWidget::AirVehiclesTotal' has a wrong offset!");
static_assert(offsetof(UFortExpeditionSummaryWidget, AirVehiclesAvailable) == 0x00024C, "Member 'UFortExpeditionSummaryWidget::AirVehiclesAvailable' has a wrong offset!");
static_assert(offsetof(UFortExpeditionSummaryWidget, SeaVehiclesTotal) == 0x000250, "Member 'UFortExpeditionSummaryWidget::SeaVehiclesTotal' has a wrong offset!");
static_assert(offsetof(UFortExpeditionSummaryWidget, SeaVehiclesAvailable) == 0x000254, "Member 'UFortExpeditionSummaryWidget::SeaVehiclesAvailable' has a wrong offset!");
static_assert(offsetof(UFortExpeditionSummaryWidget, LandExpeditionsTotal) == 0x000258, "Member 'UFortExpeditionSummaryWidget::LandExpeditionsTotal' has a wrong offset!");
static_assert(offsetof(UFortExpeditionSummaryWidget, LandExpeditionsAvailable) == 0x00025C, "Member 'UFortExpeditionSummaryWidget::LandExpeditionsAvailable' has a wrong offset!");
static_assert(offsetof(UFortExpeditionSummaryWidget, AirExpeditionsTotal) == 0x000260, "Member 'UFortExpeditionSummaryWidget::AirExpeditionsTotal' has a wrong offset!");
static_assert(offsetof(UFortExpeditionSummaryWidget, AirExpeditionsAvailable) == 0x000264, "Member 'UFortExpeditionSummaryWidget::AirExpeditionsAvailable' has a wrong offset!");
static_assert(offsetof(UFortExpeditionSummaryWidget, SeaExpeditionsTotal) == 0x000268, "Member 'UFortExpeditionSummaryWidget::SeaExpeditionsTotal' has a wrong offset!");
static_assert(offsetof(UFortExpeditionSummaryWidget, SeaExpeditionsAvailable) == 0x00026C, "Member 'UFortExpeditionSummaryWidget::SeaExpeditionsAvailable' has a wrong offset!");
static_assert(offsetof(UFortExpeditionSummaryWidget, InProgressExpeditions) == 0x000270, "Member 'UFortExpeditionSummaryWidget::InProgressExpeditions' has a wrong offset!");

// Class FortniteUI.FortFavoriteIndicator
// 0x0000 (0x0468 - 0x0468)
class UFortFavoriteIndicator final : public UFortSimpleItemConditionIconIndicator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortFavoriteIndicator">();
	}
	static class UFortFavoriteIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortFavoriteIndicator>();
	}
};
static_assert(alignof(UFortFavoriteIndicator) == 0x000008, "Wrong alignment on UFortFavoriteIndicator");
static_assert(sizeof(UFortFavoriteIndicator) == 0x000468, "Wrong size on UFortFavoriteIndicator");

// Class FortniteUI.FortFrontEndContext
// 0x03B8 (0x03E0 - 0x0028)
class UFortFrontEndContext final : public UFortLocalPlayerSubsystem
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnFrontEndCameraChanged;                           // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnLobbyBackgroundChanged;                          // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLobbyEmptyPlayerClicked;                         // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLobbyPlayerGadgetsClicked;                       // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLobbyPlayerPadHovered;                           // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLobbyPlayerPadUnhovered;                         // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLobbyPlayerHovered;                              // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLobbyPlayerUnhovered;                            // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLobbyPlayerSelected;                             // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLobbyPlayerUnselected;                           // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPartySuggestionAccepted;                         // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLobbyPlayerTalkingChanged;                       // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLobbyPlayerMutingChanged;                        // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLobbyPlayersStoppedTalking;                      // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnRadialPickerStatusChanged;                       // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTheaterPinClicked;                               // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSetPreviewedSceneTheater;                        // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTheaterSelected;                                 // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTheaterDataChanged;                              // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTheaterTileClicked;                              // 0x0160(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTheaterTileUnselected;                           // 0x0170(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTheaterTileDoubleClicked;                        // 0x0180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTheaterTileFocused;                              // 0x0190(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTheaterTileUnfocused;                            // 0x01A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnVaultItemViewed;                                 // 0x01B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnVaultItemsViewed;                                // 0x01C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSeasonTabVariantPreviewInfoChanged;              // 0x01D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPlayerLoggedIn;                                  // 0x01E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPlayerLoggedOut;                                 // 0x01F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMainTabSelected;                                 // 0x0200(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSocialImportClosed;                              // 0x0210(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_220[0x8];                                      // 0x0220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortFrontEndFeatureStruct             Features[0x9];                                     // 0x0228(0x0018)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FFortSavedModeLoadout                  CachedModeLoadout;                                 // 0x0300(0x0020)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUnlockableVariantPreviewInfo          SeasonTabVariantPreviewInfo;                       // 0x0328(0x0028)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_350[0x90];                                     // 0x0350(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindToFeatureStateAndInitialize(EFortFrontEndFeature Feature, TDelegate<void(EFortFrontEndFeature ChangedFeature, EFortFrontEndFeatureState NewState, EFortFrontEndFeatureStateReason Reason)> Delegate);
	void BroadcastMainTabSelected(class FName TabName);
	bool CanFindTileForQuest(class UFortQuestItem* QuestItem);
	void ClearLocalPreview(bool StopUsingLocalPreview);
	void ClearSelectedTheater();
	void DisplayAthenaCosmetic(const class UAthenaCosmeticItemDefinition* CosmeticItemDef, int32 VariantPreviewIdx);
	void ForceSetFeatureState(EFortFrontEndFeature Feature, EFortFrontEndFeatureState State, EFortFrontEndFeatureStateReason Reason);
	int32 GetCurrentLockerSubslotIndex();
	class AFortPlayerPawn* GetHeroPlayerPawnByIndex(int32 PartyMemberIndex);
	class AFortPlayerPawn* GetHeroPlayerPawnForCurrentDisplayedItem();
	class UMeshComponent* GetMeshForCurrentDisplayedItem();
	class AActor* GetPrefabActorForCurrentDisplayedItem();
	struct FUnlockableVariantPreviewInfo GetSeasonTabVariantPreviewInfo();
	void GetSelectableGadgets(TArray<class UFortWorldItem*>* SelectableGadgets, TArray<class UFortWorldItem*>* LastSelectedGadgets);
	struct FDisplayManagerVariantData GetVariantDataForMemberIndex(int32 MemberIndex);
	void HandleDynamicSocialImportClosed();
	bool IsActiveTileMissionValid();
	void OnPlayerProfileInitialized();
	void PlayEvolutionEffect();
	void PlayLevelUpEffect();
	void PreviewCatalogOfferItems(const struct FCatalogOffer& CatalogOffer);
	void PushContentWidget_Adv(class UWidget* Widget, bool bHideHeader, bool bHideFooter, bool bHideChatWidget);
	void RunBenchmarkAndApplyBestSettings();
	void SelectDefaultTheater();
	void SelectDefaultTheaterTile();
	void SelectGadgetForSlot(int32 Slot, class UFortItemDefinition* GadgetDefinition);
	bool SelectTileForQuest(class UFortQuestItem* QuestItem, float* OutCriticalMissionDifficultyOverrideMin, float* OutCriticalMissionDifficultyOverrideMax);
	void SendFrontendEnteredEvent();
	void SendPlayQuestAnalytic(class UFortQuestItem* QuestItem);
	void SetCurrentLockerSubslotIndex(int32 NewIndex);
	void SetDefaultLocalVariantPreview(const class UAthenaCosmeticItemDefinition* CosmeticItem);
	void SetFrontEndCamera(EFrontEndCamera NewState);
	void SetFrontEndVisibility(bool bHideHeader, bool bHideFooter, bool bHideChatWidget);
	void SetHeroChoice(int32 PartyMemberIndex, class UFortHero* Hero, const struct FDisplayManagerVariantData& VariantData);
	void SetLocalVariantPreview(const class UAthenaCosmeticItemDefinition* CosmeticItem, const struct FGameplayTag& VariantChannelTag, const struct FGameplayTag& VariantTag);
	void SetPersonalHeroChoice(class UFortHero* Hero, const struct FDisplayManagerVariantData& VariantData);
	void SetSeasonTabVariantPreviewInfo(const struct FUnlockableVariantPreviewInfo& Info);
	void SetSeenLoginMessage();
	void SetSelectedTheater(const class FString& TheaterId);
	class UFortSocialImportPanel* ShowSocialImport(TSubclassOf<class UFortSocialImportPanel> PanelClass);
	void SkipInitialBenchmark();
	void ViewVaultItem(class UFortItem* ItemToView, bool bIgnoreCurrentlyEquppedFavorites);
	void ViewVaultItemFromDefinition(const class UFortItemDefinition* ItemToViewDefinition, bool bIgnoreCurrentlyEquppedFavorites);
	void ViewVaultItems(const TArray<class UFortItem*>& ItemsToView, bool bIgnoreCurrentlyEquppedFavorites);
	void ViewVaultItemsFromOffer(const struct FCatalogOffer& CatalogOffer, bool bIgnoreCurrentlyEquppedFavorites);

	bool AreProfilesAvailableToWIFE() const;
	bool CanCompleteQuestInActiveTileMission(class UFortQuestItem* QuestItem) const;
	bool CanCompleteQuestInFocusedOrActiveTileMission(class UFortQuestItem* QuestItem) const;
	bool CanShowLockerSlotType(EAthenaCustomizationCategory SlotType) const;
	void GetAccountLevelUpRewards(TArray<struct FFortItemQuantityPair>* Rewards, int32 AccountLevel) const;
	class AFortTheaterMapTile* GetActiveTile() const;
	bool GetActiveTileMissionDetails(struct FFortMissionDetails* MissionDetails) const;
	bool GetAllTheaterData(TArray<struct FFortTheaterMapData>* OutAllTheaterData) const;
	class FText GetAttributeDescription(const struct FFortAttributeInfo& InAttribute, const struct FGameplayTagContainer& InRequiredTags) const;
	class FText GetAttributeDisplayName(const struct FFortAttributeInfo& InAttribute, const struct FGameplayTagContainer& InRequiredTags) const;
	struct FFortMultiSizeBrush GetAttributeIcon(const struct FFortAttributeInfo& InAttribute, const struct FGameplayTagContainer& InRequiredTags) const;
	TArray<struct FGameDifficultyInfo> GetAvailableDifficulties(bool bIncludeMissionAlertTiles) const;
	class FText GetCurrentTheaterName() const;
	class FName GetDefenderSquadIDByTheaterID(const class FString& TheaterId) const;
	EFrontEndCamera GetDesiredPlayButtonCamera() const;
	int32 GetFabricatorDisintegrationSecondsRemaining(int32 TheaterSlot) const;
	int32 GetFabricatorIncomingGooAmount(int32 TheaterSlot) const;
	int32 GetFabricatorStoredGooAmount(int32 TheaterSlot) const;
	void GetFeatureState(const EFortFrontEndFeature Feature, EFortFrontEndFeatureState* OutFeatureState, EFortFrontEndFeatureStateReason* OutReason) const;
	class FText GetFeatureStateReasonText(const EFortFrontEndFeatureStateReason Reason) const;
	class AFortTheaterMapTile* GetFocusedOrActiveTile() const;
	bool GetFocusedOrActiveTileMissionDetails(struct FFortMissionDetails* MissionDetails) const;
	class AFortTheaterMapTile* GetFocusedTile() const;
	EFrontEndCamera GetFrontEndCamera() const;
	class UFortWorldItemDefinition* GetHarvestingToolForLevel(int32 TheaterSlot, int32 InHarvestingOptimizerLevel) const;
	class UFortItemDefinition* GetItemFromItemQuantityPair(const struct FFortItemQuantityPair& InPair) const;
	class FName GetLobbyBackgroundLevelName() const;
	struct FGameDifficultyInfo GetMaxAvailableDifficulty(bool bIncludeMissionAlertTiles) const;
	class FText GetMCPRegion() const;
	class FText GetMCPRegionText() const;
	bool GetOutpostCoreLevelByItemDefinition(class UFortOutpostItemDefinition* OutpostCoreItemDef, int32* OutCoreLevel) const;
	bool GetOutpostCoreLevelByTheaterId(const class FString& TheaterId, int32* OutCoreLevel) const;
	int32 GetOutpostStructureMaxLevel(int32 TheaterSlot, class UFortOutpostItemDefinition* OutpostStructure) const;
	void GetOutpostStructureUpgradeCost(int32 TheaterSlot, int32 UpgradeLevel, class UFortOutpostItemDefinition* OutpostStructure, TArray<struct FFortItemQuantityPair>* OutWorldItems, TArray<struct FFortItemQuantityPair>* OutAccountItems) const;
	void GetPostMaxAccountLevelUpRewards(TArray<struct FFortItemQuantityPair>* Rewards, int32 RewardOffset) const;
	class FText GetRequirementText(const struct FFortRequirementsInfo& InRequirements) const;
	EFortReturnToFrontendBehavior GetReturnToFrontendBehavior() const;
	bool GetSelectedTheaterData(struct FFortTheaterMapData* OutTheaterData) const;
	class FString GetSelectedTheaterId() const;
	bool GetTheaterData(const class FString& TheaterId, struct FFortTheaterMapData* OutTheaterData) const;
	class FText GetTheaterName(const class FString& TheaterId) const;
	int32 GetTheaterRegionCount(const class FString& TheaterId) const;
	EFortTheaterType GetTheaterType(const class FString& TheaterId) const;
	bool GetTileMissionDetails(const class AFortTheaterMapTile* Tile, struct FFortMissionDetails* MissionDetails) const;
	class UClass* GetUITestingClass() const;
	void HideAthenaStoreNewItemBang() const;
	bool Is4PlayerTile(const class AFortTheaterMapTile* Tile) const;
	bool ShouldRunInitialBenchmark() const;
	bool ShouldShowLoginMessage() const;
	bool ShouldShowSocialImport() const;
	void ShowAthenaStoreNewItemBang() const;
	bool TryGetAttributeInfo(const struct FGameplayAttribute& GameplayAttribute, struct FFortAttributeInfo* OutAttribute) const;
	void UpdateNewAccountItemBangCounts(class UFortInventoryContext* InventoryContext) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortFrontEndContext">();
	}
	static class UFortFrontEndContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortFrontEndContext>();
	}
};
static_assert(alignof(UFortFrontEndContext) == 0x000008, "Wrong alignment on UFortFrontEndContext");
static_assert(sizeof(UFortFrontEndContext) == 0x0003E0, "Wrong size on UFortFrontEndContext");
static_assert(offsetof(UFortFrontEndContext, OnFrontEndCameraChanged) == 0x000030, "Member 'UFortFrontEndContext::OnFrontEndCameraChanged' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnLobbyBackgroundChanged) == 0x000040, "Member 'UFortFrontEndContext::OnLobbyBackgroundChanged' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnLobbyEmptyPlayerClicked) == 0x000050, "Member 'UFortFrontEndContext::OnLobbyEmptyPlayerClicked' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnLobbyPlayerGadgetsClicked) == 0x000060, "Member 'UFortFrontEndContext::OnLobbyPlayerGadgetsClicked' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnLobbyPlayerPadHovered) == 0x000070, "Member 'UFortFrontEndContext::OnLobbyPlayerPadHovered' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnLobbyPlayerPadUnhovered) == 0x000080, "Member 'UFortFrontEndContext::OnLobbyPlayerPadUnhovered' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnLobbyPlayerHovered) == 0x000090, "Member 'UFortFrontEndContext::OnLobbyPlayerHovered' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnLobbyPlayerUnhovered) == 0x0000A0, "Member 'UFortFrontEndContext::OnLobbyPlayerUnhovered' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnLobbyPlayerSelected) == 0x0000B0, "Member 'UFortFrontEndContext::OnLobbyPlayerSelected' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnLobbyPlayerUnselected) == 0x0000C0, "Member 'UFortFrontEndContext::OnLobbyPlayerUnselected' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnPartySuggestionAccepted) == 0x0000D0, "Member 'UFortFrontEndContext::OnPartySuggestionAccepted' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnLobbyPlayerTalkingChanged) == 0x0000E0, "Member 'UFortFrontEndContext::OnLobbyPlayerTalkingChanged' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnLobbyPlayerMutingChanged) == 0x0000F0, "Member 'UFortFrontEndContext::OnLobbyPlayerMutingChanged' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnLobbyPlayersStoppedTalking) == 0x000100, "Member 'UFortFrontEndContext::OnLobbyPlayersStoppedTalking' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnRadialPickerStatusChanged) == 0x000110, "Member 'UFortFrontEndContext::OnRadialPickerStatusChanged' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnTheaterPinClicked) == 0x000120, "Member 'UFortFrontEndContext::OnTheaterPinClicked' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnSetPreviewedSceneTheater) == 0x000130, "Member 'UFortFrontEndContext::OnSetPreviewedSceneTheater' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnTheaterSelected) == 0x000140, "Member 'UFortFrontEndContext::OnTheaterSelected' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnTheaterDataChanged) == 0x000150, "Member 'UFortFrontEndContext::OnTheaterDataChanged' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnTheaterTileClicked) == 0x000160, "Member 'UFortFrontEndContext::OnTheaterTileClicked' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnTheaterTileUnselected) == 0x000170, "Member 'UFortFrontEndContext::OnTheaterTileUnselected' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnTheaterTileDoubleClicked) == 0x000180, "Member 'UFortFrontEndContext::OnTheaterTileDoubleClicked' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnTheaterTileFocused) == 0x000190, "Member 'UFortFrontEndContext::OnTheaterTileFocused' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnTheaterTileUnfocused) == 0x0001A0, "Member 'UFortFrontEndContext::OnTheaterTileUnfocused' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnVaultItemViewed) == 0x0001B0, "Member 'UFortFrontEndContext::OnVaultItemViewed' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnVaultItemsViewed) == 0x0001C0, "Member 'UFortFrontEndContext::OnVaultItemsViewed' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnSeasonTabVariantPreviewInfoChanged) == 0x0001D0, "Member 'UFortFrontEndContext::OnSeasonTabVariantPreviewInfoChanged' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnPlayerLoggedIn) == 0x0001E0, "Member 'UFortFrontEndContext::OnPlayerLoggedIn' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnPlayerLoggedOut) == 0x0001F0, "Member 'UFortFrontEndContext::OnPlayerLoggedOut' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnMainTabSelected) == 0x000200, "Member 'UFortFrontEndContext::OnMainTabSelected' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnSocialImportClosed) == 0x000210, "Member 'UFortFrontEndContext::OnSocialImportClosed' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, Features) == 0x000228, "Member 'UFortFrontEndContext::Features' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, CachedModeLoadout) == 0x000300, "Member 'UFortFrontEndContext::CachedModeLoadout' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, SeasonTabVariantPreviewInfo) == 0x000328, "Member 'UFortFrontEndContext::SeasonTabVariantPreviewInfo' has a wrong offset!");

// Class FortniteUI.FortGamepadInputOptions
// 0x0000 (0x02B0 - 0x02B0)
class UFortGamepadInputOptions : public UFortInputOptions
{
public:
	bool AreAllImportantActionsBound(TArray<class FText>* OutUnboundScreenLabels, const bool bRichText);
	void DisableAnalogCursor();
	void EnableAnalogCursor();
	void HandleGamePadToggleMode();
	void ResetCustomGamepadToDefault();
	void SetControllerPlatform(const class FString& InControllerPlatform);

	class FString GetControllerPlatform() const;
	bool HasCustomGamepadBindingChanges() const;
	bool IsCustomGamepadConfig(const class FString& ConfigName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGamepadInputOptions">();
	}
	static class UFortGamepadInputOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGamepadInputOptions>();
	}
};
static_assert(alignof(UFortGamepadInputOptions) == 0x000008, "Wrong alignment on UFortGamepadInputOptions");
static_assert(sizeof(UFortGamepadInputOptions) == 0x0002B0, "Wrong size on UFortGamepadInputOptions");

// Class FortniteUI.FortGiftBoxButton
// 0x0018 (0x0B48 - 0x0B30)
class UFortGiftBoxButton : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGiftBoxItemDefinition*             GiftBoxDefinition;                                 // 0x0B38(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonLazyImage*                       Image_Gift;                                        // 0x0B40(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void PlayGiftSelectedAnimation(bool bIsSelected);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGiftBoxButton">();
	}
	static class UFortGiftBoxButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGiftBoxButton>();
	}
};
static_assert(alignof(UFortGiftBoxButton) == 0x000008, "Wrong alignment on UFortGiftBoxButton");
static_assert(sizeof(UFortGiftBoxButton) == 0x000B48, "Wrong size on UFortGiftBoxButton");
static_assert(offsetof(UFortGiftBoxButton, GiftBoxDefinition) == 0x000B38, "Member 'UFortGiftBoxButton::GiftBoxDefinition' has a wrong offset!");
static_assert(offsetof(UFortGiftBoxButton, Image_Gift) == 0x000B40, "Member 'UFortGiftBoxButton::Image_Gift' has a wrong offset!");

// Class FortniteUI.FortGiftingScreen
// 0x0150 (0x0590 - 0x0440)
class UFortGiftingScreen : public UFortActivatablePanelWithItemPreview
{
public:
	class UCommonButtonGroup*                     TabButtonGroup;                                    // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UFortGiftBoxItemDefinition>> GiftBoxes;                                         // 0x0448(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UFortGiftBoxItemDefinition*>     GiftBoxItemDefs;                                   // 0x0458(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UFortGiftBoxButton*                     SelectedGiftBoxButton;                             // 0x0468(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortStoreFrontOfferInfo*               OfferInfo;                                         // 0x0470(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UFortUserDetails*>               UserDetailArray;                                   // 0x0478(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UFortUserDetails*                       LocalPlayerDetails;                                // 0x0488(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   DefaultGiftMessage;                                // 0x0490(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGiftingErrorText>              GiftingErrorMessages;                              // 0x04A8(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FGiftingErrorText                      GiftingErrorMessageDefault;                        // 0x04B8(0x0038)(Edit, Protected, NativeAccessSpecifierProtected)
	int32                                         PersonalizedMessageLength;                         // 0x04F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4F4[0x3C];                                     // 0x04F4(0x003C)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_ItemName;                                     // 0x0530(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 Image_RecipientCurrency;                           // 0x0538(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Price;                                        // 0x0540(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_GiftCount;                                    // 0x0548(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_FriendCount;                                  // 0x0550(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_CharCount;                                    // 0x0558(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonListView*                        ListView_Friends;                                  // 0x0560(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Continue;                                   // 0x0568(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Send;                                       // 0x0570(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTileView*                        TileView_GiftBoxes;                                // 0x0578(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonListView*                        ListView_ChosenRecipients;                         // 0x0580(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMultiLineEditableText*                 Text_EditableMessage;                              // 0x0588(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AllowGiftWrapSelection(bool bIsAllowed);
	void DynamicHandleGiftSent(bool bSuccess, const TArray<class FString>& IneligibleAccounts, const TArray<class FString>& ErrorCodes);
	void FocusEditableTextMessage();
	void FocusFriendsList();
	void HandleMessageChanged(const class FText& InText);
	void OnBeginGiftingSubmission();
	void OnEndGiftingSubmission(bool bSuccess);
	void OnGiftingTimerEnded();
	void OnMoveToFriendSelectStep();
	void OnMoveToGiftWrapStep(bool bGiftingToSelf);
	void OnOfferSet(class UFortStoreFrontOfferInfo* NewOfferInfo);
	void SetOffer(class UFortStoreFrontOfferInfo* NewOfferInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGiftingScreen">();
	}
	static class UFortGiftingScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGiftingScreen>();
	}
};
static_assert(alignof(UFortGiftingScreen) == 0x000008, "Wrong alignment on UFortGiftingScreen");
static_assert(sizeof(UFortGiftingScreen) == 0x000590, "Wrong size on UFortGiftingScreen");
static_assert(offsetof(UFortGiftingScreen, TabButtonGroup) == 0x000440, "Member 'UFortGiftingScreen::TabButtonGroup' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, GiftBoxes) == 0x000448, "Member 'UFortGiftingScreen::GiftBoxes' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, GiftBoxItemDefs) == 0x000458, "Member 'UFortGiftingScreen::GiftBoxItemDefs' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, SelectedGiftBoxButton) == 0x000468, "Member 'UFortGiftingScreen::SelectedGiftBoxButton' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, OfferInfo) == 0x000470, "Member 'UFortGiftingScreen::OfferInfo' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, UserDetailArray) == 0x000478, "Member 'UFortGiftingScreen::UserDetailArray' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, LocalPlayerDetails) == 0x000488, "Member 'UFortGiftingScreen::LocalPlayerDetails' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, DefaultGiftMessage) == 0x000490, "Member 'UFortGiftingScreen::DefaultGiftMessage' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, GiftingErrorMessages) == 0x0004A8, "Member 'UFortGiftingScreen::GiftingErrorMessages' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, GiftingErrorMessageDefault) == 0x0004B8, "Member 'UFortGiftingScreen::GiftingErrorMessageDefault' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, PersonalizedMessageLength) == 0x0004F0, "Member 'UFortGiftingScreen::PersonalizedMessageLength' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, Text_ItemName) == 0x000530, "Member 'UFortGiftingScreen::Text_ItemName' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, Image_RecipientCurrency) == 0x000538, "Member 'UFortGiftingScreen::Image_RecipientCurrency' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, Text_Price) == 0x000540, "Member 'UFortGiftingScreen::Text_Price' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, Text_GiftCount) == 0x000548, "Member 'UFortGiftingScreen::Text_GiftCount' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, Text_FriendCount) == 0x000550, "Member 'UFortGiftingScreen::Text_FriendCount' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, Text_CharCount) == 0x000558, "Member 'UFortGiftingScreen::Text_CharCount' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, ListView_Friends) == 0x000560, "Member 'UFortGiftingScreen::ListView_Friends' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, Button_Continue) == 0x000568, "Member 'UFortGiftingScreen::Button_Continue' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, Button_Send) == 0x000570, "Member 'UFortGiftingScreen::Button_Send' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, TileView_GiftBoxes) == 0x000578, "Member 'UFortGiftingScreen::TileView_GiftBoxes' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, ListView_ChosenRecipients) == 0x000580, "Member 'UFortGiftingScreen::ListView_ChosenRecipients' has a wrong offset!");
static_assert(offsetof(UFortGiftingScreen, Text_EditableMessage) == 0x000588, "Member 'UFortGiftingScreen::Text_EditableMessage' has a wrong offset!");

// Class FortniteUI.FortUserDetails
// 0x0040 (0x0068 - 0x0028)
class UFortUserDetails final : public UObject
{
public:
	uint8                                         Pad_28[0x40];                                      // 0x0028(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUserDetails">();
	}
	static class UFortUserDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUserDetails>();
	}
};
static_assert(alignof(UFortUserDetails) == 0x000008, "Wrong alignment on UFortUserDetails");
static_assert(sizeof(UFortUserDetails) == 0x000068, "Wrong size on UFortUserDetails");

// Class FortniteUI.FortGiftingUserItem
// 0x0018 (0x0B48 - 0x0B30)
class UFortGiftingUserItem : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortUserDetails*                       ItemData;                                          // 0x0B38(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_DisplayName;                                  // 0x0B40(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetSelectionState(ESelectionState NewState, bool bAnimateOnSelect);
	void UpdateMessageText(const class FText& NewMessage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGiftingUserItem">();
	}
	static class UFortGiftingUserItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGiftingUserItem>();
	}
};
static_assert(alignof(UFortGiftingUserItem) == 0x000008, "Wrong alignment on UFortGiftingUserItem");
static_assert(sizeof(UFortGiftingUserItem) == 0x000B48, "Wrong size on UFortGiftingUserItem");
static_assert(offsetof(UFortGiftingUserItem, ItemData) == 0x000B38, "Member 'UFortGiftingUserItem::ItemData' has a wrong offset!");
static_assert(offsetof(UFortGiftingUserItem, Text_DisplayName) == 0x000B40, "Member 'UFortGiftingUserItem::Text_DisplayName' has a wrong offset!");

// Class FortniteUI.FortGlobalUIContext
// 0x03B8 (0x03E0 - 0x0028)
class UFortGlobalUIContext final : public UFortLocalPlayerSubsystem
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   SubGameChanged;                                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   PlayerControllerChanged;                           // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x18];                                      // 0x0050(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnKeybindsChanged;                                 // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnInputActionHoldStarted;                          // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnInputActionHoldStopped;                          // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnEnterVehicleDriver;                              // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnEnterVehiclePassenger;                           // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnExitVehicle;                                     // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTeamPowerChanged;                                // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   DragAndDropStartedDelegate;                        // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   DragAndDropEndedDelegate;                          // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnScoreReportChanged;                              // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnContextHelpChanged;                              // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemReceivedNotificationShown;                   // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnQueryFortBackendVersionComplete;                 // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLoadingScreenVisibilityChanged;                  // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerControllerConnectionChanged;          // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x18];                                     // 0x0158(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UFortUIMessageManager*> MessageManagersByName;                             // 0x0170(0x0050)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<EFortUIFeature, struct FFortUIFeatureStruct> Features;                                          // 0x01C0(0x0050)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_210[0x140];                                    // 0x0210(0x0140)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaMatchReadyDesktopPopup*          AthenaMatchReadyNotificationWidget;                // 0x0350(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_358[0x10];                                     // 0x0358(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortHelpItem*                          ActiveContextSpecificHelpItem;                     // 0x0368(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsUIVisible;                                      // 0x0370(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShowRateWidget;                                   // 0x0371(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsAllContentInstalledCache;                       // 0x0372(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_373[0x5];                                      // 0x0373(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FeedbackTitle;                                     // 0x0378(0x0018)(Transient, NativeAccessSpecifierPrivate)
	struct FDateTime                              FirstLoginTime;                                    // 0x0390(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           AddictionMsgTimer;                                 // 0x0398(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FUniqueNetIdRepl                       CurrentLocalPlayerUniqueNetId;                     // 0x03A0(0x0028)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C8[0x18];                                     // 0x03C8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void CancelDrawAttention(class UWidget* BaseWidget);
	static void CheckFlag(const class FString& FlagName, EFlagStatus* OutStatus);
	static void DrawAttention(class UWidget* BaseWidget);

	bool AutoSelectSubGame();
	void BindToFeatureStateAndInitialize(EFortUIFeature Feature, TDelegate<void(EFortUIFeature ChangedFeature, EFortUIFeatureState NewState, EFortUIFeatureStateReason StateReason)> Delegate);
	void BroadcastItemReceivedNotificationShown(bool IsActive);
	bool CanMatchmake(ESubGame SubGame, class FText* DenialReason);
	void ClearForceSetFeatureState(EFortUIFeature Feature);
	void ClearLastMissionReports();
	void ClearRatingWidgetInfo();
	void ClearSelectionGroup(class FName SelectionGroup);
	void CloseExternalNotificationWindowIfOpen();
	void CopyToClipboard(const class FString& ClipboardText);
	void DisplayStateContent(bool bDisplay);
	void EnterVehicleDriver();
	void EnterVehiclePassenger();
	void ExitVehicle();
	void ForceSetFeatureState(EFortUIFeature Feature, EFortUIFeatureState ForcedState, EFortUIFeatureStateReason Reason);
	float GetConningDifficultyXpModifier(int32 TotalSkillPoints, int32 ContentDifficulty);
	class FText GetConningXpModifierMessage(int32 TotalSkillPoints, int32 ContentDifficulty);
	void GetFeatureState(const EFortUIFeature Feature, EFortUIFeatureState* OutFeatureState, EFortUIFeatureStateReason* OutReason);
	class UFortUIRewardReport* GetLastMissionRewardReport();
	class UFortUIMessageManager* GetMessageManager(class FName ManagerName, bool* bCreatedNew);
	class UFortUIScoreReport* GetScoreReport();
	void GetTopLevelHelpItems(TArray<class UFortHelpItem*>* ActiveHelpEntries);
	class FString GetWatermark();
	void HideBang(EFortBangType Type);
	void InputActionHoldStarted(class FName InputActionName, float HoldDuration);
	void InputActionHoldStopped(class FName InputActionName, bool bCompletedSuccessfully);
	bool IsAllContentInstalled();
	bool IsBluGloEnabled();
	bool IsDesktopPlatform();
	bool IsHUDVisible();
	void Logout();
	void OnLoadingScreenVisibilityChangedDelegate__DelegateSignature(bool IsVisible);
	void OnLocalPlayerControllerConnectionChangedDelegate__DelegateSignature(bool bConnected);
	void OnQueryFortBackendVersionDelegate__DelegateSignature(const struct FFortBackendVersion& FortBackendVersion);
	void ProcessConfirmationResult(EFortDialogResult InResult, class FName InResultName, const struct FFortDialogDescription_NUI& ConfirmationDescription, bool bWaitingForLatentAction, struct FFortDialogExternalLatentActionHandle* WaitingDialogHandle);
	void QueryGameBackendVersion();
	void QuitGame();
	void RegisterInputAction(const class UUserWidget* UserWidget, const struct FDataTableRowHandle& InputActionRow, TDelegate<void(bool* bPassThrough)> CommitedEvent, int32 InFilterPriority);
	void RegisterScriptedAction(TSubclassOf<class AFortScriptedAction> ScriptedAction);
	void RegisterScriptedActions(const TArray<TSubclassOf<class AFortScriptedAction>>& ScriptedActions);
	void ReturnToSubGameSelect();
	void RunLauncherWithOptions(const class FString& Options);
	void SendExperienceRatingAnalytic(const class FString& RatingType, const class FString& FeedbackSentBy, const class FText& RatingQuestion, const int32& StarCount, const class FString& GameSessionId, const class FString& Comment);
	void SendLeaveZoneAnalytic();
	void SendUINavigationAnalytic(const class FString& Destination, bool bUserInitiated);
	void SetBangFromCount(EFortBangType Type, int32 Count);
	void SetContextHelpItem(class UFortHelpItem* ContextSpecificHelpItem);
	void SetCreativeMode(bool IsCreativeMode);
	void SetCurrentCustomInputTemplatePresetName(const class FString& InputPresetName);
	void SetCurrentInputPresetName(const class FString& InputPresetName);
	void SetHidePerkRecombobulatorHelp(bool bInHideHelp);
	void SetHideStwItemRefundHelp(bool bInHideHelp);
	void SetInputMode(EFortInputMode InMode);
	void SetRatingWidgetFeedbackTitle(const class FText& Title);
	void SetSubGame(ESubGame SubGame);
	void ShowAthenaMatchReadyExternalNotificationWindow();
	void ShowBang(EFortBangType Type);
	void ShowConsoleAccountPicker(const int32 ControllerIndex, const TDelegate<void(int32 ControllerIndex, bool bUserSwitched)>& CompletionDelegate);
	bool ShowWebURL(const class FString& URL, const EFortUrlType URLType);
	void UnbindToFeatureState(EFortUIFeature Feature, TDelegate<void(EFortUIFeature ChangedFeature, EFortUIFeatureState NewState, EFortUIFeatureStateReason StateReason)> Delegate);
	void UnregisterInputAction(const class UUserWidget* UserWidget, const struct FDataTableRowHandle& InputActionRow);
	void UnregisterScriptedAction(TSubclassOf<class AFortScriptedAction> ScriptedAction);
	void UnregisterScriptedActions(const TArray<TSubclassOf<class AFortScriptedAction>>& ScriptedActions);

	bool AllowLogout() const;
	bool AllowQuit() const;
	bool CanPlay(ESubGame SubGame, class FText* DenialReason) const;
	void ClearLastGameSummaryInfo() const;
	float ContentInstallationProgress() const;
	class FName GetAbility1ActionName(const ECommonInputType OverrideInputType) const;
	class FName GetAbility2ActionName(const ECommonInputType OverrideInputType) const;
	class FName GetAbility3ActionName() const;
	ESubGameAccessReason GetAccessReason(const ESubGame SubGame) const;
	class FText GetAccountGameplayRestrictionText() const;
	struct FFortGlobalActionDetails GetActionDetails(EFortGlobalAction Action, const struct FFortGlobalActionDetailsFunctionContext& Context) const;
	class FName GetActionForKey(const class FName PresetName, const struct FKey& Key, const EFortInputActionGroup InputActionGroup, const bool bIsUsingGamepad) const;
	void GetAllPlayerInputPresetNames(TArray<class FString>* InputPresetNames, TArray<class FText>* InputPresetFriendlyNames) const;
	void GetAllPlayerInputPresetNamesForSubGame(ESubGame SubGame, TArray<class FString>* InputPresetNames, TArray<class FText>* InputPresetFriendlyNames) const;
	const class FString GetBackendName() const;
	class FName GetBiplaneBoostName(const ECommonInputType OverrideInputType) const;
	class FName GetBiplaneFreelookName(const ECommonInputType OverrideInputType) const;
	class FName GetBiplaneRollInvertName(const ECommonInputType OverrideInputType) const;
	class FName GetBiplaneRollLeftName(const ECommonInputType OverrideInputType) const;
	class FName GetBiplaneRollRightName(const ECommonInputType OverrideInputType) const;
	class FName GetBiplaneShootName(const ECommonInputType OverrideInputType) const;
	class FName GetBiplaneStartEngineName(const ECommonInputType OverrideInputType) const;
	class FName GetBiplaneStopEngineName(const ECommonInputType OverrideInputType) const;
	class FName GetBiplaneTaxiBackwardsName(const ECommonInputType OverrideInputType) const;
	bool GetBrushForKey(const struct FKey& Key, struct FSlateBrush* Brush) const;
	bool GetBrushForKeyWithCustomInput(const struct FKey& Key, struct FSlateBrush* Brush, ECommonInputType InputType, ECommonGamepadType GamepadType) const;
	class FName GetBuildConfirmActionName(const ECommonInputType OverrideInputType) const;
	class FName GetChangeMaterialActionName() const;
	class UFortCollectionBookManager* GetCollectionBookManager() const;
	class FName GetCreativeFlyDownActionName() const;
	class FName GetCreativeFlyUpActionName() const;
	class FName GetCreativeIslandPanelStartMinigameName() const;
	class FName GetCreativeIslandPanelSupportAffiliateName() const;
	bool GetCreativeMode() const;
	struct FDateTime GetCreativeModeLimitedAccessEndTime() const;
	class FName GetCreativeMoveBuildingsOnGridChangePrecisionLevelName() const;
	class FName GetCreativeMoveBuildingsOnGridDuplicateName() const;
	class FName GetCreativeMoveBuildingsOnGridExitName() const;
	class FName GetCreativeMoveBuildingsOnGridLetGoName() const;
	class FName GetCreativeMoveBuildingsOnGridMirrorName() const;
	class FName GetCreativeMoveBuildingsOnGridRotateClockwiseName() const;
	class FName GetCreativeMoveBuildingsOnGridRotateCounterclockwiseName() const;
	class FName GetCreativeMoveObjectsFreelyChangePrecisionLevelName() const;
	class FName GetCreativeMoveObjectsFreelyDropToFloorName() const;
	class FName GetCreativeMoveObjectsFreelyDuplicateName() const;
	class FName GetCreativeMoveObjectsFreelyExitName() const;
	class FName GetCreativeMoveObjectsFreelyLetGoName() const;
	class FName GetCreativeMoveObjectsFreelyPullName() const;
	class FName GetCreativeMoveObjectsFreelyPushName() const;
	class FName GetCreativeMoveObjectsFreelyRotateClockwiseName() const;
	class FName GetCreativeMoveObjectsFreelyRotateCounterclockwiseName() const;
	class FName GetCreativeMoveObjectsFreelySwitchAxisName() const;
	class FName GetCreativeMoveToolEquippedCopyGrabOrDuplicateName() const;
	class FName GetCreativeMoveToolEquippedDeleteName() const;
	class FName GetCreativeMoveToolEquippedGrabOrLetGoName() const;
	class FName GetCrouchActionName(const ECommonInputType OverrideInputType) const;
	class FString GetCurrentCustomInputTemplatePresetName() const;
	class FString GetCurrentInputPresetName() const;
	class FString GetCustomGamepadInputPresetName() const;
	class FText GetFeatureStateReasonText(const EFortUIFeatureStateReason Reason) const;
	class FText GetFeedbackTitle() const;
	class FName GetFireActionName() const;
	class FName GetGadget1ActionName() const;
	class FName GetGadget2ActionName() const;
	class FName GetGamepadJackalExitActionName(const ECommonInputType OverrideInputType) const;
	class FName GetGolfCartEBrakeActionName(const ECommonInputType OverrideInputType) const;
	class FName GetGolfCartForwardActionName(const ECommonInputType OverrideInputType) const;
	class FName GetGolfCartReverseActionName(const ECommonInputType OverrideInputType) const;
	bool GetHidePerkRecombobulatorHelp() const;
	bool GetHideStwItemRefundHelp() const;
	bool GetInputDetailsForAction(class FName Action, struct FFortInputActionDetails* InputActionDetails) const;
	int32 GetInputPriority(EInputPriority Priority) const;
	class FName GetJackalBoostActionName(const ECommonInputType OverrideInputType) const;
	class FName GetJackalUseOrExitActionName(const ECommonInputType OverrideInputType) const;
	class FName GetJumpActionName() const;
	void GetKBMPlayerInputPresetDescriptionForSubGame(ESubGame SubGame, int32 CurrentPreset, class FText* InputPresetDescription, class FText* InputPresetSubDescription) const;
	void GetKBMPlayerInputPresetNamesForSubGame(ESubGame SubGame, TArray<class FString>* InputPresetNames, TArray<class FText>* InputPresetFriendlyNames) const;
	struct FKey GetKeyForAction(class FName Action, const bool bForceGamepadKey, class FName PresetNameOverride) const;
	struct FKey GetKeyForAxis(class FName Axis, const float Scale, const bool bIsUsingGamepad) const;
	class FText GetKeyTextForAction(class FName Action, class FText* ButtonActionType, bool bUseAbbreviatedText) const;
	class FText GetKeyTextForAxis(class FName Axis, const float AxisScale, bool bIsUsingGamepad, bool bUseAbbreviatedText) const;
	struct FGameSummaryInfo GetLastGameSummaryInfo() const;
	void GetLastMissionInfo(struct FFortLastMissionInfo* LastMissionInfo) const;
	class FName GetPerformBuildingEditInteractionActionName(const ECommonInputType OverrideInputType) const;
	class FName GetPerformBuildingImprovementInteractionActionName(const ECommonInputType OverrideInputType) const;
	class FName GetPickerCancelActionName(EFortPickerMode PickerMode) const;
	class FName GetPickerConfirmActionName(EFortPickerMode PickerMode) const;
	class FText GetPlatformDisplayName() const;
	class FName GetQuadCrasherBoostActionName(const ECommonInputType OverrideInputType) const;
	class UFortQuestManager* GetQuestManager(ESubGame SubGame) const;
	class FName GetRotatePrimitiveClockwiseActionName(const ECommonInputType OverrideInputType) const;
	class UFortSeasonalEventManager* GetSeasonalEventManager() const;
	class FString GetSessionConnectString() const;
	class FString GetSessionId() const;
	class FName GetShoppingCartCoastActionName() const;
	ESubGame GetSubGame() const;
	class FName GetSwitchQuickBarActionName(ECommonInputType OverrideInputType) const;
	class FName GetToggleFullscreenMapActionName() const;
	class FName GetToggleInventoryActionName() const;
	class FName GetTrapConfirmActionName(const ECommonInputType OverrideInputType) const;
	class FName GetTrapHotbarActionName(const ECommonInputType OverrideInputType) const;
	class FName GetTrapPickerActionName(const ECommonInputType OverrideInputType) const;
	class FName GetUseActionName(const ECommonInputType OverrideInputType) const;
	class FName GetVehicleChangeSeatActionName() const;
	class FName GetVehicleExitActionName(const ECommonInputType OverrideInputType) const;
	class FName GetVehicleJumpActionName(const ECommonInputType OverrideInputType) const;
	bool HasAccesstoMultipleSubGames() const;
	bool HasCompletedOnboardingObjective(const struct FDataTableRowHandle& Objective) const;
	bool IsBattleRoyaleMatchmakingEnabled() const;
	bool IsCreativeModeAccessLimited() const;
	bool IsCurrentlyShowingLoadingScreen() const;
	bool IsCustomGamepadConfig(const int32 ConfigIndex) const;
	bool IsGamepadAttached() const;
	bool IsInOutpostZone() const;
	bool IsInZone() const;
	bool IsMobileApp() const;
	bool IsPendingLogout() const;
	bool IsUIVisible() const;
	bool IsUsingGamepad() const;
	bool ShouldCloseMenuOnEscape() const;
	bool ShouldShowRateWidget() const;
	bool ShowVehicleHealthBarOnPlayerHUD() const;
	void TriggerUIFeedbackEvent(class FName EventName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGlobalUIContext">();
	}
	static class UFortGlobalUIContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGlobalUIContext>();
	}
};
static_assert(alignof(UFortGlobalUIContext) == 0x000008, "Wrong alignment on UFortGlobalUIContext");
static_assert(sizeof(UFortGlobalUIContext) == 0x0003E0, "Wrong size on UFortGlobalUIContext");
static_assert(offsetof(UFortGlobalUIContext, SubGameChanged) == 0x000030, "Member 'UFortGlobalUIContext::SubGameChanged' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, PlayerControllerChanged) == 0x000040, "Member 'UFortGlobalUIContext::PlayerControllerChanged' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, OnKeybindsChanged) == 0x000068, "Member 'UFortGlobalUIContext::OnKeybindsChanged' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, OnInputActionHoldStarted) == 0x000078, "Member 'UFortGlobalUIContext::OnInputActionHoldStarted' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, OnInputActionHoldStopped) == 0x000088, "Member 'UFortGlobalUIContext::OnInputActionHoldStopped' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, OnEnterVehicleDriver) == 0x000098, "Member 'UFortGlobalUIContext::OnEnterVehicleDriver' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, OnEnterVehiclePassenger) == 0x0000A8, "Member 'UFortGlobalUIContext::OnEnterVehiclePassenger' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, OnExitVehicle) == 0x0000B8, "Member 'UFortGlobalUIContext::OnExitVehicle' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, OnTeamPowerChanged) == 0x0000C8, "Member 'UFortGlobalUIContext::OnTeamPowerChanged' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, DragAndDropStartedDelegate) == 0x0000D8, "Member 'UFortGlobalUIContext::DragAndDropStartedDelegate' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, DragAndDropEndedDelegate) == 0x0000E8, "Member 'UFortGlobalUIContext::DragAndDropEndedDelegate' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, OnScoreReportChanged) == 0x0000F8, "Member 'UFortGlobalUIContext::OnScoreReportChanged' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, OnContextHelpChanged) == 0x000108, "Member 'UFortGlobalUIContext::OnContextHelpChanged' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, OnItemReceivedNotificationShown) == 0x000118, "Member 'UFortGlobalUIContext::OnItemReceivedNotificationShown' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, OnQueryFortBackendVersionComplete) == 0x000128, "Member 'UFortGlobalUIContext::OnQueryFortBackendVersionComplete' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, OnLoadingScreenVisibilityChanged) == 0x000138, "Member 'UFortGlobalUIContext::OnLoadingScreenVisibilityChanged' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, OnLocalPlayerControllerConnectionChanged) == 0x000148, "Member 'UFortGlobalUIContext::OnLocalPlayerControllerConnectionChanged' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, MessageManagersByName) == 0x000170, "Member 'UFortGlobalUIContext::MessageManagersByName' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, Features) == 0x0001C0, "Member 'UFortGlobalUIContext::Features' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, AthenaMatchReadyNotificationWidget) == 0x000350, "Member 'UFortGlobalUIContext::AthenaMatchReadyNotificationWidget' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, ActiveContextSpecificHelpItem) == 0x000368, "Member 'UFortGlobalUIContext::ActiveContextSpecificHelpItem' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, bIsUIVisible) == 0x000370, "Member 'UFortGlobalUIContext::bIsUIVisible' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, bShowRateWidget) == 0x000371, "Member 'UFortGlobalUIContext::bShowRateWidget' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, bIsAllContentInstalledCache) == 0x000372, "Member 'UFortGlobalUIContext::bIsAllContentInstalledCache' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, FeedbackTitle) == 0x000378, "Member 'UFortGlobalUIContext::FeedbackTitle' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, FirstLoginTime) == 0x000390, "Member 'UFortGlobalUIContext::FirstLoginTime' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, AddictionMsgTimer) == 0x000398, "Member 'UFortGlobalUIContext::AddictionMsgTimer' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, CurrentLocalPlayerUniqueNetId) == 0x0003A0, "Member 'UFortGlobalUIContext::CurrentLocalPlayerUniqueNetId' has a wrong offset!");

// Class FortniteUI.FortHaveInviteSelect
// 0x0020 (0x0340 - 0x0320)
class UFortHaveInviteSelect : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButton*                          Button_Yes;                                        // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_No;                                         // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHaveInviteSelect">();
	}
	static class UFortHaveInviteSelect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHaveInviteSelect>();
	}
};
static_assert(alignof(UFortHaveInviteSelect) == 0x000008, "Wrong alignment on UFortHaveInviteSelect");
static_assert(sizeof(UFortHaveInviteSelect) == 0x000340, "Wrong size on UFortHaveInviteSelect");
static_assert(offsetof(UFortHaveInviteSelect, Button_Yes) == 0x000330, "Member 'UFortHaveInviteSelect::Button_Yes' has a wrong offset!");
static_assert(offsetof(UFortHaveInviteSelect, Button_No) == 0x000338, "Member 'UFortHaveInviteSelect::Button_No' has a wrong offset!");

// Class FortniteUI.FortHealthWarningBase
// 0x0030 (0x0350 - 0x0320)
class UFortHealthWarningBase : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x18];                                     // 0x0320(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShowTimeLength;                                    // 0x0338(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_HealthWarning;                                // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHorizontalBox*                         HBox_RatingsIcons;                                 // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHealthWarningBase">();
	}
	static class UFortHealthWarningBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHealthWarningBase>();
	}
};
static_assert(alignof(UFortHealthWarningBase) == 0x000008, "Wrong alignment on UFortHealthWarningBase");
static_assert(sizeof(UFortHealthWarningBase) == 0x000350, "Wrong size on UFortHealthWarningBase");
static_assert(offsetof(UFortHealthWarningBase, ShowTimeLength) == 0x000338, "Member 'UFortHealthWarningBase::ShowTimeLength' has a wrong offset!");
static_assert(offsetof(UFortHealthWarningBase, Text_HealthWarning) == 0x000340, "Member 'UFortHealthWarningBase::Text_HealthWarning' has a wrong offset!");
static_assert(offsetof(UFortHealthWarningBase, HBox_RatingsIcons) == 0x000348, "Member 'UFortHealthWarningBase::HBox_RatingsIcons' has a wrong offset!");

// Class FortniteUI.FortHeroLoadoutHeroPicker
// 0x00C0 (0x03C8 - 0x0308)
class UFortHeroLoadoutHeroPicker final : public UFortItemPickerBase
{
public:
	class UFortTabListWidgetBase*                 ExternalFilterTabList;                             // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFortCampaignHeroLoadoutItem> TargetLoadoutItem;                                 // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TargetSlotName;                                    // 0x0318(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCommonButton>              FilterTabButtonType;                               // 0x0320(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, struct FFortTabButtonLabelInfo> TabButtonLabelInfoMap;                             // 0x0328(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_378[0x50];                                     // 0x0378(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AssociateFilterTabList(const class UFortTabListWidgetBase* Param_ExternalFilterTabList);
	void HandleFilterTabSelected(class FName TabId);
	void HandleFilterTabSelectedBP(class FName TabId);
	void SetTargetLoadoutSlot(const class UFortCampaignHeroLoadoutItem* LoadoutItem, const class FName& SlotName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHeroLoadoutHeroPicker">();
	}
	static class UFortHeroLoadoutHeroPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHeroLoadoutHeroPicker>();
	}
};
static_assert(alignof(UFortHeroLoadoutHeroPicker) == 0x000008, "Wrong alignment on UFortHeroLoadoutHeroPicker");
static_assert(sizeof(UFortHeroLoadoutHeroPicker) == 0x0003C8, "Wrong size on UFortHeroLoadoutHeroPicker");
static_assert(offsetof(UFortHeroLoadoutHeroPicker, ExternalFilterTabList) == 0x000308, "Member 'UFortHeroLoadoutHeroPicker::ExternalFilterTabList' has a wrong offset!");
static_assert(offsetof(UFortHeroLoadoutHeroPicker, TargetLoadoutItem) == 0x000310, "Member 'UFortHeroLoadoutHeroPicker::TargetLoadoutItem' has a wrong offset!");
static_assert(offsetof(UFortHeroLoadoutHeroPicker, TargetSlotName) == 0x000318, "Member 'UFortHeroLoadoutHeroPicker::TargetSlotName' has a wrong offset!");
static_assert(offsetof(UFortHeroLoadoutHeroPicker, FilterTabButtonType) == 0x000320, "Member 'UFortHeroLoadoutHeroPicker::FilterTabButtonType' has a wrong offset!");
static_assert(offsetof(UFortHeroLoadoutHeroPicker, TabButtonLabelInfoMap) == 0x000328, "Member 'UFortHeroLoadoutHeroPicker::TabButtonLabelInfoMap' has a wrong offset!");

// Class FortniteUI.FortHeroLoadoutSlotButton
// 0x0030 (0x0B60 - 0x0B30)
class UFortHeroLoadoutSlotButton final : public UCommonButton
{
public:
	class FName                                   SlotName;                                          // 0x0B30(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnRequestChangeHero;                               // 0x0B38(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnContextMenuOpenChanged;                          // 0x0B48(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMenuAnchor*                            ContextMenuAnchor;                                 // 0x0B58(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleMenuOpenChanged(bool bIsMenuOpen);
	void OnMenuOpenChangedEvent__DelegateSignature(class UFortHeroLoadoutSlotButton* SlotButton, bool bIsMenuOpen);
	void OnRequestChangeHero__DelegateSignature(class UFortHeroLoadoutSlotButton* SlotButton);

	bool IsContextMenuOpen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHeroLoadoutSlotButton">();
	}
	static class UFortHeroLoadoutSlotButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHeroLoadoutSlotButton>();
	}
};
static_assert(alignof(UFortHeroLoadoutSlotButton) == 0x000008, "Wrong alignment on UFortHeroLoadoutSlotButton");
static_assert(sizeof(UFortHeroLoadoutSlotButton) == 0x000B60, "Wrong size on UFortHeroLoadoutSlotButton");
static_assert(offsetof(UFortHeroLoadoutSlotButton, SlotName) == 0x000B30, "Member 'UFortHeroLoadoutSlotButton::SlotName' has a wrong offset!");
static_assert(offsetof(UFortHeroLoadoutSlotButton, OnRequestChangeHero) == 0x000B38, "Member 'UFortHeroLoadoutSlotButton::OnRequestChangeHero' has a wrong offset!");
static_assert(offsetof(UFortHeroLoadoutSlotButton, OnContextMenuOpenChanged) == 0x000B48, "Member 'UFortHeroLoadoutSlotButton::OnContextMenuOpenChanged' has a wrong offset!");
static_assert(offsetof(UFortHeroLoadoutSlotButton, ContextMenuAnchor) == 0x000B58, "Member 'UFortHeroLoadoutSlotButton::ContextMenuAnchor' has a wrong offset!");

// Class FortniteUI.FortHeroSquadBonusPerksWidgetBase
// 0x0010 (0x0278 - 0x0268)
class UFortHeroSquadBonusPerksWidgetBase final : public UFortSquadStatDetailsWidget
{
public:
	class UFortPerkWidget_NUI*                    SupportBonusPerkWidget;                            // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortPerkWidget_NUI*                    TacticalBonusPerkWidget;                           // 0x0270(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHeroSquadBonusPerksWidgetBase">();
	}
	static class UFortHeroSquadBonusPerksWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHeroSquadBonusPerksWidgetBase>();
	}
};
static_assert(alignof(UFortHeroSquadBonusPerksWidgetBase) == 0x000008, "Wrong alignment on UFortHeroSquadBonusPerksWidgetBase");
static_assert(sizeof(UFortHeroSquadBonusPerksWidgetBase) == 0x000278, "Wrong size on UFortHeroSquadBonusPerksWidgetBase");
static_assert(offsetof(UFortHeroSquadBonusPerksWidgetBase, SupportBonusPerkWidget) == 0x000268, "Member 'UFortHeroSquadBonusPerksWidgetBase::SupportBonusPerkWidget' has a wrong offset!");
static_assert(offsetof(UFortHeroSquadBonusPerksWidgetBase, TacticalBonusPerkWidget) == 0x000270, "Member 'UFortHeroSquadBonusPerksWidgetBase::TacticalBonusPerkWidget' has a wrong offset!");

// Class FortniteUI.FortSquadManagementScreenBase
// 0x0118 (0x0460 - 0x0348)
class UFortSquadManagementScreenBase : public UFortActivatablePanel
{
public:
	uint8                                         Pad_348[0x10];                                     // 0x0348(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortSquadStatsWidgetBase*              SquadStatsWidget;                                  // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortSquadSlotsView*                    SquadSlotsView;                                    // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortSquadSlotDetailsPanel*             SelectedSlotDetailsPanel;                          // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortSquadSlotItemPicker*               SelectedSlotItemPicker;                            // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    InspectInputActionRowHandle;                       // 0x0378(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    ManageInputActionRowHandle;                        // 0x0388(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    BackInputActionRowHandle;                          // 0x0398(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    InventoryInputActionRowHandle;                     // 0x03A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    InventoryCloseInputActionRowHandle;                // 0x03B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    ClosePickerInputActionRowHandle;                   // 0x03C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    SelectPickerSlotActionRowHandle;                   // 0x03D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    CyclePickerSortActionRowHandle;                    // 0x03E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    PreviousSquadActionRowHandle;                      // 0x03F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    NextSquadActionRowHandle;                          // 0x0408(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    ClearAllActionRowHandle;                           // 0x0418(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    HelpScreenActionRowHandle;                         // 0x0428(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortDisableAutoSlottingPromptAction> DisableAutoSlottingToClearSquadPromptAction;       // 0x0438(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_440[0x10];                                     // 0x0440(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemViewContext_SquadSlotsView*    ItemViewContext_SquadSlotsView;                    // 0x0450(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortItemViewContext_SquadSlotItemPicker* ItemViewContext_SquadSlotItemPicker;               // 0x0458(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ClearSquad();
	void HandleBackInputAction();
	void HandleClosePickerInputAction();
	void HandleCyclePickerSortInputAction();
	void HandleDifferentSquadSetBP();
	void HandleDifferentSquadSlotSelected(const int32 SquadSlotIndex);
	void HandleInspectInputAction();
	void HandleInventoryInputAction();
	void HandleManageInputAction();
	void HandleNextSquadInputAction();
	void HandleOpenSquadSlot(const int32 SquadSlotIndex);
	void HandlePickerSelectionChanged(class UFortItem* SelectedItem);
	void HandlePickerSelectionCommitted(class UFortItem* CommittedItem);
	void HandlePreviousSquadInputAction();
	void HandleSelectPickerSlotInputAction();
	void HandleShouldAutoSlotSurvivorSquadsChanged();
	void HandleSquadSlotPickerHidden();
	void HandleSquadSlotPickerShown();
	void HandleSquadStateChanged();
	void HandleViewInAll(const int32 SquadSlotIndex);
	void NavigateToSquadSlot(int32 SquadSlotIndex);
	void SelectNextSquad();
	void SelectPreviousSquad();
	void SelectSquadWithOffset(int32 Offset);
	void SetIdOfSquadToManageBP(const class FName& SquadId);

	class FName GetIdOfSquadToManageBP() const;
	int32 GetNumUnlockedSquads() const;
	bool TryGetAttributeValueFromSquad(float* OutValue, const struct FGameplayAttribute& Attribute) const;
	bool TryGetSquadMainAttribute(struct FGameplayAttribute* OutGameplayAttribute) const;
	bool TryGetSquadTeamAttribute(struct FGameplayAttribute* OutGameplayAttribute) const;
	bool TryGetStaticSquadDataBP(struct FHomebaseSquad* OutSquadData) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadManagementScreenBase">();
	}
	static class UFortSquadManagementScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadManagementScreenBase>();
	}
};
static_assert(alignof(UFortSquadManagementScreenBase) == 0x000008, "Wrong alignment on UFortSquadManagementScreenBase");
static_assert(sizeof(UFortSquadManagementScreenBase) == 0x000460, "Wrong size on UFortSquadManagementScreenBase");
static_assert(offsetof(UFortSquadManagementScreenBase, SquadStatsWidget) == 0x000358, "Member 'UFortSquadManagementScreenBase::SquadStatsWidget' has a wrong offset!");
static_assert(offsetof(UFortSquadManagementScreenBase, SquadSlotsView) == 0x000360, "Member 'UFortSquadManagementScreenBase::SquadSlotsView' has a wrong offset!");
static_assert(offsetof(UFortSquadManagementScreenBase, SelectedSlotDetailsPanel) == 0x000368, "Member 'UFortSquadManagementScreenBase::SelectedSlotDetailsPanel' has a wrong offset!");
static_assert(offsetof(UFortSquadManagementScreenBase, SelectedSlotItemPicker) == 0x000370, "Member 'UFortSquadManagementScreenBase::SelectedSlotItemPicker' has a wrong offset!");
static_assert(offsetof(UFortSquadManagementScreenBase, InspectInputActionRowHandle) == 0x000378, "Member 'UFortSquadManagementScreenBase::InspectInputActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortSquadManagementScreenBase, ManageInputActionRowHandle) == 0x000388, "Member 'UFortSquadManagementScreenBase::ManageInputActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortSquadManagementScreenBase, BackInputActionRowHandle) == 0x000398, "Member 'UFortSquadManagementScreenBase::BackInputActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortSquadManagementScreenBase, InventoryInputActionRowHandle) == 0x0003A8, "Member 'UFortSquadManagementScreenBase::InventoryInputActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortSquadManagementScreenBase, InventoryCloseInputActionRowHandle) == 0x0003B8, "Member 'UFortSquadManagementScreenBase::InventoryCloseInputActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortSquadManagementScreenBase, ClosePickerInputActionRowHandle) == 0x0003C8, "Member 'UFortSquadManagementScreenBase::ClosePickerInputActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortSquadManagementScreenBase, SelectPickerSlotActionRowHandle) == 0x0003D8, "Member 'UFortSquadManagementScreenBase::SelectPickerSlotActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortSquadManagementScreenBase, CyclePickerSortActionRowHandle) == 0x0003E8, "Member 'UFortSquadManagementScreenBase::CyclePickerSortActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortSquadManagementScreenBase, PreviousSquadActionRowHandle) == 0x0003F8, "Member 'UFortSquadManagementScreenBase::PreviousSquadActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortSquadManagementScreenBase, NextSquadActionRowHandle) == 0x000408, "Member 'UFortSquadManagementScreenBase::NextSquadActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortSquadManagementScreenBase, ClearAllActionRowHandle) == 0x000418, "Member 'UFortSquadManagementScreenBase::ClearAllActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortSquadManagementScreenBase, HelpScreenActionRowHandle) == 0x000428, "Member 'UFortSquadManagementScreenBase::HelpScreenActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortSquadManagementScreenBase, DisableAutoSlottingToClearSquadPromptAction) == 0x000438, "Member 'UFortSquadManagementScreenBase::DisableAutoSlottingToClearSquadPromptAction' has a wrong offset!");
static_assert(offsetof(UFortSquadManagementScreenBase, ItemViewContext_SquadSlotsView) == 0x000450, "Member 'UFortSquadManagementScreenBase::ItemViewContext_SquadSlotsView' has a wrong offset!");
static_assert(offsetof(UFortSquadManagementScreenBase, ItemViewContext_SquadSlotItemPicker) == 0x000458, "Member 'UFortSquadManagementScreenBase::ItemViewContext_SquadSlotItemPicker' has a wrong offset!");

// Class FortniteUI.FortHeroSquadManagementScreen
// 0x0020 (0x0480 - 0x0460)
class UFortHeroSquadManagementScreen final : public UFortSquadManagementScreenBase
{
public:
	struct FDataTableRowHandle                    ManageDefendersInputActionRowHandle;               // 0x0460(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UFortHeroSquadBonusPerksWidgetBase*     BonusPerksWidget;                                  // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_478[0x8];                                      // 0x0478(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayFeedbackForSlottingPerson(class UFortCharacter* Character, int32 SlotIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHeroSquadManagementScreen">();
	}
	static class UFortHeroSquadManagementScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHeroSquadManagementScreen>();
	}
};
static_assert(alignof(UFortHeroSquadManagementScreen) == 0x000008, "Wrong alignment on UFortHeroSquadManagementScreen");
static_assert(sizeof(UFortHeroSquadManagementScreen) == 0x000480, "Wrong size on UFortHeroSquadManagementScreen");
static_assert(offsetof(UFortHeroSquadManagementScreen, ManageDefendersInputActionRowHandle) == 0x000460, "Member 'UFortHeroSquadManagementScreen::ManageDefendersInputActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortHeroSquadManagementScreen, BonusPerksWidget) == 0x000470, "Member 'UFortHeroSquadManagementScreen::BonusPerksWidget' has a wrong offset!");

// Class FortniteUI.FortHeroSupportPerkIndicator
// 0x0010 (0x0138 - 0x0128)
class UFortHeroSupportPerkIndicator final : public UFortIconWithLabel
{
public:
	TWeakObjectPtr<class UFortItem>               ItemToRepresent;                                   // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortSupportBonusType                         SupportTypeToRepresent;                            // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetItemToRepresent(const class UFortItem* Param_ItemToRepresent);
	void SetSupportTypeToRepresent(const EFortSupportBonusType Param_SupportTypeToRepresent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHeroSupportPerkIndicator">();
	}
	static class UFortHeroSupportPerkIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHeroSupportPerkIndicator>();
	}
};
static_assert(alignof(UFortHeroSupportPerkIndicator) == 0x000008, "Wrong alignment on UFortHeroSupportPerkIndicator");
static_assert(sizeof(UFortHeroSupportPerkIndicator) == 0x000138, "Wrong size on UFortHeroSupportPerkIndicator");
static_assert(offsetof(UFortHeroSupportPerkIndicator, ItemToRepresent) == 0x000128, "Member 'UFortHeroSupportPerkIndicator::ItemToRepresent' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkIndicator, SupportTypeToRepresent) == 0x000130, "Member 'UFortHeroSupportPerkIndicator::SupportTypeToRepresent' has a wrong offset!");

// Class FortniteUI.FortHomeCMSScreenBase
// 0x0008 (0x03B8 - 0x03B0)
class UFortHomeCMSScreenBase final : public UEpicCMSScreenBase
{
public:
	class UWidgetSwitcher*                        LayoutSwitcher;                                    // 0x03B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnTilesLoaded();

	bool AreTilesLoaded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHomeCMSScreenBase">();
	}
	static class UFortHomeCMSScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHomeCMSScreenBase>();
	}
};
static_assert(alignof(UFortHomeCMSScreenBase) == 0x000008, "Wrong alignment on UFortHomeCMSScreenBase");
static_assert(sizeof(UFortHomeCMSScreenBase) == 0x0003B8, "Wrong size on UFortHomeCMSScreenBase");
static_assert(offsetof(UFortHomeCMSScreenBase, LayoutSwitcher) == 0x0003B0, "Member 'UFortHomeCMSScreenBase::LayoutSwitcher' has a wrong offset!");

// Class FortniteUI.FortHUDCenterPopupMessageWidget
// 0x0038 (0x0270 - 0x0238)
class UFortHUDCenterPopupMessageWidget final : public UCommonUserWidget
{
public:
	TSoftClassPtr<class UClass>                   CenterPopupModalWidgetClass;                       // 0x0238(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_260[0x8];                                      // 0x0260(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonActivatablePanel*                CenterPopupModalWidget;                            // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnModalDisplayed(ECenterPopupMessageStateEnum NewState, class UCommonActivatablePanel* ModalPopup);
	void UpdateState();

	ECenterPopupMessageStateEnum GetCenterPopupMessageState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHUDCenterPopupMessageWidget">();
	}
	static class UFortHUDCenterPopupMessageWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHUDCenterPopupMessageWidget>();
	}
};
static_assert(alignof(UFortHUDCenterPopupMessageWidget) == 0x000008, "Wrong alignment on UFortHUDCenterPopupMessageWidget");
static_assert(sizeof(UFortHUDCenterPopupMessageWidget) == 0x000270, "Wrong size on UFortHUDCenterPopupMessageWidget");
static_assert(offsetof(UFortHUDCenterPopupMessageWidget, CenterPopupModalWidgetClass) == 0x000238, "Member 'UFortHUDCenterPopupMessageWidget::CenterPopupModalWidgetClass' has a wrong offset!");
static_assert(offsetof(UFortHUDCenterPopupMessageWidget, CenterPopupModalWidget) == 0x000268, "Member 'UFortHUDCenterPopupMessageWidget::CenterPopupModalWidget' has a wrong offset!");

// Class FortniteUI.FortHUDContext
// 0x05F8 (0x0620 - 0x0028)
class UFortHUDContext final : public UBlueprintContextBase
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnCursorModeChanging;                              // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnCursorModeChanged;                               // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnGameViewportActivationChanged;                   // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMgmtMenuTabChangeRequested;                      // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnIndicatorModeChanged;                            // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnContextualReticleChanged;                        // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnVehicleFocused;                                  // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnBuildingFocused;                                 // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnActorFocusedForCreative;                         // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFocusedBuildingStateChanged;                     // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFocusedBuildingHealthChanged;                    // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFocusedBuildingBigHealthChanged;                 // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFocusedBuildingRepairCostChanged;                // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFocusedBuildingAttachedTrapDurabilityChanged;    // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFocusedBuildingAttachedTrapChanged;              // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnDamagedResourceBuilding;                         // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPlayerCanInteract;                               // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnInteractUpdated;                                 // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPlayerTargetingChanged;                          // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnScoreChanged;                                    // 0x0160(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnScoreStatChanged;                                // 0x0170(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnZoneCompleted;                                   // 0x0180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPawnSet;                                         // 0x0190(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnDamageReceived;                                  // 0x01A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnUnableToPerformAction;                           // 0x01B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerMaxHealthChanged;                     // 0x01C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerHealthChanged;                        // 0x01D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerDied;                                 // 0x01E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerSpawned;                              // 0x01F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerRevived;                              // 0x0200(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerKillsChanged;                         // 0x0210(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerPlaceChanged;                         // 0x0220(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerViewTargetChanged;                    // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerMaxShieldChanged;                     // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerShieldChanged;                        // 0x0250(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerMaxStaminaChanged;                    // 0x0260(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerStaminaChanged;                       // 0x0270(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnToggleScoreboard;                                // 0x0280(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnEndOfDayRecap;                                   // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnWaveCombatStart;                                 // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnWaveBasedModifiersApplied;                       // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnActiveGameplayModifiersChanged;                  // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnHordeTierInitialized;                            // 0x02D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnHordeTierComplete;                               // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnHordeWaveComplete;                               // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnBuildingMaterialCycled;                          // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnHighlightsCountChanged;                          // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnUIResetRequired;                                 // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnHUDStateRefreshed;                               // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnShouldTriggerCooldownUpdate;                     // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnWeaponEquippedDelegate;                          // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnAbilityDecisionWindowStackUpdated;               // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemCollectorChanged;                            // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTotalQuantumChanged;                             // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnAllFOBCoresAdded;                                // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnWorldDaysElapsedChanged;                         // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnNumSurvivorsRescuedChanged;                      // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnEarnedBadgesChanged;                             // 0x03C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPotentialBadgesChanged;                          // 0x03D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMissionManagerCreated;                           // 0x03E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMissionsUpdated;                                 // 0x03F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFocusedMissionChanged;                           // 0x0400(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTheaterUniqueIDChanged;                          // 0x0410(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnZoneDifficultyInfoRowChanged;                    // 0x0420(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnDifficultyIncreaseRewardTierChanged;             // 0x0430(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnDifficultyIncreaseRewardsChanged;                // 0x0440(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMissionGeneratorChanged;                         // 0x0450(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMissionRewardsChanged;                           // 0x0460(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPointOfInterestAdded;                            // 0x0470(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPointOfInterestRemoved;                          // 0x0480(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_490[0x18];                                     // 0x0490(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnHUDElementVisibilityChanged;                     // 0x04A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B8[0x10];                                     // 0x04B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnDebugHUDObjectiveHeightChangedDelegate;          // 0x04C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnBuildModeChanged;                                // 0x04D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPersonalVehicleModeChanged;                      // 0x04E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPlayerVehicleStateChanged;                       // 0x04F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnClientSettingsShowViewersChanged;                // 0x0508(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bDebugHudObjectiveHeight;                          // 0x0518(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bPendingAttachToHUD;                               // 0x0519(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51A[0x6];                                      // 0x051A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerState*                       OwningPlayerState;                                 // 0x0520(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ABuildingActor*                         CurFocusedBuilding;                                // 0x0528(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ABuildingTrap*                          CurFocusedTrap;                                    // 0x0530(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_538[0x8];                                      // 0x0538(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ABuildingActor*                         BuildingFocusCandidates[0x3];                      // 0x0540(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AFortPlayerPawn*                        BoundPlayerPawn;                                   // 0x0558(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_560[0xC0];                                     // 0x0560(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddPointOfInterest(class AActor* PointOfInterest, const class FText& DisplayText, class UTexture2D* DisplayImage);
	void EnterCameraMode();
	void EnterCursorMode(class FName ActionName, class UUserWidget* CursorModeWidget);
	void ForwardOnAbilityDecisionWindowStackUpdated();
	void ForwardOnMissionsUpdated();
	void ForwardOnNumSurvivorsRescuedChanged(int32 NumSurvivorsRescued);
	void ForwardOnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	struct FFortKillerVisualInfo GetKillerVisualInfoFromDeathReport(const struct FFortPlayerDeathReport& DeathReport);
	void HandleActorFocusedForCreative(class AActor* NewActor);
	void HandleBuildingModeChanged(bool bEntering);
	void HandleFocusedBuildingHealthChanged();
	void HandleLocalPawnDied(const struct FFortPlayerDeathReport& DeathReport);
	void HandleLocalPawnRevived();
	void HandleLocalPawnSpawned();
	void HandleLocalPlayerKillsChanged();
	void HandleLocalPlayerPlaceChanged();
	void HandleLocalPlayerViewTargetChanged();
	void HandlePersonalVehicleModeChanged(bool bEnteredVehicle);
	void HandleSpectatorViewTargetChanged();
	void HandleVehicleStateChanged(class AFortPlayerPawn* PlayerPawn, class AFortAthenaVehicle* NewVehicle, class AFortAthenaVehicle* OldVehicle);
	void OnClientSettingUpdatedShowViewers();
	void RemovePointOfInterest(class AActor* PointOfInterest);
	void RequestMgmtMenuTab(class FName TabName);
	void SetCursorModeLocked(bool bLocked);
	void SetHUDElementVisibility(const struct FGameplayTagContainer& HUDElementTags, bool bHideElements);
	void SetIndicatorsAllowed(bool bIndicatorsAllowed);
	void SetIndicatorsState(EFortIndicatorState NewState);
	void SetPreparingMgmtMenu(bool bPreparing);
	void TriggerCooldownUpdate();
	void UpdateTrapAttachedToBuilding();

	bool AreHUDElementsVisible(const struct FGameplayTagContainer& HUDElementTags) const;
	bool AreIndicatorsEnabled() const;
	void GetAccountLevelUpRewards(TArray<struct FFortItemQuantityPair>* Rewards, int32 AccountLevel) const;
	class AFortBluGloManager* GetBluGloManager() const;
	bool GetCurrentBasicMissionInfo(struct FFortBasicMissionInfo* BasicMissionInfo) const;
	class ABuildingActor* GetCurrentFocusedBuilding() const;
	class UFortHero* GetCurrentHero() const;
	const struct FFortHUDState GetCurrentHUDState() const;
	struct FGameplayTagContainer GetCurrentPrimaryMissionTags() const;
	void GetDifficultyIncreaseRewards(int32 DifficultyIncreaseTier, TArray<struct FFortItemDelta>* DifficultyIncreaseRewards) const;
	void GetDifficultyIncreaseRewardsDifference(int32 BaseDifficultyIncreaseTier, int32 ComparedDifficultyIncreaseTier, TArray<struct FFortItemDelta>* RewardDeltaInfo) const;
	int32 GetDifficultyIncreaseRewardsTier() const;
	const TArray<struct FEarnedBadgeEntry> GetEarnedBadges() const;
	bool GetFocusedBuildingInfo(struct FFortFocusedBuildingInfo* OutBuildingInfo) const;
	class AFortMission* GetFocusedMission() const;
	class AFortGameStateZone* GetGameStateZone() const;
	EFortIndicatorState GetIndicatorsState() const;
	class AFortMissionManager* GetMissionManager() const;
	TArray<struct FZoneLoadingScreenHeadingConfig> GetMissionOverviewObjectives() const;
	void GetMissionRewards(TArray<class UFortItem*>* MissionRewards, TArray<class UFortItem*>* MissionAlertRewards) const;
	int32 GetNumAllowedDifficultyIncreases() const;
	class AFortPlayerStateZone* GetPlayerStateZone() const;
	const TArray<struct FFortBadgeCount> GetPotentialBadges() const;
	float GetScoreDisplayFactor() const;
	class AFortPvPBaseCornerstone* GetTeamCornerstone(uint8 Team) const;
	float GetTimeToDelayEndOfDayZoneWidgetDisplay() const;
	bool IsInCursorMode() const;
	bool IsInEditMode() const;
	bool IsPreparingMgmtMenu() const;
	bool IsShowViewerCountEnabled() const;
	bool ShouldOnlyShowNextPrevBuildingSlotKeybinds() const;
	void ToggleFullScreenMap() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHUDContext">();
	}
	static class UFortHUDContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHUDContext>();
	}
};
static_assert(alignof(UFortHUDContext) == 0x000008, "Wrong alignment on UFortHUDContext");
static_assert(sizeof(UFortHUDContext) == 0x000620, "Wrong size on UFortHUDContext");
static_assert(offsetof(UFortHUDContext, OnCursorModeChanging) == 0x000030, "Member 'UFortHUDContext::OnCursorModeChanging' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnCursorModeChanged) == 0x000040, "Member 'UFortHUDContext::OnCursorModeChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnGameViewportActivationChanged) == 0x000050, "Member 'UFortHUDContext::OnGameViewportActivationChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnMgmtMenuTabChangeRequested) == 0x000060, "Member 'UFortHUDContext::OnMgmtMenuTabChangeRequested' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnIndicatorModeChanged) == 0x000070, "Member 'UFortHUDContext::OnIndicatorModeChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnContextualReticleChanged) == 0x000080, "Member 'UFortHUDContext::OnContextualReticleChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnVehicleFocused) == 0x000090, "Member 'UFortHUDContext::OnVehicleFocused' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnBuildingFocused) == 0x0000A0, "Member 'UFortHUDContext::OnBuildingFocused' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnActorFocusedForCreative) == 0x0000B0, "Member 'UFortHUDContext::OnActorFocusedForCreative' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnFocusedBuildingStateChanged) == 0x0000C0, "Member 'UFortHUDContext::OnFocusedBuildingStateChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnFocusedBuildingHealthChanged) == 0x0000D0, "Member 'UFortHUDContext::OnFocusedBuildingHealthChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnFocusedBuildingBigHealthChanged) == 0x0000E0, "Member 'UFortHUDContext::OnFocusedBuildingBigHealthChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnFocusedBuildingRepairCostChanged) == 0x0000F0, "Member 'UFortHUDContext::OnFocusedBuildingRepairCostChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnFocusedBuildingAttachedTrapDurabilityChanged) == 0x000100, "Member 'UFortHUDContext::OnFocusedBuildingAttachedTrapDurabilityChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnFocusedBuildingAttachedTrapChanged) == 0x000110, "Member 'UFortHUDContext::OnFocusedBuildingAttachedTrapChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnDamagedResourceBuilding) == 0x000120, "Member 'UFortHUDContext::OnDamagedResourceBuilding' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnPlayerCanInteract) == 0x000130, "Member 'UFortHUDContext::OnPlayerCanInteract' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnInteractUpdated) == 0x000140, "Member 'UFortHUDContext::OnInteractUpdated' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnPlayerTargetingChanged) == 0x000150, "Member 'UFortHUDContext::OnPlayerTargetingChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnScoreChanged) == 0x000160, "Member 'UFortHUDContext::OnScoreChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnScoreStatChanged) == 0x000170, "Member 'UFortHUDContext::OnScoreStatChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnZoneCompleted) == 0x000180, "Member 'UFortHUDContext::OnZoneCompleted' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnPawnSet) == 0x000190, "Member 'UFortHUDContext::OnPawnSet' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnDamageReceived) == 0x0001A0, "Member 'UFortHUDContext::OnDamageReceived' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnUnableToPerformAction) == 0x0001B0, "Member 'UFortHUDContext::OnUnableToPerformAction' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnLocalPlayerMaxHealthChanged) == 0x0001C0, "Member 'UFortHUDContext::OnLocalPlayerMaxHealthChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnLocalPlayerHealthChanged) == 0x0001D0, "Member 'UFortHUDContext::OnLocalPlayerHealthChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnLocalPlayerDied) == 0x0001E0, "Member 'UFortHUDContext::OnLocalPlayerDied' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnLocalPlayerSpawned) == 0x0001F0, "Member 'UFortHUDContext::OnLocalPlayerSpawned' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnLocalPlayerRevived) == 0x000200, "Member 'UFortHUDContext::OnLocalPlayerRevived' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnLocalPlayerKillsChanged) == 0x000210, "Member 'UFortHUDContext::OnLocalPlayerKillsChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnLocalPlayerPlaceChanged) == 0x000220, "Member 'UFortHUDContext::OnLocalPlayerPlaceChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnLocalPlayerViewTargetChanged) == 0x000230, "Member 'UFortHUDContext::OnLocalPlayerViewTargetChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnLocalPlayerMaxShieldChanged) == 0x000240, "Member 'UFortHUDContext::OnLocalPlayerMaxShieldChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnLocalPlayerShieldChanged) == 0x000250, "Member 'UFortHUDContext::OnLocalPlayerShieldChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnLocalPlayerMaxStaminaChanged) == 0x000260, "Member 'UFortHUDContext::OnLocalPlayerMaxStaminaChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnLocalPlayerStaminaChanged) == 0x000270, "Member 'UFortHUDContext::OnLocalPlayerStaminaChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnToggleScoreboard) == 0x000280, "Member 'UFortHUDContext::OnToggleScoreboard' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnEndOfDayRecap) == 0x000290, "Member 'UFortHUDContext::OnEndOfDayRecap' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnWaveCombatStart) == 0x0002A0, "Member 'UFortHUDContext::OnWaveCombatStart' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnWaveBasedModifiersApplied) == 0x0002B0, "Member 'UFortHUDContext::OnWaveBasedModifiersApplied' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnActiveGameplayModifiersChanged) == 0x0002C0, "Member 'UFortHUDContext::OnActiveGameplayModifiersChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnHordeTierInitialized) == 0x0002D0, "Member 'UFortHUDContext::OnHordeTierInitialized' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnHordeTierComplete) == 0x0002E0, "Member 'UFortHUDContext::OnHordeTierComplete' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnHordeWaveComplete) == 0x0002F0, "Member 'UFortHUDContext::OnHordeWaveComplete' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnBuildingMaterialCycled) == 0x000300, "Member 'UFortHUDContext::OnBuildingMaterialCycled' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnHighlightsCountChanged) == 0x000310, "Member 'UFortHUDContext::OnHighlightsCountChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnUIResetRequired) == 0x000320, "Member 'UFortHUDContext::OnUIResetRequired' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnHUDStateRefreshed) == 0x000330, "Member 'UFortHUDContext::OnHUDStateRefreshed' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnShouldTriggerCooldownUpdate) == 0x000340, "Member 'UFortHUDContext::OnShouldTriggerCooldownUpdate' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnWeaponEquippedDelegate) == 0x000350, "Member 'UFortHUDContext::OnWeaponEquippedDelegate' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnAbilityDecisionWindowStackUpdated) == 0x000360, "Member 'UFortHUDContext::OnAbilityDecisionWindowStackUpdated' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnItemCollectorChanged) == 0x000370, "Member 'UFortHUDContext::OnItemCollectorChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnTotalQuantumChanged) == 0x000380, "Member 'UFortHUDContext::OnTotalQuantumChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnAllFOBCoresAdded) == 0x000390, "Member 'UFortHUDContext::OnAllFOBCoresAdded' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnWorldDaysElapsedChanged) == 0x0003A0, "Member 'UFortHUDContext::OnWorldDaysElapsedChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnNumSurvivorsRescuedChanged) == 0x0003B0, "Member 'UFortHUDContext::OnNumSurvivorsRescuedChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnEarnedBadgesChanged) == 0x0003C0, "Member 'UFortHUDContext::OnEarnedBadgesChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnPotentialBadgesChanged) == 0x0003D0, "Member 'UFortHUDContext::OnPotentialBadgesChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnMissionManagerCreated) == 0x0003E0, "Member 'UFortHUDContext::OnMissionManagerCreated' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnMissionsUpdated) == 0x0003F0, "Member 'UFortHUDContext::OnMissionsUpdated' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnFocusedMissionChanged) == 0x000400, "Member 'UFortHUDContext::OnFocusedMissionChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnTheaterUniqueIDChanged) == 0x000410, "Member 'UFortHUDContext::OnTheaterUniqueIDChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnZoneDifficultyInfoRowChanged) == 0x000420, "Member 'UFortHUDContext::OnZoneDifficultyInfoRowChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnDifficultyIncreaseRewardTierChanged) == 0x000430, "Member 'UFortHUDContext::OnDifficultyIncreaseRewardTierChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnDifficultyIncreaseRewardsChanged) == 0x000440, "Member 'UFortHUDContext::OnDifficultyIncreaseRewardsChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnMissionGeneratorChanged) == 0x000450, "Member 'UFortHUDContext::OnMissionGeneratorChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnMissionRewardsChanged) == 0x000460, "Member 'UFortHUDContext::OnMissionRewardsChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnPointOfInterestAdded) == 0x000470, "Member 'UFortHUDContext::OnPointOfInterestAdded' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnPointOfInterestRemoved) == 0x000480, "Member 'UFortHUDContext::OnPointOfInterestRemoved' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnHUDElementVisibilityChanged) == 0x0004A8, "Member 'UFortHUDContext::OnHUDElementVisibilityChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnDebugHUDObjectiveHeightChangedDelegate) == 0x0004C8, "Member 'UFortHUDContext::OnDebugHUDObjectiveHeightChangedDelegate' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnBuildModeChanged) == 0x0004D8, "Member 'UFortHUDContext::OnBuildModeChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnPersonalVehicleModeChanged) == 0x0004E8, "Member 'UFortHUDContext::OnPersonalVehicleModeChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnPlayerVehicleStateChanged) == 0x0004F8, "Member 'UFortHUDContext::OnPlayerVehicleStateChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnClientSettingsShowViewersChanged) == 0x000508, "Member 'UFortHUDContext::OnClientSettingsShowViewersChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, bDebugHudObjectiveHeight) == 0x000518, "Member 'UFortHUDContext::bDebugHudObjectiveHeight' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, bPendingAttachToHUD) == 0x000519, "Member 'UFortHUDContext::bPendingAttachToHUD' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OwningPlayerState) == 0x000520, "Member 'UFortHUDContext::OwningPlayerState' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, CurFocusedBuilding) == 0x000528, "Member 'UFortHUDContext::CurFocusedBuilding' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, CurFocusedTrap) == 0x000530, "Member 'UFortHUDContext::CurFocusedTrap' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, BuildingFocusCandidates) == 0x000540, "Member 'UFortHUDContext::BuildingFocusCandidates' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, BoundPlayerPawn) == 0x000558, "Member 'UFortHUDContext::BoundPlayerPawn' has a wrong offset!");

// Class FortniteUI.FortHUDEquipProgressBase
// 0x0000 (0x0268 - 0x0268)
class UFortHUDEquipProgressBase final : public UFortHUDElementWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHUDEquipProgressBase">();
	}
	static class UFortHUDEquipProgressBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHUDEquipProgressBase>();
	}
};
static_assert(alignof(UFortHUDEquipProgressBase) == 0x000008, "Wrong alignment on UFortHUDEquipProgressBase");
static_assert(sizeof(UFortHUDEquipProgressBase) == 0x000268, "Wrong size on UFortHUDEquipProgressBase");

// Class FortniteUI.FortHUDObjectiveSizeInterface
// 0x0000 (0x0028 - 0x0028)
class IFortHUDObjectiveSizeInterface final : public IInterface
{
public:
	float GetHeightEstimate() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHUDObjectiveSizeInterface">();
	}
	static class IFortHUDObjectiveSizeInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFortHUDObjectiveSizeInterface>();
	}
};
static_assert(alignof(IFortHUDObjectiveSizeInterface) == 0x000008, "Wrong alignment on IFortHUDObjectiveSizeInterface");
static_assert(sizeof(IFortHUDObjectiveSizeInterface) == 0x000028, "Wrong size on IFortHUDObjectiveSizeInterface");

// Class FortniteUI.FortHUDVisibilityData
// 0x0040 (0x0070 - 0x0030)
class UFortHUDVisibilityData final : public UDataAsset
{
public:
	struct FGameplayTag                           HUDVisibilityGameplayTag;                          // 0x0030(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x0038(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ToolTipText;                                       // 0x0050(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Visible;                                           // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHUDVisibilityData">();
	}
	static class UFortHUDVisibilityData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHUDVisibilityData>();
	}
};
static_assert(alignof(UFortHUDVisibilityData) == 0x000008, "Wrong alignment on UFortHUDVisibilityData");
static_assert(sizeof(UFortHUDVisibilityData) == 0x000070, "Wrong size on UFortHUDVisibilityData");
static_assert(offsetof(UFortHUDVisibilityData, HUDVisibilityGameplayTag) == 0x000030, "Member 'UFortHUDVisibilityData::HUDVisibilityGameplayTag' has a wrong offset!");
static_assert(offsetof(UFortHUDVisibilityData, DisplayText) == 0x000038, "Member 'UFortHUDVisibilityData::DisplayText' has a wrong offset!");
static_assert(offsetof(UFortHUDVisibilityData, ToolTipText) == 0x000050, "Member 'UFortHUDVisibilityData::ToolTipText' has a wrong offset!");
static_assert(offsetof(UFortHUDVisibilityData, Visible) == 0x000068, "Member 'UFortHUDVisibilityData::Visible' has a wrong offset!");

// Class FortniteUI.FortItemBaseWidget
// 0x0048 (0x0280 - 0x0238)
class UFortItemBaseWidget : public UCommonUserWidget
{
public:
	struct FFortItemQuantityPair                  ItemQuantityPair;                                  // 0x0238(0x0040)(NativeAccessSpecifierPrivate)
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleItemCountChanged(class UFortItemDefinition* Definition, int32 Delta);
	void OnItemCountChanged(int32 NewCount);
	void OnItemDefinitionChanged();
	void SetItemDefinitionToRepresent(class UFortItemDefinition* InItemDefinition);
	bool SetItemQuantityPairToRepresent(const struct FFortItemQuantityPair& InItemQuantityPair);

	class UFortItemDefinition* GetItemDefinition() const;
	int32 GetQuantity() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemBaseWidget">();
	}
	static class UFortItemBaseWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemBaseWidget>();
	}
};
static_assert(alignof(UFortItemBaseWidget) == 0x000008, "Wrong alignment on UFortItemBaseWidget");
static_assert(sizeof(UFortItemBaseWidget) == 0x000280, "Wrong size on UFortItemBaseWidget");
static_assert(offsetof(UFortItemBaseWidget, ItemQuantityPair) == 0x000238, "Member 'UFortItemBaseWidget::ItemQuantityPair' has a wrong offset!");
static_assert(offsetof(UFortItemBaseWidget, ItemDefinition) == 0x000278, "Member 'UFortItemBaseWidget::ItemDefinition' has a wrong offset!");

// Class FortniteUI.FortItemCardUtilities
// 0x0000 (0x0028 - 0x0028)
class UFortItemCardUtilities final : public UBlueprintFunctionLibrary
{
public:
	static struct FVector2D GetCardDimensions(const EFortItemType ItemType, const EFortItemCardSize CardSize, const bool IsReward, const bool UseNewItemCardSizes);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemCardUtilities">();
	}
	static class UFortItemCardUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemCardUtilities>();
	}
};
static_assert(alignof(UFortItemCardUtilities) == 0x000008, "Wrong alignment on UFortItemCardUtilities");
static_assert(sizeof(UFortItemCardUtilities) == 0x000028, "Wrong size on UFortItemCardUtilities");

// Class FortniteUI.FortItemIcon
// 0x0128 (0x0230 - 0x0108)
class UFortItemIcon final : public UWidget
{
public:
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBrushSize                                BrushSize;                                         // 0x0110(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0114(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShadow;                                           // 0x0124(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SmallPreviewImageBrush;                            // 0x0138(0x0088)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C0[0x70];                                     // 0x01C0(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBrushSize(EFortBrushSize InBrushSize);
	void SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
	void SetItemDefinition(class UFortItemDefinition* InItemDefinition);
	void SetOpacity(float InOpacity);
	void SetShadowColorAndOpacity(const struct FLinearColor& InColorAndOpacity);

	bool IsLoading() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemIcon">();
	}
	static class UFortItemIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemIcon>();
	}
};
static_assert(alignof(UFortItemIcon) == 0x000008, "Wrong alignment on UFortItemIcon");
static_assert(sizeof(UFortItemIcon) == 0x000230, "Wrong size on UFortItemIcon");
static_assert(offsetof(UFortItemIcon, ItemDefinition) == 0x000108, "Member 'UFortItemIcon::ItemDefinition' has a wrong offset!");
static_assert(offsetof(UFortItemIcon, BrushSize) == 0x000110, "Member 'UFortItemIcon::BrushSize' has a wrong offset!");
static_assert(offsetof(UFortItemIcon, ColorAndOpacity) == 0x000114, "Member 'UFortItemIcon::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UFortItemIcon, bShadow) == 0x000124, "Member 'UFortItemIcon::bShadow' has a wrong offset!");
static_assert(offsetof(UFortItemIcon, ShadowColorAndOpacity) == 0x000128, "Member 'UFortItemIcon::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UFortItemIcon, SmallPreviewImageBrush) == 0x000138, "Member 'UFortItemIcon::SmallPreviewImageBrush' has a wrong offset!");

// Class FortniteUI.FortItemInfoWidget
// 0x0000 (0x0238 - 0x0238)
class UFortItemInfoWidget : public UCommonUserWidget
{
public:
	void PopulateUsingItem(class UFortItem* NewItem);
	void PopulateUsingItemDefinition(class UFortItemDefinition* NewItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemInfoWidget">();
	}
	static class UFortItemInfoWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemInfoWidget>();
	}
};
static_assert(alignof(UFortItemInfoWidget) == 0x000008, "Wrong alignment on UFortItemInfoWidget");
static_assert(sizeof(UFortItemInfoWidget) == 0x000238, "Wrong size on UFortItemInfoWidget");

// Class FortniteUI.FortItemInspectionScreen
// 0x00D0 (0x0510 - 0x0440)
class UFortItemInspectionScreen : public UFortActivatablePanelWithItemPreview
{
public:
	EFortItemInspectionMode                       CurrentInspectMode;                                // 0x0440(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_441[0x3];                                      // 0x0441(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UFortItem>               InspectedItem;                                     // 0x0444(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UpgradeAllowed;                                    // 0x044C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EvolveAllowed;                                     // 0x044D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FavoriteAllowed;                                   // 0x044E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          RarityUpgradingAllowed;                            // 0x044F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsPreviewing;                                      // 0x0450(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasSeenRefundHelpPrompt;                          // 0x0451(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_452[0x6];                                      // 0x0452(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemInspectCycleWidget*            CycleWidget;                                       // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagQuery                      InspectAnimationTag;                               // 0x0460(0x0048)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortAlterationModOptinScreenBase> AlterationModOptinScreenClass;                     // 0x04A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortAlterationModScreenBase> AlterationModScreenClass;                          // 0x04B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UDataTable>              RefundDescriptionsDataTable;                       // 0x04B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4E0[0x30];                                     // 0x04E0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DoAlterationModification();
	class UFortItemInspectCycleWidget* GetCycleWidget();
	void HandleDifferentInspectionModeSetBP();
	void HandleDifferentItemToInspectSetBP();
	void HandleIsPreviewingChanged();
	void HandleItemToInspectChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);
	void HandleItemToInspectChangedBP();
	void HandleItemToInspectDestroyed();
	void HandleItemToInspectDestroyedBP();
	void OpenItemInspect(class UFortItem* ItemToInspect, EFortItemInspectionMode Mode, bool ShouldAllowUpgrading, bool ShouldAllowEvolution, bool ShouldAllowFavorite, bool IsTemporaryItem, bool bAllowRarityUpgrading);
	void SetAttemptingConversion(bool bIsAttemptingConversion);
	void SetInspectionMode(EFortItemInspectionMode NewInspectMode);
	void SetItemToRepresent(class UFortItem* Item);

	bool DoesItemHaveLegacyAlterations() const;
	class FText GetRefundDescriptionText() const;
	class UFortAccountItem* GetRefundResultItem() const;
	bool IsItemSlottedInCollectionBook(const class UFortItem* Item) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemInspectionScreen">();
	}
	static class UFortItemInspectionScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemInspectionScreen>();
	}
};
static_assert(alignof(UFortItemInspectionScreen) == 0x000008, "Wrong alignment on UFortItemInspectionScreen");
static_assert(sizeof(UFortItemInspectionScreen) == 0x000510, "Wrong size on UFortItemInspectionScreen");
static_assert(offsetof(UFortItemInspectionScreen, CurrentInspectMode) == 0x000440, "Member 'UFortItemInspectionScreen::CurrentInspectMode' has a wrong offset!");
static_assert(offsetof(UFortItemInspectionScreen, InspectedItem) == 0x000444, "Member 'UFortItemInspectionScreen::InspectedItem' has a wrong offset!");
static_assert(offsetof(UFortItemInspectionScreen, UpgradeAllowed) == 0x00044C, "Member 'UFortItemInspectionScreen::UpgradeAllowed' has a wrong offset!");
static_assert(offsetof(UFortItemInspectionScreen, EvolveAllowed) == 0x00044D, "Member 'UFortItemInspectionScreen::EvolveAllowed' has a wrong offset!");
static_assert(offsetof(UFortItemInspectionScreen, FavoriteAllowed) == 0x00044E, "Member 'UFortItemInspectionScreen::FavoriteAllowed' has a wrong offset!");
static_assert(offsetof(UFortItemInspectionScreen, RarityUpgradingAllowed) == 0x00044F, "Member 'UFortItemInspectionScreen::RarityUpgradingAllowed' has a wrong offset!");
static_assert(offsetof(UFortItemInspectionScreen, IsPreviewing) == 0x000450, "Member 'UFortItemInspectionScreen::IsPreviewing' has a wrong offset!");
static_assert(offsetof(UFortItemInspectionScreen, bHasSeenRefundHelpPrompt) == 0x000451, "Member 'UFortItemInspectionScreen::bHasSeenRefundHelpPrompt' has a wrong offset!");
static_assert(offsetof(UFortItemInspectionScreen, CycleWidget) == 0x000458, "Member 'UFortItemInspectionScreen::CycleWidget' has a wrong offset!");
static_assert(offsetof(UFortItemInspectionScreen, InspectAnimationTag) == 0x000460, "Member 'UFortItemInspectionScreen::InspectAnimationTag' has a wrong offset!");
static_assert(offsetof(UFortItemInspectionScreen, AlterationModOptinScreenClass) == 0x0004A8, "Member 'UFortItemInspectionScreen::AlterationModOptinScreenClass' has a wrong offset!");
static_assert(offsetof(UFortItemInspectionScreen, AlterationModScreenClass) == 0x0004B0, "Member 'UFortItemInspectionScreen::AlterationModScreenClass' has a wrong offset!");
static_assert(offsetof(UFortItemInspectionScreen, RefundDescriptionsDataTable) == 0x0004B8, "Member 'UFortItemInspectionScreen::RefundDescriptionsDataTable' has a wrong offset!");

// Class FortniteUI.FortItemInspectCycleWidget
// 0x0050 (0x0288 - 0x0238)
class UFortItemInspectCycleWidget : public UCommonUserWidget
{
public:
	UMulticastDelegateProperty_                   OnItemToRepresentChanged;                          // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UFortItemTileView>       ItemTileView;                                      // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFortItem>               ItemToRepresent;                                   // 0x0250(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    PreviousItemActionRowHandle;                       // 0x0258(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    NextItemActionRowHandle;                           // 0x0268(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_278[0x10];                                     // 0x0278(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnItemCycled(class UFortItem* OldItem, class UFortItem* NewItem, int32 OffsetFromPreviousItem);
	void SelectItemWithOffset(int32 Offset);
	void SelectNextItem();
	void SelectPreviousItem();
	void SetItemToRepresent(const class UFortItem* NewItemToRepresent);
	void SetOwningItemInspectScreen(class UFortItemInspectionScreen* ItemInspect);
	void SetupActionHandlers();

	class UFortItem* GetItemWithOffset_BP(int32 IndexOffset) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemInspectCycleWidget">();
	}
	static class UFortItemInspectCycleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemInspectCycleWidget>();
	}
};
static_assert(alignof(UFortItemInspectCycleWidget) == 0x000008, "Wrong alignment on UFortItemInspectCycleWidget");
static_assert(sizeof(UFortItemInspectCycleWidget) == 0x000288, "Wrong size on UFortItemInspectCycleWidget");
static_assert(offsetof(UFortItemInspectCycleWidget, OnItemToRepresentChanged) == 0x000238, "Member 'UFortItemInspectCycleWidget::OnItemToRepresentChanged' has a wrong offset!");
static_assert(offsetof(UFortItemInspectCycleWidget, ItemTileView) == 0x000248, "Member 'UFortItemInspectCycleWidget::ItemTileView' has a wrong offset!");
static_assert(offsetof(UFortItemInspectCycleWidget, ItemToRepresent) == 0x000250, "Member 'UFortItemInspectCycleWidget::ItemToRepresent' has a wrong offset!");
static_assert(offsetof(UFortItemInspectCycleWidget, PreviousItemActionRowHandle) == 0x000258, "Member 'UFortItemInspectCycleWidget::PreviousItemActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortItemInspectCycleWidget, NextItemActionRowHandle) == 0x000268, "Member 'UFortItemInspectCycleWidget::NextItemActionRowHandle' has a wrong offset!");

// Class FortniteUI.FortItemListEntryButton
// 0x0038 (0x0B68 - 0x0B30)
class UFortItemListEntryButton final : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x10];                                     // 0x0B30(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMultiSizeItemCard*                 ItemWidget;                                        // 0x0B40(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFortItem>               Item;                                              // 0x0B48(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortItemCardSize                             ItemCardSize;                                      // 0x0B50(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsRewardCard;                                      // 0x0B51(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B52[0x6];                                      // 0x0B52(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IFortItemViewContextInterface> ItemViewContext;                                   // 0x0B58(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemListEntryButton">();
	}
	static class UFortItemListEntryButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemListEntryButton>();
	}
};
static_assert(alignof(UFortItemListEntryButton) == 0x000008, "Wrong alignment on UFortItemListEntryButton");
static_assert(sizeof(UFortItemListEntryButton) == 0x000B68, "Wrong size on UFortItemListEntryButton");
static_assert(offsetof(UFortItemListEntryButton, ItemWidget) == 0x000B40, "Member 'UFortItemListEntryButton::ItemWidget' has a wrong offset!");
static_assert(offsetof(UFortItemListEntryButton, Item) == 0x000B48, "Member 'UFortItemListEntryButton::Item' has a wrong offset!");
static_assert(offsetof(UFortItemListEntryButton, ItemCardSize) == 0x000B50, "Member 'UFortItemListEntryButton::ItemCardSize' has a wrong offset!");
static_assert(offsetof(UFortItemListEntryButton, IsRewardCard) == 0x000B51, "Member 'UFortItemListEntryButton::IsRewardCard' has a wrong offset!");
static_assert(offsetof(UFortItemListEntryButton, ItemViewContext) == 0x000B58, "Member 'UFortItemListEntryButton::ItemViewContext' has a wrong offset!");

// Class FortniteUI.FortNullItem
// 0x0000 (0x0088 - 0x0088)
class UFortNullItem final : public UFortItem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortNullItem">();
	}
	static class UFortNullItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortNullItem>();
	}
};
static_assert(alignof(UFortNullItem) == 0x000008, "Wrong alignment on UFortNullItem");
static_assert(sizeof(UFortNullItem) == 0x000088, "Wrong size on UFortNullItem");

// Class FortniteUI.FortItemManagementEquipSlot
// 0x0010 (0x0250 - 0x0240)
class UFortItemManagementEquipSlot final : public UFortUserWidget
{
public:
	int32                                         SlotIndex;                                         // 0x0240(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_244[0xC];                                      // 0x0244(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateInventoryChangedDelegate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemManagementEquipSlot">();
	}
	static class UFortItemManagementEquipSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemManagementEquipSlot>();
	}
};
static_assert(alignof(UFortItemManagementEquipSlot) == 0x000008, "Wrong alignment on UFortItemManagementEquipSlot");
static_assert(sizeof(UFortItemManagementEquipSlot) == 0x000250, "Wrong size on UFortItemManagementEquipSlot");
static_assert(offsetof(UFortItemManagementEquipSlot, SlotIndex) == 0x000240, "Member 'UFortItemManagementEquipSlot::SlotIndex' has a wrong offset!");

// Class FortniteUI.FortItemManagementInventoryPanel
// 0x0170 (0x03A8 - 0x0238)
class UFortItemManagementInventoryPanel final : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x50];                                     // 0x0238(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CurrentFilterName;                                 // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EInventoryContentSortType                     CurrentSortType;                                   // 0x0290(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonButton>              FilterTabButtonType;                               // 0x0298(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCommonButtonStyle>         FilterTabButtonStyle;                              // 0x02A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FFortItemManagementInventoryFilterTabLabelInfo> FilterTabLabelInfoArray;                           // 0x02A8(0x0010)(Edit, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UFortTabListWidgetBase*                 FilterTabList;                                     // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonLoadGuard*                       TileViewLoadGuard;                                 // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItemTileView*                      TileView;                                          // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           CraftingPanel;                                     // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonLoadGuard*                       CraftingTileViewLoadGuard;                         // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItemTileView*                      CraftingTileView;                                  // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           StoragePanel;                                      // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonLoadGuard*                       StorageTileViewLoadGuard;                          // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItemTileView*                      StorageTileView;                                   // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       MulchRestrictionReasonText;                        // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortItemCardSize                             SmallTileSize;                                     // 0x0308(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortItemCardSize                             LargeTileSize;                                     // 0x0309(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_30A[0x2];                                      // 0x030A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UFortItemManagementScreen> HostItemManagementScreen;                          // 0x030C(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_314[0x8C];                                     // 0x0314(0x008C)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortInventoryContext*                  InventoryContext;                                  // 0x03A0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AddItemStackToMulch(class UFortItem* Item, int32 Count);
	void AdvanceSelection();
	void CycleSortType();
	bool GetShouldPrioritizeFavorites();
	void HandleCraftItemStarted();
	void HandleCursorModeChanged(bool bCursorModeEnabled, class FName ActionName, class UUserWidget* CursorModeContentWidget);
	void HandleCursorModeChangedBP(bool bCursorModeEnabled, class FName ActionName, class UUserWidget* CursorModeContentWidget);
	void HandleCustomInventoryFilterChanged();
	void HandleDifferentFilterSetBP();
	void HandleDifferentFrontendInventoryFilterSetBP();
	void HandleDifferentItemManagementModeSetBP();
	void HandleDifferentSortTypeSetBP();
	void HandleFilterTabButtonCreated(class FName TabNameID, class UCommonButton* TabButton);
	void HandleFilterTabSelected(class FName TabNameID);
	void HandleFocusEquipSlotsBP();
	void HandleInventoryUpdatedEvent();
	void HandleQuickBarChangedBP(EFortQuickBars QuickBarType);
	void HandleSetOfItemsToMulchChangedBP();
	void MarkAllItemsAsSeen();
	void RefreshCraftingSort();
	void RequestFocusEquipSlots();
	void SetFilter(const class FName FilterName);
	void SetSortType(EInventoryContentSortType SortType);
	void SwitchPanelFocus();
	void TogglePrioritizeFavorites();
	void ToggleTileSize();
	void UpdateSchematicTiles();

	class FText GetQualifiedFilterDisplayName() const;
	TArray<EInventoryContentSortType> GetSupportedSortTypesForCurrentInventory() const;
	TArray<class UFortItemDefinition*> GetUpgradeItemDefinitionsForCurrentInventory() const;
	bool IsSwitchPanelAvailable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemManagementInventoryPanel">();
	}
	static class UFortItemManagementInventoryPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemManagementInventoryPanel>();
	}
};
static_assert(alignof(UFortItemManagementInventoryPanel) == 0x000008, "Wrong alignment on UFortItemManagementInventoryPanel");
static_assert(sizeof(UFortItemManagementInventoryPanel) == 0x0003A8, "Wrong size on UFortItemManagementInventoryPanel");
static_assert(offsetof(UFortItemManagementInventoryPanel, CurrentFilterName) == 0x000288, "Member 'UFortItemManagementInventoryPanel::CurrentFilterName' has a wrong offset!");
static_assert(offsetof(UFortItemManagementInventoryPanel, CurrentSortType) == 0x000290, "Member 'UFortItemManagementInventoryPanel::CurrentSortType' has a wrong offset!");
static_assert(offsetof(UFortItemManagementInventoryPanel, FilterTabButtonType) == 0x000298, "Member 'UFortItemManagementInventoryPanel::FilterTabButtonType' has a wrong offset!");
static_assert(offsetof(UFortItemManagementInventoryPanel, FilterTabButtonStyle) == 0x0002A0, "Member 'UFortItemManagementInventoryPanel::FilterTabButtonStyle' has a wrong offset!");
static_assert(offsetof(UFortItemManagementInventoryPanel, FilterTabLabelInfoArray) == 0x0002A8, "Member 'UFortItemManagementInventoryPanel::FilterTabLabelInfoArray' has a wrong offset!");
static_assert(offsetof(UFortItemManagementInventoryPanel, FilterTabList) == 0x0002B8, "Member 'UFortItemManagementInventoryPanel::FilterTabList' has a wrong offset!");
static_assert(offsetof(UFortItemManagementInventoryPanel, TileViewLoadGuard) == 0x0002C0, "Member 'UFortItemManagementInventoryPanel::TileViewLoadGuard' has a wrong offset!");
static_assert(offsetof(UFortItemManagementInventoryPanel, TileView) == 0x0002C8, "Member 'UFortItemManagementInventoryPanel::TileView' has a wrong offset!");
static_assert(offsetof(UFortItemManagementInventoryPanel, CraftingPanel) == 0x0002D0, "Member 'UFortItemManagementInventoryPanel::CraftingPanel' has a wrong offset!");
static_assert(offsetof(UFortItemManagementInventoryPanel, CraftingTileViewLoadGuard) == 0x0002D8, "Member 'UFortItemManagementInventoryPanel::CraftingTileViewLoadGuard' has a wrong offset!");
static_assert(offsetof(UFortItemManagementInventoryPanel, CraftingTileView) == 0x0002E0, "Member 'UFortItemManagementInventoryPanel::CraftingTileView' has a wrong offset!");
static_assert(offsetof(UFortItemManagementInventoryPanel, StoragePanel) == 0x0002E8, "Member 'UFortItemManagementInventoryPanel::StoragePanel' has a wrong offset!");
static_assert(offsetof(UFortItemManagementInventoryPanel, StorageTileViewLoadGuard) == 0x0002F0, "Member 'UFortItemManagementInventoryPanel::StorageTileViewLoadGuard' has a wrong offset!");
static_assert(offsetof(UFortItemManagementInventoryPanel, StorageTileView) == 0x0002F8, "Member 'UFortItemManagementInventoryPanel::StorageTileView' has a wrong offset!");
static_assert(offsetof(UFortItemManagementInventoryPanel, MulchRestrictionReasonText) == 0x000300, "Member 'UFortItemManagementInventoryPanel::MulchRestrictionReasonText' has a wrong offset!");
static_assert(offsetof(UFortItemManagementInventoryPanel, SmallTileSize) == 0x000308, "Member 'UFortItemManagementInventoryPanel::SmallTileSize' has a wrong offset!");
static_assert(offsetof(UFortItemManagementInventoryPanel, LargeTileSize) == 0x000309, "Member 'UFortItemManagementInventoryPanel::LargeTileSize' has a wrong offset!");
static_assert(offsetof(UFortItemManagementInventoryPanel, HostItemManagementScreen) == 0x00030C, "Member 'UFortItemManagementInventoryPanel::HostItemManagementScreen' has a wrong offset!");
static_assert(offsetof(UFortItemManagementInventoryPanel, InventoryContext) == 0x0003A0, "Member 'UFortItemManagementInventoryPanel::InventoryContext' has a wrong offset!");

// Class FortniteUI.FortItemManagementItemPopupMenu
// 0x0008 (0x0348 - 0x0340)
class UFortItemManagementItemPopupMenu final : public UFortPopupMenu
{
public:
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleCompareAction();
	void HandleItemChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);
	void MulchItem();

	class UFortItemManagementItemTileButton* GetHostButton() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemManagementItemPopupMenu">();
	}
	static class UFortItemManagementItemPopupMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemManagementItemPopupMenu>();
	}
};
static_assert(alignof(UFortItemManagementItemPopupMenu) == 0x000008, "Wrong alignment on UFortItemManagementItemPopupMenu");
static_assert(sizeof(UFortItemManagementItemPopupMenu) == 0x000348, "Wrong size on UFortItemManagementItemPopupMenu");

// Class FortniteUI.FortItemManagementItemTileButton
// 0x0070 (0x0BD8 - 0x0B68)
class UFortItemManagementItemTileButton final : public UFortItemTileButton
{
public:
	TWeakObjectPtr<class UFortItemManagementScreen> HostItemManagementScreen;                          // 0x0B68(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasTheItemToDetail;                                // 0x0B70(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          HasTheItemToCompareDetailsWith;                    // 0x0B71(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          HasAnItemMarkedForMulching;                        // 0x0B72(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B73[0x1];                                      // 0x0B73(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MulchCount;                                        // 0x0B74(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               NotCraftableOverlay;                               // 0x0B78(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuAnchor*                            PopupMenuAnchor;                                   // 0x0B80(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ShowCollectionBookIndicator;                       // 0x0B88(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ShowRefundIndicator;                               // 0x0B89(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B8A[0x46];                                     // 0x0B8A(0x0046)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortInventoryContext*                  InventoryContext;                                  // 0x0BD0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UWidget* GetPopupMenu();
	void HandleDifferentItemManagementModeSetBP();
	void HandleEquipSlotChanged(int32 EquipSlot);
	void HandleHasItemToCompareDetailsWithChanged();
	void HandleHasItemToDetailChanged();
	void HandleItemChangedBP();
	void HandleItemMulchStateChanged();
	void HandleShowCollectionBookIndicatorChanged();
	void HandleShowRefundIndicatorChanged();
	void OnSlotItemComplete(const class UFortAccountItem* SlottedItem, class FName SlotId);

	struct FHomebaseSquadSlotId GetHomebaseSquadSlotForItem() const;
	EFortItemManagementMode GetItemManagementMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemManagementItemTileButton">();
	}
	static class UFortItemManagementItemTileButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemManagementItemTileButton>();
	}
};
static_assert(alignof(UFortItemManagementItemTileButton) == 0x000008, "Wrong alignment on UFortItemManagementItemTileButton");
static_assert(sizeof(UFortItemManagementItemTileButton) == 0x000BD8, "Wrong size on UFortItemManagementItemTileButton");
static_assert(offsetof(UFortItemManagementItemTileButton, HostItemManagementScreen) == 0x000B68, "Member 'UFortItemManagementItemTileButton::HostItemManagementScreen' has a wrong offset!");
static_assert(offsetof(UFortItemManagementItemTileButton, HasTheItemToDetail) == 0x000B70, "Member 'UFortItemManagementItemTileButton::HasTheItemToDetail' has a wrong offset!");
static_assert(offsetof(UFortItemManagementItemTileButton, HasTheItemToCompareDetailsWith) == 0x000B71, "Member 'UFortItemManagementItemTileButton::HasTheItemToCompareDetailsWith' has a wrong offset!");
static_assert(offsetof(UFortItemManagementItemTileButton, HasAnItemMarkedForMulching) == 0x000B72, "Member 'UFortItemManagementItemTileButton::HasAnItemMarkedForMulching' has a wrong offset!");
static_assert(offsetof(UFortItemManagementItemTileButton, MulchCount) == 0x000B74, "Member 'UFortItemManagementItemTileButton::MulchCount' has a wrong offset!");
static_assert(offsetof(UFortItemManagementItemTileButton, NotCraftableOverlay) == 0x000B78, "Member 'UFortItemManagementItemTileButton::NotCraftableOverlay' has a wrong offset!");
static_assert(offsetof(UFortItemManagementItemTileButton, PopupMenuAnchor) == 0x000B80, "Member 'UFortItemManagementItemTileButton::PopupMenuAnchor' has a wrong offset!");
static_assert(offsetof(UFortItemManagementItemTileButton, ShowCollectionBookIndicator) == 0x000B88, "Member 'UFortItemManagementItemTileButton::ShowCollectionBookIndicator' has a wrong offset!");
static_assert(offsetof(UFortItemManagementItemTileButton, ShowRefundIndicator) == 0x000B89, "Member 'UFortItemManagementItemTileButton::ShowRefundIndicator' has a wrong offset!");
static_assert(offsetof(UFortItemManagementItemTileButton, InventoryContext) == 0x000BD0, "Member 'UFortItemManagementItemTileButton::InventoryContext' has a wrong offset!");

// Class FortniteUI.FortItemManagementItemDetailsPanel
// 0x0020 (0x02C8 - 0x02A8)
class UFortItemManagementItemDetailsPanel : public UFortItemDetailsHostPanel
{
public:
	bool                                          HasItemMarkedForMulching;                          // 0x02A8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UFortItemManagementScreen> HostItemManagementScreen;                          // 0x02AC(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B4[0xC];                                      // 0x02B4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortInventoryContext*                  InventoryContext;                                  // 0x02C0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleHasItemMarkedForMulchingChanged();
	void HandleHostSet();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemManagementItemDetailsPanel">();
	}
	static class UFortItemManagementItemDetailsPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemManagementItemDetailsPanel>();
	}
};
static_assert(alignof(UFortItemManagementItemDetailsPanel) == 0x000008, "Wrong alignment on UFortItemManagementItemDetailsPanel");
static_assert(sizeof(UFortItemManagementItemDetailsPanel) == 0x0002C8, "Wrong size on UFortItemManagementItemDetailsPanel");
static_assert(offsetof(UFortItemManagementItemDetailsPanel, HasItemMarkedForMulching) == 0x0002A8, "Member 'UFortItemManagementItemDetailsPanel::HasItemMarkedForMulching' has a wrong offset!");
static_assert(offsetof(UFortItemManagementItemDetailsPanel, HostItemManagementScreen) == 0x0002AC, "Member 'UFortItemManagementItemDetailsPanel::HostItemManagementScreen' has a wrong offset!");
static_assert(offsetof(UFortItemManagementItemDetailsPanel, InventoryContext) == 0x0002C0, "Member 'UFortItemManagementItemDetailsPanel::InventoryContext' has a wrong offset!");

// Class FortniteUI.FortItemManagementMulchDetailsPanel
// 0x0028 (0x0260 - 0x0238)
class UFortItemManagementMulchDetailsPanel final : public UCommonUserWidget
{
public:
	class UFortItemQuantityListBase*              ResourceList;                                      // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TScriptInterface<class IFortItemManagementMulchPanel> HostItemManagementMulchPanel;                      // 0x0240(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_250[0x8];                                      // 0x0250(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortInventoryContext*                  InventoryContext;                                  // 0x0258(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CommitMulch();
	void HandleHostSet();
	void HandleSetOfItemsToMulchChangedBP();

	TArray<int32> GetItemCountsToMulch() const;
	TArray<class UFortItem*> GetItemsToMulch() const;
	bool IsSpaceAvailableForMulch() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemManagementMulchDetailsPanel">();
	}
	static class UFortItemManagementMulchDetailsPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemManagementMulchDetailsPanel>();
	}
};
static_assert(alignof(UFortItemManagementMulchDetailsPanel) == 0x000008, "Wrong alignment on UFortItemManagementMulchDetailsPanel");
static_assert(sizeof(UFortItemManagementMulchDetailsPanel) == 0x000260, "Wrong size on UFortItemManagementMulchDetailsPanel");
static_assert(offsetof(UFortItemManagementMulchDetailsPanel, ResourceList) == 0x000238, "Member 'UFortItemManagementMulchDetailsPanel::ResourceList' has a wrong offset!");
static_assert(offsetof(UFortItemManagementMulchDetailsPanel, HostItemManagementMulchPanel) == 0x000240, "Member 'UFortItemManagementMulchDetailsPanel::HostItemManagementMulchPanel' has a wrong offset!");
static_assert(offsetof(UFortItemManagementMulchDetailsPanel, InventoryContext) == 0x000258, "Member 'UFortItemManagementMulchDetailsPanel::InventoryContext' has a wrong offset!");

// Class FortniteUI.FortFrontendInventoryFilterFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UFortFrontendInventoryFilterFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FText ToText(EFortFrontendInventoryFilter FrontendInventoryFilter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortFrontendInventoryFilterFunctionLibrary">();
	}
	static class UFortFrontendInventoryFilterFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortFrontendInventoryFilterFunctionLibrary>();
	}
};
static_assert(alignof(UFortFrontendInventoryFilterFunctionLibrary) == 0x000008, "Wrong alignment on UFortFrontendInventoryFilterFunctionLibrary");
static_assert(sizeof(UFortFrontendInventoryFilterFunctionLibrary) == 0x000028, "Wrong size on UFortFrontendInventoryFilterFunctionLibrary");

// Class FortniteUI.FortItemReceivedScreen
// 0x0010 (0x04A8 - 0x0498)
class UFortItemReceivedScreen : public UFortItemReceivedWidgetBase
{
public:
	UMulticastDelegateProperty_                   OnFinalGiftingComplete;                            // 0x0498(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemReceivedScreen">();
	}
	static class UFortItemReceivedScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemReceivedScreen>();
	}
};
static_assert(alignof(UFortItemReceivedScreen) == 0x000008, "Wrong alignment on UFortItemReceivedScreen");
static_assert(sizeof(UFortItemReceivedScreen) == 0x0004A8, "Wrong size on UFortItemReceivedScreen");
static_assert(offsetof(UFortItemReceivedScreen, OnFinalGiftingComplete) == 0x000498, "Member 'UFortItemReceivedScreen::OnFinalGiftingComplete' has a wrong offset!");

// Class FortniteUI.FortItemViewContextInterface
// 0x0000 (0x0028 - 0x0028)
class IFortItemViewContextInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemViewContextInterface">();
	}
	static class IFortItemViewContextInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFortItemViewContextInterface>();
	}
};
static_assert(alignof(IFortItemViewContextInterface) == 0x000008, "Wrong alignment on IFortItemViewContextInterface");
static_assert(sizeof(IFortItemViewContextInterface) == 0x000028, "Wrong size on IFortItemViewContextInterface");

// Class FortniteUI.FortItemWidget
// 0x0038 (0x0838 - 0x0800)
class UFortItemWidget final : public UFortBaseButton
{
public:
	TDelegate<void(class UFortItem** ItemToCompare)> OnGetItemToCompareDelegate;                        // 0x0800(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   CooldownMaterialParameterName;                     // 0x0810(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               CooldownMaterial;                                  // 0x0818(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastCooldownTimeInSeconds;                         // 0x0820(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastCooldownPct;                                   // 0x0824(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         LastIsActivatable : 1;                             // 0x0828(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_829[0xB];                                      // 0x0829(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QuantityOverride;                                  // 0x0834(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BPOnActivatableChanged(bool bNewActivatable);
	void BPOnCooldownSecondsChanged(int32 NewCooldownSeconds);
	void BPOnItemChanged();
	void BPOnItemSet(class UFortItem* NewItem);
	class UFortItem* GetItemToCompare();
	void OnFortItemDestroyed();
	void OnFortItemUpdated(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);
	void OnGetItemToCompare__DelegateSignature(class UFortItem** ItemToCompare);
	void SetCooldownMaterial(class UMaterialInstanceDynamic* NewCooldownMaterial);
	void SetItem(const class UFortItem* InItem, int32 Param_QuantityOverride);
	void SetOnGetItemToCompareDelegate(TDelegate<void(class UFortItem** ItemToCompare)> InDelegate);

	class FText GetDescription() const;
	class FText GetDisplayName() const;
	float GetDurability() const;
	class UTexture* GetIconTexture(EFortBrushSize InBrushSize) const;
	class UFortItem* GetItem() const;
	int32 GetLevel() const;
	EFortRarity GetRarity() const;
	int32 GetStackCount() const;
	float GetType() const;
	bool HasDurability() const;
	bool HasLevel() const;
	bool HasSecondaryCategory() const;
	bool HasTertiaryCategory() const;
	bool IsEquipped() const;
	bool IsInventoryOverflowItem() const;
	bool IsItemValid() const;
	bool IsSchematic() const;
	bool IsSlotted() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemWidget">();
	}
	static class UFortItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemWidget>();
	}
};
static_assert(alignof(UFortItemWidget) == 0x000008, "Wrong alignment on UFortItemWidget");
static_assert(sizeof(UFortItemWidget) == 0x000838, "Wrong size on UFortItemWidget");
static_assert(offsetof(UFortItemWidget, OnGetItemToCompareDelegate) == 0x000800, "Member 'UFortItemWidget::OnGetItemToCompareDelegate' has a wrong offset!");
static_assert(offsetof(UFortItemWidget, CooldownMaterialParameterName) == 0x000810, "Member 'UFortItemWidget::CooldownMaterialParameterName' has a wrong offset!");
static_assert(offsetof(UFortItemWidget, CooldownMaterial) == 0x000818, "Member 'UFortItemWidget::CooldownMaterial' has a wrong offset!");
static_assert(offsetof(UFortItemWidget, LastCooldownTimeInSeconds) == 0x000820, "Member 'UFortItemWidget::LastCooldownTimeInSeconds' has a wrong offset!");
static_assert(offsetof(UFortItemWidget, LastCooldownPct) == 0x000824, "Member 'UFortItemWidget::LastCooldownPct' has a wrong offset!");
static_assert(offsetof(UFortItemWidget, QuantityOverride) == 0x000834, "Member 'UFortItemWidget::QuantityOverride' has a wrong offset!");

// Class FortniteUI.FortJournalQuestDetails
// 0x0008 (0x0240 - 0x0238)
class UFortJournalQuestDetails : public UCommonUserWidget
{
public:
	class UFortQuestItem*                         CurrentQuest;                                      // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool CanGotoQuest();
	bool CanPartyLeaderPlayQuest();
	bool CanPlayQuest();
	EFortTheaterMapTileType GetActiveMissionTileType();
	void GetFutureObjectives(TArray<class UFortQuestObjectiveInfo*>* FutureObjectives);
	void GetRewards(TArray<struct FFortItemInstanceQuantityPair>* OutRewards, TArray<struct FFortItemInstanceQuantityPair>* OutSelectableRewards);
	void GetVisibleObjectives(TArray<class UFortQuestObjectiveInfo*>* VisibleObjectives);
	void HandleCurrentQuestChangedBP();
	void SetCurrentQuest(class UFortQuestItem* InCurrentQuest);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortJournalQuestDetails">();
	}
	static class UFortJournalQuestDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortJournalQuestDetails>();
	}
};
static_assert(alignof(UFortJournalQuestDetails) == 0x000008, "Wrong alignment on UFortJournalQuestDetails");
static_assert(sizeof(UFortJournalQuestDetails) == 0x000240, "Wrong size on UFortJournalQuestDetails");
static_assert(offsetof(UFortJournalQuestDetails, CurrentQuest) == 0x000238, "Member 'UFortJournalQuestDetails::CurrentQuest' has a wrong offset!");

// Class FortniteUI.FortJournalQuestProgressBar
// 0x0010 (0x0248 - 0x0238)
class UFortJournalQuestProgressBar : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UFortQuestObjectiveInfo> QuestObjectiveInfo;                                // 0x0240(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void GetProgressDetails(class FText* OutNumerator, class FText* OutDenominator, float* OutFraction);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortJournalQuestProgressBar">();
	}
	static class UFortJournalQuestProgressBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortJournalQuestProgressBar>();
	}
};
static_assert(alignof(UFortJournalQuestProgressBar) == 0x000008, "Wrong alignment on UFortJournalQuestProgressBar");
static_assert(sizeof(UFortJournalQuestProgressBar) == 0x000248, "Wrong size on UFortJournalQuestProgressBar");
static_assert(offsetof(UFortJournalQuestProgressBar, QuestObjectiveInfo) == 0x000240, "Member 'UFortJournalQuestProgressBar::QuestObjectiveInfo' has a wrong offset!");

// Class FortniteUI.FortKeybindWidget
// 0x0658 (0x0890 - 0x0238)
class UFortKeybindWidget : public UCommonUserWidget
{
public:
	class FName                                   BoundAction;                                       // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisScale;                                         // 0x0240(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   BoundKeyFallback;                                  // 0x0248(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonInputType                              InputTypeOverride;                                 // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonGamepadType                            GamepadTypeOverride;                               // 0x0261(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_262[0x2];                                      // 0x0262(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PresetNameOverride;                                // 0x0264(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForcedHoldKeybind;                                // 0x026C(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortKeybindForcedHoldStatus                  ForcedHoldKeybindStatus;                           // 0x026D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHoldKeybind;                                    // 0x026E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowKeybindBorder;                                // 0x026F(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              FrameSize;                                         // 0x0270(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowTimeCountDown;                                // 0x0278(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   BoundKey;                                          // 0x0280(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                            HoldProgressBrush;                                 // 0x0298(0x0088)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            KeyBindTextBorder;                                 // 0x0320(0x0088)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateFontInfo                         KeyBindTextFont;                                   // 0x03A8(0x0050)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateFontInfo                         CountdownTextFont;                                 // 0x03F8(0x0050)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMeasuredText                          CountdownText;                                     // 0x0448(0x0028)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FMeasuredText                          KeybindText;                                       // 0x0470(0x0028)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                KeybindTextPadding;                                // 0x0498(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector2D                              KeybindFrameMinimumSize;                           // 0x04A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PercentageMaterialParameterName;                   // 0x04B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               ProgressPercentageMID;                             // 0x04B8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortBrushSize                                BrushSize;                                         // 0x04C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C1[0x7];                                      // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortMultiSizeBrush                    FrameMultiBrush;                                   // 0x04C8(0x0330)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_7F8[0x10];                                     // 0x07F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CachedKeyBrush;                                    // 0x0808(0x0088)(Transient, NativeAccessSpecifierPrivate)

public:
	void SetAxisScale(const float NewValue);
	void SetBoundAction(class FName NewBoundAction);
	void SetBoundKey(const struct FKey& NewBoundAction);
	void SetBrushSize(EFortBrushSize InBrushSize);
	void SetForcedHoldKeybind(bool InForcedHoldKeybind);
	void SetForcedHoldKeybindStatus(EFortKeybindForcedHoldStatus InForcedHoldKeybindStatus);
	void SetPresetNameOverride(const class FName NewValue);
	void SetShowProgressCountDown(bool bShow);
	void StartHoldProgress(class FName HoldActionName, float HoldDuration);
	void StopHoldProgress(class FName HoldActionName, bool bCompletedSuccessfully);
	void UpdateKeybindWidget();

	bool GetBrushForKey(EFortBrushSize InBrushSize, struct FSlateBrush* Brush) const;
	EFortBrushSize GetBrushSize() const;
	bool IsBoundKeyValid() const;
	bool IsHoldKeybind() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortKeybindWidget">();
	}
	static class UFortKeybindWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortKeybindWidget>();
	}
};
static_assert(alignof(UFortKeybindWidget) == 0x000008, "Wrong alignment on UFortKeybindWidget");
static_assert(sizeof(UFortKeybindWidget) == 0x000890, "Wrong size on UFortKeybindWidget");
static_assert(offsetof(UFortKeybindWidget, BoundAction) == 0x000238, "Member 'UFortKeybindWidget::BoundAction' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, AxisScale) == 0x000240, "Member 'UFortKeybindWidget::AxisScale' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, BoundKeyFallback) == 0x000248, "Member 'UFortKeybindWidget::BoundKeyFallback' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, InputTypeOverride) == 0x000260, "Member 'UFortKeybindWidget::InputTypeOverride' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, GamepadTypeOverride) == 0x000261, "Member 'UFortKeybindWidget::GamepadTypeOverride' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, PresetNameOverride) == 0x000264, "Member 'UFortKeybindWidget::PresetNameOverride' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, bForcedHoldKeybind) == 0x00026C, "Member 'UFortKeybindWidget::bForcedHoldKeybind' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, ForcedHoldKeybindStatus) == 0x00026D, "Member 'UFortKeybindWidget::ForcedHoldKeybindStatus' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, bIsHoldKeybind) == 0x00026E, "Member 'UFortKeybindWidget::bIsHoldKeybind' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, bShowKeybindBorder) == 0x00026F, "Member 'UFortKeybindWidget::bShowKeybindBorder' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, FrameSize) == 0x000270, "Member 'UFortKeybindWidget::FrameSize' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, bShowTimeCountDown) == 0x000278, "Member 'UFortKeybindWidget::bShowTimeCountDown' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, BoundKey) == 0x000280, "Member 'UFortKeybindWidget::BoundKey' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, HoldProgressBrush) == 0x000298, "Member 'UFortKeybindWidget::HoldProgressBrush' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, KeyBindTextBorder) == 0x000320, "Member 'UFortKeybindWidget::KeyBindTextBorder' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, KeyBindTextFont) == 0x0003A8, "Member 'UFortKeybindWidget::KeyBindTextFont' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, CountdownTextFont) == 0x0003F8, "Member 'UFortKeybindWidget::CountdownTextFont' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, CountdownText) == 0x000448, "Member 'UFortKeybindWidget::CountdownText' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, KeybindText) == 0x000470, "Member 'UFortKeybindWidget::KeybindText' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, KeybindTextPadding) == 0x000498, "Member 'UFortKeybindWidget::KeybindTextPadding' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, KeybindFrameMinimumSize) == 0x0004A8, "Member 'UFortKeybindWidget::KeybindFrameMinimumSize' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, PercentageMaterialParameterName) == 0x0004B0, "Member 'UFortKeybindWidget::PercentageMaterialParameterName' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, ProgressPercentageMID) == 0x0004B8, "Member 'UFortKeybindWidget::ProgressPercentageMID' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, BrushSize) == 0x0004C0, "Member 'UFortKeybindWidget::BrushSize' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, FrameMultiBrush) == 0x0004C8, "Member 'UFortKeybindWidget::FrameMultiBrush' has a wrong offset!");
static_assert(offsetof(UFortKeybindWidget, CachedKeyBrush) == 0x000808, "Member 'UFortKeybindWidget::CachedKeyBrush' has a wrong offset!");

// Class FortniteUI.FortLayoutQuestNode
// 0x0020 (0x0258 - 0x0238)
class UFortLayoutQuestNode : public UCommonUserWidget
{
public:
	class UFortQuestMapQuestTile*                 QuestTile;                                         // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestNodeIndex;                                    // 0x0240(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_244[0x14];                                     // 0x0244(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLayoutQuestNode">();
	}
	static class UFortLayoutQuestNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLayoutQuestNode>();
	}
};
static_assert(alignof(UFortLayoutQuestNode) == 0x000008, "Wrong alignment on UFortLayoutQuestNode");
static_assert(sizeof(UFortLayoutQuestNode) == 0x000258, "Wrong size on UFortLayoutQuestNode");
static_assert(offsetof(UFortLayoutQuestNode, QuestTile) == 0x000238, "Member 'UFortLayoutQuestNode::QuestTile' has a wrong offset!");
static_assert(offsetof(UFortLayoutQuestNode, QuestNodeIndex) == 0x000240, "Member 'UFortLayoutQuestNode::QuestNodeIndex' has a wrong offset!");

// Class FortniteUI.FortLiveStreamGrantWindowExpires
// 0x0000 (0x0238 - 0x0238)
class UFortLiveStreamGrantWindowExpires : public UCommonUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLiveStreamGrantWindowExpires">();
	}
	static class UFortLiveStreamGrantWindowExpires* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLiveStreamGrantWindowExpires>();
	}
};
static_assert(alignof(UFortLiveStreamGrantWindowExpires) == 0x000008, "Wrong alignment on UFortLiveStreamGrantWindowExpires");
static_assert(sizeof(UFortLiveStreamGrantWindowExpires) == 0x000238, "Wrong size on UFortLiveStreamGrantWindowExpires");

// Class FortniteUI.FortLlamaStoreData
// 0x0040 (0x0070 - 0x0030)
class UFortLlamaStoreData final : public UPrimaryDataAsset
{
public:
	TArray<class FText>                           RandomLoadingTexts;                                // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortProgressModal>         ProgressModalClass;                                // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NotEnoughCurrencyDialogCloseAction;                // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortStoreFrontOfferDetailsWidgetBase> InspectWidgetClass;                                // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShowOfferDelay;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonActivatablePanel>    StoreOpeningCardPackClass;                         // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortOpenCardPackModal>     UnopenedCardpacksModalClass;                       // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLlamaStoreData">();
	}
	static class UFortLlamaStoreData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLlamaStoreData>();
	}
};
static_assert(alignof(UFortLlamaStoreData) == 0x000008, "Wrong alignment on UFortLlamaStoreData");
static_assert(sizeof(UFortLlamaStoreData) == 0x000070, "Wrong size on UFortLlamaStoreData");
static_assert(offsetof(UFortLlamaStoreData, RandomLoadingTexts) == 0x000030, "Member 'UFortLlamaStoreData::RandomLoadingTexts' has a wrong offset!");
static_assert(offsetof(UFortLlamaStoreData, ProgressModalClass) == 0x000040, "Member 'UFortLlamaStoreData::ProgressModalClass' has a wrong offset!");
static_assert(offsetof(UFortLlamaStoreData, NotEnoughCurrencyDialogCloseAction) == 0x000048, "Member 'UFortLlamaStoreData::NotEnoughCurrencyDialogCloseAction' has a wrong offset!");
static_assert(offsetof(UFortLlamaStoreData, InspectWidgetClass) == 0x000050, "Member 'UFortLlamaStoreData::InspectWidgetClass' has a wrong offset!");
static_assert(offsetof(UFortLlamaStoreData, ShowOfferDelay) == 0x000058, "Member 'UFortLlamaStoreData::ShowOfferDelay' has a wrong offset!");
static_assert(offsetof(UFortLlamaStoreData, StoreOpeningCardPackClass) == 0x000060, "Member 'UFortLlamaStoreData::StoreOpeningCardPackClass' has a wrong offset!");
static_assert(offsetof(UFortLlamaStoreData, UnopenedCardpacksModalClass) == 0x000068, "Member 'UFortLlamaStoreData::UnopenedCardpacksModalClass' has a wrong offset!");

// Class FortniteUI.FortLlamaStoreBase
// 0x0070 (0x0430 - 0x03C0)
class UFortLlamaStoreBase final : public UFortDirectAcquisitionWidgetBase
{
public:
	TArray<struct FOfferGroup>                    OfferCategoriesToDisplay;                          // 0x03C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UDynamicEntryBox*                       OfferEntryBox;                                     // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonGroup*                     OfferButtonGroup;                                  // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortLlamaStoreDetailsBase*             OfferDetails;                                      // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortLlamaStoreData*                    StoreData;                                         // 0x03E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButton*                          Button_UnopenedLlamas;                             // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortProgressModal*                     ProgressModal;                                     // 0x03F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortLlamaStoreOfferInfo*               PendingPurchaseOffer;                              // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonActivatablePanel*                StoreOpeningCardPack;                              // 0x0408(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHideSoldOffers;                                   // 0x0410(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_411[0x1F];                                     // 0x0411(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateTencentPuchaseOpenModal();
	void OnStorePurchaseCompleted();
	void OnStoreStateChanged(EFortStoreState NewStoreState);
	void SetupFocus();
	void SwapToCardEnterState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLlamaStoreBase">();
	}
	static class UFortLlamaStoreBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLlamaStoreBase>();
	}
};
static_assert(alignof(UFortLlamaStoreBase) == 0x000008, "Wrong alignment on UFortLlamaStoreBase");
static_assert(sizeof(UFortLlamaStoreBase) == 0x000430, "Wrong size on UFortLlamaStoreBase");
static_assert(offsetof(UFortLlamaStoreBase, OfferCategoriesToDisplay) == 0x0003C0, "Member 'UFortLlamaStoreBase::OfferCategoriesToDisplay' has a wrong offset!");
static_assert(offsetof(UFortLlamaStoreBase, OfferEntryBox) == 0x0003D0, "Member 'UFortLlamaStoreBase::OfferEntryBox' has a wrong offset!");
static_assert(offsetof(UFortLlamaStoreBase, OfferButtonGroup) == 0x0003D8, "Member 'UFortLlamaStoreBase::OfferButtonGroup' has a wrong offset!");
static_assert(offsetof(UFortLlamaStoreBase, OfferDetails) == 0x0003E0, "Member 'UFortLlamaStoreBase::OfferDetails' has a wrong offset!");
static_assert(offsetof(UFortLlamaStoreBase, StoreData) == 0x0003E8, "Member 'UFortLlamaStoreBase::StoreData' has a wrong offset!");
static_assert(offsetof(UFortLlamaStoreBase, Button_UnopenedLlamas) == 0x0003F0, "Member 'UFortLlamaStoreBase::Button_UnopenedLlamas' has a wrong offset!");
static_assert(offsetof(UFortLlamaStoreBase, ProgressModal) == 0x0003F8, "Member 'UFortLlamaStoreBase::ProgressModal' has a wrong offset!");
static_assert(offsetof(UFortLlamaStoreBase, PendingPurchaseOffer) == 0x000400, "Member 'UFortLlamaStoreBase::PendingPurchaseOffer' has a wrong offset!");
static_assert(offsetof(UFortLlamaStoreBase, StoreOpeningCardPack) == 0x000408, "Member 'UFortLlamaStoreBase::StoreOpeningCardPack' has a wrong offset!");
static_assert(offsetof(UFortLlamaStoreBase, bHideSoldOffers) == 0x000410, "Member 'UFortLlamaStoreBase::bHideSoldOffers' has a wrong offset!");

// Class FortniteUI.FortLlamaStoreDetailsBase
// 0x0010 (0x0248 - 0x0238)
class UFortLlamaStoreDetailsBase final : public UCommonUserWidget
{
public:
	class UFortStoreFrontOfferInfo*               OfferInfo;                                         // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTileView*                        ItemTileView;                                      // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnOfferInfoChanged(int32 CurrentOfferRarity);
	void SetScrollWidget();
	void StartUpgradingToGold();
	void StartUpgradingToSilver();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLlamaStoreDetailsBase">();
	}
	static class UFortLlamaStoreDetailsBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLlamaStoreDetailsBase>();
	}
};
static_assert(alignof(UFortLlamaStoreDetailsBase) == 0x000008, "Wrong alignment on UFortLlamaStoreDetailsBase");
static_assert(sizeof(UFortLlamaStoreDetailsBase) == 0x000248, "Wrong size on UFortLlamaStoreDetailsBase");
static_assert(offsetof(UFortLlamaStoreDetailsBase, OfferInfo) == 0x000238, "Member 'UFortLlamaStoreDetailsBase::OfferInfo' has a wrong offset!");
static_assert(offsetof(UFortLlamaStoreDetailsBase, ItemTileView) == 0x000240, "Member 'UFortLlamaStoreDetailsBase::ItemTileView' has a wrong offset!");

// Class FortniteUI.FortStoreFrontOfferInfo
// 0x0038 (0x0060 - 0x0028)
class UFortStoreFrontOfferInfo : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMtxOfferData*                      OfferDisplayAsset;                                 // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x18];                                      // 0x0048(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFortAccountItem* CreatePreviewItem() const;
	struct FLinearColor GetBackground() const;
	class FString GetBannerOverrideTag() const;
	int32 GetBaseQuantity() const;
	int32 GetBonusQuantity() const;
	class FText GetCategoryText() const;
	class UFortAccountItemDefinition* GetCurrencyItemDefinition() const;
	class FText GetDescription() const;
	TArray<struct FFortMtxDetailsAttribute> GetDetailsAttributes() const;
	struct FSlateBrush GetDetailsImage() const;
	class FString GetDisplayAssetPath() const;
	void GetDynamicBundleItems(TArray<struct FBundledItemInfo>* Items) const;
	class UFortAccountItemDefinition* GetFirstGrantItemDefinition() const;
	int32 GetFirstGrantQuantity() const;
	class FString GetForcedGiftBoxTemplateId() const;
	class FString GetFortStoreOfferCategory() const;
	EFortMtxStoreOfferType GetFortStoreOfferType() const;
	struct FFortMtxGradient GetGradient() const;
	class UFortAccountItemDefinition* GetGrantedItemDefinition(int32 GrantedItemIndex) const;
	void GetGrantedItemDefinitions(TArray<class UFortAccountItemDefinition*>* GrantedItems) const;
	int32 GetGrantedItemQuantity(int32 GrantedItemIndex) const;
	bool GetGrantedItemQuantityPair(int32 GrantedItemIndex, struct FFortItemQuantityPair* ItemQuantity) const;
	void GetGrantedItemQuantityPairs(bool bPrioritizeUnowned, TArray<struct FFortItemQuantityPair>* ItemQuantityPairs) const;
	void GetGrantedItems(TArray<class UFortItem*>* Items) const;
	int32 GetItemOfferCount(const class FString& TemplateId) const;
	int32 GetItemQuantity(const class FString& TemplateId) const;
	class FText GetItemTypeText() const;
	int32 GetMaxConcurrentPurchases() const;
	bool GetMetaAsBool(const class FString& MetaTag) const;
	class FText GetName() const;
	class FText GetNormalPrice(const int32 PriceIndex, const int32 ItemQuantity) const;
	int32 GetNumGrantedItems() const;
	int32 GetNumRequirements() const;
	const struct FCatalogOffer GetOffer() const;
	class UFortMtxOfferData* GetOfferDisplayAsset() const;
	class FString GetOfferId() const;
	ECatalogOfferType GetOfferType() const;
	bool GetPrerollOfferItem(struct FFortItemQuantityPair* ItemQuantityPair) const;
	int32 GetPrerollRarity() const;
	class UFortAccountItemDefinition* GetPriceItem(const int32 PriceIndex, int32* RequiredItemCount) const;
	int32 GetQuantityRemaining() const;
	class FString GetRequirementIdAtIndex(int32 RequirementIndex) const;
	int32 GetRequirementMinQuantityAtIndex(int32 RequirementIndex) const;
	ECatalogRequirementType GetRequirementTypeAtIndex(int32 RequirementIndex) const;
	bool GetSalePrice(const int32 PriceIndex, class FText* SalePrice, const int32 ItemQuantity) const;
	class FText GetSaleText(const int32 PriceIndex, const int32 ItemQuantity) const;
	ECatalogSaleType GetSaleType(const int32 PriceIndex) const;
	class FText GetShortDescription() const;
	class FText GetShortName() const;
	int32 GetSortPriority() const;
	class FName GetStorefrontName() const;
	struct FSlateBrush GetTileImage() const;
	int32 GetTotalQuantity() const;
	bool HasCatalogOfferName(class FText* CatalogOfferName) const;
	bool HasDisplayAsset() const;
	bool HasMaxLevel(int32* MaxLevel) const;
	bool HasRequirement(class FText* RequirementText) const;
	bool IsCardpack() const;
	bool IsCurrencyVoucher() const;
	bool IsExclusive() const;
	bool IsGiftable() const;
	bool IsGiftOnly() const;
	bool IsItemDefOwned(const class UFortItemDefinition* ItemDef) const;
	bool IsItemGrantUnique(const class FString& TemplateId) const;
	bool IsItemMissingFromCollectionBook(const class UFortItem* ItemToCheck) const;
	bool IsItemMissingFromInventory(const class UFortItem* ItemToCheck) const;
	bool IsLockedByRequirement() const;
	bool IsPrerollOffer() const;
	bool IsPriceInMTX(const int32 PriceIndex) const;
	bool IsPriceInRealMoney(const int32 PriceIndex) const;
	bool IsRefundable() const;
	bool IsUnique() const;
	bool IsValidOffer() const;
	void MarkPrerollAsSeen() const;
	bool OfferHasDenyRequirements() const;
	bool WasPrerollItemSeen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortStoreFrontOfferInfo">();
	}
	static class UFortStoreFrontOfferInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortStoreFrontOfferInfo>();
	}
};
static_assert(alignof(UFortStoreFrontOfferInfo) == 0x000008, "Wrong alignment on UFortStoreFrontOfferInfo");
static_assert(sizeof(UFortStoreFrontOfferInfo) == 0x000060, "Wrong size on UFortStoreFrontOfferInfo");
static_assert(offsetof(UFortStoreFrontOfferInfo, OfferDisplayAsset) == 0x000040, "Member 'UFortStoreFrontOfferInfo::OfferDisplayAsset' has a wrong offset!");

// Class FortniteUI.FortLlamaStoreOfferInfo
// 0x0000 (0x0060 - 0x0060)
class UFortLlamaStoreOfferInfo final : public UFortStoreFrontOfferInfo
{
public:
	class UTexture* GetMetaAssetIcon() const;
	TSoftObjectPtr<class UTexture2D> GetMetaAssetImage() const;
	class UFortPackPersonality* GetMetaAssetPersonality() const;
	TSoftObjectPtr<class UTexture2D> GetMetaAssetXrayImage() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLlamaStoreOfferInfo">();
	}
	static class UFortLlamaStoreOfferInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLlamaStoreOfferInfo>();
	}
};
static_assert(alignof(UFortLlamaStoreOfferInfo) == 0x000008, "Wrong alignment on UFortLlamaStoreOfferInfo");
static_assert(sizeof(UFortLlamaStoreOfferInfo) == 0x000060, "Wrong size on UFortLlamaStoreOfferInfo");

// Class FortniteUI.FortLoginCredentialSelect
// 0x0080 (0x03A0 - 0x0320)
class UFortLoginCredentialSelect : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x38];                                     // 0x0320(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButton*                          Button_Epic;                                       // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Facebook;                                   // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Google;                                     // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_PS;                                         // 0x0370(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_XB;                                         // 0x0378(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Erebus;                                     // 0x0380(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_CreateAccount;                              // 0x0388(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_NoXB;                                       // 0x0390(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_NoSony;                                     // 0x0398(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLoginCredentialSelect">();
	}
	static class UFortLoginCredentialSelect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLoginCredentialSelect>();
	}
};
static_assert(alignof(UFortLoginCredentialSelect) == 0x000008, "Wrong alignment on UFortLoginCredentialSelect");
static_assert(sizeof(UFortLoginCredentialSelect) == 0x0003A0, "Wrong size on UFortLoginCredentialSelect");
static_assert(offsetof(UFortLoginCredentialSelect, Button_Epic) == 0x000358, "Member 'UFortLoginCredentialSelect::Button_Epic' has a wrong offset!");
static_assert(offsetof(UFortLoginCredentialSelect, Button_Facebook) == 0x000360, "Member 'UFortLoginCredentialSelect::Button_Facebook' has a wrong offset!");
static_assert(offsetof(UFortLoginCredentialSelect, Button_Google) == 0x000368, "Member 'UFortLoginCredentialSelect::Button_Google' has a wrong offset!");
static_assert(offsetof(UFortLoginCredentialSelect, Button_PS) == 0x000370, "Member 'UFortLoginCredentialSelect::Button_PS' has a wrong offset!");
static_assert(offsetof(UFortLoginCredentialSelect, Button_XB) == 0x000378, "Member 'UFortLoginCredentialSelect::Button_XB' has a wrong offset!");
static_assert(offsetof(UFortLoginCredentialSelect, Button_Erebus) == 0x000380, "Member 'UFortLoginCredentialSelect::Button_Erebus' has a wrong offset!");
static_assert(offsetof(UFortLoginCredentialSelect, Button_CreateAccount) == 0x000388, "Member 'UFortLoginCredentialSelect::Button_CreateAccount' has a wrong offset!");
static_assert(offsetof(UFortLoginCredentialSelect, Button_NoXB) == 0x000390, "Member 'UFortLoginCredentialSelect::Button_NoXB' has a wrong offset!");
static_assert(offsetof(UFortLoginCredentialSelect, Button_NoSony) == 0x000398, "Member 'UFortLoginCredentialSelect::Button_NoSony' has a wrong offset!");

// Class FortniteUI.FortLoginResultWidget
// 0x0040 (0x0360 - 0x0320)
class UFortLoginResultWidget : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonTextStyle>           ErrorStyle;                                        // 0x0330(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UCommonTextStyle>           NoErrorStyle;                                      // 0x0338(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_Title;                                        // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Description;                                  // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Continue;                                   // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLoginResultWidget">();
	}
	static class UFortLoginResultWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLoginResultWidget>();
	}
};
static_assert(alignof(UFortLoginResultWidget) == 0x000008, "Wrong alignment on UFortLoginResultWidget");
static_assert(sizeof(UFortLoginResultWidget) == 0x000360, "Wrong size on UFortLoginResultWidget");
static_assert(offsetof(UFortLoginResultWidget, ErrorStyle) == 0x000330, "Member 'UFortLoginResultWidget::ErrorStyle' has a wrong offset!");
static_assert(offsetof(UFortLoginResultWidget, NoErrorStyle) == 0x000338, "Member 'UFortLoginResultWidget::NoErrorStyle' has a wrong offset!");
static_assert(offsetof(UFortLoginResultWidget, Text_Title) == 0x000348, "Member 'UFortLoginResultWidget::Text_Title' has a wrong offset!");
static_assert(offsetof(UFortLoginResultWidget, Text_Description) == 0x000350, "Member 'UFortLoginResultWidget::Text_Description' has a wrong offset!");
static_assert(offsetof(UFortLoginResultWidget, Button_Continue) == 0x000358, "Member 'UFortLoginResultWidget::Button_Continue' has a wrong offset!");

// Class FortniteUI.FortLoginStatus
// 0x0028 (0x0348 - 0x0320)
class UFortLoginStatus : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_Title;                                        // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Status;                                       // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Status;                                     // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetLoginStatus(const class FText& InLoginStatus);
	void SetTitleText(const class FText& TitleText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLoginStatus">();
	}
	static class UFortLoginStatus* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLoginStatus>();
	}
};
static_assert(alignof(UFortLoginStatus) == 0x000008, "Wrong alignment on UFortLoginStatus");
static_assert(sizeof(UFortLoginStatus) == 0x000348, "Wrong size on UFortLoginStatus");
static_assert(offsetof(UFortLoginStatus, Text_Title) == 0x000330, "Member 'UFortLoginStatus::Text_Title' has a wrong offset!");
static_assert(offsetof(UFortLoginStatus, Text_Status) == 0x000338, "Member 'UFortLoginStatus::Text_Status' has a wrong offset!");
static_assert(offsetof(UFortLoginStatus, Button_Status) == 0x000340, "Member 'UFortLoginStatus::Button_Status' has a wrong offset!");

// Class FortniteUI.FortMissionActivationInfo
// 0x0150 (0x0178 - 0x0028)
class UFortMissionActivationInfo final : public UObject
{
public:
	bool                                          bIsMultiplayer;                                    // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x77];                                      // 0x0029(0x0077)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  FortPC;                                            // 0x00A0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AFortGameStateZone*                     GameStateZone;                                     // 0x00A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            DifficultyIncreaseBluGloCurve;                     // 0x00B0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0xC0];                                      // 0x00B8(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	EFortVoteArbitratorType GetArbitratorType(EFortVoteType VoteType);
	void GetVoteCounts(EFortVoteType VoteType, int32* OutYesVoteCount, int32* OutNoVoteCount);
	TArray<struct FVoter> GetVoters(EFortVoteType VoteType);
	void HandleGameplayVoteUpdated(EFortVoteType VoteType, EFortVoteStatus VoteStatus, int32 VoteResult, const TArray<struct FVoter>& Voters);
	void HandleTeamMemberAdded(const struct FFortTeamMemberInfo& NewInfo);
	void HandleTeamMemberRemoved(int32 RemovedIndex);
	bool HasPlayerVoted(EFortVoteType VoteType);
	void RequestVote(EFortVoteType VoteType, float VoteDuration, float FailedVoteLockOutDuration, EFortVoteArbitratorType ArbitratorType);
	void SubmitVote(EFortVoteType VoteType, bool bApprove);

	bool CanRequestVote(EFortVoteType VoteType) const;
	bool DoesPrimaryMissionContainTags(const struct FGameplayTagContainer& Tags) const;
	int32 GetAvailableBluGloCount() const;
	void GetDeltaRewards(int32 BaseDifficultyIncreaseTier, int32 ComparedDifficultyIncreaseTier, TArray<struct FFortItemDelta>* DeltaRewards) const;
	int32 GetIncreaseDifficultyBluGloRequirement() const;
	struct FUniqueNetIdRepl GetInstigatorId(EFortVoteType VoteType) const;
	class FText GetLockoutTimeRemaining(EFortVoteType VoteType) const;
	float GetMissionObjectiveTimeRemaining() const;
	EFortVoteType GetMissionVoteType() const;
	class AFortMission* GetPrimaryMission() const;
	class UFortMissionInfo* GetPrimaryMissionInfo() const;
	int32 GetStartObjectiveBluGloRequirement() const;
	float GetVoteTimeRemaining(EFortVoteType VoteType) const;
	bool IsAnyVoteActive() const;
	bool IsPlayerVoteInstigator(EFortVoteType VoteType) const;
	bool IsVoteActive(EFortVoteType VoteType) const;
	bool IsVoteLocked(EFortVoteType VoteType) const;
	class FText TimeSecondsToText(float InSeconds) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMissionActivationInfo">();
	}
	static class UFortMissionActivationInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMissionActivationInfo>();
	}
};
static_assert(alignof(UFortMissionActivationInfo) == 0x000008, "Wrong alignment on UFortMissionActivationInfo");
static_assert(sizeof(UFortMissionActivationInfo) == 0x000178, "Wrong size on UFortMissionActivationInfo");
static_assert(offsetof(UFortMissionActivationInfo, bIsMultiplayer) == 0x000028, "Member 'UFortMissionActivationInfo::bIsMultiplayer' has a wrong offset!");
static_assert(offsetof(UFortMissionActivationInfo, FortPC) == 0x0000A0, "Member 'UFortMissionActivationInfo::FortPC' has a wrong offset!");
static_assert(offsetof(UFortMissionActivationInfo, GameStateZone) == 0x0000A8, "Member 'UFortMissionActivationInfo::GameStateZone' has a wrong offset!");
static_assert(offsetof(UFortMissionActivationInfo, DifficultyIncreaseBluGloCurve) == 0x0000B0, "Member 'UFortMissionActivationInfo::DifficultyIncreaseBluGloCurve' has a wrong offset!");

// Class FortniteUI.FortMissionActivationWidgetPanel
// 0x0028 (0x0260 - 0x0238)
class UFortMissionActivationWidgetPanel : public UCommonUserWidget
{
public:
	class UFortMissionActivationInfo*             InfoObject;                                        // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_240[0x20];                                     // 0x0240(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InfoObjectUpdated();
	void OnActiveVoteChangedBP(EFortVoteType VoteType, bool bIsVoteActive, int32 VoteResult);
	void OnMultiplayerChangedBP(bool bIsMultiplayer);
	void OnVoteLockoutChangedBP(EFortVoteType VoteType, bool bIsLocked);
	void OnVoteUpdatedBP(EFortVoteType VoteType);
	void SetInfoObject(class UFortMissionActivationInfo* NewInfoObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMissionActivationWidgetPanel">();
	}
	static class UFortMissionActivationWidgetPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMissionActivationWidgetPanel>();
	}
};
static_assert(alignof(UFortMissionActivationWidgetPanel) == 0x000008, "Wrong alignment on UFortMissionActivationWidgetPanel");
static_assert(sizeof(UFortMissionActivationWidgetPanel) == 0x000260, "Wrong size on UFortMissionActivationWidgetPanel");
static_assert(offsetof(UFortMissionActivationWidgetPanel, InfoObject) == 0x000238, "Member 'UFortMissionActivationWidgetPanel::InfoObject' has a wrong offset!");

// Class FortniteUI.FortMissionSelect
// 0x0020 (0x0340 - 0x0320)
class UFortMissionSelect final : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnNavigation;                                      // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	bool CanCaptureAcceptInput();
	bool NavigateMissionTiles(EUINavigation Direction);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMissionSelect">();
	}
	static class UFortMissionSelect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMissionSelect>();
	}
};
static_assert(alignof(UFortMissionSelect) == 0x000008, "Wrong alignment on UFortMissionSelect");
static_assert(sizeof(UFortMissionSelect) == 0x000340, "Wrong size on UFortMissionSelect");
static_assert(offsetof(UFortMissionSelect, OnNavigation) == 0x000330, "Member 'UFortMissionSelect::OnNavigation' has a wrong offset!");

// Class FortniteUI.FortMissionTrackerEntry
// 0x00A8 (0x02E0 - 0x0238)
class UFortMissionTrackerEntry final : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnMissionEntryVisibilityChanged;                   // 0x0240(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortMissionTrackerSubEntry> SubEntryClass;                                     // 0x0250(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bConfigureAsHUD;                                   // 0x0258(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHiddenByHeightConstraint;                         // 0x0259(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25A[0x6];                                      // 0x025A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       MissionNameText;                                   // 0x0260(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           ObjectivesListBox;                                 // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 UpperSeparator;                                    // 0x0270(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortMission*                           TrackedMission;                                    // 0x0278(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnSizeEstimateChangedDelegate;                     // 0x0280(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_290[0x50];                                     // 0x0290(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleMissionInfoSet();
	void HandleObjectivesChanged();
	void OnMissionSet();
	void UpdateVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMissionTrackerEntry">();
	}
	static class UFortMissionTrackerEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMissionTrackerEntry>();
	}
};
static_assert(alignof(UFortMissionTrackerEntry) == 0x000008, "Wrong alignment on UFortMissionTrackerEntry");
static_assert(sizeof(UFortMissionTrackerEntry) == 0x0002E0, "Wrong size on UFortMissionTrackerEntry");
static_assert(offsetof(UFortMissionTrackerEntry, OnMissionEntryVisibilityChanged) == 0x000240, "Member 'UFortMissionTrackerEntry::OnMissionEntryVisibilityChanged' has a wrong offset!");
static_assert(offsetof(UFortMissionTrackerEntry, SubEntryClass) == 0x000250, "Member 'UFortMissionTrackerEntry::SubEntryClass' has a wrong offset!");
static_assert(offsetof(UFortMissionTrackerEntry, bConfigureAsHUD) == 0x000258, "Member 'UFortMissionTrackerEntry::bConfigureAsHUD' has a wrong offset!");
static_assert(offsetof(UFortMissionTrackerEntry, bHiddenByHeightConstraint) == 0x000259, "Member 'UFortMissionTrackerEntry::bHiddenByHeightConstraint' has a wrong offset!");
static_assert(offsetof(UFortMissionTrackerEntry, MissionNameText) == 0x000260, "Member 'UFortMissionTrackerEntry::MissionNameText' has a wrong offset!");
static_assert(offsetof(UFortMissionTrackerEntry, ObjectivesListBox) == 0x000268, "Member 'UFortMissionTrackerEntry::ObjectivesListBox' has a wrong offset!");
static_assert(offsetof(UFortMissionTrackerEntry, UpperSeparator) == 0x000270, "Member 'UFortMissionTrackerEntry::UpperSeparator' has a wrong offset!");
static_assert(offsetof(UFortMissionTrackerEntry, TrackedMission) == 0x000278, "Member 'UFortMissionTrackerEntry::TrackedMission' has a wrong offset!");
static_assert(offsetof(UFortMissionTrackerEntry, OnSizeEstimateChangedDelegate) == 0x000280, "Member 'UFortMissionTrackerEntry::OnSizeEstimateChangedDelegate' has a wrong offset!");

// Class FortniteUI.FortMissionVoteHUDElementWidget
// 0x0030 (0x0298 - 0x0268)
class UFortMissionVoteHUDElementWidget final : public UFortHUDElementWidget
{
public:
	uint8                                         Pad_268[0x30];                                     // 0x0268(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetVoteTimeRemaining(EFortVoteType VoteType);
	void HandleDifficultyIncreaseVoteUpdate(EFortVoteType VoteType, EFortVoteStatus VoteStatus, int32 VoteResult, const TArray<struct FVoter>& Voters);
	void HandleMissionActivationVoteUpdate(EFortVoteType VoteType, EFortVoteStatus VoteStatus, int32 VoteResult, const TArray<struct FVoter>& Voters);
	bool HasLocalPlayerVoted(EFortVoteType VoteType);
	bool IsMultiplayerVote(EFortVoteType VoteType);
	void OnVoteEnded(EFortVoteType VoteType, EFortVoteArbitratorType ArbitratorType, bool VoteSucceeded);
	void OnVoteStarted(EFortVoteType VoteType, EFortVoteArbitratorType ArbitratorType, int32 YesVoteCount, int32 NoVoteCount);
	void OnVoteUpdated(EFortVoteType VoteType, int32 YesVoteCount, int32 NoVoteCount);
	void RegisterFailsafeForVoteType(EFortVoteType VoteType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMissionVoteHUDElementWidget">();
	}
	static class UFortMissionVoteHUDElementWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMissionVoteHUDElementWidget>();
	}
};
static_assert(alignof(UFortMissionVoteHUDElementWidget) == 0x000008, "Wrong alignment on UFortMissionVoteHUDElementWidget");
static_assert(sizeof(UFortMissionVoteHUDElementWidget) == 0x000298, "Wrong size on UFortMissionVoteHUDElementWidget");

// Class FortniteUI.FortUIDataConfiguration
// 0x31E8 (0x3218 - 0x0030)
class UFortUIDataConfiguration : public UPrimaryDataAsset
{
public:
	class FString                                 DefaultUIDataConfigurationPath;                    // 0x0030(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BROnlyUIDataConfigurationPath;                     // 0x0040(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErebusUIDataConfigurationPath;                     // 0x0050(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStateWidgetEntry                      StateWidgetClasses[0xD];                           // 0x0060(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           CachedWidgetClasses;                               // 0x02D0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	class UFortVideoDisplayData*                  VideoDisplayData;                                  // 0x02E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortSocialDisplayData*                 SocialDisplayData;                                 // 0x02E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EFortBrushSize, int32>                   StandardImageBrushSizes;                           // 0x02F0(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> PowerRatingIconMultiSizeBrush;                     // 0x0340(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PowerRatingEnchantedPositiveColorOverride;         // 0x0368(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PowerRatingEnchantedNegativeColorOverride;         // 0x0378(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> FilledTierPipMultiSizeBrush;                       // 0x0388(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> UnfilledTierPipMultiSizeBrush;                     // 0x03B0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> PreviewingTierPipMultiSizeBrush;                   // 0x03D8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> UpgradeArrowMultiSizeBrush;                        // 0x0400(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> ComparisonUpArrowMultiSizeBrush;                   // 0x0428(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BetterComparisonResultColor;                       // 0x0450(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           WorseComparisonResultColor;                        // 0x0460(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> InventoryOverflowIndicatorMultiSizeBrush;          // 0x0470(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> TrackedSchematicIndicatorMultiSizeBrush;           // 0x0498(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> FavoritedItemIndicatorMultiSizeBrush;              // 0x04C0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UClass*, TSubclassOf<class UUserWidget>> VariantToWidgetMaping;                             // 0x04E8(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bEnableSocialFeatures;                             // 0x0538(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableChat;                                       // 0x0539(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePartyFeatures;                              // 0x053A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53B[0x5];                                      // 0x053B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ESocialChannelType, struct FSocialChatMessageEntryStyle> ChatChannelStyles;                                 // 0x0540(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> UnlockedSquadSlotBorderMultiSizeBrush;             // 0x0590(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> LockedSquadSlotBorderMultiSizeBrush;               // 0x05B8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> ReadOnlySquadSlotBorderMultiSizeBrush;             // 0x05E0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> DefenderIconMultiSizeBrush;                        // 0x0608(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> AssaultDefenderIconMultiSizeBrush;                 // 0x0630(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> PistolDefenderIconMultiSizeBrush;                  // 0x0658(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> MeleeDefenderIconMultiSizeBrush;                   // 0x0680(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> SniperDefenderIconMultiSizeBrush;                  // 0x06A8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> ShotgunDefenderIconMultiSizeBrush;                 // 0x06D0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> LeadSurvivorIconMultiSizeBrush;                    // 0x06F8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> SurvivorIconMultiSizeBrush;                        // 0x0720(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> TrapIconMultiSizeBrush;                            // 0x0748(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   KeybindWidgetClass;                                // 0x0770(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   HiddenCursorWidget;                                // 0x0798(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   VirtualCursorWidget;                               // 0x07C0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     UIScaleCurve;                                      // 0x07E8(0x0088)(Edit, Config, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     FrontEndUIScaleCurve;                              // 0x0870(0x0088)(Edit, Config, NativeAccessSpecifierPublic)
	EFortReturnToFrontendBehavior                 ReturnToFrontendBehavior;                          // 0x08F8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8F9[0x7];                                      // 0x08F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              EventsStyleDataTable;                              // 0x0900(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              UpgradesDisplayDataTable;                          // 0x0928(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EFortBrushSize, TSubclassOf<class UCommonTextStyle>> ItemCardPowerRatingTextStylesByBrushSize;          // 0x0950(0x0050)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EFortBrushSize, TSubclassOf<class UCommonTextStyle>> ItemCardStackCountTextStylesByBrushSize;           // 0x09A0(0x0050)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      ItemCardLevelMeterMaterial;                        // 0x09F0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      ItemCardDurabilityMeterMaterial;                   // 0x0A18(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ItemCardBackgroundPlateBrush;                      // 0x0A40(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ItemCardRarityGradientBrush;                       // 0x0AC8(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ItemCardDefenderPortraitBackgroundBrush;           // 0x0B50(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ItemCardHeroPortraitBackgroundBrush;               // 0x0BD8(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ItemCardLeadSurvivorPortraitBackgroundBrush;       // 0x0C60(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ItemCardSchematicBackgroundBrush;                  // 0x0CE8(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> ItemCardRewardTraitsBackgroundMultiSizeBrush;      // 0x0D70(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> ItemCardSchematicTraitsBackgroundMultiSizeBrush;   // 0x0D98(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   FrontendItemManagementScreenType;                  // 0x0DC0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   FrontendItemInspectionScreenType;                  // 0x0DE8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   HeroSquadManagementScreenType;                     // 0x0E10(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   HeroLoadoutScreenType;                             // 0x0E38(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SurvivorSquadManagementScreenType;                 // 0x0E60(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DefenderSquadManagementScreenType;                 // 0x0E88(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   MatchReadyDesktopPopupWidgetType;                  // 0x0EB0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   MainTabSet;                                        // 0x0ED8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLimitedToES2Features;                             // 0x0F00(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F01[0x7];                                      // 0x0F01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeightedBlendables                    FrontEndFFPostProcessMaterials;                    // 0x0F08(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bUseSpecificPinataWeapon;                          // 0x0F18(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bQuestVOEnabled;                                   // 0x0F19(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1A[0x6];                                      // 0x0F1A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EFortItemCardSize, struct FVector2D>     PersonnelAndSchematicCardSizes;                    // 0x0F20(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EFortItemCardSize, struct FVector2D>     OtherItemCardSizes;                                // 0x0F70(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EFortItemCardSize, TSoftObjectPtr<class UMaterialInterface>> PersonnelAndSchematicItemCardMaterial;             // 0x0FC0(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EFortItemCardSize, TSoftObjectPtr<class UMaterialInterface>> CardPackItemCardMaterial;                          // 0x1010(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EFortItemCardSize, TSoftObjectPtr<class UMaterialInterface>> InstanceItemCardMaterial;                          // 0x1060(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EFortItemCardSize, TSoftObjectPtr<class UMaterialInterface>> TransformKeyItemCardMaterial;                      // 0x10B0(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EFortItemCardSize, TSoftObjectPtr<class UMaterialInterface>> CosmeticItemCardMaterial;                          // 0x1100(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<EFortItemType>                         ItemTypesWhoseImagesReplaceCardBackgrounds;        // 0x1150(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSet<EFortItemType>                           ItemTypesToHideCountWhenCountEqualsOne;            // 0x1160(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EFortItemCardSize, TSoftObjectPtr<class UMaterialInterface>> ItemCardDetailAreaMaterial;                        // 0x11B0(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> FavoriteBookmarkMultiSizeBrush;                    // 0x1200(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> PermanentTransformKeykMultiSizeBrush;              // 0x1228(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortMultiSizeBrushAsset> ConsumableTransformKeykMultiSizeBrush;             // 0x1250(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, TSoftObjectPtr<class UTexture2D>> DefenderSubtypeWeaponTextures;                     // 0x1278(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EFortBuffState, TSoftObjectPtr<class UMaterialInterface>> EnchantedCustomRatingBlockBackgroundMaterial;      // 0x12C8(0x0050)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EFortBuffState, TSoftObjectPtr<class UMaterialInterface>> NormalCustomRatingBlockBackgroundMaterial;         // 0x1318(0x0050)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FMargin                                CustomRatingBlockBackgroundBrushMargin;            // 0x1368(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      UniversalItemCardDurabilityMeterMaterial;          // 0x1378(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      UniversalItemCardLevelMeterMaterial;               // 0x13A0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      UniversalItemCardTraitIconMaterial;                // 0x13C8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      UniversalItemCardUnearnedTierIconMaterial;         // 0x13F0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      UniversalItemCardAvailableTierIconMaterial;        // 0x1418(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      UniversalItemCardEarnedTierIconMaterial;           // 0x1440(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortItemDefinition>     MysteryItemDefinition;                             // 0x1468(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              LoadingCardTexture;                                // 0x1490(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_XL_PersonnelAndSchematics_Configuration ItemCardConfig_XXL_PersonnelAndSchematics;         // 0x14B8(0x0350)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortItemCard_XL_ItemInstance_Configuration ItemCardConfig_XXL_ItemInstance;                   // 0x1808(0x01B0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortItemCard_XL_TransformKey_Configuration ItemCardConfig_XXL_TransformKey;                   // 0x19B8(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortItemCard_XL_PersonnelAndSchematics_Configuration ItemCardConfig_XL_PersonnelAndSchematics;          // 0x1A00(0x0350)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortItemCard_XL_ItemInstance_Configuration ItemCardConfig_XL_ItemInstance;                    // 0x1D50(0x01B0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortItemCard_XL_TransformKey_Configuration ItemCardConfig_XL_TransformKey;                    // 0x1F00(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortItemCard_L_PersonnelAndSchematics_Configuration ItemCardConfig_L_PersonnelAndSchematics;           // 0x1F48(0x02C8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortItemCard_L_ItemInstance_Configuration ItemCardConfig_L_ItemInstance;                     // 0x2210(0x01B0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortItemCard_L_TransformKey_Configuration ItemCardConfig_L_TransformKey;                     // 0x23C0(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortItemCard_M_PersonnelAndSchematics_Configuration ItemCardConfig_M_PersonnelAndSchematics;           // 0x2408(0x02C8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortItemCard_M_ItemInstance_Configuration ItemCardConfig_M_ItemInstance;                     // 0x26D0(0x01B0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortItemCard_M_TransformKey_Configuration ItemCardConfig_M_TransformKey;                     // 0x2880(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortItemCard_S_PersonnelAndSchematics_Configuration ItemCardConfig_S_PersonnelAndSchematics;           // 0x28C8(0x02C8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortItemCard_S_ItemInstance_Configuration ItemCardConfig_S_ItemInstance;                     // 0x2B90(0x01A0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortItemCard_S_TransformKey_Configuration ItemCardConfig_S_TransformKey;                     // 0x2D30(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortItemCard_XS_PersonnelAndSchematics_Configuration ItemCardConfig_XS_PersonnelAndSchematics;          // 0x2D78(0x0034)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DAC[0x4];                                     // 0x2DAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortItemCard_XS_ItemInstance_Configuration ItemCardConfig_XS_ItemInstance;                    // 0x2DB0(0x0188)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortItemCard_XS_TransformKey_Configuration ItemCardConfig_XS_TransformKey;                    // 0x2F38(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortItemCard_XS_PersonnelAndSchematics_Configuration ItemCardConfig_XXS_PersonnelAndSchematics;         // 0x2F80(0x0034)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FB4[0x4];                                     // 0x2FB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortItemCard_XXS_ItemInstance_Configuration ItemCardConfig_XXS_ItemInstance;                   // 0x2FB8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortItemCard_XS_TransformKey_Configuration ItemCardConfig_XXS_TransformKey;                   // 0x2FE8(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              HealthyGamingDataTable;                            // 0x3030(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              TrapPickerGameplayTagSettings;                     // 0x3058(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortUIPickerTrapSortScores            TrapPickerSortScores;                              // 0x3080(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class UFortTooltipDisplayStatsLookupTable*    ObjClassToTooltipStatsMap;                         // 0x3098(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   LoadingScreenBacchusTutorialWidget;                // 0x30A0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USlateBrushAsset>        ActorCanvasArrowBrush;                             // 0x30C8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortOptionsMenuData*                   GameOptionsMenuData;                               // 0x30F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortOptionsMenuData*                   GameCreativeMenuData;                              // 0x30F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortOptionsMenuDefaults*               GameOptionsMenuDefaults;                           // 0x3100(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              UITutorialData;                                    // 0x3108(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortUIDataProfileStats*>        ProfileStatStyleSets;                              // 0x3130(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TMap<class FName, TSoftObjectPtr<class USlateBrushAsset>> LegacyNativeUIBrushMap;                            // 0x3140(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FName, TSoftObjectPtr<class UObject>> LegacyNativeUIAssetMap;                            // 0x3190(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	float                                         AnalogRotateSpeed;                                 // 0x31E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragRotateSpeed;                                   // 0x31E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TouchSwipeRotateRate;                              // 0x31E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseWheelZoomSpeed;                               // 0x31EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragZoomSpeed;                                     // 0x31F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TriggerZoomSpeed;                                  // 0x31F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TouchZoomPinchRate;                                // 0x31F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemViewCompetingAxisInputThreshold;               // 0x31FC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EFortItemType>                         ItemTypesToUseVaultCamera;                         // 0x3200(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortFrontendItemViewSettingsManager> FrontendItemViewSettingsManager;                   // 0x3210(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UFortMultiSizeBrushAsset* GetDefenderSubtypeIconMultiSizeBrushByTag(const struct FGameplayTag& DefenderSubtypeTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIDataConfiguration">();
	}
	static class UFortUIDataConfiguration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIDataConfiguration>();
	}
};
static_assert(alignof(UFortUIDataConfiguration) == 0x000008, "Wrong alignment on UFortUIDataConfiguration");
static_assert(sizeof(UFortUIDataConfiguration) == 0x003218, "Wrong size on UFortUIDataConfiguration");
static_assert(offsetof(UFortUIDataConfiguration, DefaultUIDataConfigurationPath) == 0x000030, "Member 'UFortUIDataConfiguration::DefaultUIDataConfigurationPath' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, BROnlyUIDataConfigurationPath) == 0x000040, "Member 'UFortUIDataConfiguration::BROnlyUIDataConfigurationPath' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ErebusUIDataConfigurationPath) == 0x000050, "Member 'UFortUIDataConfiguration::ErebusUIDataConfigurationPath' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, StateWidgetClasses) == 0x000060, "Member 'UFortUIDataConfiguration::StateWidgetClasses' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, CachedWidgetClasses) == 0x0002D0, "Member 'UFortUIDataConfiguration::CachedWidgetClasses' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, VideoDisplayData) == 0x0002E0, "Member 'UFortUIDataConfiguration::VideoDisplayData' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, SocialDisplayData) == 0x0002E8, "Member 'UFortUIDataConfiguration::SocialDisplayData' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, StandardImageBrushSizes) == 0x0002F0, "Member 'UFortUIDataConfiguration::StandardImageBrushSizes' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, PowerRatingIconMultiSizeBrush) == 0x000340, "Member 'UFortUIDataConfiguration::PowerRatingIconMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, PowerRatingEnchantedPositiveColorOverride) == 0x000368, "Member 'UFortUIDataConfiguration::PowerRatingEnchantedPositiveColorOverride' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, PowerRatingEnchantedNegativeColorOverride) == 0x000378, "Member 'UFortUIDataConfiguration::PowerRatingEnchantedNegativeColorOverride' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, FilledTierPipMultiSizeBrush) == 0x000388, "Member 'UFortUIDataConfiguration::FilledTierPipMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, UnfilledTierPipMultiSizeBrush) == 0x0003B0, "Member 'UFortUIDataConfiguration::UnfilledTierPipMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, PreviewingTierPipMultiSizeBrush) == 0x0003D8, "Member 'UFortUIDataConfiguration::PreviewingTierPipMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, UpgradeArrowMultiSizeBrush) == 0x000400, "Member 'UFortUIDataConfiguration::UpgradeArrowMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ComparisonUpArrowMultiSizeBrush) == 0x000428, "Member 'UFortUIDataConfiguration::ComparisonUpArrowMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, BetterComparisonResultColor) == 0x000450, "Member 'UFortUIDataConfiguration::BetterComparisonResultColor' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, WorseComparisonResultColor) == 0x000460, "Member 'UFortUIDataConfiguration::WorseComparisonResultColor' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, InventoryOverflowIndicatorMultiSizeBrush) == 0x000470, "Member 'UFortUIDataConfiguration::InventoryOverflowIndicatorMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, TrackedSchematicIndicatorMultiSizeBrush) == 0x000498, "Member 'UFortUIDataConfiguration::TrackedSchematicIndicatorMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, FavoritedItemIndicatorMultiSizeBrush) == 0x0004C0, "Member 'UFortUIDataConfiguration::FavoritedItemIndicatorMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, VariantToWidgetMaping) == 0x0004E8, "Member 'UFortUIDataConfiguration::VariantToWidgetMaping' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, bEnableSocialFeatures) == 0x000538, "Member 'UFortUIDataConfiguration::bEnableSocialFeatures' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, bEnableChat) == 0x000539, "Member 'UFortUIDataConfiguration::bEnableChat' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, bEnablePartyFeatures) == 0x00053A, "Member 'UFortUIDataConfiguration::bEnablePartyFeatures' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ChatChannelStyles) == 0x000540, "Member 'UFortUIDataConfiguration::ChatChannelStyles' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, UnlockedSquadSlotBorderMultiSizeBrush) == 0x000590, "Member 'UFortUIDataConfiguration::UnlockedSquadSlotBorderMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, LockedSquadSlotBorderMultiSizeBrush) == 0x0005B8, "Member 'UFortUIDataConfiguration::LockedSquadSlotBorderMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ReadOnlySquadSlotBorderMultiSizeBrush) == 0x0005E0, "Member 'UFortUIDataConfiguration::ReadOnlySquadSlotBorderMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, DefenderIconMultiSizeBrush) == 0x000608, "Member 'UFortUIDataConfiguration::DefenderIconMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, AssaultDefenderIconMultiSizeBrush) == 0x000630, "Member 'UFortUIDataConfiguration::AssaultDefenderIconMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, PistolDefenderIconMultiSizeBrush) == 0x000658, "Member 'UFortUIDataConfiguration::PistolDefenderIconMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, MeleeDefenderIconMultiSizeBrush) == 0x000680, "Member 'UFortUIDataConfiguration::MeleeDefenderIconMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, SniperDefenderIconMultiSizeBrush) == 0x0006A8, "Member 'UFortUIDataConfiguration::SniperDefenderIconMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ShotgunDefenderIconMultiSizeBrush) == 0x0006D0, "Member 'UFortUIDataConfiguration::ShotgunDefenderIconMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, LeadSurvivorIconMultiSizeBrush) == 0x0006F8, "Member 'UFortUIDataConfiguration::LeadSurvivorIconMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, SurvivorIconMultiSizeBrush) == 0x000720, "Member 'UFortUIDataConfiguration::SurvivorIconMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, TrapIconMultiSizeBrush) == 0x000748, "Member 'UFortUIDataConfiguration::TrapIconMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, KeybindWidgetClass) == 0x000770, "Member 'UFortUIDataConfiguration::KeybindWidgetClass' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, HiddenCursorWidget) == 0x000798, "Member 'UFortUIDataConfiguration::HiddenCursorWidget' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, VirtualCursorWidget) == 0x0007C0, "Member 'UFortUIDataConfiguration::VirtualCursorWidget' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, UIScaleCurve) == 0x0007E8, "Member 'UFortUIDataConfiguration::UIScaleCurve' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, FrontEndUIScaleCurve) == 0x000870, "Member 'UFortUIDataConfiguration::FrontEndUIScaleCurve' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ReturnToFrontendBehavior) == 0x0008F8, "Member 'UFortUIDataConfiguration::ReturnToFrontendBehavior' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, EventsStyleDataTable) == 0x000900, "Member 'UFortUIDataConfiguration::EventsStyleDataTable' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, UpgradesDisplayDataTable) == 0x000928, "Member 'UFortUIDataConfiguration::UpgradesDisplayDataTable' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardPowerRatingTextStylesByBrushSize) == 0x000950, "Member 'UFortUIDataConfiguration::ItemCardPowerRatingTextStylesByBrushSize' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardStackCountTextStylesByBrushSize) == 0x0009A0, "Member 'UFortUIDataConfiguration::ItemCardStackCountTextStylesByBrushSize' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardLevelMeterMaterial) == 0x0009F0, "Member 'UFortUIDataConfiguration::ItemCardLevelMeterMaterial' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardDurabilityMeterMaterial) == 0x000A18, "Member 'UFortUIDataConfiguration::ItemCardDurabilityMeterMaterial' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardBackgroundPlateBrush) == 0x000A40, "Member 'UFortUIDataConfiguration::ItemCardBackgroundPlateBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardRarityGradientBrush) == 0x000AC8, "Member 'UFortUIDataConfiguration::ItemCardRarityGradientBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardDefenderPortraitBackgroundBrush) == 0x000B50, "Member 'UFortUIDataConfiguration::ItemCardDefenderPortraitBackgroundBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardHeroPortraitBackgroundBrush) == 0x000BD8, "Member 'UFortUIDataConfiguration::ItemCardHeroPortraitBackgroundBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardLeadSurvivorPortraitBackgroundBrush) == 0x000C60, "Member 'UFortUIDataConfiguration::ItemCardLeadSurvivorPortraitBackgroundBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardSchematicBackgroundBrush) == 0x000CE8, "Member 'UFortUIDataConfiguration::ItemCardSchematicBackgroundBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardRewardTraitsBackgroundMultiSizeBrush) == 0x000D70, "Member 'UFortUIDataConfiguration::ItemCardRewardTraitsBackgroundMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardSchematicTraitsBackgroundMultiSizeBrush) == 0x000D98, "Member 'UFortUIDataConfiguration::ItemCardSchematicTraitsBackgroundMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, FrontendItemManagementScreenType) == 0x000DC0, "Member 'UFortUIDataConfiguration::FrontendItemManagementScreenType' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, FrontendItemInspectionScreenType) == 0x000DE8, "Member 'UFortUIDataConfiguration::FrontendItemInspectionScreenType' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, HeroSquadManagementScreenType) == 0x000E10, "Member 'UFortUIDataConfiguration::HeroSquadManagementScreenType' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, HeroLoadoutScreenType) == 0x000E38, "Member 'UFortUIDataConfiguration::HeroLoadoutScreenType' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, SurvivorSquadManagementScreenType) == 0x000E60, "Member 'UFortUIDataConfiguration::SurvivorSquadManagementScreenType' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, DefenderSquadManagementScreenType) == 0x000E88, "Member 'UFortUIDataConfiguration::DefenderSquadManagementScreenType' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, MatchReadyDesktopPopupWidgetType) == 0x000EB0, "Member 'UFortUIDataConfiguration::MatchReadyDesktopPopupWidgetType' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, MainTabSet) == 0x000ED8, "Member 'UFortUIDataConfiguration::MainTabSet' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, bLimitedToES2Features) == 0x000F00, "Member 'UFortUIDataConfiguration::bLimitedToES2Features' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, FrontEndFFPostProcessMaterials) == 0x000F08, "Member 'UFortUIDataConfiguration::FrontEndFFPostProcessMaterials' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, bUseSpecificPinataWeapon) == 0x000F18, "Member 'UFortUIDataConfiguration::bUseSpecificPinataWeapon' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, bQuestVOEnabled) == 0x000F19, "Member 'UFortUIDataConfiguration::bQuestVOEnabled' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, PersonnelAndSchematicCardSizes) == 0x000F20, "Member 'UFortUIDataConfiguration::PersonnelAndSchematicCardSizes' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, OtherItemCardSizes) == 0x000F70, "Member 'UFortUIDataConfiguration::OtherItemCardSizes' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, PersonnelAndSchematicItemCardMaterial) == 0x000FC0, "Member 'UFortUIDataConfiguration::PersonnelAndSchematicItemCardMaterial' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, CardPackItemCardMaterial) == 0x001010, "Member 'UFortUIDataConfiguration::CardPackItemCardMaterial' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, InstanceItemCardMaterial) == 0x001060, "Member 'UFortUIDataConfiguration::InstanceItemCardMaterial' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, TransformKeyItemCardMaterial) == 0x0010B0, "Member 'UFortUIDataConfiguration::TransformKeyItemCardMaterial' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, CosmeticItemCardMaterial) == 0x001100, "Member 'UFortUIDataConfiguration::CosmeticItemCardMaterial' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemTypesWhoseImagesReplaceCardBackgrounds) == 0x001150, "Member 'UFortUIDataConfiguration::ItemTypesWhoseImagesReplaceCardBackgrounds' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemTypesToHideCountWhenCountEqualsOne) == 0x001160, "Member 'UFortUIDataConfiguration::ItemTypesToHideCountWhenCountEqualsOne' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardDetailAreaMaterial) == 0x0011B0, "Member 'UFortUIDataConfiguration::ItemCardDetailAreaMaterial' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, FavoriteBookmarkMultiSizeBrush) == 0x001200, "Member 'UFortUIDataConfiguration::FavoriteBookmarkMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, PermanentTransformKeykMultiSizeBrush) == 0x001228, "Member 'UFortUIDataConfiguration::PermanentTransformKeykMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ConsumableTransformKeykMultiSizeBrush) == 0x001250, "Member 'UFortUIDataConfiguration::ConsumableTransformKeykMultiSizeBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, DefenderSubtypeWeaponTextures) == 0x001278, "Member 'UFortUIDataConfiguration::DefenderSubtypeWeaponTextures' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, EnchantedCustomRatingBlockBackgroundMaterial) == 0x0012C8, "Member 'UFortUIDataConfiguration::EnchantedCustomRatingBlockBackgroundMaterial' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, NormalCustomRatingBlockBackgroundMaterial) == 0x001318, "Member 'UFortUIDataConfiguration::NormalCustomRatingBlockBackgroundMaterial' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, CustomRatingBlockBackgroundBrushMargin) == 0x001368, "Member 'UFortUIDataConfiguration::CustomRatingBlockBackgroundBrushMargin' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, UniversalItemCardDurabilityMeterMaterial) == 0x001378, "Member 'UFortUIDataConfiguration::UniversalItemCardDurabilityMeterMaterial' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, UniversalItemCardLevelMeterMaterial) == 0x0013A0, "Member 'UFortUIDataConfiguration::UniversalItemCardLevelMeterMaterial' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, UniversalItemCardTraitIconMaterial) == 0x0013C8, "Member 'UFortUIDataConfiguration::UniversalItemCardTraitIconMaterial' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, UniversalItemCardUnearnedTierIconMaterial) == 0x0013F0, "Member 'UFortUIDataConfiguration::UniversalItemCardUnearnedTierIconMaterial' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, UniversalItemCardAvailableTierIconMaterial) == 0x001418, "Member 'UFortUIDataConfiguration::UniversalItemCardAvailableTierIconMaterial' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, UniversalItemCardEarnedTierIconMaterial) == 0x001440, "Member 'UFortUIDataConfiguration::UniversalItemCardEarnedTierIconMaterial' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, MysteryItemDefinition) == 0x001468, "Member 'UFortUIDataConfiguration::MysteryItemDefinition' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, LoadingCardTexture) == 0x001490, "Member 'UFortUIDataConfiguration::LoadingCardTexture' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_XXL_PersonnelAndSchematics) == 0x0014B8, "Member 'UFortUIDataConfiguration::ItemCardConfig_XXL_PersonnelAndSchematics' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_XXL_ItemInstance) == 0x001808, "Member 'UFortUIDataConfiguration::ItemCardConfig_XXL_ItemInstance' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_XXL_TransformKey) == 0x0019B8, "Member 'UFortUIDataConfiguration::ItemCardConfig_XXL_TransformKey' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_XL_PersonnelAndSchematics) == 0x001A00, "Member 'UFortUIDataConfiguration::ItemCardConfig_XL_PersonnelAndSchematics' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_XL_ItemInstance) == 0x001D50, "Member 'UFortUIDataConfiguration::ItemCardConfig_XL_ItemInstance' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_XL_TransformKey) == 0x001F00, "Member 'UFortUIDataConfiguration::ItemCardConfig_XL_TransformKey' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_L_PersonnelAndSchematics) == 0x001F48, "Member 'UFortUIDataConfiguration::ItemCardConfig_L_PersonnelAndSchematics' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_L_ItemInstance) == 0x002210, "Member 'UFortUIDataConfiguration::ItemCardConfig_L_ItemInstance' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_L_TransformKey) == 0x0023C0, "Member 'UFortUIDataConfiguration::ItemCardConfig_L_TransformKey' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_M_PersonnelAndSchematics) == 0x002408, "Member 'UFortUIDataConfiguration::ItemCardConfig_M_PersonnelAndSchematics' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_M_ItemInstance) == 0x0026D0, "Member 'UFortUIDataConfiguration::ItemCardConfig_M_ItemInstance' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_M_TransformKey) == 0x002880, "Member 'UFortUIDataConfiguration::ItemCardConfig_M_TransformKey' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_S_PersonnelAndSchematics) == 0x0028C8, "Member 'UFortUIDataConfiguration::ItemCardConfig_S_PersonnelAndSchematics' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_S_ItemInstance) == 0x002B90, "Member 'UFortUIDataConfiguration::ItemCardConfig_S_ItemInstance' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_S_TransformKey) == 0x002D30, "Member 'UFortUIDataConfiguration::ItemCardConfig_S_TransformKey' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_XS_PersonnelAndSchematics) == 0x002D78, "Member 'UFortUIDataConfiguration::ItemCardConfig_XS_PersonnelAndSchematics' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_XS_ItemInstance) == 0x002DB0, "Member 'UFortUIDataConfiguration::ItemCardConfig_XS_ItemInstance' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_XS_TransformKey) == 0x002F38, "Member 'UFortUIDataConfiguration::ItemCardConfig_XS_TransformKey' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_XXS_PersonnelAndSchematics) == 0x002F80, "Member 'UFortUIDataConfiguration::ItemCardConfig_XXS_PersonnelAndSchematics' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_XXS_ItemInstance) == 0x002FB8, "Member 'UFortUIDataConfiguration::ItemCardConfig_XXS_ItemInstance' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemCardConfig_XXS_TransformKey) == 0x002FE8, "Member 'UFortUIDataConfiguration::ItemCardConfig_XXS_TransformKey' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, HealthyGamingDataTable) == 0x003030, "Member 'UFortUIDataConfiguration::HealthyGamingDataTable' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, TrapPickerGameplayTagSettings) == 0x003058, "Member 'UFortUIDataConfiguration::TrapPickerGameplayTagSettings' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, TrapPickerSortScores) == 0x003080, "Member 'UFortUIDataConfiguration::TrapPickerSortScores' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ObjClassToTooltipStatsMap) == 0x003098, "Member 'UFortUIDataConfiguration::ObjClassToTooltipStatsMap' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, LoadingScreenBacchusTutorialWidget) == 0x0030A0, "Member 'UFortUIDataConfiguration::LoadingScreenBacchusTutorialWidget' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ActorCanvasArrowBrush) == 0x0030C8, "Member 'UFortUIDataConfiguration::ActorCanvasArrowBrush' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, GameOptionsMenuData) == 0x0030F0, "Member 'UFortUIDataConfiguration::GameOptionsMenuData' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, GameCreativeMenuData) == 0x0030F8, "Member 'UFortUIDataConfiguration::GameCreativeMenuData' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, GameOptionsMenuDefaults) == 0x003100, "Member 'UFortUIDataConfiguration::GameOptionsMenuDefaults' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, UITutorialData) == 0x003108, "Member 'UFortUIDataConfiguration::UITutorialData' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ProfileStatStyleSets) == 0x003130, "Member 'UFortUIDataConfiguration::ProfileStatStyleSets' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, LegacyNativeUIBrushMap) == 0x003140, "Member 'UFortUIDataConfiguration::LegacyNativeUIBrushMap' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, LegacyNativeUIAssetMap) == 0x003190, "Member 'UFortUIDataConfiguration::LegacyNativeUIAssetMap' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, AnalogRotateSpeed) == 0x0031E0, "Member 'UFortUIDataConfiguration::AnalogRotateSpeed' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, DragRotateSpeed) == 0x0031E4, "Member 'UFortUIDataConfiguration::DragRotateSpeed' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, TouchSwipeRotateRate) == 0x0031E8, "Member 'UFortUIDataConfiguration::TouchSwipeRotateRate' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, MouseWheelZoomSpeed) == 0x0031EC, "Member 'UFortUIDataConfiguration::MouseWheelZoomSpeed' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, DragZoomSpeed) == 0x0031F0, "Member 'UFortUIDataConfiguration::DragZoomSpeed' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, TriggerZoomSpeed) == 0x0031F4, "Member 'UFortUIDataConfiguration::TriggerZoomSpeed' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, TouchZoomPinchRate) == 0x0031F8, "Member 'UFortUIDataConfiguration::TouchZoomPinchRate' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemViewCompetingAxisInputThreshold) == 0x0031FC, "Member 'UFortUIDataConfiguration::ItemViewCompetingAxisInputThreshold' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, ItemTypesToUseVaultCamera) == 0x003200, "Member 'UFortUIDataConfiguration::ItemTypesToUseVaultCamera' has a wrong offset!");
static_assert(offsetof(UFortUIDataConfiguration, FrontendItemViewSettingsManager) == 0x003210, "Member 'UFortUIDataConfiguration::FrontendItemViewSettingsManager' has a wrong offset!");

// Class FortniteUI.FortMobileUIDataConfiguration
// 0x0278 (0x3490 - 0x3218)
class UFortMobileUIDataConfiguration final : public UFortUIDataConfiguration
{
public:
	struct FStateWidgetEntry                      ControllerOverrideStateWidgetClasses[0xD];         // 0x3218(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_3488[0x8];                                     // 0x3488(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMobileUIDataConfiguration">();
	}
	static class UFortMobileUIDataConfiguration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMobileUIDataConfiguration>();
	}
};
static_assert(alignof(UFortMobileUIDataConfiguration) == 0x000008, "Wrong alignment on UFortMobileUIDataConfiguration");
static_assert(sizeof(UFortMobileUIDataConfiguration) == 0x003490, "Wrong size on UFortMobileUIDataConfiguration");
static_assert(offsetof(UFortMobileUIDataConfiguration, ControllerOverrideStateWidgetClasses) == 0x003218, "Member 'UFortMobileUIDataConfiguration::ControllerOverrideStateWidgetClasses' has a wrong offset!");

// Class FortniteUI.FortModalContainerData
// 0x0010 (0x0040 - 0x0030)
class UFortModalContainerData final : public UDataAsset
{
public:
	TArray<struct FFortModalContainerSizeEntry>   Entries;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortModalContainerData">();
	}
	static class UFortModalContainerData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortModalContainerData>();
	}
};
static_assert(alignof(UFortModalContainerData) == 0x000008, "Wrong alignment on UFortModalContainerData");
static_assert(sizeof(UFortModalContainerData) == 0x000040, "Wrong size on UFortModalContainerData");
static_assert(offsetof(UFortModalContainerData, Entries) == 0x000030, "Member 'UFortModalContainerData::Entries' has a wrong offset!");

// Class FortniteUI.FortModalContainerWidget
// 0x0058 (0x0160 - 0x0108)
class UFortModalContainerWidget final : public UWidget
{
public:
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EModalContainerSize                           SizeConstraint;                                    // 0x0110(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortModalContainerSizeEntry>   DefaultSizeEntries;                                // 0x0118(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UFortModalContainerData*                OverrideSizeEntries;                               // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TopContent;                                        // 0x0130(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                MiddleContent;                                     // 0x0138(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                BottomContent;                                     // 0x0140(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                BackgroudContent;                                  // 0x0148(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_150[0x10];                                     // 0x0150(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortModalContainerWidget">();
	}
	static class UFortModalContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortModalContainerWidget>();
	}
};
static_assert(alignof(UFortModalContainerWidget) == 0x000008, "Wrong alignment on UFortModalContainerWidget");
static_assert(sizeof(UFortModalContainerWidget) == 0x000160, "Wrong size on UFortModalContainerWidget");
static_assert(offsetof(UFortModalContainerWidget, SizeConstraint) == 0x000110, "Member 'UFortModalContainerWidget::SizeConstraint' has a wrong offset!");
static_assert(offsetof(UFortModalContainerWidget, DefaultSizeEntries) == 0x000118, "Member 'UFortModalContainerWidget::DefaultSizeEntries' has a wrong offset!");
static_assert(offsetof(UFortModalContainerWidget, OverrideSizeEntries) == 0x000128, "Member 'UFortModalContainerWidget::OverrideSizeEntries' has a wrong offset!");
static_assert(offsetof(UFortModalContainerWidget, TopContent) == 0x000130, "Member 'UFortModalContainerWidget::TopContent' has a wrong offset!");
static_assert(offsetof(UFortModalContainerWidget, MiddleContent) == 0x000138, "Member 'UFortModalContainerWidget::MiddleContent' has a wrong offset!");
static_assert(offsetof(UFortModalContainerWidget, BottomContent) == 0x000140, "Member 'UFortModalContainerWidget::BottomContent' has a wrong offset!");
static_assert(offsetof(UFortModalContainerWidget, BackgroudContent) == 0x000148, "Member 'UFortModalContainerWidget::BackgroudContent' has a wrong offset!");

// Class FortniteUI.FortMOTDWidget
// 0x0030 (0x0350 - 0x0320)
class UFortMOTDWidget : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_Header;                                       // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Body;                                         // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Close;                                      // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UScrollBox*                             ScrollBox;                                         // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMOTDWidget">();
	}
	static class UFortMOTDWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMOTDWidget>();
	}
};
static_assert(alignof(UFortMOTDWidget) == 0x000008, "Wrong alignment on UFortMOTDWidget");
static_assert(sizeof(UFortMOTDWidget) == 0x000350, "Wrong size on UFortMOTDWidget");
static_assert(offsetof(UFortMOTDWidget, Text_Header) == 0x000330, "Member 'UFortMOTDWidget::Text_Header' has a wrong offset!");
static_assert(offsetof(UFortMOTDWidget, Text_Body) == 0x000338, "Member 'UFortMOTDWidget::Text_Body' has a wrong offset!");
static_assert(offsetof(UFortMOTDWidget, Button_Close) == 0x000340, "Member 'UFortMOTDWidget::Button_Close' has a wrong offset!");
static_assert(offsetof(UFortMOTDWidget, ScrollBox) == 0x000348, "Member 'UFortMOTDWidget::ScrollBox' has a wrong offset!");

// Class FortniteUI.FortMtxOfferData
// 0x0230 (0x0260 - 0x0030)
class UFortMtxOfferData final : public UPrimaryDataAsset
{
public:
	class FText                                   DisplayName;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ShortDisplayName;                                  // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ShortDescription;                                  // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          GrantOverride;                                     // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            TileImage;                                         // 0x0088(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BadgeImage;                                        // 0x0110(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DetailsImage;                                      // 0x0198(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FFortMtxDetailsAttribute>       DetailsAttributes;                                 // 0x0220(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFortMtxGradient                       Gradient;                                          // 0x0230(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           Background;                                        // 0x0250(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMtxOfferData">();
	}
	static class UFortMtxOfferData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMtxOfferData>();
	}
};
static_assert(alignof(UFortMtxOfferData) == 0x000008, "Wrong alignment on UFortMtxOfferData");
static_assert(sizeof(UFortMtxOfferData) == 0x000260, "Wrong size on UFortMtxOfferData");
static_assert(offsetof(UFortMtxOfferData, DisplayName) == 0x000030, "Member 'UFortMtxOfferData::DisplayName' has a wrong offset!");
static_assert(offsetof(UFortMtxOfferData, ShortDisplayName) == 0x000048, "Member 'UFortMtxOfferData::ShortDisplayName' has a wrong offset!");
static_assert(offsetof(UFortMtxOfferData, ShortDescription) == 0x000060, "Member 'UFortMtxOfferData::ShortDescription' has a wrong offset!");
static_assert(offsetof(UFortMtxOfferData, GrantOverride) == 0x000078, "Member 'UFortMtxOfferData::GrantOverride' has a wrong offset!");
static_assert(offsetof(UFortMtxOfferData, TileImage) == 0x000088, "Member 'UFortMtxOfferData::TileImage' has a wrong offset!");
static_assert(offsetof(UFortMtxOfferData, BadgeImage) == 0x000110, "Member 'UFortMtxOfferData::BadgeImage' has a wrong offset!");
static_assert(offsetof(UFortMtxOfferData, DetailsImage) == 0x000198, "Member 'UFortMtxOfferData::DetailsImage' has a wrong offset!");
static_assert(offsetof(UFortMtxOfferData, DetailsAttributes) == 0x000220, "Member 'UFortMtxOfferData::DetailsAttributes' has a wrong offset!");
static_assert(offsetof(UFortMtxOfferData, Gradient) == 0x000230, "Member 'UFortMtxOfferData::Gradient' has a wrong offset!");
static_assert(offsetof(UFortMtxOfferData, Background) == 0x000250, "Member 'UFortMtxOfferData::Background' has a wrong offset!");

// Class FortniteUI.FortMulchConfirmationModalWidget
// 0x0030 (0x0378 - 0x0348)
class UFortMulchConfirmationModalWidget final : public UFortActivatablePanel
{
public:
	TScriptInterface<class IFortItemManagementMulchPanel> HostItemManagementMulchPanel;                      // 0x0348(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UCommonTileView*                        RecycleItemTileView;                               // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItemManagementMulchDetailsPanel*   RecycleDetailsPanel;                               // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortInventoryContext*                  InventoryContext;                                  // 0x0370(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CommitMulch();
	TMap<EItemRecyclingWarning, int32> GetMulchWarnings();
	void UpdateConfirmationModal();
	void UpdateConfirmationModal_BP();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMulchConfirmationModalWidget">();
	}
	static class UFortMulchConfirmationModalWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMulchConfirmationModalWidget>();
	}
};
static_assert(alignof(UFortMulchConfirmationModalWidget) == 0x000008, "Wrong alignment on UFortMulchConfirmationModalWidget");
static_assert(sizeof(UFortMulchConfirmationModalWidget) == 0x000378, "Wrong size on UFortMulchConfirmationModalWidget");
static_assert(offsetof(UFortMulchConfirmationModalWidget, HostItemManagementMulchPanel) == 0x000348, "Member 'UFortMulchConfirmationModalWidget::HostItemManagementMulchPanel' has a wrong offset!");
static_assert(offsetof(UFortMulchConfirmationModalWidget, RecycleItemTileView) == 0x000358, "Member 'UFortMulchConfirmationModalWidget::RecycleItemTileView' has a wrong offset!");
static_assert(offsetof(UFortMulchConfirmationModalWidget, RecycleDetailsPanel) == 0x000360, "Member 'UFortMulchConfirmationModalWidget::RecycleDetailsPanel' has a wrong offset!");
static_assert(offsetof(UFortMulchConfirmationModalWidget, InventoryContext) == 0x000370, "Member 'UFortMulchConfirmationModalWidget::InventoryContext' has a wrong offset!");

// Class FortniteUI.FortMultiFactorAuthWidget
// 0x0058 (0x0378 - 0x0320)
class UFortMultiFactorAuthWidget : public UCommonActivatablePanel
{
public:
	class FText                                   PromptText;                                        // 0x0320(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UCommonButton*                          Button_Continue;                                   // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Cancel;                                     // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Error;                                        // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEditableText*                          EditText_MultiFactorCode;                          // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_358[0x20];                                     // 0x0358(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleTextCommitted(const class FText& Text, ETextCommit CommitMethod);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMultiFactorAuthWidget">();
	}
	static class UFortMultiFactorAuthWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMultiFactorAuthWidget>();
	}
};
static_assert(alignof(UFortMultiFactorAuthWidget) == 0x000008, "Wrong alignment on UFortMultiFactorAuthWidget");
static_assert(sizeof(UFortMultiFactorAuthWidget) == 0x000378, "Wrong size on UFortMultiFactorAuthWidget");
static_assert(offsetof(UFortMultiFactorAuthWidget, PromptText) == 0x000320, "Member 'UFortMultiFactorAuthWidget::PromptText' has a wrong offset!");
static_assert(offsetof(UFortMultiFactorAuthWidget, Button_Continue) == 0x000338, "Member 'UFortMultiFactorAuthWidget::Button_Continue' has a wrong offset!");
static_assert(offsetof(UFortMultiFactorAuthWidget, Button_Cancel) == 0x000340, "Member 'UFortMultiFactorAuthWidget::Button_Cancel' has a wrong offset!");
static_assert(offsetof(UFortMultiFactorAuthWidget, Text_Error) == 0x000348, "Member 'UFortMultiFactorAuthWidget::Text_Error' has a wrong offset!");
static_assert(offsetof(UFortMultiFactorAuthWidget, EditText_MultiFactorCode) == 0x000350, "Member 'UFortMultiFactorAuthWidget::EditText_MultiFactorCode' has a wrong offset!");

// Class FortniteUI.FortNodeCanvasEntityInterface
// 0x0000 (0x0028 - 0x0028)
class IFortNodeCanvasEntityInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortNodeCanvasEntityInterface">();
	}
	static class IFortNodeCanvasEntityInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFortNodeCanvasEntityInterface>();
	}
};
static_assert(alignof(IFortNodeCanvasEntityInterface) == 0x000008, "Wrong alignment on IFortNodeCanvasEntityInterface");
static_assert(sizeof(IFortNodeCanvasEntityInterface) == 0x000028, "Wrong size on IFortNodeCanvasEntityInterface");

// Class FortniteUI.FortNodeCanvasInterface
// 0x0000 (0x0028 - 0x0028)
class IFortNodeCanvasInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortNodeCanvasInterface">();
	}
	static class IFortNodeCanvasInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFortNodeCanvasInterface>();
	}
};
static_assert(alignof(IFortNodeCanvasInterface) == 0x000008, "Wrong alignment on IFortNodeCanvasInterface");
static_assert(sizeof(IFortNodeCanvasInterface) == 0x000028, "Wrong size on IFortNodeCanvasInterface");

// Class FortniteUI.FortSettingInfo
// 0x0060 (0x0088 - 0x0028)
class UFortSettingInfo final : public UObject
{
public:
	ESettingType                                  SettingType;                                       // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortOptionsMenuSetting>    SettingWidgetType;                                 // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OptionDisplayText;                                 // 0x0038(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   OptionHoverText;                                   // 0x0050(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         MinIntegralDigits;                                 // 0x0068(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIntegralDigits;                                 // 0x006C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinFractionalDigits;                               // 0x0070(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFractionalDigits;                               // 0x0074(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepSize;                                          // 0x0078(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSensitivityValue;                               // 0x007C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSensitivityValue;                               // 0x0080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERoundingMode                                 RoundingMode;                                      // 0x0084(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSettingInfo">();
	}
	static class UFortSettingInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSettingInfo>();
	}
};
static_assert(alignof(UFortSettingInfo) == 0x000008, "Wrong alignment on UFortSettingInfo");
static_assert(sizeof(UFortSettingInfo) == 0x000088, "Wrong size on UFortSettingInfo");
static_assert(offsetof(UFortSettingInfo, SettingType) == 0x000028, "Member 'UFortSettingInfo::SettingType' has a wrong offset!");
static_assert(offsetof(UFortSettingInfo, SettingWidgetType) == 0x000030, "Member 'UFortSettingInfo::SettingWidgetType' has a wrong offset!");
static_assert(offsetof(UFortSettingInfo, OptionDisplayText) == 0x000038, "Member 'UFortSettingInfo::OptionDisplayText' has a wrong offset!");
static_assert(offsetof(UFortSettingInfo, OptionHoverText) == 0x000050, "Member 'UFortSettingInfo::OptionHoverText' has a wrong offset!");
static_assert(offsetof(UFortSettingInfo, MinIntegralDigits) == 0x000068, "Member 'UFortSettingInfo::MinIntegralDigits' has a wrong offset!");
static_assert(offsetof(UFortSettingInfo, MaxIntegralDigits) == 0x00006C, "Member 'UFortSettingInfo::MaxIntegralDigits' has a wrong offset!");
static_assert(offsetof(UFortSettingInfo, MinFractionalDigits) == 0x000070, "Member 'UFortSettingInfo::MinFractionalDigits' has a wrong offset!");
static_assert(offsetof(UFortSettingInfo, MaxFractionalDigits) == 0x000074, "Member 'UFortSettingInfo::MaxFractionalDigits' has a wrong offset!");
static_assert(offsetof(UFortSettingInfo, StepSize) == 0x000078, "Member 'UFortSettingInfo::StepSize' has a wrong offset!");
static_assert(offsetof(UFortSettingInfo, MinSensitivityValue) == 0x00007C, "Member 'UFortSettingInfo::MinSensitivityValue' has a wrong offset!");
static_assert(offsetof(UFortSettingInfo, MaxSensitivityValue) == 0x000080, "Member 'UFortSettingInfo::MaxSensitivityValue' has a wrong offset!");
static_assert(offsetof(UFortSettingInfo, RoundingMode) == 0x000084, "Member 'UFortSettingInfo::RoundingMode' has a wrong offset!");

// Class FortniteUI.FortOutpostStorageItemPicker
// 0x0058 (0x0360 - 0x0308)
class UFortOutpostStorageItemPicker final : public UFortItemPickerBase
{
public:
	uint8                                         Pad_308[0x58];                                     // 0x0308(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UseFilter(EFortItemType ItemType);
	void UseFilters(const TArray<EFortItemType>& ItemTypes);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortOutpostStorageItemPicker">();
	}
	static class UFortOutpostStorageItemPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortOutpostStorageItemPicker>();
	}
};
static_assert(alignof(UFortOutpostStorageItemPicker) == 0x000008, "Wrong alignment on UFortOutpostStorageItemPicker");
static_assert(sizeof(UFortOutpostStorageItemPicker) == 0x000360, "Wrong size on UFortOutpostStorageItemPicker");

// Class FortniteUI.FortPartySuggestionButton
// 0x0040 (0x0B70 - 0x0B30)
class UFortPartySuggestionButton : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x18];                                     // 0x0B30(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 Image_Platform;                                    // 0x0B48(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 Image_PartySize;                                   // 0x0B50(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_DisplayName;                                  // 0x0B58(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Description;                                  // 0x0B60(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_ActionText;                                   // 0x0B68(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleLobbyStarted();
	void HandleSuggestionAccepted(int32 PlayerID);
	void OnDismissSuggestion();
	void OnDisplayInfoUpdated(const struct FDateTime& LFGTime, bool bIsInvited, bool bIsPlaying);
	void OnNewSuggestionAdded();
	void OnSuggestionAccepted();
	void OnSuggestionChanged();
	void UpdateDisplayInfo();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPartySuggestionButton">();
	}
	static class UFortPartySuggestionButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPartySuggestionButton>();
	}
};
static_assert(alignof(UFortPartySuggestionButton) == 0x000008, "Wrong alignment on UFortPartySuggestionButton");
static_assert(sizeof(UFortPartySuggestionButton) == 0x000B70, "Wrong size on UFortPartySuggestionButton");
static_assert(offsetof(UFortPartySuggestionButton, Image_Platform) == 0x000B48, "Member 'UFortPartySuggestionButton::Image_Platform' has a wrong offset!");
static_assert(offsetof(UFortPartySuggestionButton, Image_PartySize) == 0x000B50, "Member 'UFortPartySuggestionButton::Image_PartySize' has a wrong offset!");
static_assert(offsetof(UFortPartySuggestionButton, Text_DisplayName) == 0x000B58, "Member 'UFortPartySuggestionButton::Text_DisplayName' has a wrong offset!");
static_assert(offsetof(UFortPartySuggestionButton, Text_Description) == 0x000B60, "Member 'UFortPartySuggestionButton::Text_Description' has a wrong offset!");
static_assert(offsetof(UFortPartySuggestionButton, Text_ActionText) == 0x000B68, "Member 'UFortPartySuggestionButton::Text_ActionText' has a wrong offset!");

// Class FortniteUI.FortPerksWidget_NUI
// 0x0098 (0x02D0 - 0x0238)
class UFortPerksWidget_NUI : public UCommonUserWidget
{
public:
	class UFortHero*                              Hero;                                              // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortPerksWidgetState                         State;                                             // 0x0240(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortHero*                              EvolutionOption;                                   // 0x0248(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortPerkTierWidget_NUI>    PerkTierWidgetType;                                // 0x0250(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortPerkWidget_NUI>        PerkWidgetType;                                    // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortTooltipContext*                    TooltipContext;                                    // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonLoadGuard*                       PerksListLoadGuard;                                // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_270[0x60];                                     // 0x0270(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGeneratePerk(const struct FFortUIPerk& FortPerk, class UFortPerkWidget_NUI* PerkWidget);
	void OnGeneratePerkTier(const struct FFortUIPerkTier& FortPerkTier, class UFortPerkTierWidget_NUI* PerkTierWidget);
	void OnHeroChanged();
	void OnStateChanged();
	void ProcessActiveAbilityPerksAsync();
	void ProcessPerks();
	void ProcessPerkTiers();
	void SetHero(class UFortHero* InHero);
	void SetState(EFortPerksWidgetState InState, class UFortHero* InEvolutionOption);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPerksWidget_NUI">();
	}
	static class UFortPerksWidget_NUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPerksWidget_NUI>();
	}
};
static_assert(alignof(UFortPerksWidget_NUI) == 0x000008, "Wrong alignment on UFortPerksWidget_NUI");
static_assert(sizeof(UFortPerksWidget_NUI) == 0x0002D0, "Wrong size on UFortPerksWidget_NUI");
static_assert(offsetof(UFortPerksWidget_NUI, Hero) == 0x000238, "Member 'UFortPerksWidget_NUI::Hero' has a wrong offset!");
static_assert(offsetof(UFortPerksWidget_NUI, State) == 0x000240, "Member 'UFortPerksWidget_NUI::State' has a wrong offset!");
static_assert(offsetof(UFortPerksWidget_NUI, EvolutionOption) == 0x000248, "Member 'UFortPerksWidget_NUI::EvolutionOption' has a wrong offset!");
static_assert(offsetof(UFortPerksWidget_NUI, PerkTierWidgetType) == 0x000250, "Member 'UFortPerksWidget_NUI::PerkTierWidgetType' has a wrong offset!");
static_assert(offsetof(UFortPerksWidget_NUI, PerkWidgetType) == 0x000258, "Member 'UFortPerksWidget_NUI::PerkWidgetType' has a wrong offset!");
static_assert(offsetof(UFortPerksWidget_NUI, TooltipContext) == 0x000260, "Member 'UFortPerksWidget_NUI::TooltipContext' has a wrong offset!");
static_assert(offsetof(UFortPerksWidget_NUI, PerksListLoadGuard) == 0x000268, "Member 'UFortPerksWidget_NUI::PerksListLoadGuard' has a wrong offset!");

// Class FortniteUI.FortPickerContext
// 0x0180 (0x01A8 - 0x0028)
class UFortPickerContext final : public UBlueprintContextBase
{
public:
	UMulticastDelegateProperty_                   OnShowPicker;                                      // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPickerConfirm;                                   // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPickerCancel;                                    // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPickerOptionMoved;                               // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPickerOptionChosen;                              // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPickerRefreshItems;                              // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x18];                                      // 0x0088(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FItemDefOptionData>             CustomPickerMenuItems;                             // 0x00A0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FSquadQuickChatOptionData>      SquadChatMenuItems;                                // 0x00B0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<class UFortItemDefinition*, float>       TrackedTrapsMap;                                   // 0x00C0(0x0050)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortPickerData*                        PickerData;                                        // 0x0118(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UFortSchematicItem*>             AccountTrapSchematics;                             // 0x0120(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FFortPickerTemporaryWheel>      AvailableWheels;                                   // 0x0130(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	int32                                         CurrentWheelIndex;                                 // 0x0140(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_144[0xC];                                      // 0x0144(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UObject*, int32>                   ConsumableStackCount;                              // 0x0150(0x0050)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A0[0x8];                                      // 0x01A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetAdjacentPickerWheelInformation(int32 Direction, class FText* AdjacentTitle, bool* bCanPageThisDirection);
	class FText GetCurrentPickerDisplayName();
	void GetPickerWheelAdjacency(bool* bCanPageLeft, bool* bCanPageRight);
	void PickerCanceled();
	void PickerOptionAccepted(int32 Option);
	void RestoreInputAxes();
	void SetFortPickerData(class UFortPickerData* Data);
	void ShowRadialPickerMenu(EFortPickerToDisplay PickerType, int32 WheelIndex, class UObject* ContextObject);
	void SwitchToAdjacentWheel(int32 SelectionDirection);

	bool DoesRadialCloseOnRelease() const;
	int32 GetCurrentWheelIndex() const;
	class UFortItem* GetListPickerOption(int32 Param_Index) const;
	int32 GetNumPickerOptions() const;
	void GetRadialPickerOptionImageAndLabel(int32 Param_Index, class FText* Label, struct FSlateBrush* Brush, TSoftObjectPtr<class UTexture2D>* Icon, bool* bOptionEnabled) const;
	void GetRadialPickerOptionItem(int32 Param_Index, class UFortItem** Item, bool* bOptionEnabled) const;
	bool UseLeftThumbstick() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPickerContext">();
	}
	static class UFortPickerContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPickerContext>();
	}
};
static_assert(alignof(UFortPickerContext) == 0x000008, "Wrong alignment on UFortPickerContext");
static_assert(sizeof(UFortPickerContext) == 0x0001A8, "Wrong size on UFortPickerContext");
static_assert(offsetof(UFortPickerContext, OnShowPicker) == 0x000028, "Member 'UFortPickerContext::OnShowPicker' has a wrong offset!");
static_assert(offsetof(UFortPickerContext, OnPickerConfirm) == 0x000038, "Member 'UFortPickerContext::OnPickerConfirm' has a wrong offset!");
static_assert(offsetof(UFortPickerContext, OnPickerCancel) == 0x000048, "Member 'UFortPickerContext::OnPickerCancel' has a wrong offset!");
static_assert(offsetof(UFortPickerContext, OnPickerOptionMoved) == 0x000058, "Member 'UFortPickerContext::OnPickerOptionMoved' has a wrong offset!");
static_assert(offsetof(UFortPickerContext, OnPickerOptionChosen) == 0x000068, "Member 'UFortPickerContext::OnPickerOptionChosen' has a wrong offset!");
static_assert(offsetof(UFortPickerContext, OnPickerRefreshItems) == 0x000078, "Member 'UFortPickerContext::OnPickerRefreshItems' has a wrong offset!");
static_assert(offsetof(UFortPickerContext, CustomPickerMenuItems) == 0x0000A0, "Member 'UFortPickerContext::CustomPickerMenuItems' has a wrong offset!");
static_assert(offsetof(UFortPickerContext, SquadChatMenuItems) == 0x0000B0, "Member 'UFortPickerContext::SquadChatMenuItems' has a wrong offset!");
static_assert(offsetof(UFortPickerContext, TrackedTrapsMap) == 0x0000C0, "Member 'UFortPickerContext::TrackedTrapsMap' has a wrong offset!");
static_assert(offsetof(UFortPickerContext, PickerData) == 0x000118, "Member 'UFortPickerContext::PickerData' has a wrong offset!");
static_assert(offsetof(UFortPickerContext, AccountTrapSchematics) == 0x000120, "Member 'UFortPickerContext::AccountTrapSchematics' has a wrong offset!");
static_assert(offsetof(UFortPickerContext, AvailableWheels) == 0x000130, "Member 'UFortPickerContext::AvailableWheels' has a wrong offset!");
static_assert(offsetof(UFortPickerContext, CurrentWheelIndex) == 0x000140, "Member 'UFortPickerContext::CurrentWheelIndex' has a wrong offset!");
static_assert(offsetof(UFortPickerContext, ConsumableStackCount) == 0x000150, "Member 'UFortPickerContext::ConsumableStackCount' has a wrong offset!");

// Class FortniteUI.FortPickerData
// 0x00C0 (0x00F0 - 0x0030)
class UFortPickerData final : public UDataAsset
{
public:
	TArray<struct FBuildingCategoryOptionData>    BuildingCategories;                                // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FBuildingOptionData>            WallOptions;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FBuildingOptionData>            FloorOptions;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FBuildingOptionData>            StairOptions;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FBuildingOptionData>            RoofOptions;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FItemCategoryOptionData>        TrapCategories;                                    // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FItemCategoryOptionData>        WeaponCategories;                                  // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FRadialOptionData>              SocialCategories;                                  // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FChatOptionData>                ChatOptions;                                       // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UAthenaQuickChatBank*>           SquadChatOptionBanks;                              // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FMapNoteOptionData>             MapNoteOptions;                                    // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FEmoteOptionData>               EmoteOptions;                                      // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPickerData">();
	}
	static class UFortPickerData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPickerData>();
	}
};
static_assert(alignof(UFortPickerData) == 0x000008, "Wrong alignment on UFortPickerData");
static_assert(sizeof(UFortPickerData) == 0x0000F0, "Wrong size on UFortPickerData");
static_assert(offsetof(UFortPickerData, BuildingCategories) == 0x000030, "Member 'UFortPickerData::BuildingCategories' has a wrong offset!");
static_assert(offsetof(UFortPickerData, WallOptions) == 0x000040, "Member 'UFortPickerData::WallOptions' has a wrong offset!");
static_assert(offsetof(UFortPickerData, FloorOptions) == 0x000050, "Member 'UFortPickerData::FloorOptions' has a wrong offset!");
static_assert(offsetof(UFortPickerData, StairOptions) == 0x000060, "Member 'UFortPickerData::StairOptions' has a wrong offset!");
static_assert(offsetof(UFortPickerData, RoofOptions) == 0x000070, "Member 'UFortPickerData::RoofOptions' has a wrong offset!");
static_assert(offsetof(UFortPickerData, TrapCategories) == 0x000080, "Member 'UFortPickerData::TrapCategories' has a wrong offset!");
static_assert(offsetof(UFortPickerData, WeaponCategories) == 0x000090, "Member 'UFortPickerData::WeaponCategories' has a wrong offset!");
static_assert(offsetof(UFortPickerData, SocialCategories) == 0x0000A0, "Member 'UFortPickerData::SocialCategories' has a wrong offset!");
static_assert(offsetof(UFortPickerData, ChatOptions) == 0x0000B0, "Member 'UFortPickerData::ChatOptions' has a wrong offset!");
static_assert(offsetof(UFortPickerData, SquadChatOptionBanks) == 0x0000C0, "Member 'UFortPickerData::SquadChatOptionBanks' has a wrong offset!");
static_assert(offsetof(UFortPickerData, MapNoteOptions) == 0x0000D0, "Member 'UFortPickerData::MapNoteOptions' has a wrong offset!");
static_assert(offsetof(UFortPickerData, EmoteOptions) == 0x0000E0, "Member 'UFortPickerData::EmoteOptions' has a wrong offset!");

// Class FortniteUI.FortPlayedBeforeSelect
// 0x0028 (0x0348 - 0x0320)
class UFortPlayedBeforeSelect : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x18];                                     // 0x0320(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButton*                          Button_Yes;                                        // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_No;                                         // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayedBeforeSelect">();
	}
	static class UFortPlayedBeforeSelect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayedBeforeSelect>();
	}
};
static_assert(alignof(UFortPlayedBeforeSelect) == 0x000008, "Wrong alignment on UFortPlayedBeforeSelect");
static_assert(sizeof(UFortPlayedBeforeSelect) == 0x000348, "Wrong size on UFortPlayedBeforeSelect");
static_assert(offsetof(UFortPlayedBeforeSelect, Button_Yes) == 0x000338, "Member 'UFortPlayedBeforeSelect::Button_Yes' has a wrong offset!");
static_assert(offsetof(UFortPlayedBeforeSelect, Button_No) == 0x000340, "Member 'UFortPlayedBeforeSelect::Button_No' has a wrong offset!");

// Class FortniteUI.FortPlayerBanned
// 0x0000 (0x0348 - 0x0348)
class UFortPlayerBanned : public UFortActivatablePanel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerBanned">();
	}
	static class UFortPlayerBanned* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerBanned>();
	}
};
static_assert(alignof(UFortPlayerBanned) == 0x000008, "Wrong alignment on UFortPlayerBanned");
static_assert(sizeof(UFortPlayerBanned) == 0x000348, "Wrong size on UFortPlayerBanned");

// Class FortniteUI.FortPlayerBanner
// 0x00D8 (0x01E0 - 0x0108)
class UFortPlayerBanner final : public UWidget
{
public:
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              DesiredSize;                                       // 0x0110(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShowBorder;                                       // 0x0118(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUseLargeTexture;                                  // 0x0119(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11A[0x16];                                     // 0x011A(0x0016)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     DefaultBorderlessBannerMaterial;                   // 0x0130(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSlateBrush                            BannerBrush;                                       // 0x0138(0x0088)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C0[0x20];                                     // 0x01C0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerBanner">();
	}
	static class UFortPlayerBanner* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerBanner>();
	}
};
static_assert(alignof(UFortPlayerBanner) == 0x000008, "Wrong alignment on UFortPlayerBanner");
static_assert(sizeof(UFortPlayerBanner) == 0x0001E0, "Wrong size on UFortPlayerBanner");
static_assert(offsetof(UFortPlayerBanner, DesiredSize) == 0x000110, "Member 'UFortPlayerBanner::DesiredSize' has a wrong offset!");
static_assert(offsetof(UFortPlayerBanner, bShowBorder) == 0x000118, "Member 'UFortPlayerBanner::bShowBorder' has a wrong offset!");
static_assert(offsetof(UFortPlayerBanner, bUseLargeTexture) == 0x000119, "Member 'UFortPlayerBanner::bUseLargeTexture' has a wrong offset!");
static_assert(offsetof(UFortPlayerBanner, DefaultBorderlessBannerMaterial) == 0x000130, "Member 'UFortPlayerBanner::DefaultBorderlessBannerMaterial' has a wrong offset!");
static_assert(offsetof(UFortPlayerBanner, BannerBrush) == 0x000138, "Member 'UFortPlayerBanner::BannerBrush' has a wrong offset!");

// Class FortniteUI.FortPlayerNameDropdown
// 0x0000 (0x0358 - 0x0358)
class UFortPlayerNameDropdown : public UFortDropdownMenu
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerNameDropdown">();
	}
	static class UFortPlayerNameDropdown* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerNameDropdown>();
	}
};
static_assert(alignof(UFortPlayerNameDropdown) == 0x000008, "Wrong alignment on UFortPlayerNameDropdown");
static_assert(sizeof(UFortPlayerNameDropdown) == 0x000358, "Wrong size on UFortPlayerNameDropdown");

// Class FortniteUI.FortPlayerProfileBannerEditorTile
// 0x0010 (0x0B40 - 0x0B30)
class UFortPlayerProfileBannerEditorTile : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UFortItem>               Item;                                              // 0x0B38(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerProfileBannerEditorTile">();
	}
	static class UFortPlayerProfileBannerEditorTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerProfileBannerEditorTile>();
	}
};
static_assert(alignof(UFortPlayerProfileBannerEditorTile) == 0x000008, "Wrong alignment on UFortPlayerProfileBannerEditorTile");
static_assert(sizeof(UFortPlayerProfileBannerEditorTile) == 0x000B40, "Wrong size on UFortPlayerProfileBannerEditorTile");
static_assert(offsetof(UFortPlayerProfileBannerEditorTile, Item) == 0x000B38, "Member 'UFortPlayerProfileBannerEditorTile::Item' has a wrong offset!");

// Class FortniteUI.FortPlaysetInventoryPanelData
// 0x0000 (0x0068 - 0x0068)
class UFortPlaysetInventoryPanelData final : public UFortCreativeItemListPanelData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlaysetInventoryPanelData">();
	}
	static class UFortPlaysetInventoryPanelData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlaysetInventoryPanelData>();
	}
};
static_assert(alignof(UFortPlaysetInventoryPanelData) == 0x000008, "Wrong alignment on UFortPlaysetInventoryPanelData");
static_assert(sizeof(UFortPlaysetInventoryPanelData) == 0x000068, "Wrong size on UFortPlaysetInventoryPanelData");

// Class FortniteUI.FortPrivacyBase
// 0x0070 (0x03B8 - 0x0348)
class UFortPrivacyBase final : public UFortActivatablePanel
{
public:
	class UCommonButton*                          AllowFriendsOfFriendsButton;                       // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPanelWidget*                           AllowFriendsOfFriendsContainer;                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonGroup*                     ButtonGroup;                                       // 0x0358(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class UCommonButton*, EPartyType>        PrivacyButtonMap;                                  // 0x0360(0x0050)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3B0[0x8];                                      // 0x03B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddPrivacyButton(class UCommonButton* PrivacyButton, EPartyType PartyType);
	void ApplyPrivacySetting();
	void HandlePrivacyButtonSelected(class UCommonButton* SelectedPrivacyButton, int32 ButtonIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPrivacyBase">();
	}
	static class UFortPrivacyBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPrivacyBase>();
	}
};
static_assert(alignof(UFortPrivacyBase) == 0x000008, "Wrong alignment on UFortPrivacyBase");
static_assert(sizeof(UFortPrivacyBase) == 0x0003B8, "Wrong size on UFortPrivacyBase");
static_assert(offsetof(UFortPrivacyBase, AllowFriendsOfFriendsButton) == 0x000348, "Member 'UFortPrivacyBase::AllowFriendsOfFriendsButton' has a wrong offset!");
static_assert(offsetof(UFortPrivacyBase, AllowFriendsOfFriendsContainer) == 0x000350, "Member 'UFortPrivacyBase::AllowFriendsOfFriendsContainer' has a wrong offset!");
static_assert(offsetof(UFortPrivacyBase, ButtonGroup) == 0x000358, "Member 'UFortPrivacyBase::ButtonGroup' has a wrong offset!");
static_assert(offsetof(UFortPrivacyBase, PrivacyButtonMap) == 0x000360, "Member 'UFortPrivacyBase::PrivacyButtonMap' has a wrong offset!");

// Class FortniteUI.FortProfileStatsMainTile
// 0x0018 (0x0250 - 0x0238)
class UFortProfileStatsMainTile : public UCommonUserWidget
{
public:
	class UCommonTextBlock*                       ValueTextBlock;                                    // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       NameTextBlock;                                     // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TileTier;                                          // 0x0248(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortProfileStatsMainTile">();
	}
	static class UFortProfileStatsMainTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortProfileStatsMainTile>();
	}
};
static_assert(alignof(UFortProfileStatsMainTile) == 0x000008, "Wrong alignment on UFortProfileStatsMainTile");
static_assert(sizeof(UFortProfileStatsMainTile) == 0x000250, "Wrong size on UFortProfileStatsMainTile");
static_assert(offsetof(UFortProfileStatsMainTile, ValueTextBlock) == 0x000238, "Member 'UFortProfileStatsMainTile::ValueTextBlock' has a wrong offset!");
static_assert(offsetof(UFortProfileStatsMainTile, NameTextBlock) == 0x000240, "Member 'UFortProfileStatsMainTile::NameTextBlock' has a wrong offset!");
static_assert(offsetof(UFortProfileStatsMainTile, TileTier) == 0x000248, "Member 'UFortProfileStatsMainTile::TileTier' has a wrong offset!");

// Class FortniteUI.FortProfileStatsRow
// 0x0008 (0x0240 - 0x0238)
class UFortProfileStatsRow : public UCommonUserWidget
{
public:
	class UCommonTextBlock*                       Value;                                             // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortProfileStatsRow">();
	}
	static class UFortProfileStatsRow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortProfileStatsRow>();
	}
};
static_assert(alignof(UFortProfileStatsRow) == 0x000008, "Wrong alignment on UFortProfileStatsRow");
static_assert(sizeof(UFortProfileStatsRow) == 0x000240, "Wrong size on UFortProfileStatsRow");
static_assert(offsetof(UFortProfileStatsRow, Value) == 0x000238, "Member 'UFortProfileStatsRow::Value' has a wrong offset!");

// Class FortniteUI.FortProgressModal
// 0x00C0 (0x0408 - 0x0348)
class UFortProgressModal : public UFortActivatablePanel
{
public:
	class FText                                   Title;                                             // 0x0348(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0360(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Icon;                                              // 0x0378(0x0088)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	bool                                          bIntroOutroEnabled;                                // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoInitialize;                                   // 0x0401(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFocusSelf;                                        // 0x0402(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsumeAnalogInput;                               // 0x0403(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_404[0x4];                                      // 0x0404(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetDescription(const class FText& InDescription);
	void SetIcon(const struct FSlateBrush& InIcon);
	void SetTitle(const class FText& InTitle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortProgressModal">();
	}
	static class UFortProgressModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortProgressModal>();
	}
};
static_assert(alignof(UFortProgressModal) == 0x000008, "Wrong alignment on UFortProgressModal");
static_assert(sizeof(UFortProgressModal) == 0x000408, "Wrong size on UFortProgressModal");
static_assert(offsetof(UFortProgressModal, Title) == 0x000348, "Member 'UFortProgressModal::Title' has a wrong offset!");
static_assert(offsetof(UFortProgressModal, Description) == 0x000360, "Member 'UFortProgressModal::Description' has a wrong offset!");
static_assert(offsetof(UFortProgressModal, Icon) == 0x000378, "Member 'UFortProgressModal::Icon' has a wrong offset!");
static_assert(offsetof(UFortProgressModal, bIntroOutroEnabled) == 0x000400, "Member 'UFortProgressModal::bIntroOutroEnabled' has a wrong offset!");
static_assert(offsetof(UFortProgressModal, bAutoInitialize) == 0x000401, "Member 'UFortProgressModal::bAutoInitialize' has a wrong offset!");
static_assert(offsetof(UFortProgressModal, bFocusSelf) == 0x000402, "Member 'UFortProgressModal::bFocusSelf' has a wrong offset!");
static_assert(offsetof(UFortProgressModal, bConsumeAnalogInput) == 0x000403, "Member 'UFortProgressModal::bConsumeAnalogInput' has a wrong offset!");

// Class FortniteUI.FortPurchaseHistoryEntry
// 0x0010 (0x0B40 - 0x0B30)
class UFortPurchaseHistoryEntry : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_Name;                                         // 0x0B38(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetPurchaseText(const class FText& PurchaseText, bool bHasBeenRefunded);
	void SetRefundState(const class FText& PurchaseText, EItemRefundability Refundability);
	void UpdateItemList(const TArray<class UFortMultiSizeItemCard*>& ItemCards);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPurchaseHistoryEntry">();
	}
	static class UFortPurchaseHistoryEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPurchaseHistoryEntry>();
	}
};
static_assert(alignof(UFortPurchaseHistoryEntry) == 0x000008, "Wrong alignment on UFortPurchaseHistoryEntry");
static_assert(sizeof(UFortPurchaseHistoryEntry) == 0x000B40, "Wrong size on UFortPurchaseHistoryEntry");
static_assert(offsetof(UFortPurchaseHistoryEntry, Text_Name) == 0x000B38, "Member 'UFortPurchaseHistoryEntry::Text_Name' has a wrong offset!");

// Class FortniteUI.FortPurchaseHistoryListView
// 0x00C8 (0x02D8 - 0x0210)
class UFortPurchaseHistoryListView final : public UListViewBase
{
public:
	uint8                                         Pad_210[0xC8];                                     // 0x0210(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPurchaseHistoryListView">();
	}
	static class UFortPurchaseHistoryListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPurchaseHistoryListView>();
	}
};
static_assert(alignof(UFortPurchaseHistoryListView) == 0x000008, "Wrong alignment on UFortPurchaseHistoryListView");
static_assert(sizeof(UFortPurchaseHistoryListView) == 0x0002D8, "Wrong size on UFortPurchaseHistoryListView");

// Class FortniteUI.ReturnReasonDataWrapper
// 0x0018 (0x0040 - 0x0028)
class UReturnReasonDataWrapper final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReturnReasonDataWrapper">();
	}
	static class UReturnReasonDataWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReturnReasonDataWrapper>();
	}
};
static_assert(alignof(UReturnReasonDataWrapper) == 0x000008, "Wrong alignment on UReturnReasonDataWrapper");
static_assert(sizeof(UReturnReasonDataWrapper) == 0x000040, "Wrong size on UReturnReasonDataWrapper");

// Class FortniteUI.FortPvPMinimapWidget
// 0x0020 (0x0260 - 0x0240)
class UFortPvPMinimapWidget final : public UFortUserWidget
{
public:
	uint8                                         Pad_240[0x20];                                     // 0x0240(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPvPMinimapWidget">();
	}
	static class UFortPvPMinimapWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPvPMinimapWidget>();
	}
};
static_assert(alignof(UFortPvPMinimapWidget) == 0x000008, "Wrong alignment on UFortPvPMinimapWidget");
static_assert(sizeof(UFortPvPMinimapWidget) == 0x000260, "Wrong size on UFortPvPMinimapWidget");

// Class FortniteUI.FortQuestExpiresWidget
// 0x0010 (0x0248 - 0x0238)
class UFortQuestExpiresWidget : public UCommonUserWidget
{
public:
	TWeakObjectPtr<class UFortQuestItem>          Item;                                              // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_240[0x8];                                      // 0x0240(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnQuestExpirationUpdated();
	void SetData(class UFortQuestItem* InItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQuestExpiresWidget">();
	}
	static class UFortQuestExpiresWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQuestExpiresWidget>();
	}
};
static_assert(alignof(UFortQuestExpiresWidget) == 0x000008, "Wrong alignment on UFortQuestExpiresWidget");
static_assert(sizeof(UFortQuestExpiresWidget) == 0x000248, "Wrong size on UFortQuestExpiresWidget");
static_assert(offsetof(UFortQuestExpiresWidget, Item) == 0x000238, "Member 'UFortQuestExpiresWidget::Item' has a wrong offset!");

// Class FortniteUI.FortQuestMapCosmeticListWidget
// 0x0010 (0x0248 - 0x0238)
class UFortQuestMapCosmeticListWidget : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x10];                                     // 0x0238(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateCosmeticListDisplay();

	TArray<class UFortItemDefinition*> GetDisplayItemDefs() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQuestMapCosmeticListWidget">();
	}
	static class UFortQuestMapCosmeticListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQuestMapCosmeticListWidget>();
	}
};
static_assert(alignof(UFortQuestMapCosmeticListWidget) == 0x000008, "Wrong alignment on UFortQuestMapCosmeticListWidget");
static_assert(sizeof(UFortQuestMapCosmeticListWidget) == 0x000248, "Wrong size on UFortQuestMapCosmeticListWidget");

// Class FortniteUI.FortQuestMapNodeLayout
// 0x0068 (0x0298 - 0x0230)
class UFortQuestMapNodeLayout : public UUserWidget
{
public:
	class UCommonButton*                          ButtonPrevious;                                    // 0x0230(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonButton*                          ButtonNext;                                        // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USizeBox*                               StartArrow;                                        // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USizeBox*                               EndArrow;                                          // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelWidget*                           LayoutPanel;                                       // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonButtonGroup*                     QuestButtonGroup;                                  // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_260[0x30];                                     // 0x0260(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortQuestMapScreen*                    ParentScreen;                                      // 0x0290(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void DisposeLayout();
	void HandleQuestButtonSelected(class UCommonButton* SelectedQuestButton, int32 ButtonIndex);
	void HandleQuestIndexSelectionModelIndexChanged();
	void SetLayoutPanel(class UPanelWidget* Value);
	void SetParentScreen(class UFortQuestMapScreen* Parent);

	struct FFortQuestMapPage GetQuestPageData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQuestMapNodeLayout">();
	}
	static class UFortQuestMapNodeLayout* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQuestMapNodeLayout>();
	}
};
static_assert(alignof(UFortQuestMapNodeLayout) == 0x000008, "Wrong alignment on UFortQuestMapNodeLayout");
static_assert(sizeof(UFortQuestMapNodeLayout) == 0x000298, "Wrong size on UFortQuestMapNodeLayout");
static_assert(offsetof(UFortQuestMapNodeLayout, ButtonPrevious) == 0x000230, "Member 'UFortQuestMapNodeLayout::ButtonPrevious' has a wrong offset!");
static_assert(offsetof(UFortQuestMapNodeLayout, ButtonNext) == 0x000238, "Member 'UFortQuestMapNodeLayout::ButtonNext' has a wrong offset!");
static_assert(offsetof(UFortQuestMapNodeLayout, StartArrow) == 0x000240, "Member 'UFortQuestMapNodeLayout::StartArrow' has a wrong offset!");
static_assert(offsetof(UFortQuestMapNodeLayout, EndArrow) == 0x000248, "Member 'UFortQuestMapNodeLayout::EndArrow' has a wrong offset!");
static_assert(offsetof(UFortQuestMapNodeLayout, LayoutPanel) == 0x000250, "Member 'UFortQuestMapNodeLayout::LayoutPanel' has a wrong offset!");
static_assert(offsetof(UFortQuestMapNodeLayout, QuestButtonGroup) == 0x000258, "Member 'UFortQuestMapNodeLayout::QuestButtonGroup' has a wrong offset!");
static_assert(offsetof(UFortQuestMapNodeLayout, ParentScreen) == 0x000290, "Member 'UFortQuestMapNodeLayout::ParentScreen' has a wrong offset!");

// Class FortniteUI.FortQuestMapQuestTile
// 0x0018 (0x0250 - 0x0238)
class UFortQuestMapQuestTile : public UCommonUserWidget
{
public:
	class UCommonButton*                          QuestButton;                                       // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240[0x10];                                     // 0x0240(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleQuestDataChangedBP();
	void HandleSelectedChange(bool Selected);

	struct FFortQuestMapNode GetQuestNodeData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQuestMapQuestTile">();
	}
	static class UFortQuestMapQuestTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQuestMapQuestTile>();
	}
};
static_assert(alignof(UFortQuestMapQuestTile) == 0x000008, "Wrong alignment on UFortQuestMapQuestTile");
static_assert(sizeof(UFortQuestMapQuestTile) == 0x000250, "Wrong size on UFortQuestMapQuestTile");
static_assert(offsetof(UFortQuestMapQuestTile, QuestButton) == 0x000238, "Member 'UFortQuestMapQuestTile::QuestButton' has a wrong offset!");

// Class FortniteUI.FortQuestMapScreen
// 0x00C8 (0x03E8 - 0x0320)
class UFortQuestMapScreen final : public UCommonActivatablePanel
{
public:
	class UFortQuestMapDetailsPanel*              CampaignDetailsPanel;                              // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortQuestMapDetailsPanel*              EventDetailsPanel;                                 // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortQuestMapViewer*                    QuestMapViewer;                                    // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestMapScreenMode                           CurrentMode;                                       // 0x0338(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSpecialEventsCamera;                           // 0x0339(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33A[0x6];                                      // 0x033A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActiveEventFlag;                                   // 0x0340(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortQuestMapDataEntry                 CampaignQuestMapDataTable;                         // 0x0350(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortEventQuestMapDataEntry            EventQuestMapDataTable;                            // 0x0360(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UFortQuestItemDefinition*               CutoffQuest;                                       // 0x03A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortQuestMapDataEntry                 CurrentQuestMapDataTable;                          // 0x03B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C0[0x28];                                     // 0x03C0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CheckForNewMainQuest();
	void HandleEventQuestMapActivate();
	void HandleMapViewerNavigationRequest(EViewerNavigationDirection Direction);
	void HandleQuestDetailsUpdated(class UFortQuestItem* QuestDefinition);
	void HandleQuestIndexSelectionModelChanged();
	void HandleRequestCurrentQuestNavigation();
	void InitializeQuestData();
	bool IsBeyondCutoffQuest();
	bool IsEventFlagActive(const class FString& EventFlag);
	void SetBeyondCutoffQuest(bool bBeyondCutoff);
	void SetFindCurrentActionVisibility(EInputActionState ActionVisibility);
	void SetIgnorePageNavigation(bool bIgnoreNavigation);
	void SetQuestMapViewer(class UFortQuestMapViewer* Value);
	void ToggleQuestMapState();
	void UpdateQuestMapMode(EQuestMapScreenMode QuestMapMode);

	bool GetBeyondCutoffQuest() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQuestMapScreen">();
	}
	static class UFortQuestMapScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQuestMapScreen>();
	}
};
static_assert(alignof(UFortQuestMapScreen) == 0x000008, "Wrong alignment on UFortQuestMapScreen");
static_assert(sizeof(UFortQuestMapScreen) == 0x0003E8, "Wrong size on UFortQuestMapScreen");
static_assert(offsetof(UFortQuestMapScreen, CampaignDetailsPanel) == 0x000320, "Member 'UFortQuestMapScreen::CampaignDetailsPanel' has a wrong offset!");
static_assert(offsetof(UFortQuestMapScreen, EventDetailsPanel) == 0x000328, "Member 'UFortQuestMapScreen::EventDetailsPanel' has a wrong offset!");
static_assert(offsetof(UFortQuestMapScreen, QuestMapViewer) == 0x000330, "Member 'UFortQuestMapScreen::QuestMapViewer' has a wrong offset!");
static_assert(offsetof(UFortQuestMapScreen, CurrentMode) == 0x000338, "Member 'UFortQuestMapScreen::CurrentMode' has a wrong offset!");
static_assert(offsetof(UFortQuestMapScreen, bUseSpecialEventsCamera) == 0x000339, "Member 'UFortQuestMapScreen::bUseSpecialEventsCamera' has a wrong offset!");
static_assert(offsetof(UFortQuestMapScreen, ActiveEventFlag) == 0x000340, "Member 'UFortQuestMapScreen::ActiveEventFlag' has a wrong offset!");
static_assert(offsetof(UFortQuestMapScreen, CampaignQuestMapDataTable) == 0x000350, "Member 'UFortQuestMapScreen::CampaignQuestMapDataTable' has a wrong offset!");
static_assert(offsetof(UFortQuestMapScreen, EventQuestMapDataTable) == 0x000360, "Member 'UFortQuestMapScreen::EventQuestMapDataTable' has a wrong offset!");
static_assert(offsetof(UFortQuestMapScreen, CutoffQuest) == 0x0003A8, "Member 'UFortQuestMapScreen::CutoffQuest' has a wrong offset!");
static_assert(offsetof(UFortQuestMapScreen, CurrentQuestMapDataTable) == 0x0003B0, "Member 'UFortQuestMapScreen::CurrentQuestMapDataTable' has a wrong offset!");

// Class FortniteUI.FortQuestNotificationHandler
// 0x0008 (0x01A8 - 0x01A0)
class UFortQuestNotificationHandler final : public UFortDialogNotificationHandler
{
public:
	class UFortQuestItem*                         Quest;                                             // 0x01A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQuestNotificationHandler">();
	}
	static class UFortQuestNotificationHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQuestNotificationHandler>();
	}
};
static_assert(alignof(UFortQuestNotificationHandler) == 0x000008, "Wrong alignment on UFortQuestNotificationHandler");
static_assert(sizeof(UFortQuestNotificationHandler) == 0x0001A8, "Wrong size on UFortQuestNotificationHandler");
static_assert(offsetof(UFortQuestNotificationHandler, Quest) == 0x0001A0, "Member 'UFortQuestNotificationHandler::Quest' has a wrong offset!");

// Class FortniteUI.FortQuestObjectiveEntry
// 0x0020 (0x0258 - 0x0238)
class UFortQuestObjectiveEntry final : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnFinishedDisplaying;                              // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	class UFortQuestObjectiveInfo*                MyObjectiveInfo;                                   // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ObjectiveInfoSet(const class UFortQuestObjectiveInfo* ObjectiveInfo, bool IsAnnouncement);
	void StartDisplayingObjective();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQuestObjectiveEntry">();
	}
	static class UFortQuestObjectiveEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQuestObjectiveEntry>();
	}
};
static_assert(alignof(UFortQuestObjectiveEntry) == 0x000008, "Wrong alignment on UFortQuestObjectiveEntry");
static_assert(sizeof(UFortQuestObjectiveEntry) == 0x000258, "Wrong size on UFortQuestObjectiveEntry");
static_assert(offsetof(UFortQuestObjectiveEntry, OnFinishedDisplaying) == 0x000240, "Member 'UFortQuestObjectiveEntry::OnFinishedDisplaying' has a wrong offset!");
static_assert(offsetof(UFortQuestObjectiveEntry, MyObjectiveInfo) == 0x000250, "Member 'UFortQuestObjectiveEntry::MyObjectiveInfo' has a wrong offset!");

// Class FortniteUI.FortQuestPlayButton
// 0x0008 (0x0240 - 0x0238)
class UFortQuestPlayButton final : public UCommonUserWidget
{
public:
	class UFortQuestItem*                         QuestItem;                                         // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AttemptToPlayQuest();
	void HandleLobbyDisconnected();
	void HandleMatchmakingComplete(EMatchmakingCompleteResult Result);
	void HandleMatchmakingStarted();
	void HandlePlayerStateChanged();
	void OnContentMissing();

	bool CanNavigateToQuestObjective() const;
	bool CanPlayQuest() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQuestPlayButton">();
	}
	static class UFortQuestPlayButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQuestPlayButton>();
	}
};
static_assert(alignof(UFortQuestPlayButton) == 0x000008, "Wrong alignment on UFortQuestPlayButton");
static_assert(sizeof(UFortQuestPlayButton) == 0x000240, "Wrong size on UFortQuestPlayButton");
static_assert(offsetof(UFortQuestPlayButton, QuestItem) == 0x000238, "Member 'UFortQuestPlayButton::QuestItem' has a wrong offset!");

// Class FortniteUI.FortQuestTrackerSubEntry
// 0x0040 (0x0278 - 0x0238)
class UFortQuestTrackerSubEntry final : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x10];                                     // 0x0238(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortQuestObjectiveInfo*                TrackedObjective;                                  // 0x0248(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnSizeEstimateChangedDelegate;                     // 0x0250(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnHUDQuestObjectiveCompletedDelegate;              // 0x0260(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bConfigureAsHUD;                                   // 0x0270(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleQuestsUpdated();
	void NotifyCompletionAnimationFinished();
	void OnPlayObjectiveCompletedAnimation();
	void OnQuestsUpdated();
	void OnSetup();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQuestTrackerSubEntry">();
	}
	static class UFortQuestTrackerSubEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQuestTrackerSubEntry>();
	}
};
static_assert(alignof(UFortQuestTrackerSubEntry) == 0x000008, "Wrong alignment on UFortQuestTrackerSubEntry");
static_assert(sizeof(UFortQuestTrackerSubEntry) == 0x000278, "Wrong size on UFortQuestTrackerSubEntry");
static_assert(offsetof(UFortQuestTrackerSubEntry, TrackedObjective) == 0x000248, "Member 'UFortQuestTrackerSubEntry::TrackedObjective' has a wrong offset!");
static_assert(offsetof(UFortQuestTrackerSubEntry, OnSizeEstimateChangedDelegate) == 0x000250, "Member 'UFortQuestTrackerSubEntry::OnSizeEstimateChangedDelegate' has a wrong offset!");
static_assert(offsetof(UFortQuestTrackerSubEntry, OnHUDQuestObjectiveCompletedDelegate) == 0x000260, "Member 'UFortQuestTrackerSubEntry::OnHUDQuestObjectiveCompletedDelegate' has a wrong offset!");
static_assert(offsetof(UFortQuestTrackerSubEntry, bConfigureAsHUD) == 0x000270, "Member 'UFortQuestTrackerSubEntry::bConfigureAsHUD' has a wrong offset!");

// Class FortniteUI.FortQuestTreeItemWidget
// 0x0010 (0x0B40 - 0x0B30)
class UFortQuestTreeItemWidget : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UObject>                 QuestOrCategory;                                   // 0x0B38(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleQuestsUpdated();
	void OnQuestsUpdated();
	void SetupAsCategory(class UFortQuestCategory* Category);
	void SetupAsQuest(class UFortQuestItem* Category);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQuestTreeItemWidget">();
	}
	static class UFortQuestTreeItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQuestTreeItemWidget>();
	}
};
static_assert(alignof(UFortQuestTreeItemWidget) == 0x000008, "Wrong alignment on UFortQuestTreeItemWidget");
static_assert(sizeof(UFortQuestTreeItemWidget) == 0x000B40, "Wrong size on UFortQuestTreeItemWidget");
static_assert(offsetof(UFortQuestTreeItemWidget, QuestOrCategory) == 0x000B38, "Member 'UFortQuestTreeItemWidget::QuestOrCategory' has a wrong offset!");

// Class FortniteUI.FortQuestUpdatesLog
// 0x0040 (0x02A8 - 0x0268)
class UFortQuestUpdatesLog final : public UFortHUDElementWidget
{
public:
	TSubclassOf<class UFortQuestUpdateEntry>      QuestEntryClass;                                   // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxDisplayedQuestUpdates;                          // 0x0270(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxDisplayedQuestObjectives;                       // 0x0274(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBox*                           QuestUpdatesBox;                                   // 0x0278(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_280[0x10];                                     // 0x0280(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortQuestUpdateEntry*>          QuestUpdateWidgets;                                // 0x0290(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateAnnouncementUpdate(const class UFortQuestObjectiveInfo* QuestItemToCheck);
	void HandleDisplayDynamicQuestUpdate(const class UFortQuestObjectiveInfo* QuestObjective, bool DisplayStatusUpdate, bool DisplayAnnouncementUpdate);
	void HandleQuestUpdateFinished(class UFortQuestUpdateEntry* QuestEntryFinished);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQuestUpdatesLog">();
	}
	static class UFortQuestUpdatesLog* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQuestUpdatesLog>();
	}
};
static_assert(alignof(UFortQuestUpdatesLog) == 0x000008, "Wrong alignment on UFortQuestUpdatesLog");
static_assert(sizeof(UFortQuestUpdatesLog) == 0x0002A8, "Wrong size on UFortQuestUpdatesLog");
static_assert(offsetof(UFortQuestUpdatesLog, QuestEntryClass) == 0x000268, "Member 'UFortQuestUpdatesLog::QuestEntryClass' has a wrong offset!");
static_assert(offsetof(UFortQuestUpdatesLog, MaxDisplayedQuestUpdates) == 0x000270, "Member 'UFortQuestUpdatesLog::MaxDisplayedQuestUpdates' has a wrong offset!");
static_assert(offsetof(UFortQuestUpdatesLog, MaxDisplayedQuestObjectives) == 0x000274, "Member 'UFortQuestUpdatesLog::MaxDisplayedQuestObjectives' has a wrong offset!");
static_assert(offsetof(UFortQuestUpdatesLog, QuestUpdatesBox) == 0x000278, "Member 'UFortQuestUpdatesLog::QuestUpdatesBox' has a wrong offset!");
static_assert(offsetof(UFortQuestUpdatesLog, QuestUpdateWidgets) == 0x000290, "Member 'UFortQuestUpdatesLog::QuestUpdateWidgets' has a wrong offset!");

// Class FortniteUI.FortQuickBarSlotBase
// 0x00E0 (0x0318 - 0x0238)
class UFortQuickBarSlotBase final : public UCommonUserWidget
{
public:
	class UCommonWidgetSwitcher*                  SwitcherTopComboSwitcher;                          // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonWidgetSwitcher*                  SwitcherBottomComboSwitcher;                       // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortKeybindWidget*                     KeybindTop;                                        // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortKeybindWidget*                     KeybindBottom;                                     // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortKeybindWidget*                     KeybindBottomCombo1;                               // 0x0258(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortKeybindWidget*                     KeybindBottomCombo2;                               // 0x0260(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortKeybindWidget*                     KeybindTopComboArrow1;                             // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortKeybindWidget*                     KeybindTopComboArrow2;                             // 0x0270(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortKeybindWidget*                     KeybindBottomComboArrow1;                          // 0x0278(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortKeybindWidget*                     KeybindBottomComboArrow2;                          // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       BottomHoldText;                                    // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 TopLeftArrowImage;                                 // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 TopLeftArrowImage2;                                // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 TopRightArrowImage;                                // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 TopRightArrowImage2;                               // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 BottomLeftArrowImage;                              // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 BottomLeftArrowImage2;                             // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 BottomRightArrowImage;                             // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 BottomRightArrowImage2;                            // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 EmptyImage;                                        // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortMultiSizeItemCard*                 ItemCardMaximized;                                 // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortMultiSizeItemCard*                 ItemCardMinimized;                                 // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItemCooldownWidget*                QuickbarSlotCooldown;                              // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 SlotInteraction;                                   // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAthenaQuickBarNativeCell*              NativeCell;                                        // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SlotIndex;                                         // 0x0300(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortQuickBars                                QuickBarType;                                      // 0x0304(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bShowBottomArrows : 1;                             // 0x0305(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         BitPad_305_1 : 2;                                  // 0x0305(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bShowTopArrows : 1;                                // 0x0305(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         BitPad_305_4 : 2;                                  // 0x0305(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bHideKeybindsWhenAbilityUnavailable : 1;           // 0x0305(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bShouldCollapseItemWidgetBorder : 1;               // 0x0305(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         DoNotPlaySelectionAnimation : 1;                   // 0x0306(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIsAthenaQuickBar : 1;                             // 0x0306(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bKeybindsHidden : 1;                               // 0x0306(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	EFortItemCardSize                             ItemCardSize;                                      // 0x0307(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItem*                              Item;                                              // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortInputData*                         InputData;                                         // 0x0310(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class FName GetKeyBindingAction();
	class FName GetKeyBindingActionGamepad();
	class FName GetKeyBindingActionKeyboard();
	void MaximizeSlot(bool bShouldSkipAnimation);
	void MinimizeSlot(bool bShouldSkipAnimation);
	void OnRefreshItem();
	void RefreshItem();
	void Resize(EFortItemCardSize CardSize);
	void SetBottomComboSwitcherVisibility(ESlateVisibility InVisibility);
	void SetQuickbarIndexRuntime(int32 Param_Index, bool bRefresh);
	void SetQuickbarTypeRuntime(EFortQuickBars NewQuickBarType, bool bRefresh);
	void SetSlotSelected(bool bSelected);
	void SetTopComboSwitcherVisibility(ESlateVisibility InVisibility);
	void UpdateItemCardsVisibility();
	void UpdateKeyBindingText();
	void UpdateKeyBindingVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQuickBarSlotBase">();
	}
	static class UFortQuickBarSlotBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQuickBarSlotBase>();
	}
};
static_assert(alignof(UFortQuickBarSlotBase) == 0x000008, "Wrong alignment on UFortQuickBarSlotBase");
static_assert(sizeof(UFortQuickBarSlotBase) == 0x000318, "Wrong size on UFortQuickBarSlotBase");
static_assert(offsetof(UFortQuickBarSlotBase, SwitcherTopComboSwitcher) == 0x000238, "Member 'UFortQuickBarSlotBase::SwitcherTopComboSwitcher' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, SwitcherBottomComboSwitcher) == 0x000240, "Member 'UFortQuickBarSlotBase::SwitcherBottomComboSwitcher' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, KeybindTop) == 0x000248, "Member 'UFortQuickBarSlotBase::KeybindTop' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, KeybindBottom) == 0x000250, "Member 'UFortQuickBarSlotBase::KeybindBottom' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, KeybindBottomCombo1) == 0x000258, "Member 'UFortQuickBarSlotBase::KeybindBottomCombo1' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, KeybindBottomCombo2) == 0x000260, "Member 'UFortQuickBarSlotBase::KeybindBottomCombo2' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, KeybindTopComboArrow1) == 0x000268, "Member 'UFortQuickBarSlotBase::KeybindTopComboArrow1' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, KeybindTopComboArrow2) == 0x000270, "Member 'UFortQuickBarSlotBase::KeybindTopComboArrow2' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, KeybindBottomComboArrow1) == 0x000278, "Member 'UFortQuickBarSlotBase::KeybindBottomComboArrow1' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, KeybindBottomComboArrow2) == 0x000280, "Member 'UFortQuickBarSlotBase::KeybindBottomComboArrow2' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, BottomHoldText) == 0x000288, "Member 'UFortQuickBarSlotBase::BottomHoldText' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, TopLeftArrowImage) == 0x000290, "Member 'UFortQuickBarSlotBase::TopLeftArrowImage' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, TopLeftArrowImage2) == 0x000298, "Member 'UFortQuickBarSlotBase::TopLeftArrowImage2' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, TopRightArrowImage) == 0x0002A0, "Member 'UFortQuickBarSlotBase::TopRightArrowImage' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, TopRightArrowImage2) == 0x0002A8, "Member 'UFortQuickBarSlotBase::TopRightArrowImage2' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, BottomLeftArrowImage) == 0x0002B0, "Member 'UFortQuickBarSlotBase::BottomLeftArrowImage' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, BottomLeftArrowImage2) == 0x0002B8, "Member 'UFortQuickBarSlotBase::BottomLeftArrowImage2' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, BottomRightArrowImage) == 0x0002C0, "Member 'UFortQuickBarSlotBase::BottomRightArrowImage' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, BottomRightArrowImage2) == 0x0002C8, "Member 'UFortQuickBarSlotBase::BottomRightArrowImage2' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, EmptyImage) == 0x0002D0, "Member 'UFortQuickBarSlotBase::EmptyImage' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, ItemCardMaximized) == 0x0002D8, "Member 'UFortQuickBarSlotBase::ItemCardMaximized' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, ItemCardMinimized) == 0x0002E0, "Member 'UFortQuickBarSlotBase::ItemCardMinimized' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, QuickbarSlotCooldown) == 0x0002E8, "Member 'UFortQuickBarSlotBase::QuickbarSlotCooldown' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, SlotInteraction) == 0x0002F0, "Member 'UFortQuickBarSlotBase::SlotInteraction' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, NativeCell) == 0x0002F8, "Member 'UFortQuickBarSlotBase::NativeCell' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, SlotIndex) == 0x000300, "Member 'UFortQuickBarSlotBase::SlotIndex' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, QuickBarType) == 0x000304, "Member 'UFortQuickBarSlotBase::QuickBarType' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, ItemCardSize) == 0x000307, "Member 'UFortQuickBarSlotBase::ItemCardSize' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, Item) == 0x000308, "Member 'UFortQuickBarSlotBase::Item' has a wrong offset!");
static_assert(offsetof(UFortQuickBarSlotBase, InputData) == 0x000310, "Member 'UFortQuickBarSlotBase::InputData' has a wrong offset!");

// Class FortniteUI.FortRedeemCodeBase
// 0x0000 (0x0348 - 0x0348)
class UFortRedeemCodeBase : public UFortActivatablePanel
{
public:
	void OnRedeemFriendCodeComplete(bool bSuccess, ERedeemCodeFailureReason FailureReason);
	void RedeemFriendCode(const class FString& FriendCode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRedeemCodeBase">();
	}
	static class UFortRedeemCodeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRedeemCodeBase>();
	}
};
static_assert(alignof(UFortRedeemCodeBase) == 0x000008, "Wrong alignment on UFortRedeemCodeBase");
static_assert(sizeof(UFortRedeemCodeBase) == 0x000348, "Wrong size on UFortRedeemCodeBase");

// Class FortniteUI.FortRefundConfirmation
// 0x0030 (0x0350 - 0x0320)
class UFortRefundConfirmation : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_AreYouSure;                                   // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_RefundsRemaining;                             // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Yes;                                        // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_No;                                         // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetRefundsRemainingText(int32 RefundsRemaining, int32 TotalRefunds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRefundConfirmation">();
	}
	static class UFortRefundConfirmation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRefundConfirmation>();
	}
};
static_assert(alignof(UFortRefundConfirmation) == 0x000008, "Wrong alignment on UFortRefundConfirmation");
static_assert(sizeof(UFortRefundConfirmation) == 0x000350, "Wrong size on UFortRefundConfirmation");
static_assert(offsetof(UFortRefundConfirmation, Text_AreYouSure) == 0x000330, "Member 'UFortRefundConfirmation::Text_AreYouSure' has a wrong offset!");
static_assert(offsetof(UFortRefundConfirmation, Text_RefundsRemaining) == 0x000338, "Member 'UFortRefundConfirmation::Text_RefundsRemaining' has a wrong offset!");
static_assert(offsetof(UFortRefundConfirmation, Button_Yes) == 0x000340, "Member 'UFortRefundConfirmation::Button_Yes' has a wrong offset!");
static_assert(offsetof(UFortRefundConfirmation, Button_No) == 0x000348, "Member 'UFortRefundConfirmation::Button_No' has a wrong offset!");

// Class FortniteUI.FortRejoinWindowBase
// 0x0010 (0x0330 - 0x0320)
class UFortRejoinWindowBase : public UCommonActivatablePanel
{
public:
	class UCommonTextBlock*                       RejoinTime;                                        // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTimeoutTimeReached();
	void StartTimeout(float TimeoutTime);
	void StopTimeout();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRejoinWindowBase">();
	}
	static class UFortRejoinWindowBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRejoinWindowBase>();
	}
};
static_assert(alignof(UFortRejoinWindowBase) == 0x000008, "Wrong alignment on UFortRejoinWindowBase");
static_assert(sizeof(UFortRejoinWindowBase) == 0x000330, "Wrong size on UFortRejoinWindowBase");
static_assert(offsetof(UFortRejoinWindowBase, RejoinTime) == 0x000320, "Member 'UFortRejoinWindowBase::RejoinTime' has a wrong offset!");

// Class FortniteUI.FortRelativeAnchorCanvasSlot
// 0x0010 (0x0048 - 0x0038)
class UFortRelativeAnchorCanvasSlot final : public UPanelSlot
{
public:
	TWeakObjectPtr<class UWidget>                 AnchorWidget;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAnchorWidget(const class UWidget* NewAnchorWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRelativeAnchorCanvasSlot">();
	}
	static class UFortRelativeAnchorCanvasSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRelativeAnchorCanvasSlot>();
	}
};
static_assert(alignof(UFortRelativeAnchorCanvasSlot) == 0x000008, "Wrong alignment on UFortRelativeAnchorCanvasSlot");
static_assert(sizeof(UFortRelativeAnchorCanvasSlot) == 0x000048, "Wrong size on UFortRelativeAnchorCanvasSlot");
static_assert(offsetof(UFortRelativeAnchorCanvasSlot, AnchorWidget) == 0x000038, "Member 'UFortRelativeAnchorCanvasSlot::AnchorWidget' has a wrong offset!");

// Class FortniteUI.FortRelativeAnchorCanvas
// 0x0018 (0x0138 - 0x0120)
class UFortRelativeAnchorCanvas final : public UPanelWidget
{
public:
	int32                                         ZLayerOffset;                                      // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x14];                                     // 0x0124(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFortRelativeAnchorCanvasSlot* AddSlot(const class UWidget* ContentWidget, const class UWidget* AnchorWidget);
	void SetZLayerOffset(const int32 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRelativeAnchorCanvas">();
	}
	static class UFortRelativeAnchorCanvas* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRelativeAnchorCanvas>();
	}
};
static_assert(alignof(UFortRelativeAnchorCanvas) == 0x000008, "Wrong alignment on UFortRelativeAnchorCanvas");
static_assert(sizeof(UFortRelativeAnchorCanvas) == 0x000138, "Wrong size on UFortRelativeAnchorCanvas");
static_assert(offsetof(UFortRelativeAnchorCanvas, ZLayerOffset) == 0x000120, "Member 'UFortRelativeAnchorCanvas::ZLayerOffset' has a wrong offset!");

// Class FortniteUI.FortReplayBase
// 0x0008 (0x0270 - 0x0268)
class UFortReplayBase final : public UFortHUDElementWidget
{
public:
	class UFortReplayContext*                     ReplayContext;                                     // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnPlaybackTimeChanged(float NowTime);
	void OnReplayPausedChanged(bool bIsPaused);
	void OnTimelineRangeChanged(float StartTime, float EndTime);
	void SetReplayContext(class UFortReplayContext* InReplayContext);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortReplayBase">();
	}
	static class UFortReplayBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortReplayBase>();
	}
};
static_assert(alignof(UFortReplayBase) == 0x000008, "Wrong alignment on UFortReplayBase");
static_assert(sizeof(UFortReplayBase) == 0x000270, "Wrong size on UFortReplayBase");
static_assert(offsetof(UFortReplayBase, ReplayContext) == 0x000268, "Member 'UFortReplayBase::ReplayContext' has a wrong offset!");

// Class FortniteUI.FortReplayViewSettingsTabBase
// 0x0008 (0x0350 - 0x0348)
class UFortReplayViewSettingsTabBase final : public UFortActivatablePanel
{
public:
	class AFortPlayerControllerSpectating*        SpectatingPC;                                      // 0x0348(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void CenterOnTab();
	void OnCameraTypeChanged(class AFortPlayerControllerSpectating* FortPlayerControllerSpectating, ESpectatorCameraType CameraType);
	void OnFXStateChanged(const struct FFortReplayFXState& NewFXState);
	void ResetToDefault();
	void SetWidgetValues();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortReplayViewSettingsTabBase">();
	}
	static class UFortReplayViewSettingsTabBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortReplayViewSettingsTabBase>();
	}
};
static_assert(alignof(UFortReplayViewSettingsTabBase) == 0x000008, "Wrong alignment on UFortReplayViewSettingsTabBase");
static_assert(sizeof(UFortReplayViewSettingsTabBase) == 0x000350, "Wrong size on UFortReplayViewSettingsTabBase");
static_assert(offsetof(UFortReplayViewSettingsTabBase, SpectatingPC) == 0x000348, "Member 'UFortReplayViewSettingsTabBase::SpectatingPC' has a wrong offset!");

// Class FortniteUI.FortReportActioned
// 0x0000 (0x0348 - 0x0348)
class UFortReportActioned final : public UFortActivatablePanel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortReportActioned">();
	}
	static class UFortReportActioned* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortReportActioned>();
	}
};
static_assert(alignof(UFortReportActioned) == 0x000008, "Wrong alignment on UFortReportActioned");
static_assert(sizeof(UFortReportActioned) == 0x000348, "Wrong size on UFortReportActioned");

// Class FortniteUI.FortResearchMenuBase
// 0x0008 (0x0350 - 0x0348)
class UFortResearchMenuBase final : public UFortActivatablePanel
{
public:
	class UFortItemDefinition*                    ResearchRespecToken;                               // 0x0348(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	int32 GetClaimableResearchPointEstimate();
	void OnPurchaseResearchLevelCompleted();
	void OnPurchaseResearchLevelStarted();
	void OnUseResearchRespecTokenComplete();
	void RequestPurchaseResearchLevel(const class FString& StatId);
	void UseResearchRespecToken();

	bool AreResearchRespecTokensAvailable() const;
	int32 GetResearchRespecTokenCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortResearchMenuBase">();
	}
	static class UFortResearchMenuBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortResearchMenuBase>();
	}
};
static_assert(alignof(UFortResearchMenuBase) == 0x000008, "Wrong alignment on UFortResearchMenuBase");
static_assert(sizeof(UFortResearchMenuBase) == 0x000350, "Wrong size on UFortResearchMenuBase");
static_assert(offsetof(UFortResearchMenuBase, ResearchRespecToken) == 0x000348, "Member 'UFortResearchMenuBase::ResearchRespecToken' has a wrong offset!");

// Class FortniteUI.FortResearchStatTileWidget
// 0x0050 (0x0280 - 0x0230)
class UFortResearchStatTileWidget final : public UUserWidget
{
public:
	class UFortStatItemDefinition*                PersonalStatItemDefinition;                        // 0x0230(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortStatItemDefinition*                TeamStatItemDefinition;                            // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   StatCostCurveName;                                 // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   StatPersonalDeltaCurveName;                        // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   StatPersonalCumulativeCurveName;                   // 0x0250(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   StatTeamDeltaCurveName;                            // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   StatTeamCumulativeCurveName;                       // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_268[0x18];                                     // 0x0268(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnStatChanged();

	int32 GetCostToIncreaseStat() const;
	int32 GetCurrentCombinedStatValue() const;
	int32 GetCurrentPersonalStatValue() const;
	int32 GetCurrentResearchLevel() const;
	int32 GetCurrentTeamStatValue() const;
	int32 GetNextCombinedStatValueDelta() const;
	int32 GetNextPersonalStatValueDelta() const;
	int32 GetNextTeamStatValueDelta() const;
	EFortStatType GetPersonalStatType() const;
	const class FString GetStatIdName() const;
	bool IsAtMaxResearchLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortResearchStatTileWidget">();
	}
	static class UFortResearchStatTileWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortResearchStatTileWidget>();
	}
};
static_assert(alignof(UFortResearchStatTileWidget) == 0x000008, "Wrong alignment on UFortResearchStatTileWidget");
static_assert(sizeof(UFortResearchStatTileWidget) == 0x000280, "Wrong size on UFortResearchStatTileWidget");
static_assert(offsetof(UFortResearchStatTileWidget, PersonalStatItemDefinition) == 0x000230, "Member 'UFortResearchStatTileWidget::PersonalStatItemDefinition' has a wrong offset!");
static_assert(offsetof(UFortResearchStatTileWidget, TeamStatItemDefinition) == 0x000238, "Member 'UFortResearchStatTileWidget::TeamStatItemDefinition' has a wrong offset!");
static_assert(offsetof(UFortResearchStatTileWidget, StatCostCurveName) == 0x000240, "Member 'UFortResearchStatTileWidget::StatCostCurveName' has a wrong offset!");
static_assert(offsetof(UFortResearchStatTileWidget, StatPersonalDeltaCurveName) == 0x000248, "Member 'UFortResearchStatTileWidget::StatPersonalDeltaCurveName' has a wrong offset!");
static_assert(offsetof(UFortResearchStatTileWidget, StatPersonalCumulativeCurveName) == 0x000250, "Member 'UFortResearchStatTileWidget::StatPersonalCumulativeCurveName' has a wrong offset!");
static_assert(offsetof(UFortResearchStatTileWidget, StatTeamDeltaCurveName) == 0x000258, "Member 'UFortResearchStatTileWidget::StatTeamDeltaCurveName' has a wrong offset!");
static_assert(offsetof(UFortResearchStatTileWidget, StatTeamCumulativeCurveName) == 0x000260, "Member 'UFortResearchStatTileWidget::StatTeamCumulativeCurveName' has a wrong offset!");

// Class FortniteUI.FortResultsSummaryScreenWidget
// 0x0000 (0x0238 - 0x0238)
class UFortResultsSummaryScreenWidget final : public UCommonUserWidget
{
public:
	void GetTotalScoreSortedScoreIndices(const class UFortUIScoreReport* ScoreReport, TArray<int32>* OutSortedScoreIndices) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortResultsSummaryScreenWidget">();
	}
	static class UFortResultsSummaryScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortResultsSummaryScreenWidget>();
	}
};
static_assert(alignof(UFortResultsSummaryScreenWidget) == 0x000008, "Wrong alignment on UFortResultsSummaryScreenWidget");
static_assert(sizeof(UFortResultsSummaryScreenWidget) == 0x000238, "Wrong size on UFortResultsSummaryScreenWidget");

// Class FortniteUI.FortResultsTeleportScreenWidget
// 0x0028 (0x0260 - 0x0238)
class UFortResultsTeleportScreenWidget final : public UCommonUserWidget
{
public:
	float                                         ExitTime;                                          // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C[0x24];                                     // 0x023C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnExitTimePercentagePassedUpdated(float Percent);
	void OnExitTimeRemainingUpdated(int32 TimeRemainingSeconds);
	void OnExitTimerFinished();
	void StartExitTimer();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortResultsTeleportScreenWidget">();
	}
	static class UFortResultsTeleportScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortResultsTeleportScreenWidget>();
	}
};
static_assert(alignof(UFortResultsTeleportScreenWidget) == 0x000008, "Wrong alignment on UFortResultsTeleportScreenWidget");
static_assert(sizeof(UFortResultsTeleportScreenWidget) == 0x000260, "Wrong size on UFortResultsTeleportScreenWidget");
static_assert(offsetof(UFortResultsTeleportScreenWidget, ExitTime) == 0x000238, "Member 'UFortResultsTeleportScreenWidget::ExitTime' has a wrong offset!");

// Class FortniteUI.FortReturnReasonEntry
// 0x0018 (0x0B48 - 0x0B30)
class UFortReturnReasonEntry : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                InternalData;                                      // 0x0B38(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Name;                                         // 0x0B40(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortReturnReasonEntry">();
	}
	static class UFortReturnReasonEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortReturnReasonEntry>();
	}
};
static_assert(alignof(UFortReturnReasonEntry) == 0x000008, "Wrong alignment on UFortReturnReasonEntry");
static_assert(sizeof(UFortReturnReasonEntry) == 0x000B48, "Wrong size on UFortReturnReasonEntry");
static_assert(offsetof(UFortReturnReasonEntry, InternalData) == 0x000B38, "Member 'UFortReturnReasonEntry::InternalData' has a wrong offset!");
static_assert(offsetof(UFortReturnReasonEntry, Text_Name) == 0x000B40, "Member 'UFortReturnReasonEntry::Text_Name' has a wrong offset!");

// Class FortniteUI.FortRewardNotificationSubWidget
// 0x0028 (0x0260 - 0x0238)
class UFortRewardNotificationSubWidget : public UCommonUserWidget
{
public:
	UMulticastDelegateProperty_                   OnTransitionInComplete;                            // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTransitionOutComplete;                           // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_258[0x8];                                      // 0x0258(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddInputActionHandler(class UDataTable* DataTable, class FName RowName, TDelegate<void(bool* bPassThrough)> CommittedEvent);
	void Init(class UFortRewardNotificationWidget* MainWidget);
	void InspectItem(class UFortItem* ItemToInspect);
	void IsPrimaryActionEnabled(bool* bEnabled);
	void IsPrimaryActionHidden(bool* bHidden);
	void OnActivated();
	void OnDeactivated();
	void OnNavigationDown();
	void OnNavigationLeft();
	void OnNavigationRight();
	void OnNavigationUp();
	void OnPrimaryAction();
	void RemoveAllInputActionHandlers();
	void RemoveInputActionHandler(const struct FDataTableRowHandle& InputActionRow);
	void SetInputActionHandlerState(class UDataTable* DataTable, class FName RowName, EInputActionState State);
	void SetPrimaryActionEnabled(bool bEnabled);
	void SetPrimaryActionHidden();
	void SetPrimaryActionText(const class FText& Text);
	void TransitionIn();
	void TransitionInBegin();
	void TransitionOut();
	void TransitionOutBegin();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRewardNotificationSubWidget">();
	}
	static class UFortRewardNotificationSubWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRewardNotificationSubWidget>();
	}
};
static_assert(alignof(UFortRewardNotificationSubWidget) == 0x000008, "Wrong alignment on UFortRewardNotificationSubWidget");
static_assert(sizeof(UFortRewardNotificationSubWidget) == 0x000260, "Wrong size on UFortRewardNotificationSubWidget");
static_assert(offsetof(UFortRewardNotificationSubWidget, OnTransitionInComplete) == 0x000238, "Member 'UFortRewardNotificationSubWidget::OnTransitionInComplete' has a wrong offset!");
static_assert(offsetof(UFortRewardNotificationSubWidget, OnTransitionOutComplete) == 0x000248, "Member 'UFortRewardNotificationSubWidget::OnTransitionOutComplete' has a wrong offset!");

// Class FortniteUI.FortRewardConversationWidget
// 0x0000 (0x0260 - 0x0260)
class UFortRewardConversationWidget : public UFortRewardNotificationSubWidget
{
public:
	void GetDataFromSentence(const struct FFortConversationSentence& Sentence, class FText* Text, class UTexture2D** TalkingHeadTexture);
	bool IsValidConversation(const class UFortConversation* Conversation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRewardConversationWidget">();
	}
	static class UFortRewardConversationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRewardConversationWidget>();
	}
};
static_assert(alignof(UFortRewardConversationWidget) == 0x000008, "Wrong alignment on UFortRewardConversationWidget");
static_assert(sizeof(UFortRewardConversationWidget) == 0x000260, "Wrong size on UFortRewardConversationWidget");

// Class FortniteUI.FortRewardDifficultyIncrease
// 0x0000 (0x0030 - 0x0030)
class UFortRewardDifficultyIncrease final : public UFortRewardNotificationData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRewardDifficultyIncrease">();
	}
	static class UFortRewardDifficultyIncrease* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRewardDifficultyIncrease>();
	}
};
static_assert(alignof(UFortRewardDifficultyIncrease) == 0x000008, "Wrong alignment on UFortRewardDifficultyIncrease");
static_assert(sizeof(UFortRewardDifficultyIncrease) == 0x000030, "Wrong size on UFortRewardDifficultyIncrease");

// Class FortniteUI.FortRewardExpeditionData
// 0x0008 (0x0038 - 0x0030)
class UFortRewardExpeditionData final : public UFortRewardNotificationData
{
public:
	class UFortExpeditionItem*                    Expedition;                                        // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRewardExpeditionData">();
	}
	static class UFortRewardExpeditionData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRewardExpeditionData>();
	}
};
static_assert(alignof(UFortRewardExpeditionData) == 0x000008, "Wrong alignment on UFortRewardExpeditionData");
static_assert(sizeof(UFortRewardExpeditionData) == 0x000038, "Wrong size on UFortRewardExpeditionData");
static_assert(offsetof(UFortRewardExpeditionData, Expedition) == 0x000030, "Member 'UFortRewardExpeditionData::Expedition' has a wrong offset!");

// Class FortniteUI.FortRewardExpeditionWidget
// 0x0068 (0x02C8 - 0x0260)
class UFortRewardExpeditionWidget : public UFortRewardNotificationSubWidget
{
public:
	UMulticastDelegateProperty_                   OnMcpError;                                        // 0x0260(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_270[0x58];                                     // 0x0270(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CollectExpedition(class UFortExpeditionItem* Expedition);
	void OnCollectExpeditionCompleted(const class UFortExpeditionItem* Expedition, bool bSucceeded, const TArray<struct FFortItemInstanceQuantityPair>& Rewards);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRewardExpeditionWidget">();
	}
	static class UFortRewardExpeditionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRewardExpeditionWidget>();
	}
};
static_assert(alignof(UFortRewardExpeditionWidget) == 0x000008, "Wrong alignment on UFortRewardExpeditionWidget");
static_assert(sizeof(UFortRewardExpeditionWidget) == 0x0002C8, "Wrong size on UFortRewardExpeditionWidget");
static_assert(offsetof(UFortRewardExpeditionWidget, OnMcpError) == 0x000260, "Member 'UFortRewardExpeditionWidget::OnMcpError' has a wrong offset!");

// Class FortniteUI.FortRewardGiftBoxData
// 0x0008 (0x0038 - 0x0030)
class UFortRewardGiftBoxData final : public UFortRewardNotificationData
{
public:
	class UFortGiftBoxItem*                       GiftBox;                                           // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRewardGiftBoxData">();
	}
	static class UFortRewardGiftBoxData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRewardGiftBoxData>();
	}
};
static_assert(alignof(UFortRewardGiftBoxData) == 0x000008, "Wrong alignment on UFortRewardGiftBoxData");
static_assert(sizeof(UFortRewardGiftBoxData) == 0x000038, "Wrong size on UFortRewardGiftBoxData");
static_assert(offsetof(UFortRewardGiftBoxData, GiftBox) == 0x000030, "Member 'UFortRewardGiftBoxData::GiftBox' has a wrong offset!");

// Class FortniteUI.FortRewardItemCacheData
// 0x0008 (0x0038 - 0x0030)
class UFortRewardItemCacheData final : public UFortRewardNotificationData
{
public:
	class UFortItem*                              ItemCache;                                         // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRewardItemCacheData">();
	}
	static class UFortRewardItemCacheData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRewardItemCacheData>();
	}
};
static_assert(alignof(UFortRewardItemCacheData) == 0x000008, "Wrong alignment on UFortRewardItemCacheData");
static_assert(sizeof(UFortRewardItemCacheData) == 0x000038, "Wrong size on UFortRewardItemCacheData");
static_assert(offsetof(UFortRewardItemCacheData, ItemCache) == 0x000030, "Member 'UFortRewardItemCacheData::ItemCache' has a wrong offset!");

// Class FortniteUI.FortRewardMissionAlertData
// 0x0000 (0x0030 - 0x0030)
class UFortRewardMissionAlertData final : public UFortRewardNotificationData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRewardMissionAlertData">();
	}
	static class UFortRewardMissionAlertData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRewardMissionAlertData>();
	}
};
static_assert(alignof(UFortRewardMissionAlertData) == 0x000008, "Wrong alignment on UFortRewardMissionAlertData");
static_assert(sizeof(UFortRewardMissionAlertData) == 0x000030, "Wrong size on UFortRewardMissionAlertData");

// Class FortniteUI.FortRewardNewQuestWidget
// 0x0000 (0x0260 - 0x0260)
class UFortRewardNewQuestWidget : public UFortRewardNotificationSubWidget
{
public:
	void GetDataFromSentence(const struct FFortConversationSentence& Sentence, class FText* Text, class UTexture2D** TalkingHeadTexture);
	bool IsValidConversation(const class UFortConversation* Conversation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRewardNewQuestWidget">();
	}
	static class UFortRewardNewQuestWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRewardNewQuestWidget>();
	}
};
static_assert(alignof(UFortRewardNewQuestWidget) == 0x000008, "Wrong alignment on UFortRewardNewQuestWidget");
static_assert(sizeof(UFortRewardNewQuestWidget) == 0x000260, "Wrong size on UFortRewardNewQuestWidget");

// Class FortniteUI.FortRewardNotificationWidget
// 0x00B8 (0x03D8 - 0x0320)
class UFortRewardNotificationWidget : public UCommonActivatablePanel
{
public:
	TArray<class UFortRewardNotificationData*>    NotificationDataList;                              // 0x0320(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_330[0x10];                                     // 0x0330(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               OverlayMain;                                       // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortSwipeDetector                     SwipeDetector;                                     // 0x0348(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B8[0x20];                                     // 0x03B8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddCollectionBookData(const struct FFortCollectionBookRewards& CollectionBookRewards);
	void AddDifficultyIncreaseRewardData();
	void AddEpicQuestData(class UFortQuestItem* Quest);
	void AddExpeditionData(class UFortExpeditionItem* ExpeditionItem);
	void AddGiftBoxData();
	void AddItemCacheRewardData(class UFortItem* ItemCache);
	void AddMissionAlertData();
	void AddMissionData();
	void AddQuestData(class UFortQuestItem* Quest);
	void InspectItem(class UFortItem* ItemToInspect);
	void IsPrimaryActionEnabled(bool* bEnabled);
	void IsPrimaryActionHidden(bool* bHidden);
	void OnNavigationDown();
	void OnNavigationLeft();
	void OnNavigationRight();
	void OnNavigationUp();
	void OnPrimaryActionDisabled();
	void OnPrimaryActionEnabled();
	void OnPrimaryActionHidden();
	void OnPrimaryActionTextChanged(const class FText& Text);
	void ResetAllRewardData();
	void SetPrimaryActionEnabled(bool bEnabled);
	void SetPrimaryActionHidden();
	void SetPrimaryActionText(const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRewardNotificationWidget">();
	}
	static class UFortRewardNotificationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRewardNotificationWidget>();
	}
};
static_assert(alignof(UFortRewardNotificationWidget) == 0x000008, "Wrong alignment on UFortRewardNotificationWidget");
static_assert(sizeof(UFortRewardNotificationWidget) == 0x0003D8, "Wrong size on UFortRewardNotificationWidget");
static_assert(offsetof(UFortRewardNotificationWidget, NotificationDataList) == 0x000320, "Member 'UFortRewardNotificationWidget::NotificationDataList' has a wrong offset!");
static_assert(offsetof(UFortRewardNotificationWidget, OverlayMain) == 0x000340, "Member 'UFortRewardNotificationWidget::OverlayMain' has a wrong offset!");
static_assert(offsetof(UFortRewardNotificationWidget, SwipeDetector) == 0x000348, "Member 'UFortRewardNotificationWidget::SwipeDetector' has a wrong offset!");

// Class FortniteUI.FortRewardQuestData
// 0x0008 (0x0038 - 0x0030)
class UFortRewardQuestData final : public UFortRewardNotificationData
{
public:
	class UFortQuestItem*                         Quest;                                             // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRewardQuestData">();
	}
	static class UFortRewardQuestData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRewardQuestData>();
	}
};
static_assert(alignof(UFortRewardQuestData) == 0x000008, "Wrong alignment on UFortRewardQuestData");
static_assert(sizeof(UFortRewardQuestData) == 0x000038, "Wrong size on UFortRewardQuestData");
static_assert(offsetof(UFortRewardQuestData, Quest) == 0x000030, "Member 'UFortRewardQuestData::Quest' has a wrong offset!");

// Class FortniteUI.FortEditableFilteredCountedTextBox
// 0x0030 (0x0260 - 0x0230)
class UFortEditableFilteredCountedTextBox : public UUserWidget
{
public:
	int32                                         EntryCharLimit;                                    // 0x0230(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SuggestionText;                                    // 0x0238(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class UEditableTextBox*                       EditText;                                          // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonTextBlock*                       Text_CharCount;                                    // 0x0258(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void HandleTextChanged(const class FText& Text);
	void HandleTextCommitted(const class FText& Text, ETextCommit CommittMethod);
	void OnDirtyTextAttempted(bool bIsBadText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEditableFilteredCountedTextBox">();
	}
	static class UFortEditableFilteredCountedTextBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEditableFilteredCountedTextBox>();
	}
};
static_assert(alignof(UFortEditableFilteredCountedTextBox) == 0x000008, "Wrong alignment on UFortEditableFilteredCountedTextBox");
static_assert(sizeof(UFortEditableFilteredCountedTextBox) == 0x000260, "Wrong size on UFortEditableFilteredCountedTextBox");
static_assert(offsetof(UFortEditableFilteredCountedTextBox, EntryCharLimit) == 0x000230, "Member 'UFortEditableFilteredCountedTextBox::EntryCharLimit' has a wrong offset!");
static_assert(offsetof(UFortEditableFilteredCountedTextBox, SuggestionText) == 0x000238, "Member 'UFortEditableFilteredCountedTextBox::SuggestionText' has a wrong offset!");
static_assert(offsetof(UFortEditableFilteredCountedTextBox, EditText) == 0x000250, "Member 'UFortEditableFilteredCountedTextBox::EditText' has a wrong offset!");
static_assert(offsetof(UFortEditableFilteredCountedTextBox, Text_CharCount) == 0x000258, "Member 'UFortEditableFilteredCountedTextBox::Text_CharCount' has a wrong offset!");

// Class FortniteUI.FortSelectableAttributeListItem_NUI
// 0x0010 (0x0B40 - 0x0B30)
class UFortSelectableAttributeListItem_NUI final : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAttributeListItem_NUI*             AttributeListItem;                                 // 0x0B38(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSelectableAttributeListItem_NUI">();
	}
	static class UFortSelectableAttributeListItem_NUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSelectableAttributeListItem_NUI>();
	}
};
static_assert(alignof(UFortSelectableAttributeListItem_NUI) == 0x000008, "Wrong alignment on UFortSelectableAttributeListItem_NUI");
static_assert(sizeof(UFortSelectableAttributeListItem_NUI) == 0x000B40, "Wrong size on UFortSelectableAttributeListItem_NUI");
static_assert(offsetof(UFortSelectableAttributeListItem_NUI, AttributeListItem) == 0x000B38, "Member 'UFortSelectableAttributeListItem_NUI::AttributeListItem' has a wrong offset!");

// Class FortniteUI.FortSettingsContext
// 0x00D8 (0x0100 - 0x0028)
class UFortSettingsContext final : public UBlueprintContextBase
{
public:
	UMulticastDelegateProperty_                   WindowModeHasChanged;                              // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x50];                                      // 0x0038(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortOptionsMenuData*                   OptionsMenuData;                                   // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortOptionsMenuData*                   CreativeOptionsMenuData;                           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_98[0xC];                                       // 0x0098(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinGammaValue;                                     // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGammaValue;                                     // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x54];                                      // 0x00AC(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AllowDynamicResolutionChanged(bool IsChecked);
	void AllowLowPowerChanged(bool IsChecked);
	void AllowVideoPlaybackChanged(bool IsChecked);
	void AnonymousModeChanged(bool bInChecked);
	void AntiAliasingQualityChanged(int32 ButtonId);
	void AutoEquipChanged(bool bInChecked);
	void ChatVolumeChanged(float NewValue);
	void CinematicsVolumeChanged(float NewValue);
	void ConsoleUnlockedFPSChanged(bool bInChecked);
	void DialogVolumeChanged(float NewValue);
	void EffectsQualityChanged(int32 ButtonId);
	void FirstPersonCameraChanged(bool bInChecked);
	void FrameRateLimitChanged(int32 FrameRateLimit);
	void GamepadBuildingMultiplierValueChanged(float NewValue);
	void GamepadLookSensitivityXChanged(float NewValue);
	void GamepadLookSensitivityYChanged(float NewValue);
	void GamepadScopedMultiplierValueChanged(float NewValue);
	void GamepadTargetingMultiplierValueChanged(float NewValue);
	bool GetAllowDynamicResolution();
	bool GetAllowLowPower();
	bool GetAllowVideoPlayback();
	int32 GetAntiAliasingQuality();
	void GetAvailableVoiceChatInputDevices();
	void GetAvailableVoiceChatOutputDevices();
	int32 GetCurrentDisplayResolution();
	int32 GetCurrentFPS();
	int32 GetCurrentLanguage();
	int32 GetCurrentRegion();
	TArray<class FText> GetDisplayResolutionNames();
	int32 GetEffectsQuality();
	TArray<class FText> GetFPSNames();
	int32 GetMobileFPSMode();
	TArray<class FText> GetMobileFPSTypeNames();
	TArray<class FText> GetMotionAxisNames();
	bool GetMotionBlur();
	int32 GetOverallQualityLevel();
	TArray<class FText> GetPossibleLanguages();
	int32 GetPostProcessQuality();
	TArray<class FText> GetQualityLowNames();
	TArray<class FText> GetQualityNames();
	TArray<class FText> GetQualityOffNames();
	TArray<class FText> GetRegionDisplayNames();
	int32 GetRotatorSettingValue(ESettingType InSettingType);
	float GetSafeZoneValue();
	TArray<class FText> GetSettingDisplayNames(ESettingType InSettingType);
	float GetSettingValueInRange(float Value, ESettingType InSettingType, ESettingTab InSettingTab);
	int32 GetShadowQuality();
	bool GetShowFPS();
	bool GetShowGrass();
	float GetSliderSettingValue(ESettingType InSettingType);
	int32 GetTextureQuality();
	float GetThreeDResolution();
	bool GetUseVsync();
	TArray<class FText> GetViewDistanceNames();
	int32 GetViewDistanceQuality();
	int32 GetVoiceChatInputDevice();
	int32 GetVoiceChatOutputDevice();
	TArray<class FText> GetWindowModeNames();
	void GyroSensitivityValueChanged(float NewValue);
	void HiddenMatchmakingDelayMaxChanged(int32 InValue);
	void HiddenMatchmakingDelayMaxReset();
	void HideOtherPlayerNamesChanged(bool bInChecked);
	void LanguageChanged(int32 NewMode);
	void LanguageReset();
	void MobileFPSModeChanged(int32 FPSMode);
	void MotionAxisValueChanged(int32 NewValue);
	void MotionBlurChanged(bool IsChecked);
	void MotionControlEnabledValueChanged(bool NewValue);
	void MotionHarvestingToolMultiplierValueChanged(float NewValue);
	void MotionScopedMultiplierValueChanged(float NewValue);
	void MotionTargetingMultiplierValueChanged(float NewValue);
	void MouseSensitivityMultiplierForAircraftChanged(float NewValue);
	void MouseSensitivityXChanged(float NewValue);
	void MouseSensitivityYChanged(float NewValue);
	void MusicVolumeChanged(float NewValue);
	void OnAimAssistChanged(bool bInChecked);
	void OnAimAssistReset(bool bInChecked);
	void OnAutoChangeMaterialChanged(bool bInChecked);
	void OnAutoChangeMaterialReset(bool bInChecked);
	void OnAutoOpenDoorsChanged(bool bInChecked);
	void OnAutoPickupWeaponsChanged(bool bInChecked);
	void OnAutoPickupWeaponsConsolePCChanged(bool bInChecked);
	void OnAutoSortConsumablesToRightChanged(bool bInChecked);
	void OnCreativeModeReplayRecordingPreferenceChanged(bool bInChecked);
	void OnCreativeTurboDeleteChanged(bool bInChecked);
	void OnCreativeTurboDeleteReset(bool bInChecked);
	void OnCrossplayPreferenceChanged(bool bInChecked);
	void OnEditButtonHoldTimeChanged(float NewValue);
	void OnEditModeAimAssistChanged(bool bInChecked);
	void OnEnableTryBuildOnFocusChanged(bool bInChecked);
	void OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChanged(bool bInChecked);
	void OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChangedAthena(bool bInChecked);
	void OnForceFeedbackChanged(bool bInChecked);
	void OnGamepadAutoRunChanged(bool bInChecked);
	void OnHUDScaleChanged(float bInHUDScale);
	void OnLargeTeamsReplayRecordingPreferenceChanged(bool bInChecked);
	void OnQualitySelectorChanged(int32 ValueRef);
	void OnQualitySelectorReset();
	void OnReplayRecordingPreferenceChanged(bool bInChecked);
	void OnShadowPlayHighlightsChanged(bool bInChecked);
	void OnShowGlobalChatEnabledChanged(bool bInChecked);
	void OnTurboBuildChanged(bool bInChecked);
	void OnTurboBuildReset(bool bInChecked);
	void OnUseTapToShootChanged(bool bInChecked);
	void PeripheralLightingChanged(bool bInChecked);
	void PitchForAircraftPrimaryInversionChanged(bool bInChecked);
	void PitchForAircraftPrimaryInversionReset(bool bInChecked);
	void PitchForAircraftSecondaryInversionChanged(bool bInChecked);
	void PitchForAircraftSecondaryInversionReset(bool bInChecked);
	void PitchForMotionInversionChanged(bool bInChecked);
	void PitchForMotionInversionReset(bool bInChecked);
	void PitchInversionChanged(bool bInChecked);
	void PitchInversionReset(bool bInChecked);
	void PostProcessQualityChanged(int32 ButtonId);
	void PowerSaverModeChanged(bool bInChecked);
	void RegionChanged(int32 NewRegion);
	void RegionReset();
	void ResetGamepadLookStickDeadZone();
	void ResetGamepadMoveStickDeadZone();
	void ResolutionChanged(int32 NewResolution);
	void RotatorSettingChanged(ESettingType InSettingType, const class FText& NameText, int32 PreviousValue, int32 NewValue);
	void RotatorSettingReset(ESettingType InSettingType, const class FText& NameText, int32 PreviousValue, int32 NewValue);
	void SafeZoneChanged(float NewValue);
	void ScopedMultiplierValueChanged(float NewValue);
	void SendSettingChanges();
	void SetAllowGameVolumeWhenMinimized(EFortAllowBackgroundAudioSetting NewValue);
	void SetColorBlindMode(int32 InMode);
	void SetColorBlindStrength(float InColorBlindStrength);
	void SetIgnoreGamepadInput(bool bIgnore);
	void SetLockPrimaryInputMethodToMouse(bool bLock);
	void SetQuality(int32 NewQuality);
	void SetSubtitlesEnabled(bool bNewValue);
	void SetVisualizeAudioSources(bool bEnable);
	void SetVoiceChat3DEnabled(bool bNewValue);
	void SetVoiceChatEnabled(bool bNewValue);
	void SetVoiceChatInputDevice(int32 NewDevice);
	void SetVoiceChatOutputDevice(int32 NewDevice);
	void SetVoiceChatPTTEnabled(bool bNewValue);
	void ShadowQualityChanged(int32 ButtonId);
	void ShowFPSChanged(bool IsChecked);
	void ShowGrassChanged(bool IsChecked);
	void ShowViewerCountChanged(bool bInChecked);
	void SliderSettingChanged(ESettingType InSettingType, const class FText& NameText, float PreviousValue, float NewValue);
	void SliderSettingReset(ESettingType InSettingType, const class FText& NameText, float PreviousValue, float NewValue);
	void SoundFXVolumeChanged(float NewValue);
	void SprintByDefaultChanged(bool bInChecked);
	void SprintCancelsReloadChanged(bool bInChecked);
	void SprintToggleChanged(bool bInChecked);
	void TapInteractChanged(bool bInChecked);
	void TargetingMultiplierValueChanged(float NewValue);
	void TargetingToggleChanged(bool bInChecked);
	void TextureQualityChanged(int32 ButtonId);
	void ThreeDResolutionChanged(float Resolution);
	void TouchDragScopedSensitivityValueChanged(float NewValue);
	void TouchLookSensitivityChanged(float NewValue);
	void TouchTargetingMultiplierValueChanged(float NewValue);
	void TouchVerticalSensitivityValueChanged(float NewValue);
	void UseVsyncChanged(bool IsChecked);
	void ViewDistanceQualityChanged(int32 ButtonId);
	void WindowModeChanged(int32 NewMode);
	void YawForMotionInversionChanged(bool bInChecked);
	void YawForMotionInversionReset(bool bInChecked);
	void YawInversionChanged(bool bInChecked);
	void YawInversionReset(bool bInChecked);

	void GamepadLookStickDeadZoneChanged(const float NewValue) const;
	void GamepadMoveStickDeadZoneChanged(const float NewValue) const;
	bool GetAimAssistState() const;
	EFortAllowBackgroundAudioSetting GetAllowGameVolumeWhenMinimized() const;
	bool GetAnonymousModeEnabled() const;
	bool GetAutoChangeMaterial() const;
	bool GetAutoEquipState() const;
	bool GetAutoOpenDoors() const;
	bool GetAutoPickupWeapons() const;
	bool GetAutoPickupWeaponsConsolePC() const;
	bool GetAutoSortConsumablesToRight() const;
	float GetChatVolumeValue() const;
	float GetCinematicsVolume() const;
	int32 GetColorBlindMode() const;
	TArray<class FText> GetColorBlindModeNames() const;
	float GetColorBlindStrength() const;
	bool GetConsoleUnlockedFPSState() const;
	bool GetCreativeModeReplayRecordingEnabled() const;
	bool GetCreativeTurboDelete() const;
	bool GetCrossplayPreference() const;
	float GetDialogVolumeValue() const;
	float GetEditButtonHoldTimeValue() const;
	bool GetEditModeAimAssistState() const;
	bool GetEnableTryBuildOnFocus() const;
	bool GetFirstPersonCameraState() const;
	bool GetFocusOnFirstBuildingPieceWhenQuickbarSwappedState() const;
	bool GetFocusOnFirstBuildingPieceWhenQuickbarSwappedStateAthena() const;
	bool GetForceFeedbackState() const;
	bool GetGamepadAutoRunState() const;
	float GetGamepadBuildingMultiplierValue() const;
	struct FVector2D GetGamepadLookSensitivityValue() const;
	float GetGamepadLookStickDeadZone() const;
	float GetGamepadMoveStickDeadZone() const;
	float GetGamepadScopedMultiplierValue() const;
	float GetGamepadTargetingMultiplierValue() const;
	float GetGammaSettings() const;
	float GetGyroSensitivityValue() const;
	int32 GetHiddenMatchmakingDelayMax() const;
	bool GetHideOtherPlayerNames() const;
	float GetHUDScale() const;
	bool GetIgnoreGamepadInput() const;
	bool GetLargeTeamsReplayRecordingEnabled() const;
	bool GetLockPrimaryInputMethodToMouse() const;
	int32 GetMaxQualityLevel() const;
	int32 GetMotionAxisValue() const;
	bool GetMotionControlsEnabledValue() const;
	float GetMotionHarvestingToolMultiplierValue() const;
	float GetMotionScopedMultiplierValue() const;
	float GetMotionTargetingMultiplierValue() const;
	float GetMouseSensitivityMultiplierForAircraft() const;
	struct FVector2D GetMouseSensitivityValue() const;
	float GetMusicVolumeValue() const;
	bool GetPeripheralLightingEnabled() const;
	bool GetPitchForAircraftPrimaryInversionState() const;
	bool GetPitchForAircraftSecondaryInversionState() const;
	bool GetPitchForMotionInversionState() const;
	bool GetPitchInversionState() const;
	bool GetPowerSaverMode() const;
	int32 GetQuality() const;
	bool GetReplayRecordingEnabled() const;
	int32 GetResolution() const;
	float GetScopedMultiplierValue() const;
	bool GetShadowPlayHighlightsEnabled() const;
	bool GetShowGlobalChatEnabled() const;
	bool GetShowHeroBackpack() const;
	bool GetShowHeroHeadAccessories() const;
	bool GetShowViewerCountEnabled() const;
	float GetSoundFXVolumeValue() const;
	bool GetSprintByDefaultState() const;
	bool GetSprintCancelsReloadState() const;
	bool GetSprintToggleState() const;
	bool GetSubtitlesEnabled() const;
	bool GetTapInteractState() const;
	float GetTargetingMultiplierValue() const;
	bool GetTargetingToggleState() const;
	float GetTouchDragScopedSensitivityValue() const;
	float GetTouchLookSensitivityValue() const;
	float GetTouchTargetingMultiplierValue() const;
	float GetTouchVerticalSensitivityValue() const;
	bool GetTurboBuild() const;
	bool GetUseTapToShoot() const;
	bool GetVisualizeAudioSources() const;
	bool GetVoiceChat3DEnabled() const;
	bool GetVoiceChatEnabled() const;
	bool GetVoiceChatPTTEnabled() const;
	bool GetYawForMotionInversionState() const;
	bool GetYawInversionState() const;
	void UpdateGammaSettings(float GammaValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSettingsContext">();
	}
	static class UFortSettingsContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSettingsContext>();
	}
};
static_assert(alignof(UFortSettingsContext) == 0x000008, "Wrong alignment on UFortSettingsContext");
static_assert(sizeof(UFortSettingsContext) == 0x000100, "Wrong size on UFortSettingsContext");
static_assert(offsetof(UFortSettingsContext, WindowModeHasChanged) == 0x000028, "Member 'UFortSettingsContext::WindowModeHasChanged' has a wrong offset!");
static_assert(offsetof(UFortSettingsContext, OptionsMenuData) == 0x000088, "Member 'UFortSettingsContext::OptionsMenuData' has a wrong offset!");
static_assert(offsetof(UFortSettingsContext, CreativeOptionsMenuData) == 0x000090, "Member 'UFortSettingsContext::CreativeOptionsMenuData' has a wrong offset!");
static_assert(offsetof(UFortSettingsContext, MinGammaValue) == 0x0000A4, "Member 'UFortSettingsContext::MinGammaValue' has a wrong offset!");
static_assert(offsetof(UFortSettingsContext, MaxGammaValue) == 0x0000A8, "Member 'UFortSettingsContext::MaxGammaValue' has a wrong offset!");

// Class FortniteUI.FortShowdownDetailView
// 0x0380 (0x05B8 - 0x0238)
class UFortShowdownDetailView : public UCommonUserWidget
{
public:
	struct FFortTournamentDisplayInfo             TournamentDisplayInfo;                             // 0x0238(0x0170)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FShowdownTournamentEntry               CMSTournamentData;                                 // 0x03A8(0x0188)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       Text_TimeRemaining;                                // 0x0530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Text_DebugId;                                      // 0x0538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEpicCMSImage*                          Image_PosterFront;                                 // 0x0540(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEpicCMSImage*                          Image_PosterBack;                                  // 0x0548(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEpicCMSImage*                          Image_LoadingScreen;                               // 0x0550(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEpicCMSImage*                          Image_PlaylistTile;                                // 0x0558(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   TimeRemainingFormat;                               // 0x0560(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                          bTimeRemainingShowSeconds;                         // 0x0578(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTimeRemainingUppercase;                           // 0x0579(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETimespanAsTextFormat                         TimeRemainingFormatType;                           // 0x057A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_57B[0x3D];                                     // 0x057B(0x003D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FLinearColor ConvertCMSStringToColor(const class FString& ColorString);
	class FString GetEventId();
	struct FFortShowdownEventBestResultsSummary GetEventResultsSummary();
	TArray<class FString> GetTournamentEvents();
	TArray<struct FFortShowdownScoringRuleInfo> GetTournamentScoringRules();
	void RefreshDataBP();
	void SetTournament(const class FString& TournamentId, const class FString& EventId);

	int32 GetBestEventScore() const;
	int32 GetCurrentEventScore() const;
	int32 GetCurrentEventTeamNumMatchesPlayed() const;
	struct FDateTime GetEventBeginTime() const;
	class FText GetEventDateAsText(const struct FDateTime& DateTime, EFortDateTimeStyle Style) const;
	struct FDateTime GetEventEndTime() const;
	class FString GetEventIdForEligibilityToken(const class FString& Token) const;
	float GetEventLeaderboardPercentile() const;
	int32 GetEventLeaderboardRank() const;
	EFortShowdownPinState GetEventPinState() const;
	EFortShowdownEventState GetEventState() const;
	class FText GetEventTimeAsText(const struct FDateTime& DateTime, EFortDateTimeStyle Style) const;
	struct FTimespan GetEventTimeLeft() const;
	EFortEventWindowEligibility GetEventWindowEligibility() const;
	int32 GetEventWindowRoundNumber() const;
	int32 GetEventWindowSessionNumber() const;
	int32 GetNumEventRounds() const;
	struct FDateTime GetTournamentBeginTime() const;
	EFortShowdownPinState GetTournamentBestPinState() const;
	int32 GetTournamentBestScore() const;
	EFortEventWindowEligibility GetTournamentEligibility() const;
	struct FDateTime GetTournamentEndTime() const;
	class FString GetTournamentId() const;
	int32 GetTournamentMatchCap() const;
	EFortShowdownMatchType GetTournamentMatchType() const;
	class FString GetTournamentNextEvent() const;
	int32 GetTournamentPinUnlockScore() const;
	EFortShowdownEventState GetTournamentState() const;
	struct FTimespan GetTournamentTimeLeft() const;
	bool IsEventLeaderboardAvailable() const;
	bool ShouldShowCrossplayError() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortShowdownDetailView">();
	}
	static class UFortShowdownDetailView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortShowdownDetailView>();
	}
};
static_assert(alignof(UFortShowdownDetailView) == 0x000008, "Wrong alignment on UFortShowdownDetailView");
static_assert(sizeof(UFortShowdownDetailView) == 0x0005B8, "Wrong size on UFortShowdownDetailView");
static_assert(offsetof(UFortShowdownDetailView, TournamentDisplayInfo) == 0x000238, "Member 'UFortShowdownDetailView::TournamentDisplayInfo' has a wrong offset!");
static_assert(offsetof(UFortShowdownDetailView, CMSTournamentData) == 0x0003A8, "Member 'UFortShowdownDetailView::CMSTournamentData' has a wrong offset!");
static_assert(offsetof(UFortShowdownDetailView, Text_TimeRemaining) == 0x000530, "Member 'UFortShowdownDetailView::Text_TimeRemaining' has a wrong offset!");
static_assert(offsetof(UFortShowdownDetailView, Text_DebugId) == 0x000538, "Member 'UFortShowdownDetailView::Text_DebugId' has a wrong offset!");
static_assert(offsetof(UFortShowdownDetailView, Image_PosterFront) == 0x000540, "Member 'UFortShowdownDetailView::Image_PosterFront' has a wrong offset!");
static_assert(offsetof(UFortShowdownDetailView, Image_PosterBack) == 0x000548, "Member 'UFortShowdownDetailView::Image_PosterBack' has a wrong offset!");
static_assert(offsetof(UFortShowdownDetailView, Image_LoadingScreen) == 0x000550, "Member 'UFortShowdownDetailView::Image_LoadingScreen' has a wrong offset!");
static_assert(offsetof(UFortShowdownDetailView, Image_PlaylistTile) == 0x000558, "Member 'UFortShowdownDetailView::Image_PlaylistTile' has a wrong offset!");
static_assert(offsetof(UFortShowdownDetailView, TimeRemainingFormat) == 0x000560, "Member 'UFortShowdownDetailView::TimeRemainingFormat' has a wrong offset!");
static_assert(offsetof(UFortShowdownDetailView, bTimeRemainingShowSeconds) == 0x000578, "Member 'UFortShowdownDetailView::bTimeRemainingShowSeconds' has a wrong offset!");
static_assert(offsetof(UFortShowdownDetailView, bTimeRemainingUppercase) == 0x000579, "Member 'UFortShowdownDetailView::bTimeRemainingUppercase' has a wrong offset!");
static_assert(offsetof(UFortShowdownDetailView, TimeRemainingFormatType) == 0x00057A, "Member 'UFortShowdownDetailView::TimeRemainingFormatType' has a wrong offset!");

// Class FortniteUI.FortShowdownCurrentEventView
// 0x0000 (0x05B8 - 0x05B8)
class UFortShowdownCurrentEventView final : public UFortShowdownDetailView
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortShowdownCurrentEventView">();
	}
	static class UFortShowdownCurrentEventView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortShowdownCurrentEventView>();
	}
};
static_assert(alignof(UFortShowdownCurrentEventView) == 0x000008, "Wrong alignment on UFortShowdownCurrentEventView");
static_assert(sizeof(UFortShowdownCurrentEventView) == 0x0005B8, "Wrong size on UFortShowdownCurrentEventView");

// Class FortniteUI.FortShowdownScoringHUDAlert
// 0x0010 (0x0278 - 0x0268)
class UFortShowdownScoringHUDAlert final : public UFortHUDElementWidget
{
public:
	uint8                                         Pad_268[0x10];                                     // 0x0268(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGamePhaseChanged(EAthenaGamePhase GamePhase);
	void OnTeamPlacementChanged(int32 NewTeamPlacement);
	void ScorePointAlert(class FName RuleLookup, int32 TotalScore, int32 PointDelta);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortShowdownScoringHUDAlert">();
	}
	static class UFortShowdownScoringHUDAlert* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortShowdownScoringHUDAlert>();
	}
};
static_assert(alignof(UFortShowdownScoringHUDAlert) == 0x000008, "Wrong alignment on UFortShowdownScoringHUDAlert");
static_assert(sizeof(UFortShowdownScoringHUDAlert) == 0x000278, "Wrong size on UFortShowdownScoringHUDAlert");

// Class FortniteUI.FortShowdownScreen
// 0x0050 (0x0398 - 0x0348)
class UFortShowdownScreen : public UFortActivatablePanel
{
public:
	TSubclassOf<class UFortShowdownTournamentTile> TileItemClass;                                     // 0x0348(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonGroup*                     TournamentTileGroup;                               // 0x0350(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UScrollBox*                             ScrollBox_TournamentList;                          // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButton*                          Button_Details;                                    // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       CommonTextBlock_RegionText;                        // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_370[0x28];                                     // 0x0370(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void NavigateTournamentLeft();
	void NavigateTournamentRight();
	void SelectedEndTournament(bool bEndIsSelected);
	void SelectedFrontTournament(bool bFrontIsSelected);
	void SelectedTournamentChanged(const class FString& SelectedTournament);
	void ShowTournamentDetails(const class FString& SelectedTournament);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortShowdownScreen">();
	}
	static class UFortShowdownScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortShowdownScreen>();
	}
};
static_assert(alignof(UFortShowdownScreen) == 0x000008, "Wrong alignment on UFortShowdownScreen");
static_assert(sizeof(UFortShowdownScreen) == 0x000398, "Wrong size on UFortShowdownScreen");
static_assert(offsetof(UFortShowdownScreen, TileItemClass) == 0x000348, "Member 'UFortShowdownScreen::TileItemClass' has a wrong offset!");
static_assert(offsetof(UFortShowdownScreen, TournamentTileGroup) == 0x000350, "Member 'UFortShowdownScreen::TournamentTileGroup' has a wrong offset!");
static_assert(offsetof(UFortShowdownScreen, ScrollBox_TournamentList) == 0x000358, "Member 'UFortShowdownScreen::ScrollBox_TournamentList' has a wrong offset!");
static_assert(offsetof(UFortShowdownScreen, Button_Details) == 0x000360, "Member 'UFortShowdownScreen::Button_Details' has a wrong offset!");
static_assert(offsetof(UFortShowdownScreen, CommonTextBlock_RegionText) == 0x000368, "Member 'UFortShowdownScreen::CommonTextBlock_RegionText' has a wrong offset!");

// Class FortniteUI.FortSignInConsole
// 0x0040 (0x0360 - 0x0320)
class UFortSignInConsole final : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UEditableText*                          Email;                                             // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_SendCode;                                   // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEditableText*                          Passcode;                                          // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Error;                                        // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_SubmitCode;                                 // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetSwitcher*                        Switcher_Main;                                     // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleTextCommitted(const class FText& Text, ETextCommit CommitMethod);
	void UpdateEmailStatus(const class FText& Text);
	void UpdatePasscodeStatus(const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSignInConsole">();
	}
	static class UFortSignInConsole* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSignInConsole>();
	}
};
static_assert(alignof(UFortSignInConsole) == 0x000008, "Wrong alignment on UFortSignInConsole");
static_assert(sizeof(UFortSignInConsole) == 0x000360, "Wrong size on UFortSignInConsole");
static_assert(offsetof(UFortSignInConsole, Email) == 0x000330, "Member 'UFortSignInConsole::Email' has a wrong offset!");
static_assert(offsetof(UFortSignInConsole, Button_SendCode) == 0x000338, "Member 'UFortSignInConsole::Button_SendCode' has a wrong offset!");
static_assert(offsetof(UFortSignInConsole, Passcode) == 0x000340, "Member 'UFortSignInConsole::Passcode' has a wrong offset!");
static_assert(offsetof(UFortSignInConsole, Text_Error) == 0x000348, "Member 'UFortSignInConsole::Text_Error' has a wrong offset!");
static_assert(offsetof(UFortSignInConsole, Button_SubmitCode) == 0x000350, "Member 'UFortSignInConsole::Button_SubmitCode' has a wrong offset!");
static_assert(offsetof(UFortSignInConsole, Switcher_Main) == 0x000358, "Member 'UFortSignInConsole::Switcher_Main' has a wrong offset!");

// Class FortniteUI.FortSignInWidget
// 0x0070 (0x0390 - 0x0320)
class UFortSignInWidget : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonBorderStyle>         NormalBorderStyle;                                 // 0x0330(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCommonBorderStyle>         HighlightBorderStyle;                              // 0x0338(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ForgotPasswordURL;                                 // 0x0340(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UEditableText*                          Email;                                             // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEditableText*                          Password;                                          // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonBorder*                          EmailBorder;                                       // 0x0370(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonBorder*                          PasswordBorder;                                    // 0x0378(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          SignInButton;                                      // 0x0380(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_ForgotPassword;                             // 0x0388(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleTextCommitted(const class FText& Text, ETextCommit CommitMethod);
	void StartSignIn();
	void UpdateSignInButton(const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSignInWidget">();
	}
	static class UFortSignInWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSignInWidget>();
	}
};
static_assert(alignof(UFortSignInWidget) == 0x000008, "Wrong alignment on UFortSignInWidget");
static_assert(sizeof(UFortSignInWidget) == 0x000390, "Wrong size on UFortSignInWidget");
static_assert(offsetof(UFortSignInWidget, NormalBorderStyle) == 0x000330, "Member 'UFortSignInWidget::NormalBorderStyle' has a wrong offset!");
static_assert(offsetof(UFortSignInWidget, HighlightBorderStyle) == 0x000338, "Member 'UFortSignInWidget::HighlightBorderStyle' has a wrong offset!");
static_assert(offsetof(UFortSignInWidget, ForgotPasswordURL) == 0x000340, "Member 'UFortSignInWidget::ForgotPasswordURL' has a wrong offset!");
static_assert(offsetof(UFortSignInWidget, Email) == 0x000360, "Member 'UFortSignInWidget::Email' has a wrong offset!");
static_assert(offsetof(UFortSignInWidget, Password) == 0x000368, "Member 'UFortSignInWidget::Password' has a wrong offset!");
static_assert(offsetof(UFortSignInWidget, EmailBorder) == 0x000370, "Member 'UFortSignInWidget::EmailBorder' has a wrong offset!");
static_assert(offsetof(UFortSignInWidget, PasswordBorder) == 0x000378, "Member 'UFortSignInWidget::PasswordBorder' has a wrong offset!");
static_assert(offsetof(UFortSignInWidget, SignInButton) == 0x000380, "Member 'UFortSignInWidget::SignInButton' has a wrong offset!");
static_assert(offsetof(UFortSignInWidget, Button_ForgotPassword) == 0x000388, "Member 'UFortSignInWidget::Button_ForgotPassword' has a wrong offset!");

// Class FortniteUI.FortSocialDisplayLibrary
// 0x0000 (0x0028 - 0x0028)
class UFortSocialDisplayLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void SetPartySizeIcon(class UImage* Image, int32 InPartySize);
	static void SetPlatformPrefixIcon(class UImage* Image, const class FString& OtherPlayerPlatform);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSocialDisplayLibrary">();
	}
	static class UFortSocialDisplayLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSocialDisplayLibrary>();
	}
};
static_assert(alignof(UFortSocialDisplayLibrary) == 0x000008, "Wrong alignment on UFortSocialDisplayLibrary");
static_assert(sizeof(UFortSocialDisplayLibrary) == 0x000028, "Wrong size on UFortSocialDisplayLibrary");

// Class FortniteUI.FortSocialImportButton
// 0x0030 (0x0B60 - 0x0B30)
class UFortSocialImportButton : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x18];                                     // 0x0B30(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortSocialImportPanel*                 ActivePanel;                                       // 0x0B48(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESocialImportPanelType                        DesiredPanelType;                                  // 0x0B50(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B51[0x7];                                      // 0x0B51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortSocialImportPanel>     SocialImportPanelClass;                            // 0x0B58(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleDynamicSocialImportDialogClosed();
	void OnCaptionGenerated(const class FText& Caption);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSocialImportButton">();
	}
	static class UFortSocialImportButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSocialImportButton>();
	}
};
static_assert(alignof(UFortSocialImportButton) == 0x000008, "Wrong alignment on UFortSocialImportButton");
static_assert(sizeof(UFortSocialImportButton) == 0x000B60, "Wrong size on UFortSocialImportButton");
static_assert(offsetof(UFortSocialImportButton, ActivePanel) == 0x000B48, "Member 'UFortSocialImportButton::ActivePanel' has a wrong offset!");
static_assert(offsetof(UFortSocialImportButton, DesiredPanelType) == 0x000B50, "Member 'UFortSocialImportButton::DesiredPanelType' has a wrong offset!");
static_assert(offsetof(UFortSocialImportButton, SocialImportPanelClass) == 0x000B58, "Member 'UFortSocialImportButton::SocialImportPanelClass' has a wrong offset!");

// Class FortniteUI.FortSocialImportPanel
// 0x0070 (0x03B8 - 0x0348)
class UFortSocialImportPanel : public UFortActivatablePanel
{
public:
	UMulticastDelegateProperty_                   OnSocialImportPanelClosed;                         // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_358[0x28];                                     // 0x0358(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetSwitcher*                        Switcher_AddFriends;                               // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Import;                                     // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Cancel;                                     // 0x0390(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Add;                                        // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_NotNow;                                     // 0x03A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_OptOut;                                     // 0x03A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBorder*                                Border_OuterBorder;                                // 0x03B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnClaimViewRequested();
	void OnImportViewRequested();
	void OnIncentivizedSet(bool bIncentivized);
	void OnLauncherImportOpened();
	void OnPanelTypeSet(ESocialImportPanelType NewType);
	void OnWaitingViewRequested();
	void ShowPanel();

	bool GetSocialPlatform(ESocialImportPanelPlatform* OutPlatform) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSocialImportPanel">();
	}
	static class UFortSocialImportPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSocialImportPanel>();
	}
};
static_assert(alignof(UFortSocialImportPanel) == 0x000008, "Wrong alignment on UFortSocialImportPanel");
static_assert(sizeof(UFortSocialImportPanel) == 0x0003B8, "Wrong size on UFortSocialImportPanel");
static_assert(offsetof(UFortSocialImportPanel, OnSocialImportPanelClosed) == 0x000348, "Member 'UFortSocialImportPanel::OnSocialImportPanelClosed' has a wrong offset!");
static_assert(offsetof(UFortSocialImportPanel, Switcher_AddFriends) == 0x000380, "Member 'UFortSocialImportPanel::Switcher_AddFriends' has a wrong offset!");
static_assert(offsetof(UFortSocialImportPanel, Button_Import) == 0x000388, "Member 'UFortSocialImportPanel::Button_Import' has a wrong offset!");
static_assert(offsetof(UFortSocialImportPanel, Button_Cancel) == 0x000390, "Member 'UFortSocialImportPanel::Button_Cancel' has a wrong offset!");
static_assert(offsetof(UFortSocialImportPanel, Button_Add) == 0x000398, "Member 'UFortSocialImportPanel::Button_Add' has a wrong offset!");
static_assert(offsetof(UFortSocialImportPanel, Button_NotNow) == 0x0003A0, "Member 'UFortSocialImportPanel::Button_NotNow' has a wrong offset!");
static_assert(offsetof(UFortSocialImportPanel, Button_OptOut) == 0x0003A8, "Member 'UFortSocialImportPanel::Button_OptOut' has a wrong offset!");
static_assert(offsetof(UFortSocialImportPanel, Border_OuterBorder) == 0x0003B0, "Member 'UFortSocialImportPanel::Border_OuterBorder' has a wrong offset!");

// Class FortniteUI.FortSocialInteractionMenu
// 0x0030 (0x02E0 - 0x02B0)
class UFortSocialInteractionMenu : public USocialInteractionMenu
{
public:
	class UImage*                                 Image_Platform;                                    // 0x02B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortPlayerBanner*                      PlayerBanner;                                      // 0x02B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_DisplayName;                                  // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDynamicEntryBox*                       EntryBox_PlatformNames;                            // 0x02C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Presence;                                     // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDynamicEntryBox*                       EntryBox_PartySlots;                               // 0x02D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnEnableBackButtonDisplay(bool bEnableBackButtonDisplay);
	void OnUserPresenceChanged(EOnlineStatus OnlineStatus);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSocialInteractionMenu">();
	}
	static class UFortSocialInteractionMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSocialInteractionMenu>();
	}
};
static_assert(alignof(UFortSocialInteractionMenu) == 0x000008, "Wrong alignment on UFortSocialInteractionMenu");
static_assert(sizeof(UFortSocialInteractionMenu) == 0x0002E0, "Wrong size on UFortSocialInteractionMenu");
static_assert(offsetof(UFortSocialInteractionMenu, Image_Platform) == 0x0002B0, "Member 'UFortSocialInteractionMenu::Image_Platform' has a wrong offset!");
static_assert(offsetof(UFortSocialInteractionMenu, PlayerBanner) == 0x0002B8, "Member 'UFortSocialInteractionMenu::PlayerBanner' has a wrong offset!");
static_assert(offsetof(UFortSocialInteractionMenu, Text_DisplayName) == 0x0002C0, "Member 'UFortSocialInteractionMenu::Text_DisplayName' has a wrong offset!");
static_assert(offsetof(UFortSocialInteractionMenu, EntryBox_PlatformNames) == 0x0002C8, "Member 'UFortSocialInteractionMenu::EntryBox_PlatformNames' has a wrong offset!");
static_assert(offsetof(UFortSocialInteractionMenu, Text_Presence) == 0x0002D0, "Member 'UFortSocialInteractionMenu::Text_Presence' has a wrong offset!");
static_assert(offsetof(UFortSocialInteractionMenu, EntryBox_PartySlots) == 0x0002D8, "Member 'UFortSocialInteractionMenu::EntryBox_PartySlots' has a wrong offset!");

// Class FortniteUI.FortSocialMenuSlateWrapperWidget
// 0x0020 (0x0128 - 0x0108)
class UFortSocialMenuSlateWrapperWidget final : public UWidget
{
public:
	uint8                                         Pad_108[0x20];                                     // 0x0108(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSocialMenuSlateWrapperWidget">();
	}
	static class UFortSocialMenuSlateWrapperWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSocialMenuSlateWrapperWidget>();
	}
};
static_assert(alignof(UFortSocialMenuSlateWrapperWidget) == 0x000008, "Wrong alignment on UFortSocialMenuSlateWrapperWidget");
static_assert(sizeof(UFortSocialMenuSlateWrapperWidget) == 0x000128, "Wrong size on UFortSocialMenuSlateWrapperWidget");

// Class FortniteUI.FortSocialPanel
// 0x0008 (0x0350 - 0x0348)
class UFortSocialPanel : public UFortActivatablePanel
{
public:
	class UFortSocialPanelView_UserLists*         PanelView_UserLists;                               // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ClosePanel();

	bool IsAnySlideOutMenuOpen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSocialPanel">();
	}
	static class UFortSocialPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSocialPanel>();
	}
};
static_assert(alignof(UFortSocialPanel) == 0x000008, "Wrong alignment on UFortSocialPanel");
static_assert(sizeof(UFortSocialPanel) == 0x000350, "Wrong size on UFortSocialPanel");
static_assert(offsetof(UFortSocialPanel, PanelView_UserLists) == 0x000348, "Member 'UFortSocialPanel::PanelView_UserLists' has a wrong offset!");

// Class FortniteUI.FortSocialPanelView_FriendLinkButton
// 0x0008 (0x0B38 - 0x0B30)
class UFortSocialPanelView_FriendLinkButton : public UCommonButton
{
public:
	class UCommonBorder*                          Border_ScreenTarget;                               // 0x0B30(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnCopiedToClipboard();
	void OnShareButtonTypeSet(EFriendLinkShareButtonType Type);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSocialPanelView_FriendLinkButton">();
	}
	static class UFortSocialPanelView_FriendLinkButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSocialPanelView_FriendLinkButton>();
	}
};
static_assert(alignof(UFortSocialPanelView_FriendLinkButton) == 0x000008, "Wrong alignment on UFortSocialPanelView_FriendLinkButton");
static_assert(sizeof(UFortSocialPanelView_FriendLinkButton) == 0x000B38, "Wrong size on UFortSocialPanelView_FriendLinkButton");
static_assert(offsetof(UFortSocialPanelView_FriendLinkButton, Border_ScreenTarget) == 0x000B30, "Member 'UFortSocialPanelView_FriendLinkButton::Border_ScreenTarget' has a wrong offset!");

// Class FortniteUI.FortSocialTab
// 0x0060 (0x0B90 - 0x0B30)
class UFortSocialTab : public UCommonButton
{
public:
	class UTexture2D*                             TabIcon;                                           // 0x0B30(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FText                                   TabName;                                           // 0x0B38(0x0018)(Edit, NativeAccessSpecifierPrivate)
	struct FSlateColor                            InviteTintColor;                                   // 0x0B50(0x0028)(Edit, NativeAccessSpecifierPrivate)
	class UImage*                                 Image_TabIcon;                                     // 0x0B78(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_TabName;                                      // 0x0B80(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Number;                                       // 0x0B88(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSocialTab">();
	}
	static class UFortSocialTab* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSocialTab>();
	}
};
static_assert(alignof(UFortSocialTab) == 0x000008, "Wrong alignment on UFortSocialTab");
static_assert(sizeof(UFortSocialTab) == 0x000B90, "Wrong size on UFortSocialTab");
static_assert(offsetof(UFortSocialTab, TabIcon) == 0x000B30, "Member 'UFortSocialTab::TabIcon' has a wrong offset!");
static_assert(offsetof(UFortSocialTab, TabName) == 0x000B38, "Member 'UFortSocialTab::TabName' has a wrong offset!");
static_assert(offsetof(UFortSocialTab, InviteTintColor) == 0x000B50, "Member 'UFortSocialTab::InviteTintColor' has a wrong offset!");
static_assert(offsetof(UFortSocialTab, Image_TabIcon) == 0x000B78, "Member 'UFortSocialTab::Image_TabIcon' has a wrong offset!");
static_assert(offsetof(UFortSocialTab, Text_TabName) == 0x000B80, "Member 'UFortSocialTab::Text_TabName' has a wrong offset!");
static_assert(offsetof(UFortSocialTab, Text_Number) == 0x000B88, "Member 'UFortSocialTab::Text_Number' has a wrong offset!");

// Class FortniteUI.FortFriendSearchButton
// 0x0008 (0x0B38 - 0x0B30)
class UFortFriendSearchButton : public UCommonButton
{
public:
	class UEditableText*                          EditableText_AddFriend;                            // 0x0B30(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleAddFriendTextCommitted(const class FText& Text, ETextCommit CommitMethod);
	void SetKeyboardFocusOnAddFriendText();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortFriendSearchButton">();
	}
	static class UFortFriendSearchButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortFriendSearchButton>();
	}
};
static_assert(alignof(UFortFriendSearchButton) == 0x000008, "Wrong alignment on UFortFriendSearchButton");
static_assert(sizeof(UFortFriendSearchButton) == 0x000B38, "Wrong size on UFortFriendSearchButton");
static_assert(offsetof(UFortFriendSearchButton, EditableText_AddFriend) == 0x000B30, "Member 'UFortFriendSearchButton::EditableText_AddFriend' has a wrong offset!");

// Class FortniteUI.FortSocialPanelView_UserLists
// 0x00B0 (0x02E0 - 0x0230)
class UFortSocialPanelView_UserLists : public UUserWidget
{
public:
	uint8                                         Pad_230[0x70];                                     // 0x0230(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortLocalUserEntry*                    UserEntry_LocalPlayer;                             // 0x02A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortFriendSearchButton*                Button_FriendSearch;                               // 0x02A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonWidgetSwitcher*                  Switcher_UserLists;                                // 0x02B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortSocialTab*                         SocialTab_AddFriends;                              // 0x02B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortSocialTab*                         SocialTab_Friends;                                 // 0x02C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USocialUserTreeView*                    UserTree_FriendsLists;                             // 0x02C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USocialUserTreeView*                    UserTree_AddFriends;                               // 0x02D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_AddWeGameFriends;                           // 0x02D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ToggleSocialPanel();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSocialPanelView_UserLists">();
	}
	static class UFortSocialPanelView_UserLists* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSocialPanelView_UserLists>();
	}
};
static_assert(alignof(UFortSocialPanelView_UserLists) == 0x000008, "Wrong alignment on UFortSocialPanelView_UserLists");
static_assert(sizeof(UFortSocialPanelView_UserLists) == 0x0002E0, "Wrong size on UFortSocialPanelView_UserLists");
static_assert(offsetof(UFortSocialPanelView_UserLists, UserEntry_LocalPlayer) == 0x0002A0, "Member 'UFortSocialPanelView_UserLists::UserEntry_LocalPlayer' has a wrong offset!");
static_assert(offsetof(UFortSocialPanelView_UserLists, Button_FriendSearch) == 0x0002A8, "Member 'UFortSocialPanelView_UserLists::Button_FriendSearch' has a wrong offset!");
static_assert(offsetof(UFortSocialPanelView_UserLists, Switcher_UserLists) == 0x0002B0, "Member 'UFortSocialPanelView_UserLists::Switcher_UserLists' has a wrong offset!");
static_assert(offsetof(UFortSocialPanelView_UserLists, SocialTab_AddFriends) == 0x0002B8, "Member 'UFortSocialPanelView_UserLists::SocialTab_AddFriends' has a wrong offset!");
static_assert(offsetof(UFortSocialPanelView_UserLists, SocialTab_Friends) == 0x0002C0, "Member 'UFortSocialPanelView_UserLists::SocialTab_Friends' has a wrong offset!");
static_assert(offsetof(UFortSocialPanelView_UserLists, UserTree_FriendsLists) == 0x0002C8, "Member 'UFortSocialPanelView_UserLists::UserTree_FriendsLists' has a wrong offset!");
static_assert(offsetof(UFortSocialPanelView_UserLists, UserTree_AddFriends) == 0x0002D0, "Member 'UFortSocialPanelView_UserLists::UserTree_AddFriends' has a wrong offset!");
static_assert(offsetof(UFortSocialPanelView_UserLists, Button_AddWeGameFriends) == 0x0002D8, "Member 'UFortSocialPanelView_UserLists::Button_AddWeGameFriends' has a wrong offset!");

// Class FortniteUI.FortSocialSettings
// 0x0018 (0x0248 - 0x0230)
class UFortSocialSettings : public UUserWidget
{
public:
	uint8                                         Pad_230[0x10];                                     // 0x0230(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicEntryBox*                       EntryBox_Settings;                                 // 0x0240(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSocialSettings">();
	}
	static class UFortSocialSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSocialSettings>();
	}
};
static_assert(alignof(UFortSocialSettings) == 0x000008, "Wrong alignment on UFortSocialSettings");
static_assert(sizeof(UFortSocialSettings) == 0x000248, "Wrong size on UFortSocialSettings");
static_assert(offsetof(UFortSocialSettings, EntryBox_Settings) == 0x000240, "Member 'UFortSocialSettings::EntryBox_Settings' has a wrong offset!");

// Class FortniteUI.FortSocialSettingToggle
// 0x0028 (0x0258 - 0x0230)
class UFortSocialSettingToggle : public UUserWidget
{
public:
	uint8                                         Pad_230[0x8];                                      // 0x0230(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonRotator*                         Rotator_Text;                                      // 0x0238(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_ParamName;                                    // 0x0240(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Left;                                       // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Right;                                      // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleRotated(int32 SelectedIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSocialSettingToggle">();
	}
	static class UFortSocialSettingToggle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSocialSettingToggle>();
	}
};
static_assert(alignof(UFortSocialSettingToggle) == 0x000008, "Wrong alignment on UFortSocialSettingToggle");
static_assert(sizeof(UFortSocialSettingToggle) == 0x000258, "Wrong size on UFortSocialSettingToggle");
static_assert(offsetof(UFortSocialSettingToggle, Rotator_Text) == 0x000238, "Member 'UFortSocialSettingToggle::Rotator_Text' has a wrong offset!");
static_assert(offsetof(UFortSocialSettingToggle, Text_ParamName) == 0x000240, "Member 'UFortSocialSettingToggle::Text_ParamName' has a wrong offset!");
static_assert(offsetof(UFortSocialSettingToggle, Button_Left) == 0x000248, "Member 'UFortSocialSettingToggle::Button_Left' has a wrong offset!");
static_assert(offsetof(UFortSocialSettingToggle, Button_Right) == 0x000250, "Member 'UFortSocialSettingToggle::Button_Right' has a wrong offset!");

// Class FortniteUI.FortSocialStyle
// 0x6760 (0x6790 - 0x0030)
class UFortSocialStyle final : public UDataAsset
{
public:
	struct FSocialStyle                           Style;                                             // 0x0030(0x6758)(Edit, NativeAccessSpecifierPublic)
	class USocialStyleDataAsset*                  OverrideStyle;                                     // 0x6788(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSocialStyle">();
	}
	static class UFortSocialStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSocialStyle>();
	}
};
static_assert(alignof(UFortSocialStyle) == 0x000008, "Wrong alignment on UFortSocialStyle");
static_assert(sizeof(UFortSocialStyle) == 0x006790, "Wrong size on UFortSocialStyle");
static_assert(offsetof(UFortSocialStyle, Style) == 0x000030, "Member 'UFortSocialStyle::Style' has a wrong offset!");
static_assert(offsetof(UFortSocialStyle, OverrideStyle) == 0x006788, "Member 'UFortSocialStyle::OverrideStyle' has a wrong offset!");

// Class FortniteUI.FortSocialUserListEntry
// 0x0018 (0x0B70 - 0x0B58)
class UFortSocialUserListEntry : public USocialUserListEntry
{
public:
	class UImage*                                 Image_PlatformIcon;                                // 0x0B58(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortPlayerBanner*                      PlayerBanner;                                      // 0x0B60(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDynamicEntryBox*                       EntryBox_PartySlots;                               // 0x0B68(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	bool IsPlatformOnlyFriend() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSocialUserListEntry">();
	}
	static class UFortSocialUserListEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSocialUserListEntry>();
	}
};
static_assert(alignof(UFortSocialUserListEntry) == 0x000008, "Wrong alignment on UFortSocialUserListEntry");
static_assert(sizeof(UFortSocialUserListEntry) == 0x000B70, "Wrong size on UFortSocialUserListEntry");
static_assert(offsetof(UFortSocialUserListEntry, Image_PlatformIcon) == 0x000B58, "Member 'UFortSocialUserListEntry::Image_PlatformIcon' has a wrong offset!");
static_assert(offsetof(UFortSocialUserListEntry, PlayerBanner) == 0x000B60, "Member 'UFortSocialUserListEntry::PlayerBanner' has a wrong offset!");
static_assert(offsetof(UFortSocialUserListEntry, EntryBox_PartySlots) == 0x000B68, "Member 'UFortSocialUserListEntry::EntryBox_PartySlots' has a wrong offset!");

// Class FortniteUI.FortSpectatedPlayerSwitcher
// 0x0028 (0x0258 - 0x0230)
class UFortSpectatedPlayerSwitcher final : public UUserWidget
{
public:
	int32                                         MaxPlayersToShow;                                  // 0x0230(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPotentialSpectatorTarget>      DisplayedTargets;                                  // 0x0238(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FPotentialSpectatorTarget>      AvailableTargets;                                  // 0x0248(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void OnDisplayedTargetsUpdated();

	bool ShouldBeVisible() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSpectatedPlayerSwitcher">();
	}
	static class UFortSpectatedPlayerSwitcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSpectatedPlayerSwitcher>();
	}
};
static_assert(alignof(UFortSpectatedPlayerSwitcher) == 0x000008, "Wrong alignment on UFortSpectatedPlayerSwitcher");
static_assert(sizeof(UFortSpectatedPlayerSwitcher) == 0x000258, "Wrong size on UFortSpectatedPlayerSwitcher");
static_assert(offsetof(UFortSpectatedPlayerSwitcher, MaxPlayersToShow) == 0x000230, "Member 'UFortSpectatedPlayerSwitcher::MaxPlayersToShow' has a wrong offset!");
static_assert(offsetof(UFortSpectatedPlayerSwitcher, DisplayedTargets) == 0x000238, "Member 'UFortSpectatedPlayerSwitcher::DisplayedTargets' has a wrong offset!");
static_assert(offsetof(UFortSpectatedPlayerSwitcher, AvailableTargets) == 0x000248, "Member 'UFortSpectatedPlayerSwitcher::AvailableTargets' has a wrong offset!");

// Class FortniteUI.FortSquadLandingPageDefenderSquadDetails
// 0x0010 (0x0248 - 0x0238)
class UFortSquadLandingPageDefenderSquadDetails final : public UCommonUserWidget
{
public:
	class UCommonTextBlock*                       OutpostName;                                       // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonNumericTextBlock*                PowerRating;                                       // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void HandleAddDefenderSquadMemberBP(const class FName& SquadId, int32 Param_Index);
	void HandleDefenderSquadInfoSetBP(const struct FFortLandingPageDefenderSummaryInfo& DefenderSummaryInfo);
	void SetDefenderSquadInfo(const struct FFortLandingPageDefenderSummaryInfo& DefenderSummaryInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadLandingPageDefenderSquadDetails">();
	}
	static class UFortSquadLandingPageDefenderSquadDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadLandingPageDefenderSquadDetails>();
	}
};
static_assert(alignof(UFortSquadLandingPageDefenderSquadDetails) == 0x000008, "Wrong alignment on UFortSquadLandingPageDefenderSquadDetails");
static_assert(sizeof(UFortSquadLandingPageDefenderSquadDetails) == 0x000248, "Wrong size on UFortSquadLandingPageDefenderSquadDetails");
static_assert(offsetof(UFortSquadLandingPageDefenderSquadDetails, OutpostName) == 0x000238, "Member 'UFortSquadLandingPageDefenderSquadDetails::OutpostName' has a wrong offset!");
static_assert(offsetof(UFortSquadLandingPageDefenderSquadDetails, PowerRating) == 0x000240, "Member 'UFortSquadLandingPageDefenderSquadDetails::PowerRating' has a wrong offset!");

// Class FortniteUI.FortSquadLandingPageDefenderSquadDetailsLocked
// 0x0008 (0x0240 - 0x0238)
class UFortSquadLandingPageDefenderSquadDetailsLocked final : public UCommonUserWidget
{
public:
	class UCommonTextBlock*                       OutpostName;                                       // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetDefenderSquadInfo(const struct FFortLandingPageDefenderSummaryInfo& DefenderSummaryInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadLandingPageDefenderSquadDetailsLocked">();
	}
	static class UFortSquadLandingPageDefenderSquadDetailsLocked* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadLandingPageDefenderSquadDetailsLocked>();
	}
};
static_assert(alignof(UFortSquadLandingPageDefenderSquadDetailsLocked) == 0x000008, "Wrong alignment on UFortSquadLandingPageDefenderSquadDetailsLocked");
static_assert(sizeof(UFortSquadLandingPageDefenderSquadDetailsLocked) == 0x000240, "Wrong size on UFortSquadLandingPageDefenderSquadDetailsLocked");
static_assert(offsetof(UFortSquadLandingPageDefenderSquadDetailsLocked, OutpostName) == 0x000238, "Member 'UFortSquadLandingPageDefenderSquadDetailsLocked::OutpostName' has a wrong offset!");

// Class FortniteUI.FortSquadLandingPageDefenderSummary
// 0x0008 (0x0240 - 0x0238)
class UFortSquadLandingPageDefenderSummary final : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleAddDefenderSquadDetailsBP(const struct FFortLandingPageDefenderSummaryInfo& DefenderSummaryInfo);
	void HandleAddLockedDefenderSquadDetailsBP(const struct FFortLandingPageDefenderSummaryInfo& DefenderSummaryInfo);
	void HandleClearDefenderSquadDetailsBP();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadLandingPageDefenderSummary">();
	}
	static class UFortSquadLandingPageDefenderSummary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadLandingPageDefenderSummary>();
	}
};
static_assert(alignof(UFortSquadLandingPageDefenderSummary) == 0x000008, "Wrong alignment on UFortSquadLandingPageDefenderSummary");
static_assert(sizeof(UFortSquadLandingPageDefenderSummary) == 0x000240, "Wrong size on UFortSquadLandingPageDefenderSummary");

// Class FortniteUI.FortSquadLandingPageSurvivorSummary
// 0x0088 (0x02C0 - 0x0238)
class UFortSquadLandingPageSurvivorSummary final : public UCommonUserWidget
{
public:
	class UFortSquadStatValueWithIcon*            FortitudeStatValue;                                // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortSquadStatValueWithIcon*            OffenseStatValue;                                  // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortSquadStatValueWithIcon*            ResistanceStatValue;                               // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortSquadStatValueWithIcon*            TechStatValue;                                     // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258[0x68];                                     // 0x0258(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleAddSetBonusSummaryLineItemBP(const struct FFortAttributeModifierAccumulation& AttributeModifierAccumulation);
	void HandleClearSetBonusSummaryLineItemsBP();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadLandingPageSurvivorSummary">();
	}
	static class UFortSquadLandingPageSurvivorSummary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadLandingPageSurvivorSummary>();
	}
};
static_assert(alignof(UFortSquadLandingPageSurvivorSummary) == 0x000008, "Wrong alignment on UFortSquadLandingPageSurvivorSummary");
static_assert(sizeof(UFortSquadLandingPageSurvivorSummary) == 0x0002C0, "Wrong size on UFortSquadLandingPageSurvivorSummary");
static_assert(offsetof(UFortSquadLandingPageSurvivorSummary, FortitudeStatValue) == 0x000238, "Member 'UFortSquadLandingPageSurvivorSummary::FortitudeStatValue' has a wrong offset!");
static_assert(offsetof(UFortSquadLandingPageSurvivorSummary, OffenseStatValue) == 0x000240, "Member 'UFortSquadLandingPageSurvivorSummary::OffenseStatValue' has a wrong offset!");
static_assert(offsetof(UFortSquadLandingPageSurvivorSummary, ResistanceStatValue) == 0x000248, "Member 'UFortSquadLandingPageSurvivorSummary::ResistanceStatValue' has a wrong offset!");
static_assert(offsetof(UFortSquadLandingPageSurvivorSummary, TechStatValue) == 0x000250, "Member 'UFortSquadLandingPageSurvivorSummary::TechStatValue' has a wrong offset!");

// Class FortniteUI.FortItemViewContext_ExpeditionSquadSlotsView
// 0x0008 (0x0108 - 0x0100)
class UFortItemViewContext_ExpeditionSquadSlotsView final : public UFortItemViewContext_SquadSlotsView
{
public:
	uint8                                         Pad_100[0x8];                                      // 0x0100(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemViewContext_ExpeditionSquadSlotsView">();
	}
	static class UFortItemViewContext_ExpeditionSquadSlotsView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemViewContext_ExpeditionSquadSlotsView>();
	}
};
static_assert(alignof(UFortItemViewContext_ExpeditionSquadSlotsView) == 0x000008, "Wrong alignment on UFortItemViewContext_ExpeditionSquadSlotsView");
static_assert(sizeof(UFortItemViewContext_ExpeditionSquadSlotsView) == 0x000108, "Wrong size on UFortItemViewContext_ExpeditionSquadSlotsView");

// Class FortniteUI.FortItemViewContext_ExpeditionSquadSlotItemPicker
// 0x0008 (0x0110 - 0x0108)
class UFortItemViewContext_ExpeditionSquadSlotItemPicker final : public UFortItemViewContext_SquadSlotItemPicker
{
public:
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemViewContext_ExpeditionSquadSlotItemPicker">();
	}
	static class UFortItemViewContext_ExpeditionSquadSlotItemPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemViewContext_ExpeditionSquadSlotItemPicker>();
	}
};
static_assert(alignof(UFortItemViewContext_ExpeditionSquadSlotItemPicker) == 0x000008, "Wrong alignment on UFortItemViewContext_ExpeditionSquadSlotItemPicker");
static_assert(sizeof(UFortItemViewContext_ExpeditionSquadSlotItemPicker) == 0x000110, "Wrong size on UFortItemViewContext_ExpeditionSquadSlotItemPicker");

// Class FortniteUI.FortSquadSlotItemDetailsHostPanel
// 0x0028 (0x02D0 - 0x02A8)
class UFortSquadSlotItemDetailsHostPanel : public UFortItemDetailsHostPanel
{
public:
	uint8                                         Pad_2A8[0x28];                                     // 0x02A8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIdOfSquadSlotToManageBP(const class FName& SquadId, const int32 SquadSlotIndex);

	void GetIdOfSquadSlotToManageBP(class FName* OutSquadId, int32* OutSquadSlotIndex) const;
	class UFortItem* GetItemInSquadSlotBP(const class ULocalPlayer* LocalPlayer) const;
	bool IsSquadSlotLockedBP() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadSlotItemDetailsHostPanel">();
	}
	static class UFortSquadSlotItemDetailsHostPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadSlotItemDetailsHostPanel>();
	}
};
static_assert(alignof(UFortSquadSlotItemDetailsHostPanel) == 0x000008, "Wrong alignment on UFortSquadSlotItemDetailsHostPanel");
static_assert(sizeof(UFortSquadSlotItemDetailsHostPanel) == 0x0002D0, "Wrong size on UFortSquadSlotItemDetailsHostPanel");

// Class FortniteUI.FortSquadSlotItemPicker
// 0x00D0 (0x03D8 - 0x0308)
class UFortSquadSlotItemPicker : public UFortItemPickerBase
{
public:
	uint8                                         Pad_308[0x40];                                     // 0x0308(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnSortChanged;                                     // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_358[0x80];                                     // 0x0358(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CycleSortType();
	void FortSquadSlotSortChanged__DelegateSignature(ESquadSlotSortType CurrentSortType, ESquadSlotType SquadSlotType);
	void SetIdOfSquadSlotToManageBP(const class FName& SquadId, const int32 SquadSlotIndex);
	void SetSortTypes(const struct FSquadSlotSortTypes& SquadSlotSortTypes);

	void GetIdOfSquadSlotToManageBP(class FName* OutSquadId, int32* OutSquadSlotIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadSlotItemPicker">();
	}
	static class UFortSquadSlotItemPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadSlotItemPicker>();
	}
};
static_assert(alignof(UFortSquadSlotItemPicker) == 0x000008, "Wrong alignment on UFortSquadSlotItemPicker");
static_assert(sizeof(UFortSquadSlotItemPicker) == 0x0003D8, "Wrong size on UFortSquadSlotItemPicker");
static_assert(offsetof(UFortSquadSlotItemPicker, OnSortChanged) == 0x000348, "Member 'UFortSquadSlotItemPicker::OnSortChanged' has a wrong offset!");

// Class FortniteUI.FortSquadSlotSelectorPopupMenu
// 0x0000 (0x0340 - 0x0340)
class UFortSquadSlotSelectorPopupMenu : public UFortPopupMenu
{
public:
	class UFortSquadSlotSelectorButton* GetHostButton() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadSlotSelectorPopupMenu">();
	}
	static class UFortSquadSlotSelectorPopupMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadSlotSelectorPopupMenu>();
	}
};
static_assert(alignof(UFortSquadSlotSelectorPopupMenu) == 0x000008, "Wrong alignment on UFortSquadSlotSelectorPopupMenu");
static_assert(sizeof(UFortSquadSlotSelectorPopupMenu) == 0x000340, "Wrong size on UFortSquadSlotSelectorPopupMenu");

// Class FortniteUI.FortSquadSlotSurvivorTraitMatchesDetailWidget
// 0x0028 (0x02D0 - 0x02A8)
class UFortSquadSlotSurvivorTraitMatchesDetailWidget : public UFortSquadSlotItemDetailElementWidget
{
public:
	bool                                          IsSquadLeaderSlot;                                 // 0x02A8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          LeaderMatchesSquadType;                            // 0x02A9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2AA[0x2];                                      // 0x02AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubordinatePersonalityMatchCount;                  // 0x02AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          MatchesLeaderPersonality;                          // 0x02B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MatchingSetBonusCount;                             // 0x02B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SetBonusSize;                                      // 0x02B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2BC[0x14];                                     // 0x02BC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleTraitValuesUpdatedBP();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadSlotSurvivorTraitMatchesDetailWidget">();
	}
	static class UFortSquadSlotSurvivorTraitMatchesDetailWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadSlotSurvivorTraitMatchesDetailWidget>();
	}
};
static_assert(alignof(UFortSquadSlotSurvivorTraitMatchesDetailWidget) == 0x000008, "Wrong alignment on UFortSquadSlotSurvivorTraitMatchesDetailWidget");
static_assert(sizeof(UFortSquadSlotSurvivorTraitMatchesDetailWidget) == 0x0002D0, "Wrong size on UFortSquadSlotSurvivorTraitMatchesDetailWidget");
static_assert(offsetof(UFortSquadSlotSurvivorTraitMatchesDetailWidget, IsSquadLeaderSlot) == 0x0002A8, "Member 'UFortSquadSlotSurvivorTraitMatchesDetailWidget::IsSquadLeaderSlot' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotSurvivorTraitMatchesDetailWidget, LeaderMatchesSquadType) == 0x0002A9, "Member 'UFortSquadSlotSurvivorTraitMatchesDetailWidget::LeaderMatchesSquadType' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotSurvivorTraitMatchesDetailWidget, SubordinatePersonalityMatchCount) == 0x0002AC, "Member 'UFortSquadSlotSurvivorTraitMatchesDetailWidget::SubordinatePersonalityMatchCount' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotSurvivorTraitMatchesDetailWidget, MatchesLeaderPersonality) == 0x0002B0, "Member 'UFortSquadSlotSurvivorTraitMatchesDetailWidget::MatchesLeaderPersonality' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotSurvivorTraitMatchesDetailWidget, MatchingSetBonusCount) == 0x0002B4, "Member 'UFortSquadSlotSurvivorTraitMatchesDetailWidget::MatchingSetBonusCount' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotSurvivorTraitMatchesDetailWidget, SetBonusSize) == 0x0002B8, "Member 'UFortSquadSlotSurvivorTraitMatchesDetailWidget::SetBonusSize' has a wrong offset!");

// Class FortniteUI.FortSquadSlotSelectorButton
// 0x0080 (0x0BB0 - 0x0B30)
class UFortSquadSlotSelectorButton : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x28];                                     // 0x0B30(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnRequestOpenSquadSlotEvent;                       // 0x0B58(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnRequestViewInAllEvent;                           // 0x0B68(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UFortSquadSlotWidget*                   SquadSlotWidget;                                   // 0x0B78(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuAnchor*                            PopupMenuAnchor;                                   // 0x0B80(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TScriptInterface<class IFortItemViewContextInterface> ItemViewContext;                                   // 0x0B88(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_B98[0x18];                                     // 0x0B98(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UWidget* GetPopupMenu();
	void HandlePostDifferentSquadSlotSetBP();
	void HandlePreDifferentSquadSlotSetBP();
	void OpenSquadSlot();
	void SetIdOfSquadSlotToManageBP(const class FName& SquadId, const int32 SquadSlotIndex);
	void SquadSlotWidgetUpdated();
	void ViewInAll();

	void GetIdOfSquadSlotToManageBP(class FName* OutSquadId, int32* OutSquadSlotIndex) const;
	bool GetInPreviewMode() const;
	bool IsSquadSlotLockedBP() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadSlotSelectorButton">();
	}
	static class UFortSquadSlotSelectorButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadSlotSelectorButton>();
	}
};
static_assert(alignof(UFortSquadSlotSelectorButton) == 0x000008, "Wrong alignment on UFortSquadSlotSelectorButton");
static_assert(sizeof(UFortSquadSlotSelectorButton) == 0x000BB0, "Wrong size on UFortSquadSlotSelectorButton");
static_assert(offsetof(UFortSquadSlotSelectorButton, OnRequestOpenSquadSlotEvent) == 0x000B58, "Member 'UFortSquadSlotSelectorButton::OnRequestOpenSquadSlotEvent' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotSelectorButton, OnRequestViewInAllEvent) == 0x000B68, "Member 'UFortSquadSlotSelectorButton::OnRequestViewInAllEvent' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotSelectorButton, SquadSlotWidget) == 0x000B78, "Member 'UFortSquadSlotSelectorButton::SquadSlotWidget' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotSelectorButton, PopupMenuAnchor) == 0x000B80, "Member 'UFortSquadSlotSelectorButton::PopupMenuAnchor' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotSelectorButton, ItemViewContext) == 0x000B88, "Member 'UFortSquadSlotSelectorButton::ItemViewContext' has a wrong offset!");

// Class FortniteUI.FortSquadSlotWidget
// 0x0098 (0x01A0 - 0x0108)
class UFortSquadSlotWidget final : public UWidget
{
public:
	uint8                                         Pad_108[0x28];                                     // 0x0108(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	EFortItemCardSize                             ItemCardSize;                                      // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x3F];                                     // 0x0131(0x003F)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMultiSizeItemCard*                 SlottedItemCard;                                   // 0x0170(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IFortItemViewContextInterface> ItemViewContext;                                   // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_190[0x10];                                     // 0x0190(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCardSize(const EFortItemCardSize CardSize);
	void SetIdOfSquadSlotToManageBP(const class FName& SquadId, const int32 SquadSlotIndex);

	void GetIdOfSquadSlotToManageBP(class FName* OutSquadId, int32* OutSquadSlotIndex) const;
	class UFortItem* GetItemInSquadSlotBP(const class ULocalPlayer* LocalPlayer) const;
	bool IsSquadSlotLockedBP() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadSlotWidget">();
	}
	static class UFortSquadSlotWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadSlotWidget>();
	}
};
static_assert(alignof(UFortSquadSlotWidget) == 0x000008, "Wrong alignment on UFortSquadSlotWidget");
static_assert(sizeof(UFortSquadSlotWidget) == 0x0001A0, "Wrong size on UFortSquadSlotWidget");
static_assert(offsetof(UFortSquadSlotWidget, ItemCardSize) == 0x000130, "Member 'UFortSquadSlotWidget::ItemCardSize' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotWidget, SlottedItemCard) == 0x000170, "Member 'UFortSquadSlotWidget::SlottedItemCard' has a wrong offset!");
static_assert(offsetof(UFortSquadSlotWidget, ItemViewContext) == 0x000180, "Member 'UFortSquadSlotWidget::ItemViewContext' has a wrong offset!");

// Class FortniteUI.FortSquadStatsWidgetBase
// 0x0038 (0x0270 - 0x0238)
class UFortSquadStatsWidgetBase final : public UCommonUserWidget
{
public:
	TArray<class UFortAttributeListItem_NUI*>     OverviewStats;                                     // 0x0238(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UFortAttributeList_NUI*                 DetailedStats;                                     // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_250[0x20];                                     // 0x0250(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleSquadSlottingPreviewStateChanged();
	void RequestShowPreviewStats();
	void RequestStatsUpdate();

	struct FUniqueNetIdRepl GetLocalPlayerId() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadStatsWidgetBase">();
	}
	static class UFortSquadStatsWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadStatsWidgetBase>();
	}
};
static_assert(alignof(UFortSquadStatsWidgetBase) == 0x000008, "Wrong alignment on UFortSquadStatsWidgetBase");
static_assert(sizeof(UFortSquadStatsWidgetBase) == 0x000270, "Wrong size on UFortSquadStatsWidgetBase");
static_assert(offsetof(UFortSquadStatsWidgetBase, OverviewStats) == 0x000238, "Member 'UFortSquadStatsWidgetBase::OverviewStats' has a wrong offset!");
static_assert(offsetof(UFortSquadStatsWidgetBase, DetailedStats) == 0x000248, "Member 'UFortSquadStatsWidgetBase::DetailedStats' has a wrong offset!");

// Class FortniteUI.FortSquadStatValueWithIcon
// 0x0058 (0x0290 - 0x0238)
class UFortSquadStatValueWithIcon final : public UCommonUserWidget
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0238(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     TeamAttribute;                                     // 0x0258(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBrushSize                                ImageSize;                                         // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonNumericTextBlock*                Value;                                             // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Icon;                                              // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void HandleDifferentAttributeSetBP();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadStatValueWithIcon">();
	}
	static class UFortSquadStatValueWithIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadStatValueWithIcon>();
	}
};
static_assert(alignof(UFortSquadStatValueWithIcon) == 0x000008, "Wrong alignment on UFortSquadStatValueWithIcon");
static_assert(sizeof(UFortSquadStatValueWithIcon) == 0x000290, "Wrong size on UFortSquadStatValueWithIcon");
static_assert(offsetof(UFortSquadStatValueWithIcon, Attribute) == 0x000238, "Member 'UFortSquadStatValueWithIcon::Attribute' has a wrong offset!");
static_assert(offsetof(UFortSquadStatValueWithIcon, TeamAttribute) == 0x000258, "Member 'UFortSquadStatValueWithIcon::TeamAttribute' has a wrong offset!");
static_assert(offsetof(UFortSquadStatValueWithIcon, ImageSize) == 0x000278, "Member 'UFortSquadStatValueWithIcon::ImageSize' has a wrong offset!");
static_assert(offsetof(UFortSquadStatValueWithIcon, Value) == 0x000280, "Member 'UFortSquadStatValueWithIcon::Value' has a wrong offset!");
static_assert(offsetof(UFortSquadStatValueWithIcon, Icon) == 0x000288, "Member 'UFortSquadStatValueWithIcon::Icon' has a wrong offset!");

// Class FortniteUI.FortSquadTypeLandingPageBase
// 0x0030 (0x0378 - 0x0348)
class UFortSquadTypeLandingPageBase final : public UFortActivatablePanel
{
public:
	EFortHomebaseSquadType                        SquadType;                                         // 0x0348(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    BackInputActionRowHandle;                          // 0x0350(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EFortFrontendInventoryFilter                  ItemManagementScreenFilter;                        // 0x0360(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class UFortSquadSelectorButton>> SquadSelectorButtons;                              // 0x0368(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	class UFortSquadSelectorButton* CreateAndAddSquadButton(const class FName& SquadId);
	void HandleBackInputAction(bool* bPassThrough);
	void HandlePendingNavigationOp();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSquadTypeLandingPageBase">();
	}
	static class UFortSquadTypeLandingPageBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSquadTypeLandingPageBase>();
	}
};
static_assert(alignof(UFortSquadTypeLandingPageBase) == 0x000008, "Wrong alignment on UFortSquadTypeLandingPageBase");
static_assert(sizeof(UFortSquadTypeLandingPageBase) == 0x000378, "Wrong size on UFortSquadTypeLandingPageBase");
static_assert(offsetof(UFortSquadTypeLandingPageBase, SquadType) == 0x000348, "Member 'UFortSquadTypeLandingPageBase::SquadType' has a wrong offset!");
static_assert(offsetof(UFortSquadTypeLandingPageBase, BackInputActionRowHandle) == 0x000350, "Member 'UFortSquadTypeLandingPageBase::BackInputActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortSquadTypeLandingPageBase, ItemManagementScreenFilter) == 0x000360, "Member 'UFortSquadTypeLandingPageBase::ItemManagementScreenFilter' has a wrong offset!");
static_assert(offsetof(UFortSquadTypeLandingPageBase, SquadSelectorButtons) == 0x000368, "Member 'UFortSquadTypeLandingPageBase::SquadSelectorButtons' has a wrong offset!");

// Class FortniteUI.FortStandardGlobalActionDetailsDataSource
// 0x0048 (0x0070 - 0x0028)
class UFortStandardGlobalActionDetailsDataSource final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGlobalUIContext*                   GlobalUIContext;                                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonInputSubsystem*                  CommonInputSubsystem;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortPlayerController*                  FortPlayerController;                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_48[0x12];                                      // 0x0048(0x0012)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortGlobalActionDetailsFunctionContext ActionDetailsContext;                              // 0x005A(0x0001)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_5B[0x15];                                      // 0x005B(0x0015)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UFortStandardGlobalActionDetailsDataSource* Construct(class UObject* Param_Outer, class UFortGlobalUIContext* Param_GlobalUIContext, class UCommonInputSubsystem* Param_CommonInputSubsystem, EFortGlobalAction GlobalAction, const struct FFortGlobalActionDetailsFunctionContext& Param_ActionDetailsContext);
	static class UFortStandardGlobalActionDetailsDataSource* ConstructWithDefaultContexts(class UObject* Param_Outer, class UWidget* ContextWidget, EFortGlobalAction GlobalAction, const struct FFortGlobalActionDetailsFunctionContext& Param_ActionDetailsContext);

	void FortNameDataSourceOnChangeInternalDelegate__DelegateSignature(class UObject* Source);
	void HandlePlayerControllerChanged(class UObject* Source);
	void SetActionDetailsContext(const struct FFortGlobalActionDetailsFunctionContext& Value);
	void SetCommonInputSubsystem(class UCommonInputSubsystem* Value);
	void SetGlobalAction(EFortGlobalAction Value);
	void SetGlobalUIContext(class UFortGlobalUIContext* Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortStandardGlobalActionDetailsDataSource">();
	}
	static class UFortStandardGlobalActionDetailsDataSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortStandardGlobalActionDetailsDataSource>();
	}
};
static_assert(alignof(UFortStandardGlobalActionDetailsDataSource) == 0x000008, "Wrong alignment on UFortStandardGlobalActionDetailsDataSource");
static_assert(sizeof(UFortStandardGlobalActionDetailsDataSource) == 0x000070, "Wrong size on UFortStandardGlobalActionDetailsDataSource");
static_assert(offsetof(UFortStandardGlobalActionDetailsDataSource, GlobalUIContext) == 0x000030, "Member 'UFortStandardGlobalActionDetailsDataSource::GlobalUIContext' has a wrong offset!");
static_assert(offsetof(UFortStandardGlobalActionDetailsDataSource, CommonInputSubsystem) == 0x000038, "Member 'UFortStandardGlobalActionDetailsDataSource::CommonInputSubsystem' has a wrong offset!");
static_assert(offsetof(UFortStandardGlobalActionDetailsDataSource, FortPlayerController) == 0x000040, "Member 'UFortStandardGlobalActionDetailsDataSource::FortPlayerController' has a wrong offset!");
static_assert(offsetof(UFortStandardGlobalActionDetailsDataSource, ActionDetailsContext) == 0x00005A, "Member 'UFortStandardGlobalActionDetailsDataSource::ActionDetailsContext' has a wrong offset!");

// Class FortniteUI.FortStatIcon
// 0x0030 (0x0268 - 0x0238)
class UFortStatIcon final : public UCommonUserWidget
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0238(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBrushSize                                ImageSize;                                         // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 Icon;                                              // 0x0260(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void HandleDifferentAttributeSetBP();
	void SetAttribute(const struct FGameplayAttribute& InAttribute);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortStatIcon">();
	}
	static class UFortStatIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortStatIcon>();
	}
};
static_assert(alignof(UFortStatIcon) == 0x000008, "Wrong alignment on UFortStatIcon");
static_assert(sizeof(UFortStatIcon) == 0x000268, "Wrong size on UFortStatIcon");
static_assert(offsetof(UFortStatIcon, Attribute) == 0x000238, "Member 'UFortStatIcon::Attribute' has a wrong offset!");
static_assert(offsetof(UFortStatIcon, ImageSize) == 0x000258, "Member 'UFortStatIcon::ImageSize' has a wrong offset!");
static_assert(offsetof(UFortStatIcon, Icon) == 0x000260, "Member 'UFortStatIcon::Icon' has a wrong offset!");

// Class FortniteUI.FortStatsOverviewDetailsBase
// 0x0038 (0x0270 - 0x0238)
class UFortStatsOverviewDetailsBase final : public UCommonUserWidget
{
public:
	TArray<class UFortAttributeListItem_NUI*>     OverviewStats;                                     // 0x0238(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UFortAttributeList_NUI*                 DetailedStats;                                     // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_250[0x20];                                     // 0x0250(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ListenForChanges(bool bListen);
	void RequestStatsUpdate();

	struct FUniqueNetIdRepl GetLocalPlayerId() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortStatsOverviewDetailsBase">();
	}
	static class UFortStatsOverviewDetailsBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortStatsOverviewDetailsBase>();
	}
};
static_assert(alignof(UFortStatsOverviewDetailsBase) == 0x000008, "Wrong alignment on UFortStatsOverviewDetailsBase");
static_assert(sizeof(UFortStatsOverviewDetailsBase) == 0x000270, "Wrong size on UFortStatsOverviewDetailsBase");
static_assert(offsetof(UFortStatsOverviewDetailsBase, OverviewStats) == 0x000238, "Member 'UFortStatsOverviewDetailsBase::OverviewStats' has a wrong offset!");
static_assert(offsetof(UFortStatsOverviewDetailsBase, DetailedStats) == 0x000248, "Member 'UFortStatsOverviewDetailsBase::DetailedStats' has a wrong offset!");

// Class FortniteUI.FortStoreContext
// 0x00E8 (0x0110 - 0x0028)
class UFortStoreContext final : public UBlueprintContextBase
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnCardPackOffersChanged;                           // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnStorePurchaseCompleted;                          // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnStoreStateChange;                                // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FCardPackOffer>                 Offers;                                            // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              NextStoreRefresh;                                  // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCard>                          CardList;                                          // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CardIndex;                                         // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOpenedCardPack                        OpenedCardPack;                                    // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EFortRarity                                   LastCardRarity;                                    // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCard>                          PurchasedItemList;                                 // 0x00A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UFortCardPackItem*>              PurchasedCardPacks;                                // 0x00B8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x38];                                      // 0x00C8(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoftObjectPath>                MissingAssetsAttemptedAsyncLoad;                   // 0x0100(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void AttemptOpenAllPacks();
	void AttemptOpenPackByIndex(int32 CardPackIndex);
	void AttemptOpenSinglePack();
	bool CardAddedToSummaryComplete();
	bool CardBackRevealComplete();
	bool CardEntryComplete();
	bool CardExitComplete();
	bool CardFlipComplete();
	bool CardFrontRevealComplete();
	bool CardPackDestroyComplete();
	bool CardPackOpeningComplete();
	bool ChoiceResultComplete();
	void DismissError();
	bool EnterCardPackStore();
	bool EnterCurrencyStore(const class FString& AttemptedPurchaseCardPackId);
	void EnterRealMoneyStore();
	bool ErrorOccurred(const class FString& ErrorAnalytics);
	bool ExitCardPackStore();
	bool ExitCurrencyStore();
	void ExitRealMoneyStore();
	bool ExitSummary();
	bool ExitWebPayment();
	void FreshenCache();
	void GetAccountItems(const TArray<class UFortAccountItemDefinition*>& AccountItemDefinitions, TArray<class UFortAccountItem*>* AccountItems);
	struct FLinearColor GetRarityColor(EFortRarity Rarity);
	struct FTimespan GetTimeUntilDailyLimitReset();
	struct FTimespan GetTimeUntilMarketplaceRefresh();
	bool MakeChoice(int32 ChoiceIdx);
	ECardPackPurchaseError MakePurchase(const struct FCardPackOffer& Offer, int32 Quantity);
	bool OpenWebPayment(const class FString& AttemptedMTXOfferId);
	bool PurchaseOpeningComplete();
	void RealMoneyPurchaseFinished();
	void RealMoneyPurchaseStart();
	bool StoreHasStarsForSale();
	void UserViewedAthenaItemShop();

	void FireInteractionAnalyticsEvent(const class FString& Interaction, const class FString& Details) const;
	bool GetCard(int32 CardIdx, struct FCard* ResultOut) const;
	int32 GetNumUnopenedCardPacksRemaining(const class UFortCardPackItemDefinition* PackType, bool bCountChoicePacks) const;
	int32 GetOwnedItemCount(const class UFortItemDefinition* ItemDefinition) const;
	EFortStoreState GetPreviousState() const;
	EFortStoreState GetStoreState() const;
	bool IsOpeningDirectPack() const;
	bool IsOpeningOnePack() const;
	bool IsWaitingForMcp() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortStoreContext">();
	}
	static class UFortStoreContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortStoreContext>();
	}
};
static_assert(alignof(UFortStoreContext) == 0x000008, "Wrong alignment on UFortStoreContext");
static_assert(sizeof(UFortStoreContext) == 0x000110, "Wrong size on UFortStoreContext");
static_assert(offsetof(UFortStoreContext, OnCardPackOffersChanged) == 0x000030, "Member 'UFortStoreContext::OnCardPackOffersChanged' has a wrong offset!");
static_assert(offsetof(UFortStoreContext, OnStorePurchaseCompleted) == 0x000040, "Member 'UFortStoreContext::OnStorePurchaseCompleted' has a wrong offset!");
static_assert(offsetof(UFortStoreContext, OnStoreStateChange) == 0x000050, "Member 'UFortStoreContext::OnStoreStateChange' has a wrong offset!");
static_assert(offsetof(UFortStoreContext, Offers) == 0x000060, "Member 'UFortStoreContext::Offers' has a wrong offset!");
static_assert(offsetof(UFortStoreContext, NextStoreRefresh) == 0x000070, "Member 'UFortStoreContext::NextStoreRefresh' has a wrong offset!");
static_assert(offsetof(UFortStoreContext, CardList) == 0x000078, "Member 'UFortStoreContext::CardList' has a wrong offset!");
static_assert(offsetof(UFortStoreContext, CardIndex) == 0x000088, "Member 'UFortStoreContext::CardIndex' has a wrong offset!");
static_assert(offsetof(UFortStoreContext, OpenedCardPack) == 0x000090, "Member 'UFortStoreContext::OpenedCardPack' has a wrong offset!");
static_assert(offsetof(UFortStoreContext, LastCardRarity) == 0x0000A0, "Member 'UFortStoreContext::LastCardRarity' has a wrong offset!");
static_assert(offsetof(UFortStoreContext, PurchasedItemList) == 0x0000A8, "Member 'UFortStoreContext::PurchasedItemList' has a wrong offset!");
static_assert(offsetof(UFortStoreContext, PurchasedCardPacks) == 0x0000B8, "Member 'UFortStoreContext::PurchasedCardPacks' has a wrong offset!");
static_assert(offsetof(UFortStoreContext, MissingAssetsAttemptedAsyncLoad) == 0x000100, "Member 'UFortStoreContext::MissingAssetsAttemptedAsyncLoad' has a wrong offset!");

// Class FortniteUI.FortStorefront
// 0x0000 (0x0240 - 0x0240)
class UFortStorefront final : public UFortUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortStorefront">();
	}
	static class UFortStorefront* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortStorefront>();
	}
};
static_assert(alignof(UFortStorefront) == 0x000008, "Wrong alignment on UFortStorefront");
static_assert(sizeof(UFortStorefront) == 0x000240, "Wrong size on UFortStorefront");

// Class FortniteUI.FortStoreFrontOfferDetailsWidgetBase
// 0x0058 (0x0498 - 0x0440)
class UFortStoreFrontOfferDetailsWidgetBase : public UFortActivatablePanelWithItemPreview
{
public:
	uint8                                         Pad_440[0x10];                                     // 0x0440(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    EnterViewModeInputActionRowHandle;                 // 0x0450(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          IsInItemViewMode;                                  // 0x0460(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ShouldAllowItemViewModeAction;                     // 0x0461(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_462[0x6];                                      // 0x0462(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortStoreFrontOfferInfo*>       PagedItems;                                        // 0x0468(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UFortStoreFrontOfferInfo*               OfferData;                                         // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortVariantPicker*                     Picker_VariantSelector;                            // 0x0480(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_488[0x10];                                     // 0x0488(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AutoEquip();
	bool CanAutoEquip();
	void HandleCurrentlyViewedAccountInfoChanged(const struct FFortPublicAccountInfo& NewInfo);
	void OnEnterViewModeActionCommitted(bool* PassThrough);
	void OnOfferSet();
	void OnUpdateStatus();
	void PurchaseAmountLeft();
	void PurchaseAmountRight();
	void RefreshOfferInfo();
	void RequestExternalPurchase(int32 Quantity);
	void SetIsInItemViewMode(const bool Value);
	void SetPagedItems(const TArray<class UFortStoreFrontOfferInfo*>& InPagedItems);
	void SetShouldAllowItemViewModeAction(const bool Value);
	void SetupOffer(class UFortStoreFrontOfferInfo* InOfferData);
	void UpdateItemViewModeBP();

	class UFortStoreFrontOfferInfo* GetOfferInfo() const;
	void SendShopInteractionAnalytic(const class FString& Interaction) const;
	bool ShouldHavePurchaseConfirmation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortStoreFrontOfferDetailsWidgetBase">();
	}
	static class UFortStoreFrontOfferDetailsWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortStoreFrontOfferDetailsWidgetBase>();
	}
};
static_assert(alignof(UFortStoreFrontOfferDetailsWidgetBase) == 0x000008, "Wrong alignment on UFortStoreFrontOfferDetailsWidgetBase");
static_assert(sizeof(UFortStoreFrontOfferDetailsWidgetBase) == 0x000498, "Wrong size on UFortStoreFrontOfferDetailsWidgetBase");
static_assert(offsetof(UFortStoreFrontOfferDetailsWidgetBase, EnterViewModeInputActionRowHandle) == 0x000450, "Member 'UFortStoreFrontOfferDetailsWidgetBase::EnterViewModeInputActionRowHandle' has a wrong offset!");
static_assert(offsetof(UFortStoreFrontOfferDetailsWidgetBase, IsInItemViewMode) == 0x000460, "Member 'UFortStoreFrontOfferDetailsWidgetBase::IsInItemViewMode' has a wrong offset!");
static_assert(offsetof(UFortStoreFrontOfferDetailsWidgetBase, ShouldAllowItemViewModeAction) == 0x000461, "Member 'UFortStoreFrontOfferDetailsWidgetBase::ShouldAllowItemViewModeAction' has a wrong offset!");
static_assert(offsetof(UFortStoreFrontOfferDetailsWidgetBase, PagedItems) == 0x000468, "Member 'UFortStoreFrontOfferDetailsWidgetBase::PagedItems' has a wrong offset!");
static_assert(offsetof(UFortStoreFrontOfferDetailsWidgetBase, OfferData) == 0x000478, "Member 'UFortStoreFrontOfferDetailsWidgetBase::OfferData' has a wrong offset!");
static_assert(offsetof(UFortStoreFrontOfferDetailsWidgetBase, Picker_VariantSelector) == 0x000480, "Member 'UFortStoreFrontOfferDetailsWidgetBase::Picker_VariantSelector' has a wrong offset!");

// Class FortniteUI.FortStoreRootBase
// 0x0008 (0x0328 - 0x0320)
class UFortStoreRootBase final : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAffiliateUpdated(const class FString& AffiliateName);
	void OnUpdateOtherPlatformMTXMessage(bool HasOtherPlatformCurrency, const class FText& CurrencyMessageLocText);
	void PopulatePrerollOffers(const TDelegate<void(bool bSuccess)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortStoreRootBase">();
	}
	static class UFortStoreRootBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortStoreRootBase>();
	}
};
static_assert(alignof(UFortStoreRootBase) == 0x000008, "Wrong alignment on UFortStoreRootBase");
static_assert(sizeof(UFortStoreRootBase) == 0x000328, "Wrong size on UFortStoreRootBase");

// Class FortniteUI.StoreCardObject
// 0x0018 (0x0040 - 0x0028)
class UStoreCardObject final : public UObject
{
public:
	struct FCard                                  Card;                                              // 0x0028(0x0018)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StoreCardObject">();
	}
	static class UStoreCardObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStoreCardObject>();
	}
};
static_assert(alignof(UStoreCardObject) == 0x000008, "Wrong alignment on UStoreCardObject");
static_assert(sizeof(UStoreCardObject) == 0x000040, "Wrong size on UStoreCardObject");
static_assert(offsetof(UStoreCardObject, Card) == 0x000028, "Member 'UStoreCardObject::Card' has a wrong offset!");

// Class FortniteUI.FortStoreSummaryItemPopupMenu
// 0x0008 (0x0348 - 0x0340)
class UFortStoreSummaryItemPopupMenu final : public UFortPopupMenu
{
public:
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleItemChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);
	void MulchItem();

	class UFortStoreSummaryItemButton* GetHostButton() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortStoreSummaryItemPopupMenu">();
	}
	static class UFortStoreSummaryItemPopupMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortStoreSummaryItemPopupMenu>();
	}
};
static_assert(alignof(UFortStoreSummaryItemPopupMenu) == 0x000008, "Wrong alignment on UFortStoreSummaryItemPopupMenu");
static_assert(sizeof(UFortStoreSummaryItemPopupMenu) == 0x000348, "Wrong size on UFortStoreSummaryItemPopupMenu");

// Class FortniteUI.FortSubGameSelectBase
// 0x0000 (0x0320 - 0x0320)
class UFortSubGameSelectBase : public UCommonActivatablePanel
{
public:
	void OnSubGameImageLoadedFromCMS(const EFortSubgameSelectOption SubGameOption, class UTexture2D* Image);
	void ShowRedeemCodeScreen(const ESubGame SubGame, const TDelegate<void()>& CompletionDelegate);

	bool CheckRewardRate() const;
	bool GetFullDescription(EFortSubgameSelectOption SubGameOption, class FText* FullDescription) const;
	bool GetIsOnSale(EFortSubgameSelectOption SubGameOption) const;
	bool GetShortDescription(EFortSubgameSelectOption SubGameOption, class FText* ShortDescription) const;
	ESubGame GetSubGameBySubGameSelectOption(EFortSubgameSelectOption SubGameOption) const;
	void GetUpsellStorefrontNames(const ESubGame SubGame, TArray<class FString>* OutStorefrontNames) const;
	bool IsSubGameOptionVisible(EFortSubgameSelectOption SubGameOption) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSubGameSelectBase">();
	}
	static class UFortSubGameSelectBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSubGameSelectBase>();
	}
};
static_assert(alignof(UFortSubGameSelectBase) == 0x000008, "Wrong alignment on UFortSubGameSelectBase");
static_assert(sizeof(UFortSubGameSelectBase) == 0x000320, "Wrong size on UFortSubGameSelectBase");

// Class FortniteUI.FortSupportCenter
// 0x0010 (0x0330 - 0x0320)
class UFortSupportCenter final : public UCommonActivatablePanel
{
public:
	class UCommonButton*                          Button_OnlineSupport;                              // 0x0320(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButton*                          Button_Forums;                                     // 0x0328(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSupportCenter">();
	}
	static class UFortSupportCenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSupportCenter>();
	}
};
static_assert(alignof(UFortSupportCenter) == 0x000008, "Wrong alignment on UFortSupportCenter");
static_assert(sizeof(UFortSupportCenter) == 0x000330, "Wrong size on UFortSupportCenter");
static_assert(offsetof(UFortSupportCenter, Button_OnlineSupport) == 0x000320, "Member 'UFortSupportCenter::Button_OnlineSupport' has a wrong offset!");
static_assert(offsetof(UFortSupportCenter, Button_Forums) == 0x000328, "Member 'UFortSupportCenter::Button_Forums' has a wrong offset!");

// Class FortniteUI.FortSurvivorSquadManagementScreen
// 0x00E0 (0x0540 - 0x0460)
class UFortSurvivorSquadManagementScreen final : public UFortSquadManagementScreenBase
{
public:
	class UFortSurvivorSquadStatMatchesBase*      StatMatchesWidget;                                 // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_468[0xD8];                                     // 0x0468(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayFeedbackForSlottingPerson(class UFortWorker* Worker, int32 SlotIndex, const struct FFortSurvivorSquadSlottingFeedbackData& FeedbackData);
	void ShowHelpDialog();
	void UpdateCycleButtons();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSurvivorSquadManagementScreen">();
	}
	static class UFortSurvivorSquadManagementScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSurvivorSquadManagementScreen>();
	}
};
static_assert(alignof(UFortSurvivorSquadManagementScreen) == 0x000008, "Wrong alignment on UFortSurvivorSquadManagementScreen");
static_assert(sizeof(UFortSurvivorSquadManagementScreen) == 0x000540, "Wrong size on UFortSurvivorSquadManagementScreen");
static_assert(offsetof(UFortSurvivorSquadManagementScreen, StatMatchesWidget) == 0x000460, "Member 'UFortSurvivorSquadManagementScreen::StatMatchesWidget' has a wrong offset!");

// Class FortniteUI.FortSurvivorSquadSelectorButton
// 0x0020 (0x0B70 - 0x0B50)
class UFortSurvivorSquadSelectorButton final : public UFortSquadSelectorButton
{
public:
	TArray<struct FGameplayAttribute>             FortStatAttributes;                                // 0x0B50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGameplayAttribute>             FortTeamStatAttributes;                            // 0x0B60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	bool TryGetPersonalityMatches(struct FFortSurvivorSquadSelectorButtonPersonalityMatches* OutPersonalityMatches);
	bool TryGetSquadMembers(TArray<class UFortWorker*>* OutSquadMembers);
	bool TryGetSummaryStats(struct FFortSurvivorSquadSelectorButtonSummaryStats* OutSummaryStats);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSurvivorSquadSelectorButton">();
	}
	static class UFortSurvivorSquadSelectorButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSurvivorSquadSelectorButton>();
	}
};
static_assert(alignof(UFortSurvivorSquadSelectorButton) == 0x000008, "Wrong alignment on UFortSurvivorSquadSelectorButton");
static_assert(sizeof(UFortSurvivorSquadSelectorButton) == 0x000B70, "Wrong size on UFortSurvivorSquadSelectorButton");
static_assert(offsetof(UFortSurvivorSquadSelectorButton, FortStatAttributes) == 0x000B50, "Member 'UFortSurvivorSquadSelectorButton::FortStatAttributes' has a wrong offset!");
static_assert(offsetof(UFortSurvivorSquadSelectorButton, FortTeamStatAttributes) == 0x000B60, "Member 'UFortSurvivorSquadSelectorButton::FortTeamStatAttributes' has a wrong offset!");

// Class FortniteUI.FortSurvivorSquadSummaryStatItem
// 0x0020 (0x0258 - 0x0238)
class UFortSurvivorSquadSummaryStatItem final : public UCommonUserWidget
{
public:
	EFortBrushSize                                ImageSize;                                         // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 Icon;                                              // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonTextBlock*                       Value;                                             // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonTextBlock*                       Name_FortSurvivorSquadSummaryStatItem;             // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetAttributeModifierAccumulation(const struct FFortAttributeModifierAccumulation& Accumulation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSurvivorSquadSummaryStatItem">();
	}
	static class UFortSurvivorSquadSummaryStatItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSurvivorSquadSummaryStatItem>();
	}
};
static_assert(alignof(UFortSurvivorSquadSummaryStatItem) == 0x000008, "Wrong alignment on UFortSurvivorSquadSummaryStatItem");
static_assert(sizeof(UFortSurvivorSquadSummaryStatItem) == 0x000258, "Wrong size on UFortSurvivorSquadSummaryStatItem");
static_assert(offsetof(UFortSurvivorSquadSummaryStatItem, ImageSize) == 0x000238, "Member 'UFortSurvivorSquadSummaryStatItem::ImageSize' has a wrong offset!");
static_assert(offsetof(UFortSurvivorSquadSummaryStatItem, Icon) == 0x000240, "Member 'UFortSurvivorSquadSummaryStatItem::Icon' has a wrong offset!");
static_assert(offsetof(UFortSurvivorSquadSummaryStatItem, Value) == 0x000248, "Member 'UFortSurvivorSquadSummaryStatItem::Value' has a wrong offset!");
static_assert(offsetof(UFortSurvivorSquadSummaryStatItem, Name_FortSurvivorSquadSummaryStatItem) == 0x000250, "Member 'UFortSurvivorSquadSummaryStatItem::Name_FortSurvivorSquadSummaryStatItem' has a wrong offset!");

// Class FortniteUI.FortSwipePanel
// 0x00D0 (0x01F0 - 0x0120)
class UFortSwipePanel final : public UContentWidget
{
public:
	struct FFortSwipeDetector                     SwipeDetector;                                     // 0x0120(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bBeginSwipeOnPointerEnter;                         // 0x0190(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsumePointerInput;                              // 0x0191(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnSwipeLeft;                                       // 0x0198(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSwipeRight;                                      // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSwipeUp;                                         // 0x01B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSwipeDown;                                       // 0x01C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x18];                                     // 0x01D8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SwipeDown();
	void SwipeLeft();
	void SwipeRight();
	void SwipeUp();

	void GetSwipeInfo(int32* OutIndex, struct FVector2D* OutSwipePercentage) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSwipePanel">();
	}
	static class UFortSwipePanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSwipePanel>();
	}
};
static_assert(alignof(UFortSwipePanel) == 0x000008, "Wrong alignment on UFortSwipePanel");
static_assert(sizeof(UFortSwipePanel) == 0x0001F0, "Wrong size on UFortSwipePanel");
static_assert(offsetof(UFortSwipePanel, SwipeDetector) == 0x000120, "Member 'UFortSwipePanel::SwipeDetector' has a wrong offset!");
static_assert(offsetof(UFortSwipePanel, bBeginSwipeOnPointerEnter) == 0x000190, "Member 'UFortSwipePanel::bBeginSwipeOnPointerEnter' has a wrong offset!");
static_assert(offsetof(UFortSwipePanel, bConsumePointerInput) == 0x000191, "Member 'UFortSwipePanel::bConsumePointerInput' has a wrong offset!");
static_assert(offsetof(UFortSwipePanel, OnSwipeLeft) == 0x000198, "Member 'UFortSwipePanel::OnSwipeLeft' has a wrong offset!");
static_assert(offsetof(UFortSwipePanel, OnSwipeRight) == 0x0001A8, "Member 'UFortSwipePanel::OnSwipeRight' has a wrong offset!");
static_assert(offsetof(UFortSwipePanel, OnSwipeUp) == 0x0001B8, "Member 'UFortSwipePanel::OnSwipeUp' has a wrong offset!");
static_assert(offsetof(UFortSwipePanel, OnSwipeDown) == 0x0001C8, "Member 'UFortSwipePanel::OnSwipeDown' has a wrong offset!");

// Class FortniteUI.FortSwipePanelSlot
// 0x0010 (0x0048 - 0x0038)
class UFortSwipePanelSlot final : public UPanelSlot
{
public:
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSwipePanelSlot">();
	}
	static class UFortSwipePanelSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSwipePanelSlot>();
	}
};
static_assert(alignof(UFortSwipePanelSlot) == 0x000008, "Wrong alignment on UFortSwipePanelSlot");
static_assert(sizeof(UFortSwipePanelSlot) == 0x000048, "Wrong size on UFortSwipePanelSlot");

// Class FortniteUI.FortTabListWidgetBase
// 0x0070 (0x0370 - 0x0300)
class UFortTabListWidgetBase : public UCommonTabListWidget
{
public:
	UMulticastDelegateProperty_                   OnTabContentCreated;                               // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FFortTabListRegistrationInfo>   PreregisteredTabInfoArray;                         // 0x0310(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FFortTabButtonLabelInfo> PendingTabLabelInfoMap;                            // 0x0320(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	bool GetPreregisteredTabInfo(const class FName TabNameID, struct FFortTabListRegistrationInfo* OutTabInfo);
	int32 GetVisibleTabCount();
	void OnTabContentCreated__DelegateSignature(class FName TabId, class UCommonUserWidget* TabWidget);
	void RegisterAllPreregisteredTabInfos();
	bool RegisterFortTab(class FName TabNameID, TSubclassOf<class UCommonButton> TabButtonType, const struct FFortTabButtonLabelInfo& LabelInfo, class UWidget* ContentWidget);
	void SetNextTabInputActionData(const struct FDataTableRowHandle& NextData);
	void SetPreviousTabInputActionData(const struct FDataTableRowHandle& PreviousData);
	void SetTabHiddenState(class FName TabNameID, bool bHidden);

	bool IsFirstTabActive() const;
	bool IsLastTabActive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTabListWidgetBase">();
	}
	static class UFortTabListWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTabListWidgetBase>();
	}
};
static_assert(alignof(UFortTabListWidgetBase) == 0x000008, "Wrong alignment on UFortTabListWidgetBase");
static_assert(sizeof(UFortTabListWidgetBase) == 0x000370, "Wrong size on UFortTabListWidgetBase");
static_assert(offsetof(UFortTabListWidgetBase, OnTabContentCreated) == 0x000300, "Member 'UFortTabListWidgetBase::OnTabContentCreated' has a wrong offset!");
static_assert(offsetof(UFortTabListWidgetBase, PreregisteredTabInfoArray) == 0x000310, "Member 'UFortTabListWidgetBase::PreregisteredTabInfoArray' has a wrong offset!");
static_assert(offsetof(UFortTabListWidgetBase, PendingTabLabelInfoMap) == 0x000320, "Member 'UFortTabListWidgetBase::PendingTabLabelInfoMap' has a wrong offset!");

// Class FortniteUI.FortTeamMemberPedestal
// 0x0088 (0x0400 - 0x0378)
class AFortTeamMemberPedestal : public AFortItemPlacementActor
{
public:
	uint8                                         Pad_378[0x30];                                     // 0x0378(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedComponentMaterials>      CachedComponentMaterials;                          // 0x03A8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	int32                                         AssignedMemberIndex;                               // 0x03B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetComponent*                       WidgetComponent_MemberInfo;                        // 0x03C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetComponent*                       WidgetComponent_FillOpenSlot;                      // 0x03C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetComponent*                       WidgetComponent_EquippedGadgets;                   // 0x03D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetComponent*                       WidgetComponent_BattlePassInfo;                    // 0x03D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3E0[0x10];                                     // 0x03E0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortHero*                              MemberHeroItem;                                    // 0x03F0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F8[0x8];                                      // 0x03F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyUniformOverrideMaterial(class UMaterialInterface* OverrideMaterial);
	void ClearOverrideMaterial();
	void HandleContextSaysLobbyPlayerHovered(int32 HoveredMemberIdx);
	void HandleContextSaysLobbyPlayerUnhovered(int32 HoveredMemberIdx);
	void OnConnectedToCampaignLobby();
	void OnIsCurrentlyInMatchChanged(bool bIsInMatch);
	void OnPedestalIsPopulatedChanged(bool bIsPopulated);
	void RefreshBattlePassOwnerVisuals(bool bOwnsBattlePass);

	bool IsInFrontend() const;
	bool IsValidTeamMember() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTeamMemberPedestal">();
	}
	static class AFortTeamMemberPedestal* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortTeamMemberPedestal>();
	}
};
static_assert(alignof(AFortTeamMemberPedestal) == 0x000008, "Wrong alignment on AFortTeamMemberPedestal");
static_assert(sizeof(AFortTeamMemberPedestal) == 0x000400, "Wrong size on AFortTeamMemberPedestal");
static_assert(offsetof(AFortTeamMemberPedestal, CachedComponentMaterials) == 0x0003A8, "Member 'AFortTeamMemberPedestal::CachedComponentMaterials' has a wrong offset!");
static_assert(offsetof(AFortTeamMemberPedestal, AssignedMemberIndex) == 0x0003B8, "Member 'AFortTeamMemberPedestal::AssignedMemberIndex' has a wrong offset!");
static_assert(offsetof(AFortTeamMemberPedestal, WidgetComponent_MemberInfo) == 0x0003C0, "Member 'AFortTeamMemberPedestal::WidgetComponent_MemberInfo' has a wrong offset!");
static_assert(offsetof(AFortTeamMemberPedestal, WidgetComponent_FillOpenSlot) == 0x0003C8, "Member 'AFortTeamMemberPedestal::WidgetComponent_FillOpenSlot' has a wrong offset!");
static_assert(offsetof(AFortTeamMemberPedestal, WidgetComponent_EquippedGadgets) == 0x0003D0, "Member 'AFortTeamMemberPedestal::WidgetComponent_EquippedGadgets' has a wrong offset!");
static_assert(offsetof(AFortTeamMemberPedestal, WidgetComponent_BattlePassInfo) == 0x0003D8, "Member 'AFortTeamMemberPedestal::WidgetComponent_BattlePassInfo' has a wrong offset!");
static_assert(offsetof(AFortTeamMemberPedestal, MemberHeroItem) == 0x0003F0, "Member 'AFortTeamMemberPedestal::MemberHeroItem' has a wrong offset!");

// Class FortniteUI.FortTeamMemberPedestalNameplate
// 0x0038 (0x02A8 - 0x0270)
class UFortTeamMemberPedestalNameplate : public UFortBasicTeamMemberEntry
{
public:
	uint8                                         Pad_270[0x20];                                     // 0x0270(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_ReadyStatus;                                  // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMatchmakingInputIndicatorBase*         InputIndicator_ActiveInputType;                    // 0x0298(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortPlayerTrackerBase*                 PlayerTracker_CampaignPower;                       // 0x02A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnPedestalSelectedChanged(bool bIsSelected);
	void OnPlayReadyAudio(bool bIsReadyForMatchmaking);
	void OnReadyStatusChanged(bool bIsReadyForMatchmaking);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTeamMemberPedestalNameplate">();
	}
	static class UFortTeamMemberPedestalNameplate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTeamMemberPedestalNameplate>();
	}
};
static_assert(alignof(UFortTeamMemberPedestalNameplate) == 0x000008, "Wrong alignment on UFortTeamMemberPedestalNameplate");
static_assert(sizeof(UFortTeamMemberPedestalNameplate) == 0x0002A8, "Wrong size on UFortTeamMemberPedestalNameplate");
static_assert(offsetof(UFortTeamMemberPedestalNameplate, Text_ReadyStatus) == 0x000290, "Member 'UFortTeamMemberPedestalNameplate::Text_ReadyStatus' has a wrong offset!");
static_assert(offsetof(UFortTeamMemberPedestalNameplate, InputIndicator_ActiveInputType) == 0x000298, "Member 'UFortTeamMemberPedestalNameplate::InputIndicator_ActiveInputType' has a wrong offset!");
static_assert(offsetof(UFortTeamMemberPedestalNameplate, PlayerTracker_CampaignPower) == 0x0002A0, "Member 'UFortTeamMemberPedestalNameplate::PlayerTracker_CampaignPower' has a wrong offset!");

// Class FortniteUI.FortTextStyleList
// 0x0008 (0x0240 - 0x0238)
class UFortTextStyleList final : public UCommonUserWidget
{
public:
	class FName                                   TextStylesPath;                                    // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TArray<TSoftClassPtr<class UClass>> GetTextStyles() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTextStyleList">();
	}
	static class UFortTextStyleList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTextStyleList>();
	}
};
static_assert(alignof(UFortTextStyleList) == 0x000008, "Wrong alignment on UFortTextStyleList");
static_assert(sizeof(UFortTextStyleList) == 0x000240, "Wrong size on UFortTextStyleList");
static_assert(offsetof(UFortTextStyleList, TextStylesPath) == 0x000238, "Member 'UFortTextStyleList::TextStylesPath' has a wrong offset!");

// Class FortniteUI.FortTierIndicator
// 0x0020 (0x0128 - 0x0108)
class UFortTierIndicator final : public UWidget
{
public:
	TWeakObjectPtr<class UFortItem>               ItemToRepresent;                                   // 0x0108(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBrushSize                                BrushSize;                                         // 0x0110(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterPipPadding;                                   // 0x0114(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x10];                                     // 0x0118(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearPreviewState();
	void SetBrushSize(EFortBrushSize Param_BrushSize);
	void SetInterPipPadding(float Param_InterPipPadding);
	void SetItemToRepresent(class UFortItem* Param_ItemToRepresent);
	void SetPreviewState(int32 TierIncrease);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTierIndicator">();
	}
	static class UFortTierIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTierIndicator>();
	}
};
static_assert(alignof(UFortTierIndicator) == 0x000008, "Wrong alignment on UFortTierIndicator");
static_assert(sizeof(UFortTierIndicator) == 0x000128, "Wrong size on UFortTierIndicator");
static_assert(offsetof(UFortTierIndicator, ItemToRepresent) == 0x000108, "Member 'UFortTierIndicator::ItemToRepresent' has a wrong offset!");
static_assert(offsetof(UFortTierIndicator, BrushSize) == 0x000110, "Member 'UFortTierIndicator::BrushSize' has a wrong offset!");
static_assert(offsetof(UFortTierIndicator, InterPipPadding) == 0x000114, "Member 'UFortTierIndicator::InterPipPadding' has a wrong offset!");

// Class FortniteUI.FortTimelineBase
// 0x0008 (0x0350 - 0x0348)
class UFortTimelineBase final : public UFortActivatablePanel
{
public:
	class UFortReplayContext*                     ReplayContext;                                     // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AddReplayEventToTimeline(EFortReplayEventType EventType, float RelativeTime);
	void ClearTimelineMarkers();

	class UWidget* GetProgressBarWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTimelineBase">();
	}
	static class UFortTimelineBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTimelineBase>();
	}
};
static_assert(alignof(UFortTimelineBase) == 0x000008, "Wrong alignment on UFortTimelineBase");
static_assert(sizeof(UFortTimelineBase) == 0x000350, "Wrong size on UFortTimelineBase");
static_assert(offsetof(UFortTimelineBase, ReplayContext) == 0x000348, "Member 'UFortTimelineBase::ReplayContext' has a wrong offset!");

// Class FortniteUI.FortTimerTimespanDataSource
// 0x0038 (0x0060 - 0x0028)
class UFortTimerTimespanDataSource final : public UObject
{
public:
	uint8                                         Pad_28[0x38];                                      // 0x0028(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FortTimespanDataSourceOnChangeInternalDelegate__DelegateSignature(class UObject* Source);
	void SetTimespanSource(const TDelegate<void(struct FTimespan* Result)>& Value);
	void TimespanSourceDelegate__DelegateSignature(struct FTimespan* Result);
	void StartTimer(float Delay, bool bTickImmediately);
	void StopTimer();
	void TickManually();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTimerTimespanDataSource">();
	}
	static class UFortTimerTimespanDataSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTimerTimespanDataSource>();
	}
};
static_assert(alignof(UFortTimerTimespanDataSource) == 0x000008, "Wrong alignment on UFortTimerTimespanDataSource");
static_assert(sizeof(UFortTimerTimespanDataSource) == 0x000060, "Wrong size on UFortTimerTimespanDataSource");

// Class FortniteUI.FortTimespanDataSource
// 0x0000 (0x0028 - 0x0028)
class IFortTimespanDataSource final : public IInterface
{
public:
	void AddOnChangeDelegate(const TDelegate<void(class UObject* Source)>& InDelegate);
	void RemoveOnChangeDelegate(const TDelegate<void(class UObject* Source)>& InDelegate);

	struct FTimespan GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTimespanDataSource">();
	}
	static class IFortTimespanDataSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFortTimespanDataSource>();
	}
};
static_assert(alignof(IFortTimespanDataSource) == 0x000008, "Wrong alignment on IFortTimespanDataSource");
static_assert(sizeof(IFortTimespanDataSource) == 0x000028, "Wrong size on IFortTimespanDataSource");

// Class FortniteUI.FortTooltipUIContext
// 0x0000 (0x0028 - 0x0028)
class UFortTooltipUIContext final : public UBlueprintContextBase
{
public:
	bool GetCombinedDescription(const class UObject* Object, const class UFortTooltipContext* TooltipContext, class FText* OutDescription);
	TArray<struct FFortDisplayAttribute> GetComparisonStats(const class UObject* Object, const class UObject* ComparisonObject, const class UFortTooltipContext* TooltipContext);
	bool GetDescription(const class UObject* Object, const class UFortTooltipContext* TooltipContext, TArray<class FText>* OutDescription);
	TArray<struct FGameplayAttribute> GetTooltipAttributes(const class UObject* Object);
	bool GetTooltipStat(const class UObject* Object, class UFortTooltipContext* TooltipContext, const struct FGameplayTag& Token, struct FFortDisplayAttribute* OutDisplayAttribute);
	TArray<struct FFortDisplayAttribute> GetTooltipStats(const class UObject* Object, const class UFortTooltipContext* TooltipContext);
	TArray<struct FFortDisplayAttribute> GetUpgradeStats(const class UObject* Object, class UFortTooltipContext* TooltipContext);
	bool HasTooltipStats(const class UObject* Object);

	bool GetDisplayNameAndMultiBrushForTag(const struct FGameplayTag& Tag, class FText* OutDisplayName, struct FFortMultiSizeBrush* OutBrush) const;
	bool GetUIDataForTag(const struct FGameplayTag& Tag, struct FFortTagUIData* OutData) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTooltipUIContext">();
	}
	static class UFortTooltipUIContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTooltipUIContext>();
	}
};
static_assert(alignof(UFortTooltipUIContext) == 0x000008, "Wrong alignment on UFortTooltipUIContext");
static_assert(sizeof(UFortTooltipUIContext) == 0x000028, "Wrong size on UFortTooltipUIContext");

// Class FortniteUI.FortTouchControlRegion
// 0x0220 (0x0458 - 0x0238)
class UFortTouchControlRegion final : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x140];                                    // 0x0238(0x0140)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAutorunLockZone*                   AutoRunLockTarget;                                 // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           AutorunLockDelayHandle;                            // 0x0380(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortTouchMoveStick*                    TouchMoveStick;                                    // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortTouchLookStick*                    TouchLookStick;                                    // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                AutoRunTapZone;                                    // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              LastMovePlayerRegionTouchOrigin;                   // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              MovePlayerRegionTouchEndPos;                       // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                MoveVector;                                        // 0x03B0(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              MoveStickPos;                                      // 0x03BC(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveStickLockMagnitudeThreshold;                   // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveStickLockAngleBegin;                           // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveStickLockAngleEnd;                             // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveStickLockAccumulator;                          // 0x03D0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bLastLookTouchWasTap : 1;                          // 0x03D4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bMoveStickIsTouched : 1;                           // 0x03D4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bMoveStickIsLocked : 1;                            // 0x03D4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bLookStickIsTouched : 1;                           // 0x03D4(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIsLockedOn : 1;                                   // 0x03D4(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_3D5[0x3];                                      // 0x03D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveStickLockTimeToHold;                           // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveStickLastTouchTime;                            // 0x03DC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               LockBar_MID;                                       // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MovePlayerRegionLastTouchTime;                     // 0x03E8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              MovePlayerRegionLastTouchPos;                      // 0x03EC(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              RotateCameraRegionTouchStartPos;                   // 0x03F4(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              RotateCameraRegionLastTouchPos;                    // 0x03FC(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              RotateCameraPlayerRegionLastTouchDiff;             // 0x0404(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RotateCameraLastTouchTime;                         // 0x040C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_410[0x8];                                      // 0x0410(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            RotateInertiaCurve;                                // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              RotateStickPosition;                               // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              LockOnStickOrigin;                                 // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              LockOnStickCurrentPos;                             // 0x0430(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              LockOnBarOffset;                                   // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsForceFiring;                                    // 0x0440(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_441[0x17];                                     // 0x0441(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MovePlayerRegionTick(const struct FGeometry& InGeometry, const float DeltaTime);
	void OnAdditionalTouchEnded(const struct FGeometry& InGeometry, const struct FPointerEvent& InGestureEvent);
	void OnAdditionalTouchLost(int32 PointerIndex);
	void OnAdditionalTouchStarted(const struct FGeometry& InGeometry, const struct FPointerEvent& InGestureEvent);
	void OnBuildModeChanged(bool bBuildModeEnabled);
	void OnCursorModeChanged(bool bCursorModeEnabled, class FName ActionName, class UUserWidget* CustomWidget);
	void OnMovePlayerRegionTouchEnded(const struct FGeometry& InGeometry, const struct FPointerEvent& InGestureEvent);
	void OnMovePlayerRegionTouchLost(int32 PointerIndex);
	void OnMovePlayerRegionTouchMoved(const struct FGeometry& InGeometry, const struct FPointerEvent& InGestureEvent);
	void OnMovePlayerRegionTouchStarted(const struct FGeometry& InGeometry, const struct FPointerEvent& InGestureEvent);
	void OnRegionTouchEnded(const EFortTouchControlRegion Region, const struct FGeometry& InGeometry, const struct FPointerEvent& InGestureEvent);
	void OnRegionTouchMoved(const EFortTouchControlRegion Region, const struct FGeometry& InGeometry, const struct FPointerEvent& InGestureEvent, const struct FVector2D& MoveDelta);
	void OnRegionTouchStarted(const EFortTouchControlRegion Region, const struct FGeometry& InGeometry, const struct FPointerEvent& InGestureEvent);
	void OnRotatePlayerRegionTouchEnded(const struct FGeometry& InGeometry, const struct FPointerEvent& InGestureEvent);
	void OnRotatePlayerRegionTouchLost(int32 PointerIndex);
	void OnRotatePlayerRegionTouchMoved(const struct FGeometry& InGeometry, const struct FPointerEvent& InGestureEvent, const struct FVector2D& MoveDelta);
	void OnRotatePlayerRegionTouchStarted(const struct FGeometry& InGeometry, const struct FPointerEvent& InGestureEvent);
	void ResetTouchState();
	void RotatePlayerRegionTick(const struct FGeometry& InGeometry, const float DeltaTime);
	void SetFeedbackPosition(const struct FGeometry& InGeometry, const struct FPointerEvent& InGestureEvent);
	void SetLockOnStickPosition(const struct FVector2D& LocalPos);
	void SetMoveStickPos(const struct FVector2D& NewMoveStickPos);
	void UpdateLockOnStickOrigin(const struct FVector2D& LocalPos, bool IsTouchStartEvent);
	void UpdateLockOnStickPosition(const struct FVector2D& LocalPos);
	void UpdateMoveStickLock(const float DeltaTime);

	bool CanLockMoveStick() const;
	float GetTouchStickRange() const;
	bool IsFiring() const;
	bool IsMovePlayerRegionTouched() const;
	bool IsRotatePlayerRegionTouched() const;
	bool MoveStickIsInLockPosition() const;
	bool MoveStickIsInSprintThreshold() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTouchControlRegion">();
	}
	static class UFortTouchControlRegion* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTouchControlRegion>();
	}
};
static_assert(alignof(UFortTouchControlRegion) == 0x000008, "Wrong alignment on UFortTouchControlRegion");
static_assert(sizeof(UFortTouchControlRegion) == 0x000458, "Wrong size on UFortTouchControlRegion");
static_assert(offsetof(UFortTouchControlRegion, AutoRunLockTarget) == 0x000378, "Member 'UFortTouchControlRegion::AutoRunLockTarget' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, AutorunLockDelayHandle) == 0x000380, "Member 'UFortTouchControlRegion::AutorunLockDelayHandle' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, TouchMoveStick) == 0x000388, "Member 'UFortTouchControlRegion::TouchMoveStick' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, TouchLookStick) == 0x000390, "Member 'UFortTouchControlRegion::TouchLookStick' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, AutoRunTapZone) == 0x000398, "Member 'UFortTouchControlRegion::AutoRunTapZone' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, LastMovePlayerRegionTouchOrigin) == 0x0003A0, "Member 'UFortTouchControlRegion::LastMovePlayerRegionTouchOrigin' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, MovePlayerRegionTouchEndPos) == 0x0003A8, "Member 'UFortTouchControlRegion::MovePlayerRegionTouchEndPos' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, MoveVector) == 0x0003B0, "Member 'UFortTouchControlRegion::MoveVector' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, MoveStickPos) == 0x0003BC, "Member 'UFortTouchControlRegion::MoveStickPos' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, MoveStickLockMagnitudeThreshold) == 0x0003C4, "Member 'UFortTouchControlRegion::MoveStickLockMagnitudeThreshold' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, MoveStickLockAngleBegin) == 0x0003C8, "Member 'UFortTouchControlRegion::MoveStickLockAngleBegin' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, MoveStickLockAngleEnd) == 0x0003CC, "Member 'UFortTouchControlRegion::MoveStickLockAngleEnd' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, MoveStickLockAccumulator) == 0x0003D0, "Member 'UFortTouchControlRegion::MoveStickLockAccumulator' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, MoveStickLockTimeToHold) == 0x0003D8, "Member 'UFortTouchControlRegion::MoveStickLockTimeToHold' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, MoveStickLastTouchTime) == 0x0003DC, "Member 'UFortTouchControlRegion::MoveStickLastTouchTime' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, LockBar_MID) == 0x0003E0, "Member 'UFortTouchControlRegion::LockBar_MID' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, MovePlayerRegionLastTouchTime) == 0x0003E8, "Member 'UFortTouchControlRegion::MovePlayerRegionLastTouchTime' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, MovePlayerRegionLastTouchPos) == 0x0003EC, "Member 'UFortTouchControlRegion::MovePlayerRegionLastTouchPos' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, RotateCameraRegionTouchStartPos) == 0x0003F4, "Member 'UFortTouchControlRegion::RotateCameraRegionTouchStartPos' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, RotateCameraRegionLastTouchPos) == 0x0003FC, "Member 'UFortTouchControlRegion::RotateCameraRegionLastTouchPos' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, RotateCameraPlayerRegionLastTouchDiff) == 0x000404, "Member 'UFortTouchControlRegion::RotateCameraPlayerRegionLastTouchDiff' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, RotateCameraLastTouchTime) == 0x00040C, "Member 'UFortTouchControlRegion::RotateCameraLastTouchTime' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, RotateInertiaCurve) == 0x000418, "Member 'UFortTouchControlRegion::RotateInertiaCurve' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, RotateStickPosition) == 0x000420, "Member 'UFortTouchControlRegion::RotateStickPosition' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, LockOnStickOrigin) == 0x000428, "Member 'UFortTouchControlRegion::LockOnStickOrigin' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, LockOnStickCurrentPos) == 0x000430, "Member 'UFortTouchControlRegion::LockOnStickCurrentPos' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, LockOnBarOffset) == 0x000438, "Member 'UFortTouchControlRegion::LockOnBarOffset' has a wrong offset!");
static_assert(offsetof(UFortTouchControlRegion, bIsForceFiring) == 0x000440, "Member 'UFortTouchControlRegion::bIsForceFiring' has a wrong offset!");

// Class FortniteUI.FortTouchLookStick
// 0x0070 (0x0400 - 0x0390)
class UFortTouchLookStick final : public UBacchusHUDElement
{
public:
	class USizeBox*                               MainSizeBox;                                       // 0x0390(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UImage>                  FireImageRef;                                      // 0x0398(0x0028)(BlueprintVisible, ExportObject, Transient, InstancedReference, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              FireImageAbsoluteOffset;                           // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   SizePropertyName;                                  // 0x03C8(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   ShowAllTimeTimePropertyName;                       // 0x03E0(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F8[0x8];                                      // 0x03F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetFiringState(bool IsFiring);
	void SetSize(float NewSize);
	void SetTouchStickPositionAbsolute(const struct FVector2D& TouchPosition);
	void SetTouchStickPositionLocal(const struct FVector2D& TouchPosition);

	bool GetShowAllTimeTime() const;
	float GetSize() const;
	bool IsFireButtonUnderTouch(const struct FVector2D& TouchPosition) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTouchLookStick">();
	}
	static class UFortTouchLookStick* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTouchLookStick>();
	}
};
static_assert(alignof(UFortTouchLookStick) == 0x000008, "Wrong alignment on UFortTouchLookStick");
static_assert(sizeof(UFortTouchLookStick) == 0x000400, "Wrong size on UFortTouchLookStick");
static_assert(offsetof(UFortTouchLookStick, MainSizeBox) == 0x000390, "Member 'UFortTouchLookStick::MainSizeBox' has a wrong offset!");
static_assert(offsetof(UFortTouchLookStick, FireImageRef) == 0x000398, "Member 'UFortTouchLookStick::FireImageRef' has a wrong offset!");
static_assert(offsetof(UFortTouchLookStick, FireImageAbsoluteOffset) == 0x0003C0, "Member 'UFortTouchLookStick::FireImageAbsoluteOffset' has a wrong offset!");
static_assert(offsetof(UFortTouchLookStick, SizePropertyName) == 0x0003C8, "Member 'UFortTouchLookStick::SizePropertyName' has a wrong offset!");
static_assert(offsetof(UFortTouchLookStick, ShowAllTimeTimePropertyName) == 0x0003E0, "Member 'UFortTouchLookStick::ShowAllTimeTimePropertyName' has a wrong offset!");

// Class FortniteUI.FortTouchMoveStick
// 0x0028 (0x03B8 - 0x0390)
class UFortTouchMoveStick final : public UBacchusHUDElement
{
public:
	bool                                          bIsTouched;                                        // 0x0390(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AlwaysShowPropertyName;                            // 0x0398(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bAlwaysShowWhenTouched;                            // 0x03B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleTouchEnded();
	void HandleTouchStarted();
	void SetMovementLockStatus(bool MovementIsLocked);
	void SetStickPosition(const struct FVector2D& NewPosition);

	float GetHalfHeight() const;
	bool IsTouched() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTouchMoveStick">();
	}
	static class UFortTouchMoveStick* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTouchMoveStick>();
	}
};
static_assert(alignof(UFortTouchMoveStick) == 0x000008, "Wrong alignment on UFortTouchMoveStick");
static_assert(sizeof(UFortTouchMoveStick) == 0x0003B8, "Wrong size on UFortTouchMoveStick");
static_assert(offsetof(UFortTouchMoveStick, bIsTouched) == 0x000390, "Member 'UFortTouchMoveStick::bIsTouched' has a wrong offset!");
static_assert(offsetof(UFortTouchMoveStick, AlwaysShowPropertyName) == 0x000398, "Member 'UFortTouchMoveStick::AlwaysShowPropertyName' has a wrong offset!");
static_assert(offsetof(UFortTouchMoveStick, bAlwaysShowWhenTouched) == 0x0003B0, "Member 'UFortTouchMoveStick::bAlwaysShowWhenTouched' has a wrong offset!");

// Class FortniteUI.FortTrackedIndicator
// 0x0000 (0x0468 - 0x0468)
class UFortTrackedIndicator final : public UFortSimpleItemConditionIconIndicator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTrackedIndicator">();
	}
	static class UFortTrackedIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTrackedIndicator>();
	}
};
static_assert(alignof(UFortTrackedIndicator) == 0x000008, "Wrong alignment on UFortTrackedIndicator");
static_assert(sizeof(UFortTrackedIndicator) == 0x000468, "Wrong size on UFortTrackedIndicator");

// Class FortniteUI.FortTransformKeyPicker
// 0x0058 (0x0360 - 0x0308)
class UFortTransformKeyPicker final : public UFortItemPickerBase
{
public:
	uint8                                         Pad_308[0x58];                                     // 0x0308(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RebuildTransformKeys(const TArray<class UObject*>& InDataProvider);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTransformKeyPicker">();
	}
	static class UFortTransformKeyPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTransformKeyPicker>();
	}
};
static_assert(alignof(UFortTransformKeyPicker) == 0x000008, "Wrong alignment on UFortTransformKeyPicker");
static_assert(sizeof(UFortTransformKeyPicker) == 0x000360, "Wrong size on UFortTransformKeyPicker");

// Class FortniteUI.FortTransformKeyPickerTileButton
// 0x0000 (0x0B68 - 0x0B68)
class UFortTransformKeyPickerTileButton final : public UFortItemTileButton
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTransformKeyPickerTileButton">();
	}
	static class UFortTransformKeyPickerTileButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTransformKeyPickerTileButton>();
	}
};
static_assert(alignof(UFortTransformKeyPickerTileButton) == 0x000008, "Wrong alignment on UFortTransformKeyPickerTileButton");
static_assert(sizeof(UFortTransformKeyPickerTileButton) == 0x000B68, "Wrong size on UFortTransformKeyPickerTileButton");

// Class FortniteUI.FortTransformResultsList
// 0x0008 (0x0240 - 0x0238)
class UFortTransformResultsList final : public UCommonUserWidget
{
public:
	class UFortItemQuantityListBase*              ResultsList;                                       // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ShowRecycleResults(const TArray<class UFortItem*>& SacrificeItems);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTransformResultsList">();
	}
	static class UFortTransformResultsList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTransformResultsList>();
	}
};
static_assert(alignof(UFortTransformResultsList) == 0x000008, "Wrong alignment on UFortTransformResultsList");
static_assert(sizeof(UFortTransformResultsList) == 0x000240, "Wrong size on UFortTransformResultsList");
static_assert(offsetof(UFortTransformResultsList, ResultsList) == 0x000238, "Member 'UFortTransformResultsList::ResultsList' has a wrong offset!");

// Class FortniteUI.FortTransformSlotItemPicker
// 0x0010 (0x0318 - 0x0308)
class UFortTransformSlotItemPicker final : public UFortItemPickerBase
{
public:
	uint8                                         Pad_308[0x10];                                     // 0x0308(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleInventoryUpdated();
	void RebuildSlottableItems(const TArray<EFortInventoryFilter>& ItemFilters, EFortItemType ItemType, const TArray<class UFortItem*>& ItemsToIgnore);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTransformSlotItemPicker">();
	}
	static class UFortTransformSlotItemPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTransformSlotItemPicker>();
	}
};
static_assert(alignof(UFortTransformSlotItemPicker) == 0x000008, "Wrong alignment on UFortTransformSlotItemPicker");
static_assert(sizeof(UFortTransformSlotItemPicker) == 0x000318, "Wrong size on UFortTransformSlotItemPicker");

// Class FortniteUI.FortTransformSlotItemPickerTileButton
// 0x0000 (0x0B68 - 0x0B68)
class UFortTransformSlotItemPickerTileButton final : public UFortItemTileButton
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTransformSlotItemPickerTileButton">();
	}
	static class UFortTransformSlotItemPickerTileButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTransformSlotItemPickerTileButton>();
	}
};
static_assert(alignof(UFortTransformSlotItemPickerTileButton) == 0x000008, "Wrong alignment on UFortTransformSlotItemPickerTileButton");
static_assert(sizeof(UFortTransformSlotItemPickerTileButton) == 0x000B68, "Wrong size on UFortTransformSlotItemPickerTileButton");

// Class FortniteUI.FortTrapDefenderItemPicker
// 0x0068 (0x0370 - 0x0308)
class UFortTrapDefenderItemPicker final : public UFortItemPickerBase
{
public:
	class UFortItemDetailsHostPanel*              DetailsPanel;                                      // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ABuildingTrapDefender>   DefenderTrap;                                      // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_318[0x58];                                     // 0x0318(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleSelectionCommittedBP(class UFortItem* CommittedItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTrapDefenderItemPicker">();
	}
	static class UFortTrapDefenderItemPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTrapDefenderItemPicker>();
	}
};
static_assert(alignof(UFortTrapDefenderItemPicker) == 0x000008, "Wrong alignment on UFortTrapDefenderItemPicker");
static_assert(sizeof(UFortTrapDefenderItemPicker) == 0x000370, "Wrong size on UFortTrapDefenderItemPicker");
static_assert(offsetof(UFortTrapDefenderItemPicker, DetailsPanel) == 0x000308, "Member 'UFortTrapDefenderItemPicker::DetailsPanel' has a wrong offset!");
static_assert(offsetof(UFortTrapDefenderItemPicker, DefenderTrap) == 0x000310, "Member 'UFortTrapDefenderItemPicker::DefenderTrap' has a wrong offset!");

// Class FortniteUI.FortTravelLogMap
// 0x0030 (0x0260 - 0x0230)
class UFortTravelLogMap final : public UUserWidget
{
public:
	float                                         MapSize;                                           // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTimeFraction;                               // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DistanceToCoalescePositions;                       // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C[0x24];                                     // 0x023C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeFromTravelRecord(const struct FAthenaTravelRecord& Record);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTravelLogMap">();
	}
	static class UFortTravelLogMap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTravelLogMap>();
	}
};
static_assert(alignof(UFortTravelLogMap) == 0x000008, "Wrong alignment on UFortTravelLogMap");
static_assert(sizeof(UFortTravelLogMap) == 0x000260, "Wrong size on UFortTravelLogMap");
static_assert(offsetof(UFortTravelLogMap, MapSize) == 0x000230, "Member 'UFortTravelLogMap::MapSize' has a wrong offset!");
static_assert(offsetof(UFortTravelLogMap, CurrentTimeFraction) == 0x000234, "Member 'UFortTravelLogMap::CurrentTimeFraction' has a wrong offset!");
static_assert(offsetof(UFortTravelLogMap, DistanceToCoalescePositions) == 0x000238, "Member 'UFortTravelLogMap::DistanceToCoalescePositions' has a wrong offset!");

// Class FortniteUI.FortTutorialContext
// 0x00C0 (0x00E8 - 0x0028)
class UFortTutorialContext final : public UBlueprintContextBase
{
public:
	UMulticastDelegateProperty_                   OnUpdateTutorialAnnouncement;                      // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnNewAnnouncementStartedOnClientDelegate;          // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0xA0];                                      // 0x0048(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearTutorialCallouts();
	void ContinueTutorial();
	void DisableTutorialCallout(class FName WidgetName, class FName TutorialQuestObjectiveName, ETutorialType TutorialType);
	void EnableTutorialCallout(class FName WidgetName, class FName TutorialQuestObjectiveName, ETutorialType TutorialType);
	void GetHiddenTutorialCallouts(TArray<class FName>* WidgetNames);
	void GetTutorialCallouts(TArray<class FName>* WidgetNames);
	void HideTutorialCallout(class FName WidgetName, class FName TutorialQuestObjectiveName, ETutorialType TutorialType);
	bool IsTutorialCalloutVisible(class FName WidgetName);
	void OnNewAnnouncementStartedOnClient(class AFortClientAnnouncement* NewAnnouncement);
	void SkipTutorial();
	void UnhideAllTutorialCallouts();
	void UnhideTutorialCallout(class FName WidgetName, class FName TutorialQuestObjectiveName, ETutorialType TutorialType);
	void UpdateTutorialAnnouncement(const struct FFortClientAnnouncementData_Tutorial& AnnouncementData, bool bShow);

	bool GetTutorialData(const class FName& TutorialObjectiveName, struct FFortUITutorialData* OutTutorialData) const;
	bool ShouldPromptToSkipTutorial() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTutorialContext">();
	}
	static class UFortTutorialContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTutorialContext>();
	}
};
static_assert(alignof(UFortTutorialContext) == 0x000008, "Wrong alignment on UFortTutorialContext");
static_assert(sizeof(UFortTutorialContext) == 0x0000E8, "Wrong size on UFortTutorialContext");
static_assert(offsetof(UFortTutorialContext, OnUpdateTutorialAnnouncement) == 0x000028, "Member 'UFortTutorialContext::OnUpdateTutorialAnnouncement' has a wrong offset!");
static_assert(offsetof(UFortTutorialContext, OnNewAnnouncementStartedOnClientDelegate) == 0x000038, "Member 'UFortTutorialContext::OnNewAnnouncementStartedOnClientDelegate' has a wrong offset!");

// Class FortniteUI.FortTutorialQuestVisibilityWrapper
// 0x0018 (0x0270 - 0x0258)
class UFortTutorialQuestVisibilityWrapper final : public UFortBangWrapper_NUI
{
public:
	class UFortQuestItemDefinition*               QuestItemDefinition;                               // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    QuestObjectiveStat;                                // 0x0260(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTutorialQuestVisibilityWrapper">();
	}
	static class UFortTutorialQuestVisibilityWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTutorialQuestVisibilityWrapper>();
	}
};
static_assert(alignof(UFortTutorialQuestVisibilityWrapper) == 0x000008, "Wrong alignment on UFortTutorialQuestVisibilityWrapper");
static_assert(sizeof(UFortTutorialQuestVisibilityWrapper) == 0x000270, "Wrong size on UFortTutorialQuestVisibilityWrapper");
static_assert(offsetof(UFortTutorialQuestVisibilityWrapper, QuestItemDefinition) == 0x000258, "Member 'UFortTutorialQuestVisibilityWrapper::QuestItemDefinition' has a wrong offset!");
static_assert(offsetof(UFortTutorialQuestVisibilityWrapper, QuestObjectiveStat) == 0x000260, "Member 'UFortTutorialQuestVisibilityWrapper::QuestObjectiveStat' has a wrong offset!");

// Class FortniteUI.FortTwitchLogin
// 0x0050 (0x0288 - 0x0238)
class UFortTwitchLogin : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x20];                                     // 0x0238(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   TwitchLoginModalWidgetClass;                       // 0x0258(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortTwitchLoginModalWidget*            ActiveLoginModal;                                  // 0x0280(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CancelLoginFlow();
	class FString GetAccountName();
	class FString GetLinkedTwitchAccountName();
	bool IsLoggedIn();
	void Login();
	void Logout();
	void OnLinkedTwitchAccountChanged(const class FString& AccountName);
	void OnLoginFlowModalCreated(class UFortTwitchLoginModalWidget* Modal);
	void OnLoginFlowModalDismissed(class UFortTwitchLoginModalWidget* Modal);
	void OnLoginStatusChanged(bool bLoggedIn, const class FString& AccountName);
	void OnShowLoginError(const class FText& ErrorTitle, const class FText& ErrorMessage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTwitchLogin">();
	}
	static class UFortTwitchLogin* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTwitchLogin>();
	}
};
static_assert(alignof(UFortTwitchLogin) == 0x000008, "Wrong alignment on UFortTwitchLogin");
static_assert(sizeof(UFortTwitchLogin) == 0x000288, "Wrong size on UFortTwitchLogin");
static_assert(offsetof(UFortTwitchLogin, TwitchLoginModalWidgetClass) == 0x000258, "Member 'UFortTwitchLogin::TwitchLoginModalWidgetClass' has a wrong offset!");
static_assert(offsetof(UFortTwitchLogin, ActiveLoginModal) == 0x000280, "Member 'UFortTwitchLogin::ActiveLoginModal' has a wrong offset!");

// Class FortniteUI.FortUIDataConfigurationContext
// 0x0000 (0x0028 - 0x0028)
class UFortUIDataConfigurationContext final : public UBlueprintContextBase
{
public:
	bool ArePartyFeaturesEnabled() const;
	bool AreSocialFeaturesEnabled() const;
	struct FPostProcessSettings GetFrontEndFFSettings() const;
	TArray<EFortItemType> GetItemTypesToUseVaultCamera() const;
	bool IsChatEnabled() const;
	bool IsLimitedToES2Features() const;
	bool IsQuestVOEnabled() const;
	bool UseSpecificPinataWeapon() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIDataConfigurationContext">();
	}
	static class UFortUIDataConfigurationContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIDataConfigurationContext>();
	}
};
static_assert(alignof(UFortUIDataConfigurationContext) == 0x000008, "Wrong alignment on UFortUIDataConfigurationContext");
static_assert(sizeof(UFortUIDataConfigurationContext) == 0x000028, "Wrong size on UFortUIDataConfigurationContext");

// Class FortniteUI.FortUIDataProfileStats
// 0x0050 (0x0080 - 0x0030)
class UFortUIDataProfileStats final : public UDataAsset
{
public:
	TMap<struct FGameplayTag, struct FFortUIStatStyle> ProfileStatStyles;                                 // 0x0030(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIDataProfileStats">();
	}
	static class UFortUIDataProfileStats* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIDataProfileStats>();
	}
};
static_assert(alignof(UFortUIDataProfileStats) == 0x000008, "Wrong alignment on UFortUIDataProfileStats");
static_assert(sizeof(UFortUIDataProfileStats) == 0x000080, "Wrong size on UFortUIDataProfileStats");
static_assert(offsetof(UFortUIDataProfileStats, ProfileStatStyles) == 0x000030, "Member 'UFortUIDataProfileStats::ProfileStatStyles' has a wrong offset!");

// Class FortniteUI.FortUIMessageManager
// 0x0080 (0x00A8 - 0x0028)
class UFortUIMessageManager final : public UObject
{
public:
	UMulticastDelegateProperty_                   OnMessageAvailable;                                // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UFortUIMessageItemWidget*>       MessageQueue;                                      // 0x0038(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class UFortUIMessageItemWidget>> CurrentlyDisplayedMessages;                        // 0x0048(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_58[0x50];                                      // 0x0058(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFortUIMessageItemWidget* AddMessageItem(TSubclassOf<class UFortUIMessageItemWidget> MessageItemClass, class APlayerController* OwningPlayer, class FName MessageID, int32 StackCount);
	class UFortUIMessageItemWidget* GetNextMessageInQueue();
	void HandleMessageDisplayed(class UFortUIMessageItemWidget* MessageItem);
	void HandleMessageRemoved(class UFortUIMessageItemWidget* MessageItem);

	int32 GetNumDisplayedItems() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIMessageManager">();
	}
	static class UFortUIMessageManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIMessageManager>();
	}
};
static_assert(alignof(UFortUIMessageManager) == 0x000008, "Wrong alignment on UFortUIMessageManager");
static_assert(sizeof(UFortUIMessageManager) == 0x0000A8, "Wrong size on UFortUIMessageManager");
static_assert(offsetof(UFortUIMessageManager, OnMessageAvailable) == 0x000028, "Member 'UFortUIMessageManager::OnMessageAvailable' has a wrong offset!");
static_assert(offsetof(UFortUIMessageManager, MessageQueue) == 0x000038, "Member 'UFortUIMessageManager::MessageQueue' has a wrong offset!");
static_assert(offsetof(UFortUIMessageManager, CurrentlyDisplayedMessages) == 0x000048, "Member 'UFortUIMessageManager::CurrentlyDisplayedMessages' has a wrong offset!");

// Class FortniteUI.UINavigationManager
// 0x0020 (0x0048 - 0x0028)
class UUINavigationManager : public UObject
{
public:
	UMulticastDelegateProperty_                   OnNavigationEvent;                                 // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FUINavigationEntry>             NavigationStack;                                   // 0x0038(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void ClearStack();
	class FText GetDisplayName(int32 Param_Index);
	int32 GetStackSize();
	void NavigationToIndex(int32 Param_Index);
	void PopNavigation();
	void PushNavigation(const class FText& DisplayName, class UObject* ObjectData, class FName IdData, int32 IntData, const TDelegate<void(const struct FUINavigationData& Data)>& OnNavigateTo, const TDelegate<void(const struct FUINavigationData& Data)>& OnNavigateFrom);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UINavigationManager">();
	}
	static class UUINavigationManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUINavigationManager>();
	}
};
static_assert(alignof(UUINavigationManager) == 0x000008, "Wrong alignment on UUINavigationManager");
static_assert(sizeof(UUINavigationManager) == 0x000048, "Wrong size on UUINavigationManager");
static_assert(offsetof(UUINavigationManager, OnNavigationEvent) == 0x000028, "Member 'UUINavigationManager::OnNavigationEvent' has a wrong offset!");
static_assert(offsetof(UUINavigationManager, NavigationStack) == 0x000038, "Member 'UUINavigationManager::NavigationStack' has a wrong offset!");

// Class FortniteUI.FortUINavigationManager
// 0x0110 (0x0158 - 0x0048)
class UFortUINavigationManager final : public UUINavigationManager
{
public:
	UMulticastDelegateProperty_                   OnMainTabNavigateRequest;                          // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFeatureNavigateOp;                               // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnNodePageNavigateRequest;                         // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSquadSlotNavigateRequest;                        // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnVaultTabNavigateRequest;                         // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnVaultItemNavigateRequest;                        // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemEvolutionNavigateRequest;                    // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnQuestItemNavigateRequest;                        // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPopContentStackOp;                               // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSquadNavigationOp;                               // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   FortExpeditionsOp;                                 // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   FortCollectionBookOp;                              // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnQuestItemOp;                                     // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x20];                                     // 0x0118(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortUINavigationRequest>       NavigationRequests;                                // 0x0138(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UUserWidget*                            HiddenCursorWidget;                                // 0x0148(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUserWidget*                            VirtualCursorWidget;                               // 0x0150(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	bool AttemptMatchmakeForQuest(class UFortQuestItem* Quest, bool* OutContentNotDownloaded);
	bool AttemptPlayQuest(class UFortQuestItem* Quest);
	bool CanAccessCollectionBook();
	bool CanAccessHeroLoadoutScreen(class UFortCampaignHeroLoadoutItem* HeroLoadout);
	bool CanAccessItemManagementScreen(EFortFrontendInventoryFilter ItemManagementFilter);
	bool CanAccessSquadManagementScreen(class FName SquadId, int32 SquadSlotIndex);
	bool CanNavigateToQuestObjective(class UFortQuestItem* QuestItem);
	void CenterWidget(class UWidget* Widget);
	void CompletePendingNavigationOp(EFortUINavigationOp NavigationOp);
	bool HasPendingNavigationOp(EFortUINavigationOp NavigationOp);
	void NavigateForGift(class UFortGiftBoxItem* Item);
	void NavigateToCollectionBook();
	void NavigateToExpeditions();
	void NavigateToFeature(EFortUIFeature Feature);
	void NavigateToItem(class UFortItem* Item);
	void NavigateToItemManagementScreen(EFortFrontendInventoryFilter Filter);
	void NavigateToQuestObjective(class UFortQuestItem* QuestItem);
	void NavigateToSquadSlot(const class FName SquadId, const int32 SquadSlotIndex);
	void PushHeroLoadoutScreen(class UFortCampaignHeroLoadoutItem* HeroLoadout);
	void PushItemInspectionScreen(class UFortItem* ItemToInspect, EFortItemInspectionMode Mode, class UFortItemTileView* CycleTileView, bool bReadOnly, bool bAllowFavoriting, bool bIsTemporaryItem, bool bAllowRarityUpgrading);
	void PushItemManagementScreen(EFortFrontendInventoryFilter ItemManagementFilter, class UFortItem* ItemToSelect);
	void PushSquadManagementScreen(class FName SquadId, int32 SquadSlotIndex);
	void SetScrollWidget(class UWidget* Widget);
	bool TryGetPendingNavigationOp(struct FFortUINavigationOperation* NavigationOp);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUINavigationManager">();
	}
	static class UFortUINavigationManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUINavigationManager>();
	}
};
static_assert(alignof(UFortUINavigationManager) == 0x000008, "Wrong alignment on UFortUINavigationManager");
static_assert(sizeof(UFortUINavigationManager) == 0x000158, "Wrong size on UFortUINavigationManager");
static_assert(offsetof(UFortUINavigationManager, OnMainTabNavigateRequest) == 0x000048, "Member 'UFortUINavigationManager::OnMainTabNavigateRequest' has a wrong offset!");
static_assert(offsetof(UFortUINavigationManager, OnFeatureNavigateOp) == 0x000058, "Member 'UFortUINavigationManager::OnFeatureNavigateOp' has a wrong offset!");
static_assert(offsetof(UFortUINavigationManager, OnNodePageNavigateRequest) == 0x000068, "Member 'UFortUINavigationManager::OnNodePageNavigateRequest' has a wrong offset!");
static_assert(offsetof(UFortUINavigationManager, OnSquadSlotNavigateRequest) == 0x000078, "Member 'UFortUINavigationManager::OnSquadSlotNavigateRequest' has a wrong offset!");
static_assert(offsetof(UFortUINavigationManager, OnVaultTabNavigateRequest) == 0x000088, "Member 'UFortUINavigationManager::OnVaultTabNavigateRequest' has a wrong offset!");
static_assert(offsetof(UFortUINavigationManager, OnVaultItemNavigateRequest) == 0x000098, "Member 'UFortUINavigationManager::OnVaultItemNavigateRequest' has a wrong offset!");
static_assert(offsetof(UFortUINavigationManager, OnItemEvolutionNavigateRequest) == 0x0000A8, "Member 'UFortUINavigationManager::OnItemEvolutionNavigateRequest' has a wrong offset!");
static_assert(offsetof(UFortUINavigationManager, OnQuestItemNavigateRequest) == 0x0000B8, "Member 'UFortUINavigationManager::OnQuestItemNavigateRequest' has a wrong offset!");
static_assert(offsetof(UFortUINavigationManager, OnPopContentStackOp) == 0x0000C8, "Member 'UFortUINavigationManager::OnPopContentStackOp' has a wrong offset!");
static_assert(offsetof(UFortUINavigationManager, OnSquadNavigationOp) == 0x0000D8, "Member 'UFortUINavigationManager::OnSquadNavigationOp' has a wrong offset!");
static_assert(offsetof(UFortUINavigationManager, FortExpeditionsOp) == 0x0000E8, "Member 'UFortUINavigationManager::FortExpeditionsOp' has a wrong offset!");
static_assert(offsetof(UFortUINavigationManager, FortCollectionBookOp) == 0x0000F8, "Member 'UFortUINavigationManager::FortCollectionBookOp' has a wrong offset!");
static_assert(offsetof(UFortUINavigationManager, OnQuestItemOp) == 0x000108, "Member 'UFortUINavigationManager::OnQuestItemOp' has a wrong offset!");
static_assert(offsetof(UFortUINavigationManager, NavigationRequests) == 0x000138, "Member 'UFortUINavigationManager::NavigationRequests' has a wrong offset!");
static_assert(offsetof(UFortUINavigationManager, HiddenCursorWidget) == 0x000148, "Member 'UFortUINavigationManager::HiddenCursorWidget' has a wrong offset!");
static_assert(offsetof(UFortUINavigationManager, VirtualCursorWidget) == 0x000150, "Member 'UFortUINavigationManager::VirtualCursorWidget' has a wrong offset!");

// Class FortniteUI.FortUINotificationManager
// 0x0060 (0x0088 - 0x0028)
class UFortUINotificationManager final : public UObject
{
public:
	TArray<class UFortUINotificationQueue*>       UINotificationQueues;                              // 0x0028(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x50];                                      // 0x0038(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUINotificationManager">();
	}
	static class UFortUINotificationManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUINotificationManager>();
	}
};
static_assert(alignof(UFortUINotificationManager) == 0x000008, "Wrong alignment on UFortUINotificationManager");
static_assert(sizeof(UFortUINotificationManager) == 0x000088, "Wrong size on UFortUINotificationManager");
static_assert(offsetof(UFortUINotificationManager, UINotificationQueues) == 0x000028, "Member 'UFortUINotificationManager::UINotificationQueues' has a wrong offset!");

// Class FortniteUI.FortUIRewardReport
// 0x0010 (0x0038 - 0x0028)
class UFortUIRewardReport final : public UObject
{
public:
	class UFortLocalPlayer*                       LocalPlayer;                                       // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RewardDisplayLevel;                                // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetRewardedChestIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIRewardReport">();
	}
	static class UFortUIRewardReport* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIRewardReport>();
	}
};
static_assert(alignof(UFortUIRewardReport) == 0x000008, "Wrong alignment on UFortUIRewardReport");
static_assert(sizeof(UFortUIRewardReport) == 0x000038, "Wrong size on UFortUIRewardReport");
static_assert(offsetof(UFortUIRewardReport, LocalPlayer) == 0x000028, "Member 'UFortUIRewardReport::LocalPlayer' has a wrong offset!");
static_assert(offsetof(UFortUIRewardReport, RewardDisplayLevel) == 0x000030, "Member 'UFortUIRewardReport::RewardDisplayLevel' has a wrong offset!");

// Class FortniteUI.FortUIScoreReport
// 0x0008 (0x0030 - 0x0028)
class UFortUIScoreReport final : public UObject
{
public:
	class UFortLocalPlayer*                       LocalPlayer;                                       // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	int32 GetBadgeScore(class UFortItem* BadgeItem) const;
	class AFortPlayerPawn* GetCurrentPlayerPawn(int32 ScoreReportIndex) const;
	class AFortPlayerState* GetCurrentPlayerState(int32 ScoreReportIndex) const;
	float GetDifficultBonusMultiplier() const;
	int32 GetDifficultBonusScore() const;
	float GetLevelProgress(int32 Level, int32 DisplayXp) const;
	int32 GetPlayerCount() const;
	void GetPlayerIDFromScoreReportIndex(int32 ScoreReportIndex, struct FUniqueNetIdRepl* OutUniqueNetIdRepl) const;
	class FText GetPlayerName(int32 ScoreReportIndex) const;
	class FString GetPlayerPlatform(int32 ScoreReportIndex) const;
	int32 GetPlayerScore(int32 ScoreReportIndex, EFortUIScoreType ScoreType) const;
	int32 GetScoreReportIndex(const struct FUniqueNetIdRepl& PlayerID) const;
	void GetScoreReportIndicesByPlayerID(TArray<int32>* SortedScoreReportIndices) const;
	int32 GetTeamScore(EFortUIScoreType ScoreType) const;
	bool GetXpInfo(int32 ScoreReportIndex, struct FFortUIXpInfo* OutXpInfo) const;
	int32 GetXpToCompleteLevel(int32 Level) const;
	bool IsLocalPlayer(int32 ScoreReportIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIScoreReport">();
	}
	static class UFortUIScoreReport* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIScoreReport>();
	}
};
static_assert(alignof(UFortUIScoreReport) == 0x000008, "Wrong alignment on UFortUIScoreReport");
static_assert(sizeof(UFortUIScoreReport) == 0x000030, "Wrong size on UFortUIScoreReport");
static_assert(offsetof(UFortUIScoreReport, LocalPlayer) == 0x000028, "Member 'UFortUIScoreReport::LocalPlayer' has a wrong offset!");

// Class FortniteUI.FortUIStateTrigger
// 0x0008 (0x0030 - 0x0028)
class UFortUIStateTrigger : public UObject
{
public:
	EFortUIState                                  UIState;                                           // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool EvalBP() const;
	bool IsLoggedIn() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIStateTrigger">();
	}
	static class UFortUIStateTrigger* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIStateTrigger>();
	}
};
static_assert(alignof(UFortUIStateTrigger) == 0x000008, "Wrong alignment on UFortUIStateTrigger");
static_assert(sizeof(UFortUIStateTrigger) == 0x000030, "Wrong size on UFortUIStateTrigger");
static_assert(offsetof(UFortUIStateTrigger, UIState) == 0x000028, "Member 'UFortUIStateTrigger::UIState' has a wrong offset!");

// Class FortniteUI.FortUIStateTrigger_Athena
// 0x0000 (0x0030 - 0x0030)
class UFortUIStateTrigger_Athena final : public UFortUIStateTrigger
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIStateTrigger_Athena">();
	}
	static class UFortUIStateTrigger_Athena* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIStateTrigger_Athena>();
	}
};
static_assert(alignof(UFortUIStateTrigger_Athena) == 0x000008, "Wrong alignment on UFortUIStateTrigger_Athena");
static_assert(sizeof(UFortUIStateTrigger_Athena) == 0x000030, "Wrong size on UFortUIStateTrigger_Athena");

// Class FortniteUI.FortUIStateTrigger_AthenaReplay
// 0x0000 (0x0030 - 0x0030)
class UFortUIStateTrigger_AthenaReplay final : public UFortUIStateTrigger
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIStateTrigger_AthenaReplay">();
	}
	static class UFortUIStateTrigger_AthenaReplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIStateTrigger_AthenaReplay>();
	}
};
static_assert(alignof(UFortUIStateTrigger_AthenaReplay) == 0x000008, "Wrong alignment on UFortUIStateTrigger_AthenaReplay");
static_assert(sizeof(UFortUIStateTrigger_AthenaReplay) == 0x000030, "Wrong size on UFortUIStateTrigger_AthenaReplay");

// Class FortniteUI.FortUIStateTrigger_AthenaSpectator
// 0x0000 (0x0030 - 0x0030)
class UFortUIStateTrigger_AthenaSpectator final : public UFortUIStateTrigger
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIStateTrigger_AthenaSpectator">();
	}
	static class UFortUIStateTrigger_AthenaSpectator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIStateTrigger_AthenaSpectator>();
	}
};
static_assert(alignof(UFortUIStateTrigger_AthenaSpectator) == 0x000008, "Wrong alignment on UFortUIStateTrigger_AthenaSpectator");
static_assert(sizeof(UFortUIStateTrigger_AthenaSpectator) == 0x000030, "Wrong size on UFortUIStateTrigger_AthenaSpectator");

// Class FortniteUI.FortUIStateTrigger_InGame
// 0x0000 (0x0030 - 0x0030)
class UFortUIStateTrigger_InGame final : public UFortUIStateTrigger
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIStateTrigger_InGame">();
	}
	static class UFortUIStateTrigger_InGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIStateTrigger_InGame>();
	}
};
static_assert(alignof(UFortUIStateTrigger_InGame) == 0x000008, "Wrong alignment on UFortUIStateTrigger_InGame");
static_assert(sizeof(UFortUIStateTrigger_InGame) == 0x000030, "Wrong size on UFortUIStateTrigger_InGame");

// Class FortniteUI.FortUIStateTrigger_Login
// 0x0000 (0x0030 - 0x0030)
class UFortUIStateTrigger_Login final : public UFortUIStateTrigger
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIStateTrigger_Login">();
	}
	static class UFortUIStateTrigger_Login* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIStateTrigger_Login>();
	}
};
static_assert(alignof(UFortUIStateTrigger_Login) == 0x000008, "Wrong alignment on UFortUIStateTrigger_Login");
static_assert(sizeof(UFortUIStateTrigger_Login) == 0x000030, "Wrong size on UFortUIStateTrigger_Login");

// Class FortniteUI.FortUIStateTrigger_Replay
// 0x0000 (0x0030 - 0x0030)
class UFortUIStateTrigger_Replay final : public UFortUIStateTrigger
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIStateTrigger_Replay">();
	}
	static class UFortUIStateTrigger_Replay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIStateTrigger_Replay>();
	}
};
static_assert(alignof(UFortUIStateTrigger_Replay) == 0x000008, "Wrong alignment on UFortUIStateTrigger_Replay");
static_assert(sizeof(UFortUIStateTrigger_Replay) == 0x000030, "Wrong size on UFortUIStateTrigger_Replay");

// Class FortniteUI.FortUIStateWidget_Frontend
// 0x0030 (0x0390 - 0x0360)
class UFortUIStateWidget_Frontend : public UFortUIStateWidget_NUI
{
public:
	bool                                          bVideoActive;                                      // 0x0360(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGiftBoxItem*                       NextGiftBox;                                       // 0x0368(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortItemReceivedScreen>    ItemReceivedScreenClass;                           // 0x0370(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_378[0x18];                                     // 0x0378(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AttemptToOpenBattlePassTabForNewSeason();
	void CheckBanStatus(bool bBanned);
	bool CheckForGifts();
	void HandleGiftBoxRemoved(bool bSuccess);
	void HandleGiftingComplete();
	void MarkTrailerMovieSeen();
	void MarkTrailerMovieSeenByIndex(int32 IndexOfMovieToMarkSeen);
	void OnMatchmakingV2Changed(bool MatchmakingActive);
	void TryMFAModal(TSubclassOf<class UEnableMultiFactorModal> BPClass);

	bool GetTrailerMovieIndexThatNeedsToBeShownForQuest(int32* IndexOfMovieToShow) const;
	bool NeedSeeTrailerMovie() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIStateWidget_Frontend">();
	}
	static class UFortUIStateWidget_Frontend* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIStateWidget_Frontend>();
	}
};
static_assert(alignof(UFortUIStateWidget_Frontend) == 0x000008, "Wrong alignment on UFortUIStateWidget_Frontend");
static_assert(sizeof(UFortUIStateWidget_Frontend) == 0x000390, "Wrong size on UFortUIStateWidget_Frontend");
static_assert(offsetof(UFortUIStateWidget_Frontend, bVideoActive) == 0x000360, "Member 'UFortUIStateWidget_Frontend::bVideoActive' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Frontend, NextGiftBox) == 0x000368, "Member 'UFortUIStateWidget_Frontend::NextGiftBox' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Frontend, ItemReceivedScreenClass) == 0x000370, "Member 'UFortUIStateWidget_Frontend::ItemReceivedScreenClass' has a wrong offset!");

// Class FortniteUI.FortUIStateWidget_Login
// 0x01B8 (0x0518 - 0x0360)
class UFortUIStateWidget_Login : public UFortUIStateWidget_NUI
{
public:
	TSubclassOf<class UFortLoginStatus>           StatusScreenClass;                                 // 0x0360(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortLoginStatus*                       StatusScreenWidget;                                // 0x0368(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortSplashScreenWidget>    SplashScreenClass;                                 // 0x0370(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortSplashScreenWidget*                SplashScreenWidget;                                // 0x0378(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortHaveInviteSelect>      HaveInviteClass;                                   // 0x0380(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortHaveInviteSelect*                  HaveInviteWidget;                                  // 0x0388(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortPlayedBeforeSelect>    PlayedBeforeClass;                                 // 0x0390(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortPlayedBeforeSelect*                PlayedBeforeWidget;                                // 0x0398(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortLoginCredentialSelect> CredentialSelectClass;                             // 0x03A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortLoginCredentialSelect*             CredentialSelectWidget;                            // 0x03A8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortInviteRequest>         InviteRequestClass;                                // 0x03B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortInviteRequest*                     InviteRequestWidget;                               // 0x03B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortSignInWidget>          SignInScreenClass;                                 // 0x03C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortSignInWidget*                      SignInScreenWidget;                                // 0x03C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortSignInWidget>          SignInConsoleClass;                                // 0x03D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortSignInWidget*                      SignInConsoleWidget;                               // 0x03D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortRedirectToEpicAccountWidget> RedirectToEpicClass;                               // 0x03E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortRedirectToEpicAccountWidget*       RedirectToEpicWidget;                              // 0x03E8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortNewAccountWarning>     NewAccountWarningClass;                            // 0x03F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortNewAccountWarning*                 NewAccountWarningWidget;                           // 0x03F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortLoginResultWidget>     LoginResultClass;                                  // 0x0400(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortLoginResultWidget*                 LoginResultWIdget;                                 // 0x0408(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortAccountNotFound>       AccountNotFoundClass;                              // 0x0410(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortAccountNotFound*                   AccountNotFoundWidget;                             // 0x0418(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortDisplayNameWidget>     DisplayNameClass;                                  // 0x0420(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortDisplayNameWidget*                 DisplayNameWidget;                                 // 0x0428(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortMultiFactorAuthWidget> MultiFactorAuthWidgetClass;                        // 0x0430(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortMultiFactorAuthWidget*             MultiFactorAuthWidget;                             // 0x0438(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortWebLoginWidget>        WebLoginWidgetClass;                               // 0x0440(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortHealthWarningBase>     HealthWarningClass;                                // 0x0448(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortHealthWarningBase*                 HealthWarningWidget;                               // 0x0450(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortEulaWidget>            EulaClass;                                         // 0x0458(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortEulaWidget*                        EulaWidget;                                        // 0x0460(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   BenchmarkDialogTitle;                              // 0x0468(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   BenchmarkDialogMessage;                            // 0x0480(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortAccountLinkingWindow>  AccountLinkingWindowClass;                         // 0x0498(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortAccountLinkingWindow*              AccountLinkingWidget;                              // 0x04A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    BackButtonRowHandle;                               // 0x04A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortMOTDWidget>            MOTDClass;                                         // 0x04B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortMOTDWidget*                        MOTDWidget;                                        // 0x04C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C8[0x8];                                      // 0x04C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortLoginUnavailable>      LoginUnavailableClass;                             // 0x04D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D8[0x38];                                     // 0x04D8(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonWidgetStack*                     LoginFlowStack;                                    // 0x0510(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HideTopBarOptions();
	void OnDisplayWebAccountCreation(class UWidget* WebWidget);
	void OnDisplayWebLogin(class UWidget* WebWidget);
	void PushWidgetOntoFlowStack(class UWidget* Widget);
	class UWidget* SafePopFlowStack();
	void SafePopFlowStackNoReturn();
	void SetConsoleWidgetDisplayName();
	void ShowBackBar();

	class FText GetPlatformDisplayName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIStateWidget_Login">();
	}
	static class UFortUIStateWidget_Login* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIStateWidget_Login>();
	}
};
static_assert(alignof(UFortUIStateWidget_Login) == 0x000008, "Wrong alignment on UFortUIStateWidget_Login");
static_assert(sizeof(UFortUIStateWidget_Login) == 0x000518, "Wrong size on UFortUIStateWidget_Login");
static_assert(offsetof(UFortUIStateWidget_Login, StatusScreenClass) == 0x000360, "Member 'UFortUIStateWidget_Login::StatusScreenClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, StatusScreenWidget) == 0x000368, "Member 'UFortUIStateWidget_Login::StatusScreenWidget' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, SplashScreenClass) == 0x000370, "Member 'UFortUIStateWidget_Login::SplashScreenClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, SplashScreenWidget) == 0x000378, "Member 'UFortUIStateWidget_Login::SplashScreenWidget' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, HaveInviteClass) == 0x000380, "Member 'UFortUIStateWidget_Login::HaveInviteClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, HaveInviteWidget) == 0x000388, "Member 'UFortUIStateWidget_Login::HaveInviteWidget' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, PlayedBeforeClass) == 0x000390, "Member 'UFortUIStateWidget_Login::PlayedBeforeClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, PlayedBeforeWidget) == 0x000398, "Member 'UFortUIStateWidget_Login::PlayedBeforeWidget' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, CredentialSelectClass) == 0x0003A0, "Member 'UFortUIStateWidget_Login::CredentialSelectClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, CredentialSelectWidget) == 0x0003A8, "Member 'UFortUIStateWidget_Login::CredentialSelectWidget' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, InviteRequestClass) == 0x0003B0, "Member 'UFortUIStateWidget_Login::InviteRequestClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, InviteRequestWidget) == 0x0003B8, "Member 'UFortUIStateWidget_Login::InviteRequestWidget' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, SignInScreenClass) == 0x0003C0, "Member 'UFortUIStateWidget_Login::SignInScreenClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, SignInScreenWidget) == 0x0003C8, "Member 'UFortUIStateWidget_Login::SignInScreenWidget' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, SignInConsoleClass) == 0x0003D0, "Member 'UFortUIStateWidget_Login::SignInConsoleClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, SignInConsoleWidget) == 0x0003D8, "Member 'UFortUIStateWidget_Login::SignInConsoleWidget' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, RedirectToEpicClass) == 0x0003E0, "Member 'UFortUIStateWidget_Login::RedirectToEpicClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, RedirectToEpicWidget) == 0x0003E8, "Member 'UFortUIStateWidget_Login::RedirectToEpicWidget' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, NewAccountWarningClass) == 0x0003F0, "Member 'UFortUIStateWidget_Login::NewAccountWarningClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, NewAccountWarningWidget) == 0x0003F8, "Member 'UFortUIStateWidget_Login::NewAccountWarningWidget' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, LoginResultClass) == 0x000400, "Member 'UFortUIStateWidget_Login::LoginResultClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, LoginResultWIdget) == 0x000408, "Member 'UFortUIStateWidget_Login::LoginResultWIdget' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, AccountNotFoundClass) == 0x000410, "Member 'UFortUIStateWidget_Login::AccountNotFoundClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, AccountNotFoundWidget) == 0x000418, "Member 'UFortUIStateWidget_Login::AccountNotFoundWidget' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, DisplayNameClass) == 0x000420, "Member 'UFortUIStateWidget_Login::DisplayNameClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, DisplayNameWidget) == 0x000428, "Member 'UFortUIStateWidget_Login::DisplayNameWidget' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, MultiFactorAuthWidgetClass) == 0x000430, "Member 'UFortUIStateWidget_Login::MultiFactorAuthWidgetClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, MultiFactorAuthWidget) == 0x000438, "Member 'UFortUIStateWidget_Login::MultiFactorAuthWidget' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, WebLoginWidgetClass) == 0x000440, "Member 'UFortUIStateWidget_Login::WebLoginWidgetClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, HealthWarningClass) == 0x000448, "Member 'UFortUIStateWidget_Login::HealthWarningClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, HealthWarningWidget) == 0x000450, "Member 'UFortUIStateWidget_Login::HealthWarningWidget' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, EulaClass) == 0x000458, "Member 'UFortUIStateWidget_Login::EulaClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, EulaWidget) == 0x000460, "Member 'UFortUIStateWidget_Login::EulaWidget' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, BenchmarkDialogTitle) == 0x000468, "Member 'UFortUIStateWidget_Login::BenchmarkDialogTitle' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, BenchmarkDialogMessage) == 0x000480, "Member 'UFortUIStateWidget_Login::BenchmarkDialogMessage' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, AccountLinkingWindowClass) == 0x000498, "Member 'UFortUIStateWidget_Login::AccountLinkingWindowClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, AccountLinkingWidget) == 0x0004A0, "Member 'UFortUIStateWidget_Login::AccountLinkingWidget' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, BackButtonRowHandle) == 0x0004A8, "Member 'UFortUIStateWidget_Login::BackButtonRowHandle' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, MOTDClass) == 0x0004B8, "Member 'UFortUIStateWidget_Login::MOTDClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, MOTDWidget) == 0x0004C0, "Member 'UFortUIStateWidget_Login::MOTDWidget' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, LoginUnavailableClass) == 0x0004D0, "Member 'UFortUIStateWidget_Login::LoginUnavailableClass' has a wrong offset!");
static_assert(offsetof(UFortUIStateWidget_Login, LoginFlowStack) == 0x000510, "Member 'UFortUIStateWidget_Login::LoginFlowStack' has a wrong offset!");

// Class FortniteUI.FortUIStyleDefinitionAsset
// 0x09E0 (0x0A10 - 0x0030)
class UFortUIStyleDefinitionAsset final : public UDataAsset
{
public:
	struct FFortUIStyleDefinition                 StyleDefinition;                                   // 0x0030(0x09E0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIStyleDefinitionAsset">();
	}
	static class UFortUIStyleDefinitionAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIStyleDefinitionAsset>();
	}
};
static_assert(alignof(UFortUIStyleDefinitionAsset) == 0x000008, "Wrong alignment on UFortUIStyleDefinitionAsset");
static_assert(sizeof(UFortUIStyleDefinitionAsset) == 0x000A10, "Wrong size on UFortUIStyleDefinitionAsset");
static_assert(offsetof(UFortUIStyleDefinitionAsset, StyleDefinition) == 0x000030, "Member 'UFortUIStyleDefinitionAsset::StyleDefinition' has a wrong offset!");

// Class FortniteUI.FortUpgradeDetailsBase
// 0x0030 (0x0268 - 0x0238)
class UFortUpgradeDetailsBase final : public UCommonUserWidget
{
public:
	class UMediaPlayer*                           VideoPlayer;                                       // 0x0238(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortUpgradeInfo*                       UpgradeInfo;                                       // 0x0240(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_248[0x20];                                     // 0x0248(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPurchaseComplete();
	void OnScreenActive();
	void OnShowIcon(class UTexture2D* Icon);
	void OnUpgradeToDetailChanged();
	void RequestPurchaseNode();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUpgradeDetailsBase">();
	}
	static class UFortUpgradeDetailsBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUpgradeDetailsBase>();
	}
};
static_assert(alignof(UFortUpgradeDetailsBase) == 0x000008, "Wrong alignment on UFortUpgradeDetailsBase");
static_assert(sizeof(UFortUpgradeDetailsBase) == 0x000268, "Wrong size on UFortUpgradeDetailsBase");
static_assert(offsetof(UFortUpgradeDetailsBase, VideoPlayer) == 0x000238, "Member 'UFortUpgradeDetailsBase::VideoPlayer' has a wrong offset!");
static_assert(offsetof(UFortUpgradeDetailsBase, UpgradeInfo) == 0x000240, "Member 'UFortUpgradeDetailsBase::UpgradeInfo' has a wrong offset!");

// Class FortniteUI.FortUpgradeIndicator
// 0x0000 (0x0468 - 0x0468)
class UFortUpgradeIndicator final : public UFortSimpleItemConditionIconIndicator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUpgradeIndicator">();
	}
	static class UFortUpgradeIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUpgradeIndicator>();
	}
};
static_assert(alignof(UFortUpgradeIndicator) == 0x000008, "Wrong alignment on UFortUpgradeIndicator");
static_assert(sizeof(UFortUpgradeIndicator) == 0x000468, "Wrong size on UFortUpgradeIndicator");

// Class FortniteUI.FortUpgradeInfo
// 0x0088 (0x00B0 - 0x0028)
class UFortUpgradeInfo final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortHomebaseNodeItemDefinition*        NodeItemDef;                                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_50[0x60];                                      // 0x0050(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BackwardPreview();
	void ForwardPreview();

	bool CanAffordUpgrade() const;
	bool CanPreview() const;
	int32 GetCost() const;
	int32 GetCurrentLevel() const;
	class FText GetDescription() const;
	bool GetDisplayAttributes(TArray<struct FFortDisplayAttribute>* OutDisplayAttributes) const;
	TSoftObjectPtr<class UTexture2D> GetIcon(EUpgradeInfoImageSize ImageSize) const;
	class FText GetItemName() const;
	int32 GetMaxLevel() const;
	int32 GetNextLevel() const;
	class FText GetNextLevelDescription() const;
	class FText GetNextLevelTitle() const;
	class FText GetTitle() const;
	int32 GetUpgradeUnlockLevel() const;
	class UMediaSource* GetVideo() const;
	bool IsPreviewing() const;
	bool IsUpgradeUnlocked() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUpgradeInfo">();
	}
	static class UFortUpgradeInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUpgradeInfo>();
	}
};
static_assert(alignof(UFortUpgradeInfo) == 0x000008, "Wrong alignment on UFortUpgradeInfo");
static_assert(sizeof(UFortUpgradeInfo) == 0x0000B0, "Wrong size on UFortUpgradeInfo");
static_assert(offsetof(UFortUpgradeInfo, NodeItemDef) == 0x000048, "Member 'UFortUpgradeInfo::NodeItemDef' has a wrong offset!");

// Class FortniteUI.FortUpgradeScreenBase
// 0x00C8 (0x03E8 - 0x0320)
class UFortUpgradeScreenBase final : public UCommonActivatablePanel
{
public:
	class UFortTabListWidgetBase*                 UpgradesTabSelector;                               // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTileView*                        UpgradesTileView;                                  // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonLoadGuard*                       UpgradeTileViewLoadGuard;                          // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortUpgradeDetailsBase*                Details;                                           // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, EHomebaseNodeType>          TabToNodeTypeMap;                                  // 0x0340(0x0050)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UFortItemDefinition*                    UpgradesRespecToken;                               // 0x0390(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_398[0x50];                                     // 0x0398(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleTabSelected(class FName TabId);
	void OnPurchaseNodeComplete();
	void OnUpgradeInfoChanged();
	void OnUseUpgradesRespecTokenComplete();
	void RefreshFocus();
	void TogglePreview();
	void UseUpgradesRespecToken();

	bool AreUpgradesRespecTokensAvailable() const;
	bool CanPreview() const;
	int32 GetUpgradesRespecTokenCount() const;
	bool IsPreviewing() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUpgradeScreenBase">();
	}
	static class UFortUpgradeScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUpgradeScreenBase>();
	}
};
static_assert(alignof(UFortUpgradeScreenBase) == 0x000008, "Wrong alignment on UFortUpgradeScreenBase");
static_assert(sizeof(UFortUpgradeScreenBase) == 0x0003E8, "Wrong size on UFortUpgradeScreenBase");
static_assert(offsetof(UFortUpgradeScreenBase, UpgradesTabSelector) == 0x000320, "Member 'UFortUpgradeScreenBase::UpgradesTabSelector' has a wrong offset!");
static_assert(offsetof(UFortUpgradeScreenBase, UpgradesTileView) == 0x000328, "Member 'UFortUpgradeScreenBase::UpgradesTileView' has a wrong offset!");
static_assert(offsetof(UFortUpgradeScreenBase, UpgradeTileViewLoadGuard) == 0x000330, "Member 'UFortUpgradeScreenBase::UpgradeTileViewLoadGuard' has a wrong offset!");
static_assert(offsetof(UFortUpgradeScreenBase, Details) == 0x000338, "Member 'UFortUpgradeScreenBase::Details' has a wrong offset!");
static_assert(offsetof(UFortUpgradeScreenBase, TabToNodeTypeMap) == 0x000340, "Member 'UFortUpgradeScreenBase::TabToNodeTypeMap' has a wrong offset!");
static_assert(offsetof(UFortUpgradeScreenBase, UpgradesRespecToken) == 0x000390, "Member 'UFortUpgradeScreenBase::UpgradesRespecToken' has a wrong offset!");

// Class FortniteUI.FortUpgradeTileBase
// 0x0010 (0x0B40 - 0x0B30)
class UFortUpgradeTileBase final : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortUpgradeInfo*                       UpgradeInfo;                                       // 0x0B38(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnDataRefresh(bool bUpgrade);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUpgradeTileBase">();
	}
	static class UFortUpgradeTileBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUpgradeTileBase>();
	}
};
static_assert(alignof(UFortUpgradeTileBase) == 0x000008, "Wrong alignment on UFortUpgradeTileBase");
static_assert(sizeof(UFortUpgradeTileBase) == 0x000B40, "Wrong size on UFortUpgradeTileBase");
static_assert(offsetof(UFortUpgradeTileBase, UpgradeInfo) == 0x000B38, "Member 'UFortUpgradeTileBase::UpgradeInfo' has a wrong offset!");

// Class FortniteUI.FortUserChoiceWidget
// 0x0000 (0x0240 - 0x0240)
class UFortUserChoiceWidget final : public UFortUserWidget
{
public:
	void SetChoices(const struct FChoiceData& ChoiceItems);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUserChoiceWidget">();
	}
	static class UFortUserChoiceWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUserChoiceWidget>();
	}
};
static_assert(alignof(UFortUserChoiceWidget) == 0x000008, "Wrong alignment on UFortUserChoiceWidget");
static_assert(sizeof(UFortUserChoiceWidget) == 0x000240, "Wrong size on UFortUserChoiceWidget");

// Class FortniteUI.FortVariantEntryBox
// 0x0050 (0x0228 - 0x01D8)
class UFortVariantEntryBox final : public UDynamicEntryBox
{
public:
	class UAthenaCosmeticAccountItem*             CurrentItem;                                       // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAthenaCosmeticItemDefinition*          CurrentItemDef;                                    // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FMcpVariantChannelInfo>         CurrentItemVariants;                               // 0x01E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F8[0x30];                                     // 0x01F8(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVariantEntryBox">();
	}
	static class UFortVariantEntryBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVariantEntryBox>();
	}
};
static_assert(alignof(UFortVariantEntryBox) == 0x000008, "Wrong alignment on UFortVariantEntryBox");
static_assert(sizeof(UFortVariantEntryBox) == 0x000228, "Wrong size on UFortVariantEntryBox");
static_assert(offsetof(UFortVariantEntryBox, CurrentItem) == 0x0001D8, "Member 'UFortVariantEntryBox::CurrentItem' has a wrong offset!");
static_assert(offsetof(UFortVariantEntryBox, CurrentItemDef) == 0x0001E0, "Member 'UFortVariantEntryBox::CurrentItemDef' has a wrong offset!");
static_assert(offsetof(UFortVariantEntryBox, CurrentItemVariants) == 0x0001E8, "Member 'UFortVariantEntryBox::CurrentItemVariants' has a wrong offset!");

// Class FortniteUI.FortVariantTileButton
// 0x0040 (0x0B70 - 0x0B30)
class UFortVariantTileButton : public UCommonButton
{
public:
	uint8                                         Pad_B30[0x8];                                      // 0x0B30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LockedTintColor;                                   // 0x0B38(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   IconParamName;                                     // 0x0B48(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UVariantObject*                         SourceObject;                                      // 0x0B50(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 Image_VariantDisplay;                              // 0x0B58(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 Image_Locked;                                      // 0x0B60(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 Image_Active;                                      // 0x0B68(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVariantTileButton">();
	}
	static class UFortVariantTileButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVariantTileButton>();
	}
};
static_assert(alignof(UFortVariantTileButton) == 0x000008, "Wrong alignment on UFortVariantTileButton");
static_assert(sizeof(UFortVariantTileButton) == 0x000B70, "Wrong size on UFortVariantTileButton");
static_assert(offsetof(UFortVariantTileButton, LockedTintColor) == 0x000B38, "Member 'UFortVariantTileButton::LockedTintColor' has a wrong offset!");
static_assert(offsetof(UFortVariantTileButton, IconParamName) == 0x000B48, "Member 'UFortVariantTileButton::IconParamName' has a wrong offset!");
static_assert(offsetof(UFortVariantTileButton, SourceObject) == 0x000B50, "Member 'UFortVariantTileButton::SourceObject' has a wrong offset!");
static_assert(offsetof(UFortVariantTileButton, Image_VariantDisplay) == 0x000B58, "Member 'UFortVariantTileButton::Image_VariantDisplay' has a wrong offset!");
static_assert(offsetof(UFortVariantTileButton, Image_Locked) == 0x000B60, "Member 'UFortVariantTileButton::Image_Locked' has a wrong offset!");
static_assert(offsetof(UFortVariantTileButton, Image_Active) == 0x000B68, "Member 'UFortVariantTileButton::Image_Active' has a wrong offset!");

// Class FortniteUI.FortVariantTileSelector
// 0x0020 (0x02C0 - 0x02A0)
class UFortVariantTileSelector : public UFortVariantEditorWidgetBase
{
public:
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTileView*                        Tile_VariantOptions;                               // 0x02A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_VariantName;                                  // 0x02B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UVariantObject*                         CurrentSelectedVariant;                            // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVariantTileSelector">();
	}
	static class UFortVariantTileSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVariantTileSelector>();
	}
};
static_assert(alignof(UFortVariantTileSelector) == 0x000008, "Wrong alignment on UFortVariantTileSelector");
static_assert(sizeof(UFortVariantTileSelector) == 0x0002C0, "Wrong size on UFortVariantTileSelector");
static_assert(offsetof(UFortVariantTileSelector, Tile_VariantOptions) == 0x0002A8, "Member 'UFortVariantTileSelector::Tile_VariantOptions' has a wrong offset!");
static_assert(offsetof(UFortVariantTileSelector, Text_VariantName) == 0x0002B0, "Member 'UFortVariantTileSelector::Text_VariantName' has a wrong offset!");
static_assert(offsetof(UFortVariantTileSelector, CurrentSelectedVariant) == 0x0002B8, "Member 'UFortVariantTileSelector::CurrentSelectedVariant' has a wrong offset!");

// Class FortniteUI.FortVehicleInfoIndicatorWidget
// 0x0010 (0x02B0 - 0x02A0)
class UFortVehicleInfoIndicatorWidget final : public UFortActorIndicatorWidget
{
public:
	TWeakObjectPtr<class AFortAthenaVehicle>      CurrentVehicle;                                    // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimeToHideWhenDamaged;                             // 0x02A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnVehicleChanged();
	void OnVehicleHealthChanged();
	void SetVehicle(class AFortAthenaVehicle* NewVehicle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleInfoIndicatorWidget">();
	}
	static class UFortVehicleInfoIndicatorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVehicleInfoIndicatorWidget>();
	}
};
static_assert(alignof(UFortVehicleInfoIndicatorWidget) == 0x000008, "Wrong alignment on UFortVehicleInfoIndicatorWidget");
static_assert(sizeof(UFortVehicleInfoIndicatorWidget) == 0x0002B0, "Wrong size on UFortVehicleInfoIndicatorWidget");
static_assert(offsetof(UFortVehicleInfoIndicatorWidget, CurrentVehicle) == 0x0002A0, "Member 'UFortVehicleInfoIndicatorWidget::CurrentVehicle' has a wrong offset!");
static_assert(offsetof(UFortVehicleInfoIndicatorWidget, TimeToHideWhenDamaged) == 0x0002A8, "Member 'UFortVehicleInfoIndicatorWidget::TimeToHideWhenDamaged' has a wrong offset!");

// Class FortniteUI.FortVideoDisplayData
// 0x0070 (0x00A0 - 0x0030)
class UFortVideoDisplayData final : public UDataAsset
{
public:
	class UMediaPlayer*                           FortVideoPlayer;                                   // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMediaSubtitlesPlayer*              SubtitlePlayer;                                    // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    LocaleAudioTrackIndexMap;                          // 0x0040(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortVideoInfo>                 Videos;                                            // 0x0090(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVideoDisplayData">();
	}
	static class UFortVideoDisplayData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVideoDisplayData>();
	}
};
static_assert(alignof(UFortVideoDisplayData) == 0x000008, "Wrong alignment on UFortVideoDisplayData");
static_assert(sizeof(UFortVideoDisplayData) == 0x0000A0, "Wrong size on UFortVideoDisplayData");
static_assert(offsetof(UFortVideoDisplayData, FortVideoPlayer) == 0x000030, "Member 'UFortVideoDisplayData::FortVideoPlayer' has a wrong offset!");
static_assert(offsetof(UFortVideoDisplayData, SubtitlePlayer) == 0x000038, "Member 'UFortVideoDisplayData::SubtitlePlayer' has a wrong offset!");
static_assert(offsetof(UFortVideoDisplayData, LocaleAudioTrackIndexMap) == 0x000040, "Member 'UFortVideoDisplayData::LocaleAudioTrackIndexMap' has a wrong offset!");
static_assert(offsetof(UFortVideoDisplayData, Videos) == 0x000090, "Member 'UFortVideoDisplayData::Videos' has a wrong offset!");

// Class FortniteUI.FortVideoOptions
// 0x0000 (0x0288 - 0x0288)
class UFortVideoOptions : public UFortOptionsTab
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVideoOptions">();
	}
	static class UFortVideoOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVideoOptions>();
	}
};
static_assert(alignof(UFortVideoOptions) == 0x000008, "Wrong alignment on UFortVideoOptions");
static_assert(sizeof(UFortVideoOptions) == 0x000288, "Wrong size on UFortVideoOptions");

// Class FortniteUI.FortVideoPlayerWidget
// 0x00A0 (0x02E0 - 0x0240)
class UFortVideoPlayerWidget : public UFortUserWidget
{
public:
	bool                                          bAutoPlayOnOpen;                                   // 0x0240(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bLoop;                                             // 0x0241(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShowSubtitles;                                    // 0x0242(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bNoAudio;                                          // 0x0243(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_244[0x74];                                     // 0x0244(0x0074)(Fixing Size After Last Property [ Dumper-7 ])
	class UMediaPlayer*                           VideoPlayer;                                       // 0x02B8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMediaSoundComponent*                   SoundComponent;                                    // 0x02C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortMediaSubtitlesPlayer*              SubtitlePlayer;                                    // 0x02C8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 Image_VideoTexture;                                // 0x02D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USubtitleDisplay*                       Subtitles;                                         // 0x02D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void DynamicHandleOnMediaOpened(const class FString& OpenedUrl);
	void DynamicHandleOnOpenMediaFailed(const class FString& FailedUrl);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVideoPlayerWidget">();
	}
	static class UFortVideoPlayerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVideoPlayerWidget>();
	}
};
static_assert(alignof(UFortVideoPlayerWidget) == 0x000008, "Wrong alignment on UFortVideoPlayerWidget");
static_assert(sizeof(UFortVideoPlayerWidget) == 0x0002E0, "Wrong size on UFortVideoPlayerWidget");
static_assert(offsetof(UFortVideoPlayerWidget, bAutoPlayOnOpen) == 0x000240, "Member 'UFortVideoPlayerWidget::bAutoPlayOnOpen' has a wrong offset!");
static_assert(offsetof(UFortVideoPlayerWidget, bLoop) == 0x000241, "Member 'UFortVideoPlayerWidget::bLoop' has a wrong offset!");
static_assert(offsetof(UFortVideoPlayerWidget, bShowSubtitles) == 0x000242, "Member 'UFortVideoPlayerWidget::bShowSubtitles' has a wrong offset!");
static_assert(offsetof(UFortVideoPlayerWidget, bNoAudio) == 0x000243, "Member 'UFortVideoPlayerWidget::bNoAudio' has a wrong offset!");
static_assert(offsetof(UFortVideoPlayerWidget, VideoPlayer) == 0x0002B8, "Member 'UFortVideoPlayerWidget::VideoPlayer' has a wrong offset!");
static_assert(offsetof(UFortVideoPlayerWidget, SoundComponent) == 0x0002C0, "Member 'UFortVideoPlayerWidget::SoundComponent' has a wrong offset!");
static_assert(offsetof(UFortVideoPlayerWidget, SubtitlePlayer) == 0x0002C8, "Member 'UFortVideoPlayerWidget::SubtitlePlayer' has a wrong offset!");
static_assert(offsetof(UFortVideoPlayerWidget, Image_VideoTexture) == 0x0002D0, "Member 'UFortVideoPlayerWidget::Image_VideoTexture' has a wrong offset!");
static_assert(offsetof(UFortVideoPlayerWidget, Subtitles) == 0x0002D8, "Member 'UFortVideoPlayerWidget::Subtitles' has a wrong offset!");

// Class FortniteUI.FortVoiceChatStatusIcon
// 0x00E8 (0x01F0 - 0x0108)
class UFortVoiceChatStatusIcon final : public UWidget
{
public:
	struct FVector2D                              DesiredSize;                                       // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     VoiceChatStatusMaterial;                           // 0x0110(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSlateBrush                            StatusBrush;                                       // 0x0118(0x0088)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A0[0x50];                                     // 0x01A0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVoiceChatStatusIcon">();
	}
	static class UFortVoiceChatStatusIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVoiceChatStatusIcon>();
	}
};
static_assert(alignof(UFortVoiceChatStatusIcon) == 0x000008, "Wrong alignment on UFortVoiceChatStatusIcon");
static_assert(sizeof(UFortVoiceChatStatusIcon) == 0x0001F0, "Wrong size on UFortVoiceChatStatusIcon");
static_assert(offsetof(UFortVoiceChatStatusIcon, DesiredSize) == 0x000108, "Member 'UFortVoiceChatStatusIcon::DesiredSize' has a wrong offset!");
static_assert(offsetof(UFortVoiceChatStatusIcon, VoiceChatStatusMaterial) == 0x000110, "Member 'UFortVoiceChatStatusIcon::VoiceChatStatusMaterial' has a wrong offset!");
static_assert(offsetof(UFortVoiceChatStatusIcon, StatusBrush) == 0x000118, "Member 'UFortVoiceChatStatusIcon::StatusBrush' has a wrong offset!");

// Class FortniteUI.FortWebLoginWidget
// 0x0008 (0x0328 - 0x0320)
class UFortWebLoginWidget : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DismissWidget();
	void DisplayWidget(class UWidget* WebWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortWebLoginWidget">();
	}
	static class UFortWebLoginWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortWebLoginWidget>();
	}
};
static_assert(alignof(UFortWebLoginWidget) == 0x000008, "Wrong alignment on UFortWebLoginWidget");
static_assert(sizeof(UFortWebLoginWidget) == 0x000328, "Wrong size on UFortWebLoginWidget");

// Class FortniteUI.FortWorkerSetBonusIcon
// 0x0018 (0x0250 - 0x0238)
class UFortWorkerSetBonusIcon final : public UCommonUserWidget
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0238(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBrushSize                                ImageSize;                                         // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 Icon;                                              // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void HandleDifferentGameplayTagSetBP();
	void SetGameplayTag(const struct FGameplayTag& InGameplayTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortWorkerSetBonusIcon">();
	}
	static class UFortWorkerSetBonusIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortWorkerSetBonusIcon>();
	}
};
static_assert(alignof(UFortWorkerSetBonusIcon) == 0x000008, "Wrong alignment on UFortWorkerSetBonusIcon");
static_assert(sizeof(UFortWorkerSetBonusIcon) == 0x000250, "Wrong size on UFortWorkerSetBonusIcon");
static_assert(offsetof(UFortWorkerSetBonusIcon, GameplayTag) == 0x000238, "Member 'UFortWorkerSetBonusIcon::GameplayTag' has a wrong offset!");
static_assert(offsetof(UFortWorkerSetBonusIcon, ImageSize) == 0x000240, "Member 'UFortWorkerSetBonusIcon::ImageSize' has a wrong offset!");
static_assert(offsetof(UFortWorkerSetBonusIcon, Icon) == 0x000248, "Member 'UFortWorkerSetBonusIcon::Icon' has a wrong offset!");

// Class FortniteUI.FriendCodeListBase
// 0x0000 (0x0320 - 0x0320)
class UFriendCodeListBase final : public UCommonActivatablePanel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendCodeListBase">();
	}
	static class UFriendCodeListBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendCodeListBase>();
	}
};
static_assert(alignof(UFriendCodeListBase) == 0x000008, "Wrong alignment on UFriendCodeListBase");
static_assert(sizeof(UFriendCodeListBase) == 0x000320, "Wrong size on UFriendCodeListBase");

// Class FortniteUI.FriendCodeShareButtonBase
// 0x0038 (0x0B68 - 0x0B30)
class UFriendCodeShareButtonBase : public UCommonButton
{
public:
	TArray<struct FFriendCode>                    BacchusFriendCodes;                                // 0x0B30(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortFriendCodeListBase>    FriendCodeListClass;                               // 0x0B40(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       NumSharesRemainingText;                            // 0x0B48(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextBlock*                             InviteCodeMessage;                                 // 0x0B50(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B58[0x10];                                     // 0x0B58(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnFriendCodeIssued(bool bSuccess, const struct FFriendCode& FriendCode);
	void OnNumSharesUpdated();
	void OnQueryUnredeemedFriendCodesComplete(bool bSuccess, const TArray<struct FFriendCode>& FriendCodes);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendCodeShareButtonBase">();
	}
	static class UFriendCodeShareButtonBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendCodeShareButtonBase>();
	}
};
static_assert(alignof(UFriendCodeShareButtonBase) == 0x000008, "Wrong alignment on UFriendCodeShareButtonBase");
static_assert(sizeof(UFriendCodeShareButtonBase) == 0x000B68, "Wrong size on UFriendCodeShareButtonBase");
static_assert(offsetof(UFriendCodeShareButtonBase, BacchusFriendCodes) == 0x000B30, "Member 'UFriendCodeShareButtonBase::BacchusFriendCodes' has a wrong offset!");
static_assert(offsetof(UFriendCodeShareButtonBase, FriendCodeListClass) == 0x000B40, "Member 'UFriendCodeShareButtonBase::FriendCodeListClass' has a wrong offset!");
static_assert(offsetof(UFriendCodeShareButtonBase, NumSharesRemainingText) == 0x000B48, "Member 'UFriendCodeShareButtonBase::NumSharesRemainingText' has a wrong offset!");
static_assert(offsetof(UFriendCodeShareButtonBase, InviteCodeMessage) == 0x000B50, "Member 'UFriendCodeShareButtonBase::InviteCodeMessage' has a wrong offset!");

// Class FortniteUI.HeistWidgetBase
// 0x0060 (0x02C8 - 0x0268)
class UHeistWidgetBase final : public UFortHUDElementWidget
{
public:
	uint8                                         Pad_268[0x20];                                     // 0x0268(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	EHeistExitCraftUIState                        CurrExitCraftUIState;                              // 0x0288(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisplayBlingRow;                                  // 0x0289(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanDisplayVanUI;                                  // 0x028A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_28B[0x1];                                      // 0x028B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           SafeSupplyDropTag;                                 // 0x028C(0x0008)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           BlingItemTag;                                      // 0x0294(0x0008)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           CarryingBlingItemTag;                              // 0x029C(0x0008)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrBlingSupplyDropCount;                          // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrBlingItemCount;                                // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrBlingEnemyCount;                               // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrBlingAllyCount;                                // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B4[0x14];                                     // 0x02B4(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDisplayBlingUI(bool bDisplay);
	void OnDisplayExitCraftUI(bool bDisplay);
	void OnExitCraftsUIChanged(EHeistExitCraftUIState NewState);
	void OnHandleSpectatingChanged(class AFortPlayerStateZone* SpectatingTarget);
	void OnMutatorObjectUpdated(const struct FGameplayMutatorObjectDataArray& MutatorArray);
	void OnSpecialActorAdded(const struct FSpecialActorRepData& SpecialActorData);
	void OnSpecialActorRemoved(const struct FSpecialActorRepData& SpecialActorData);
	void OnUpdateBlingIcon(const struct FHeistBlingIconData& BlingIconData);
	void OnUpdateExitCraftIcon(const struct FHeistExitCraftIconData& ExitCraftIconData);
	void OnUpdateStateText(const class FText& StateText, EHeistExitCraftUIState CurrState);
	void OnUpdateStateTimeText(const class FText& TimeText, EHeistExitCraftUIState CurrState);
	void SetExitCraftUIState(EHeistExitCraftUIState NewState);
	void UpdateAllUI();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeistWidgetBase">();
	}
	static class UHeistWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeistWidgetBase>();
	}
};
static_assert(alignof(UHeistWidgetBase) == 0x000008, "Wrong alignment on UHeistWidgetBase");
static_assert(sizeof(UHeistWidgetBase) == 0x0002C8, "Wrong size on UHeistWidgetBase");
static_assert(offsetof(UHeistWidgetBase, CurrExitCraftUIState) == 0x000288, "Member 'UHeistWidgetBase::CurrExitCraftUIState' has a wrong offset!");
static_assert(offsetof(UHeistWidgetBase, bDisplayBlingRow) == 0x000289, "Member 'UHeistWidgetBase::bDisplayBlingRow' has a wrong offset!");
static_assert(offsetof(UHeistWidgetBase, bCanDisplayVanUI) == 0x00028A, "Member 'UHeistWidgetBase::bCanDisplayVanUI' has a wrong offset!");
static_assert(offsetof(UHeistWidgetBase, SafeSupplyDropTag) == 0x00028C, "Member 'UHeistWidgetBase::SafeSupplyDropTag' has a wrong offset!");
static_assert(offsetof(UHeistWidgetBase, BlingItemTag) == 0x000294, "Member 'UHeistWidgetBase::BlingItemTag' has a wrong offset!");
static_assert(offsetof(UHeistWidgetBase, CarryingBlingItemTag) == 0x00029C, "Member 'UHeistWidgetBase::CarryingBlingItemTag' has a wrong offset!");
static_assert(offsetof(UHeistWidgetBase, CurrBlingSupplyDropCount) == 0x0002A4, "Member 'UHeistWidgetBase::CurrBlingSupplyDropCount' has a wrong offset!");
static_assert(offsetof(UHeistWidgetBase, CurrBlingItemCount) == 0x0002A8, "Member 'UHeistWidgetBase::CurrBlingItemCount' has a wrong offset!");
static_assert(offsetof(UHeistWidgetBase, CurrBlingEnemyCount) == 0x0002AC, "Member 'UHeistWidgetBase::CurrBlingEnemyCount' has a wrong offset!");
static_assert(offsetof(UHeistWidgetBase, CurrBlingAllyCount) == 0x0002B0, "Member 'UHeistWidgetBase::CurrBlingAllyCount' has a wrong offset!");

// Class FortniteUI.HUDLayoutToolContext
// 0x01B8 (0x01E0 - 0x0028)
class UHUDLayoutToolContext final : public UBlueprintContextBase
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnPropertyMenuStateChangeDelegate;                 // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnCloseLayoutTool;                                 // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnOpenLayoutToolDelegate;                          // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnRecenterPressedDelegate;                         // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLayoutDirtyUpdated;                              // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnViewOffsetUpdatedDelegate;                       // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnNewViewOffsetLerpDelegate;                       // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnHUDLayoutModeChangeDelegate;                     // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnWidgetSelectedDelegate;                          // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnOpenCloseFireModePanelDelegate;                  // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFireModeChangeDelegate;                          // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         HudLayoutSnappingDistance;                         // 0x00E0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0xFC];                                      // 0x00E4(0x00FC)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearLayout(ELayoutDataType LayoutType, const class FString& Reason);
	void CloseLayoutTool(const class FString& Reason);
	void LoadLayout(ELayoutDataType LayoutType, const class FString& Reason);
	void MarkAllDirty();
	void OnPanZoomWidgetClick();
	void OnRecenterPressed();
	void OnToolOpened(const class FString& Reason);
	void OnViewOffsetUpdated();
	void ResetAllWidgets();
	void ResetDirtyWidgets();
	void ResetSelectedWidgetProperties();
	void SaveLayout(ELayoutDataType LayoutType, const class FString& Reason);
	void SetCustomFireMode(bool bAutofireEnabled, bool bForceTouchEnabled, bool bTapToShootEnabled, bool bAlwaysShowDedicatedButton);
	void SetFireMode(EFireModeType NewFireMode);
	void SetFireModeOpenState(bool bNewlyOpened);
	void SetLayoutVisibility(const bool bShowCombat, const bool bShowBuild, const bool bShowEdit, const bool bShowCreative);
	void SetPropertyMenuState(bool bNewlyOpen);
	void SetSelectedWidget(class UHUDLayoutToolPlacementWidget* NewSelectedWidget);
	void StartLerping(const struct FVector2D& NewViewOffset);

	bool CloudHUDAvailable() const;
	bool CloudHUDLayoutEnabled() const;
	struct FVector2D GetCurrentOffset() const;
	void GetFireMode(EFireModeType* FireMode, bool* bAutofireEnabled, bool* bForceTouchEnabled, bool* bTapToShootEnabled, bool* bAlwaysShowDedicatedButton) const;
	bool GetFireModeOpenState() const;
	bool GetIsLerping() const;
	bool GetIsPanning() const;
	bool GetPropertyMenuState() const;
	bool HasSavedLayout(ELayoutDataType LayoutType) const;
	bool HasSelectedWidget() const;
	bool IsCentered() const;
	bool IsFireModeAvailable(EFireModeType NewFireMode) const;
	bool IsLayoutDirty() const;
	bool IsSelectedWidgetUnderPanel() const;
	bool ShouldShowSelectedWidgetProperties() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDLayoutToolContext">();
	}
	static class UHUDLayoutToolContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDLayoutToolContext>();
	}
};
static_assert(alignof(UHUDLayoutToolContext) == 0x000008, "Wrong alignment on UHUDLayoutToolContext");
static_assert(sizeof(UHUDLayoutToolContext) == 0x0001E0, "Wrong size on UHUDLayoutToolContext");
static_assert(offsetof(UHUDLayoutToolContext, OnPropertyMenuStateChangeDelegate) == 0x000030, "Member 'UHUDLayoutToolContext::OnPropertyMenuStateChangeDelegate' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolContext, OnCloseLayoutTool) == 0x000040, "Member 'UHUDLayoutToolContext::OnCloseLayoutTool' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolContext, OnOpenLayoutToolDelegate) == 0x000050, "Member 'UHUDLayoutToolContext::OnOpenLayoutToolDelegate' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolContext, OnRecenterPressedDelegate) == 0x000060, "Member 'UHUDLayoutToolContext::OnRecenterPressedDelegate' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolContext, OnLayoutDirtyUpdated) == 0x000070, "Member 'UHUDLayoutToolContext::OnLayoutDirtyUpdated' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolContext, OnViewOffsetUpdatedDelegate) == 0x000080, "Member 'UHUDLayoutToolContext::OnViewOffsetUpdatedDelegate' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolContext, OnNewViewOffsetLerpDelegate) == 0x000090, "Member 'UHUDLayoutToolContext::OnNewViewOffsetLerpDelegate' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolContext, OnHUDLayoutModeChangeDelegate) == 0x0000A0, "Member 'UHUDLayoutToolContext::OnHUDLayoutModeChangeDelegate' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolContext, OnWidgetSelectedDelegate) == 0x0000B0, "Member 'UHUDLayoutToolContext::OnWidgetSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolContext, OnOpenCloseFireModePanelDelegate) == 0x0000C0, "Member 'UHUDLayoutToolContext::OnOpenCloseFireModePanelDelegate' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolContext, OnFireModeChangeDelegate) == 0x0000D0, "Member 'UHUDLayoutToolContext::OnFireModeChangeDelegate' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolContext, HudLayoutSnappingDistance) == 0x0000E0, "Member 'UHUDLayoutToolContext::HudLayoutSnappingDistance' has a wrong offset!");

// Class FortniteUI.HUDLayoutToolFireModePanel
// 0x0018 (0x0360 - 0x0348)
class UHUDLayoutToolFireModePanel : public UFortActivatablePanel
{
public:
	bool                                          bSkipFireModeOptionTutorial;                       // 0x0348(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHUDLayoutToolFireModeButton*>   FireModeButtons;                                   // 0x0350(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void SetOpenState(bool bNewOpenState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDLayoutToolFireModePanel">();
	}
	static class UHUDLayoutToolFireModePanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDLayoutToolFireModePanel>();
	}
};
static_assert(alignof(UHUDLayoutToolFireModePanel) == 0x000008, "Wrong alignment on UHUDLayoutToolFireModePanel");
static_assert(sizeof(UHUDLayoutToolFireModePanel) == 0x000360, "Wrong size on UHUDLayoutToolFireModePanel");
static_assert(offsetof(UHUDLayoutToolFireModePanel, bSkipFireModeOptionTutorial) == 0x000348, "Member 'UHUDLayoutToolFireModePanel::bSkipFireModeOptionTutorial' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolFireModePanel, FireModeButtons) == 0x000350, "Member 'UHUDLayoutToolFireModePanel::FireModeButtons' has a wrong offset!");

// Class FortniteUI.HUDLayoutToolFireModeButton
// 0x0050 (0x0288 - 0x0238)
class UHUDLayoutToolFireModeButton : public UCommonUserWidget
{
public:
	EFireModeType                                 FireModeType;                                      // 0x0238(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FireModeName;                                      // 0x0240(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   FireModeDescription;                               // 0x0258(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UTexture2D*                             FireModeImage;                                     // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButton*                          SelectionButton;                                   // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortMovieWidget*                       MovieWidget;                                       // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnDeselected();
	void OnSelected();

	class FText GetFireModeDescription() const;
	EFireModeType GetFireModeType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDLayoutToolFireModeButton">();
	}
	static class UHUDLayoutToolFireModeButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDLayoutToolFireModeButton>();
	}
};
static_assert(alignof(UHUDLayoutToolFireModeButton) == 0x000008, "Wrong alignment on UHUDLayoutToolFireModeButton");
static_assert(sizeof(UHUDLayoutToolFireModeButton) == 0x000288, "Wrong size on UHUDLayoutToolFireModeButton");
static_assert(offsetof(UHUDLayoutToolFireModeButton, FireModeType) == 0x000238, "Member 'UHUDLayoutToolFireModeButton::FireModeType' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolFireModeButton, FireModeName) == 0x000240, "Member 'UHUDLayoutToolFireModeButton::FireModeName' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolFireModeButton, FireModeDescription) == 0x000258, "Member 'UHUDLayoutToolFireModeButton::FireModeDescription' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolFireModeButton, FireModeImage) == 0x000270, "Member 'UHUDLayoutToolFireModeButton::FireModeImage' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolFireModeButton, SelectionButton) == 0x000278, "Member 'UHUDLayoutToolFireModeButton::SelectionButton' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolFireModeButton, MovieWidget) == 0x000280, "Member 'UHUDLayoutToolFireModeButton::MovieWidget' has a wrong offset!");

// Class FortniteUI.HUDLayoutToolInterface
// 0x0000 (0x0028 - 0x0028)
class IHUDLayoutToolInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDLayoutToolInterface">();
	}
	static class IHUDLayoutToolInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IHUDLayoutToolInterface>();
	}
};
static_assert(alignof(IHUDLayoutToolInterface) == 0x000008, "Wrong alignment on IHUDLayoutToolInterface");
static_assert(sizeof(IHUDLayoutToolInterface) == 0x000028, "Wrong size on IHUDLayoutToolInterface");

// Class FortniteUI.HUDLayoutToolPanZoomWidget
// 0x00C0 (0x01E0 - 0x0120)
class UHUDLayoutToolPanZoomWidget final : public UContentWidget
{
public:
	float                                         LerpSpeed;                                         // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecenterRadius;                                    // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0xB8];                                     // 0x0128(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Recenter();
	void StartOffsetLerp(const struct FVector2D& NewTargetOffset);
	void StopOffsetLerp();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDLayoutToolPanZoomWidget">();
	}
	static class UHUDLayoutToolPanZoomWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDLayoutToolPanZoomWidget>();
	}
};
static_assert(alignof(UHUDLayoutToolPanZoomWidget) == 0x000008, "Wrong alignment on UHUDLayoutToolPanZoomWidget");
static_assert(sizeof(UHUDLayoutToolPanZoomWidget) == 0x0001E0, "Wrong size on UHUDLayoutToolPanZoomWidget");
static_assert(offsetof(UHUDLayoutToolPanZoomWidget, LerpSpeed) == 0x000120, "Member 'UHUDLayoutToolPanZoomWidget::LerpSpeed' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolPanZoomWidget, RecenterRadius) == 0x000124, "Member 'UHUDLayoutToolPanZoomWidget::RecenterRadius' has a wrong offset!");

// Class FortniteUI.HUDLayoutToolPanZoomWidgetSlot
// 0x0010 (0x0048 - 0x0038)
class UHUDLayoutToolPanZoomWidgetSlot final : public UPanelSlot
{
public:
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDLayoutToolPanZoomWidgetSlot">();
	}
	static class UHUDLayoutToolPanZoomWidgetSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDLayoutToolPanZoomWidgetSlot>();
	}
};
static_assert(alignof(UHUDLayoutToolPanZoomWidgetSlot) == 0x000008, "Wrong alignment on UHUDLayoutToolPanZoomWidgetSlot");
static_assert(sizeof(UHUDLayoutToolPanZoomWidgetSlot) == 0x000048, "Wrong size on UHUDLayoutToolPanZoomWidgetSlot");

// Class FortniteUI.HUDLayoutToolPlacementWidget
// 0x01A0 (0x03D8 - 0x0238)
class UHUDLayoutToolPlacementWidget final : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCanMoveWidget;                                    // 0x0240(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UBacchusHUDElement>         HUDElementClass;                                   // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           HUDElementTagOverride;                             // 0x0250(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBlockingWidget;                                 // 0x0258(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBorder*                                SelectionBorder;                                   // 0x0260(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBorder*                                DisplayScaleBorder;                                // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               MainOverlay;                                       // 0x0270(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanEditVisibilityOverride;                        // 0x0278(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Property_0;                                        // 0x027C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Property_1;                                        // 0x0280(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Property_2;                                        // 0x0284(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Property_3;                                        // 0x0288(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHUDLayoutDataEntry                    DefaultEntry;                                      // 0x0290(0x00E0)(Transient, Protected, NativeAccessSpecifierProtected)
	class UBacchusHUDElement*                     BacchusHUDElement;                                 // 0x0370(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_378[0x60];                                     // 0x0378(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInsideGridStateChange(bool bInsideGrid);
	void OnLayoutVisibilityChanged(bool bShowCombat, bool bShowBuild, bool bShowEdit, bool bShowCreative);
	void OnWidgetSelected(class UHUDLayoutToolPlacementWidget* InSelectedWidget);

	struct FGameplayTag BP_GetMobileVisualType() const;
	bool CanEditVisibility() const;
	bool GetIsOverlapping() const;
	bool IsInsideGrid() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDLayoutToolPlacementWidget">();
	}
	static class UHUDLayoutToolPlacementWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDLayoutToolPlacementWidget>();
	}
};
static_assert(alignof(UHUDLayoutToolPlacementWidget) == 0x000008, "Wrong alignment on UHUDLayoutToolPlacementWidget");
static_assert(sizeof(UHUDLayoutToolPlacementWidget) == 0x0003D8, "Wrong size on UHUDLayoutToolPlacementWidget");
static_assert(offsetof(UHUDLayoutToolPlacementWidget, bCanMoveWidget) == 0x000240, "Member 'UHUDLayoutToolPlacementWidget::bCanMoveWidget' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolPlacementWidget, HUDElementClass) == 0x000248, "Member 'UHUDLayoutToolPlacementWidget::HUDElementClass' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolPlacementWidget, HUDElementTagOverride) == 0x000250, "Member 'UHUDLayoutToolPlacementWidget::HUDElementTagOverride' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolPlacementWidget, bIsBlockingWidget) == 0x000258, "Member 'UHUDLayoutToolPlacementWidget::bIsBlockingWidget' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolPlacementWidget, SelectionBorder) == 0x000260, "Member 'UHUDLayoutToolPlacementWidget::SelectionBorder' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolPlacementWidget, DisplayScaleBorder) == 0x000268, "Member 'UHUDLayoutToolPlacementWidget::DisplayScaleBorder' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolPlacementWidget, MainOverlay) == 0x000270, "Member 'UHUDLayoutToolPlacementWidget::MainOverlay' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolPlacementWidget, bCanEditVisibilityOverride) == 0x000278, "Member 'UHUDLayoutToolPlacementWidget::bCanEditVisibilityOverride' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolPlacementWidget, Property_0) == 0x00027C, "Member 'UHUDLayoutToolPlacementWidget::Property_0' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolPlacementWidget, Property_1) == 0x000280, "Member 'UHUDLayoutToolPlacementWidget::Property_1' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolPlacementWidget, Property_2) == 0x000284, "Member 'UHUDLayoutToolPlacementWidget::Property_2' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolPlacementWidget, Property_3) == 0x000288, "Member 'UHUDLayoutToolPlacementWidget::Property_3' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolPlacementWidget, DefaultEntry) == 0x000290, "Member 'UHUDLayoutToolPlacementWidget::DefaultEntry' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolPlacementWidget, BacchusHUDElement) == 0x000370, "Member 'UHUDLayoutToolPlacementWidget::BacchusHUDElement' has a wrong offset!");

// Class FortniteUI.HUDLayoutToolPropertyPanel
// 0x0030 (0x0268 - 0x0238)
class UHUDLayoutToolPropertyPanel final : public UCommonUserWidget
{
public:
	class FText                                   DefaultTitle;                                      // 0x0238(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       PanelTitle;                                        // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_258[0x10];                                     // 0x0258(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnClose();
	void OnMenuStateChange(bool bNewlyOpen);
	void OnOpen();
	void OnWidgetSelected(class UHUDLayoutToolPlacementWidget* NewlySelectedWidget);

	bool GetIsOpen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDLayoutToolPropertyPanel">();
	}
	static class UHUDLayoutToolPropertyPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDLayoutToolPropertyPanel>();
	}
};
static_assert(alignof(UHUDLayoutToolPropertyPanel) == 0x000008, "Wrong alignment on UHUDLayoutToolPropertyPanel");
static_assert(sizeof(UHUDLayoutToolPropertyPanel) == 0x000268, "Wrong size on UHUDLayoutToolPropertyPanel");
static_assert(offsetof(UHUDLayoutToolPropertyPanel, DefaultTitle) == 0x000238, "Member 'UHUDLayoutToolPropertyPanel::DefaultTitle' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolPropertyPanel, PanelTitle) == 0x000250, "Member 'UHUDLayoutToolPropertyPanel::PanelTitle' has a wrong offset!");

// Class FortniteUI.HUDLayoutToolPropertyWidget
// 0x0030 (0x0268 - 0x0238)
class UHUDLayoutToolPropertyWidget final : public UCommonUserWidget
{
public:
	class UAnalogSlider*                          MySlider;                                          // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       Text_PropertyName;                                 // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       Text_PropertyValue;                                // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PropertyIndex;                                     // 0x0250(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHUDLayoutToolPlacementWidget> CurrentWidget;                                     // 0x0254(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25C[0xC];                                      // 0x025C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnNewBoolValue(bool bNewValue);
	void OnNewRotatorValue(int32 NormalizedValue);
	void OnNewSliderValue(float NormalizedValue);
	void OnWidgetSelected(class UHUDLayoutToolPlacementWidget* NewlySelectedWidget);
	void RefreshProperties();
	void SetBoolValue(bool bNewValue);
	void SetPropertyType(ELayoutPropertyType NewPropertyType);

	float GetCurrentValue() const;
	bool GetCurrentValueAsBool() const;
	int32 GetCurrentValueAsInt() const;
	TArray<class FText> GetRotatorLabels() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDLayoutToolPropertyWidget">();
	}
	static class UHUDLayoutToolPropertyWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDLayoutToolPropertyWidget>();
	}
};
static_assert(alignof(UHUDLayoutToolPropertyWidget) == 0x000008, "Wrong alignment on UHUDLayoutToolPropertyWidget");
static_assert(sizeof(UHUDLayoutToolPropertyWidget) == 0x000268, "Wrong size on UHUDLayoutToolPropertyWidget");
static_assert(offsetof(UHUDLayoutToolPropertyWidget, MySlider) == 0x000238, "Member 'UHUDLayoutToolPropertyWidget::MySlider' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolPropertyWidget, Text_PropertyName) == 0x000240, "Member 'UHUDLayoutToolPropertyWidget::Text_PropertyName' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolPropertyWidget, Text_PropertyValue) == 0x000248, "Member 'UHUDLayoutToolPropertyWidget::Text_PropertyValue' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolPropertyWidget, PropertyIndex) == 0x000250, "Member 'UHUDLayoutToolPropertyWidget::PropertyIndex' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolPropertyWidget, CurrentWidget) == 0x000254, "Member 'UHUDLayoutToolPropertyWidget::CurrentWidget' has a wrong offset!");

// Class FortniteUI.HUDLayoutToolProxy
// 0x0000 (0x0390 - 0x0390)
class UHUDLayoutToolProxy final : public UBacchusHUDElement
{
public:
	void BP_SetPropertyValue(int32 PropertyIndex, float NewValue);

	TArray<class FText> BP_GetMultiOptionLabels(int32 PropertyIndex) const;
	int32 BP_GetNumOfProperties() const;
	class FText BP_GetPropertyName(int32 PropertyIndex) const;
	void BP_GetPropertyRange(int32 PropertyIndex, float* OutMin, float* OutMax) const;
	ELayoutPropertyType BP_GetPropertyType(int32 PropertyIndex) const;
	float BP_GetPropertyValue(int32 PropertyIndex) const;
	class FText BP_GetWidgetName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDLayoutToolProxy">();
	}
	static class UHUDLayoutToolProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDLayoutToolProxy>();
	}
};
static_assert(alignof(UHUDLayoutToolProxy) == 0x000008, "Wrong alignment on UHUDLayoutToolProxy");
static_assert(sizeof(UHUDLayoutToolProxy) == 0x000390, "Wrong size on UHUDLayoutToolProxy");

// Class FortniteUI.HUDLayoutToolVisibilityWidget
// 0x0028 (0x0260 - 0x0238)
class UHUDLayoutToolVisibilityWidget final : public UCommonUserWidget
{
public:
	class UCommonButton*                          CombatVisibilityButton;                            // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButton*                          BuildVisibilityButton;                             // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButton*                          EditVisibilityButton;                              // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButton*                          CreativeVisibilityButton;                          // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHUDLayoutToolPlacementWidget> CurrentWidget;                                     // 0x0258(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnBuildClicked();
	void OnCombatClicked();
	void OnCreativeClicked();
	void OnEditClicked();
	void OnWidgetSelected(class UHUDLayoutToolPlacementWidget* NewlySelectedWidget);
	void Refresh();

	void GetVisibilities(EBacchusHUDStateType* CombatVisibility, EBacchusHUDStateType* BuildVisibility, EBacchusHUDStateType* EditVisibility, EBacchusHUDStateType* CreativeVisibility) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDLayoutToolVisibilityWidget">();
	}
	static class UHUDLayoutToolVisibilityWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDLayoutToolVisibilityWidget>();
	}
};
static_assert(alignof(UHUDLayoutToolVisibilityWidget) == 0x000008, "Wrong alignment on UHUDLayoutToolVisibilityWidget");
static_assert(sizeof(UHUDLayoutToolVisibilityWidget) == 0x000260, "Wrong size on UHUDLayoutToolVisibilityWidget");
static_assert(offsetof(UHUDLayoutToolVisibilityWidget, CombatVisibilityButton) == 0x000238, "Member 'UHUDLayoutToolVisibilityWidget::CombatVisibilityButton' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolVisibilityWidget, BuildVisibilityButton) == 0x000240, "Member 'UHUDLayoutToolVisibilityWidget::BuildVisibilityButton' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolVisibilityWidget, EditVisibilityButton) == 0x000248, "Member 'UHUDLayoutToolVisibilityWidget::EditVisibilityButton' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolVisibilityWidget, CreativeVisibilityButton) == 0x000250, "Member 'UHUDLayoutToolVisibilityWidget::CreativeVisibilityButton' has a wrong offset!");
static_assert(offsetof(UHUDLayoutToolVisibilityWidget, CurrentWidget) == 0x000258, "Member 'UHUDLayoutToolVisibilityWidget::CurrentWidget' has a wrong offset!");

// Class FortniteUI.MatchmakingInputIndicatorBase
// 0x0038 (0x0270 - 0x0238)
class UMatchmakingInputIndicatorBase : public UCommonUserWidget
{
public:
	EMatchmakingInputSource                       InputSource;                                       // 0x0238(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowLocalInputOnlyWhenDifferentFromDefault;       // 0x0239(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowRemoteInputOnlyWhenDifferentFromDefault;      // 0x023A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_23B[0x5];                                      // 0x023B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       RemotePlayerUniqueId;                              // 0x0240(0x0028)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECommonInputType                              LastInputType;                                     // 0x0268(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInputSourceTypeChanged(ECommonInputType InputType);
	void SetRemotePlayer(const struct FUniqueNetIdRepl& UniqueId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatchmakingInputIndicatorBase">();
	}
	static class UMatchmakingInputIndicatorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatchmakingInputIndicatorBase>();
	}
};
static_assert(alignof(UMatchmakingInputIndicatorBase) == 0x000008, "Wrong alignment on UMatchmakingInputIndicatorBase");
static_assert(sizeof(UMatchmakingInputIndicatorBase) == 0x000270, "Wrong size on UMatchmakingInputIndicatorBase");
static_assert(offsetof(UMatchmakingInputIndicatorBase, InputSource) == 0x000238, "Member 'UMatchmakingInputIndicatorBase::InputSource' has a wrong offset!");
static_assert(offsetof(UMatchmakingInputIndicatorBase, bShowLocalInputOnlyWhenDifferentFromDefault) == 0x000239, "Member 'UMatchmakingInputIndicatorBase::bShowLocalInputOnlyWhenDifferentFromDefault' has a wrong offset!");
static_assert(offsetof(UMatchmakingInputIndicatorBase, bShowRemoteInputOnlyWhenDifferentFromDefault) == 0x00023A, "Member 'UMatchmakingInputIndicatorBase::bShowRemoteInputOnlyWhenDifferentFromDefault' has a wrong offset!");
static_assert(offsetof(UMatchmakingInputIndicatorBase, RemotePlayerUniqueId) == 0x000240, "Member 'UMatchmakingInputIndicatorBase::RemotePlayerUniqueId' has a wrong offset!");
static_assert(offsetof(UMatchmakingInputIndicatorBase, LastInputType) == 0x000268, "Member 'UMatchmakingInputIndicatorBase::LastInputType' has a wrong offset!");

// Class FortniteUI.MatchmakingRegionAndPoolBase
// 0x0000 (0x0230 - 0x0230)
class UMatchmakingRegionAndPoolBase : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatchmakingRegionAndPoolBase">();
	}
	static class UMatchmakingRegionAndPoolBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatchmakingRegionAndPoolBase>();
	}
};
static_assert(alignof(UMatchmakingRegionAndPoolBase) == 0x000008, "Wrong alignment on UMatchmakingRegionAndPoolBase");
static_assert(sizeof(UMatchmakingRegionAndPoolBase) == 0x000230, "Wrong size on UMatchmakingRegionAndPoolBase");

// Class FortniteUI.MinigameWidgetBase
// 0x0020 (0x0288 - 0x0268)
class UMinigameWidgetBase : public UFortHUDElementWidget
{
public:
	bool                                          bDisplayCaptureObjectiveRow;                       // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortMinigame*                          CurrentMinigame;                                   // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_278[0x10];                                     // 0x0278(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FAthenaGameMessageData MakeMessageData(EAthenaGameMsgType MsgType, const class FText& MsgText, class USoundCue* MsgSound, float DisplayTime);

	void HideAllMinigameWidgetUI();
	void OnCurrentStateChangedDelegate(EFortMinigameState MinigameState);
	void OnDisplayCaptureObjectiveUI(bool bDisplay);
	void OnDisplayLeavingVolumeUI(bool bDisplay);
	void OnDisplayMiniGameAbortUI(bool bDisplay);
	void OnDisplayMinigameEndUI(bool bDisplay);
	void OnDisplayMinigameStartUI(bool bDisplay);
	void OnEnteredVolume(class APlayerState* ClientState, class AFortVolume* EnteredVolume);
	void OnExitingVolume(class APlayerState* ClientState, class AFortVolume* ExitingVolume);
	void OnExitVolume(class APlayerState* ClientState, class AFortVolume* ExitedVolume);
	void OnObjectiveUpdated();
	void OnPlayerStatUpdated();
	void OnStopExitingVolume(class APlayerState* ClientState, class AFortVolume* ExitedVolume);
	void ResetDisplayValues();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MinigameWidgetBase">();
	}
	static class UMinigameWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMinigameWidgetBase>();
	}
};
static_assert(alignof(UMinigameWidgetBase) == 0x000008, "Wrong alignment on UMinigameWidgetBase");
static_assert(sizeof(UMinigameWidgetBase) == 0x000288, "Wrong size on UMinigameWidgetBase");
static_assert(offsetof(UMinigameWidgetBase, bDisplayCaptureObjectiveRow) == 0x000268, "Member 'UMinigameWidgetBase::bDisplayCaptureObjectiveRow' has a wrong offset!");
static_assert(offsetof(UMinigameWidgetBase, CurrentMinigame) == 0x000270, "Member 'UMinigameWidgetBase::CurrentMinigame' has a wrong offset!");

// Class FortniteUI.MobileHUDButtonVisual
// 0x0028 (0x0270 - 0x0248)
class UMobileHUDButtonVisual final : public UMobileHUDVisual
{
public:
	float                                         ButtonSize;                                        // 0x0248(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ButtonDisplayScale;                                // 0x024C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPaperSprite*                           DefaultIcon;                                       // 0x0250(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                               OuterSizeBox;                                      // 0x0258(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                               InnerSizeBox;                                      // 0x0260(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Image_Icon;                                        // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetButtonSprite(class UPaperSprite* NewSprite);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MobileHUDButtonVisual">();
	}
	static class UMobileHUDButtonVisual* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMobileHUDButtonVisual>();
	}
};
static_assert(alignof(UMobileHUDButtonVisual) == 0x000008, "Wrong alignment on UMobileHUDButtonVisual");
static_assert(sizeof(UMobileHUDButtonVisual) == 0x000270, "Wrong size on UMobileHUDButtonVisual");
static_assert(offsetof(UMobileHUDButtonVisual, ButtonSize) == 0x000248, "Member 'UMobileHUDButtonVisual::ButtonSize' has a wrong offset!");
static_assert(offsetof(UMobileHUDButtonVisual, ButtonDisplayScale) == 0x00024C, "Member 'UMobileHUDButtonVisual::ButtonDisplayScale' has a wrong offset!");
static_assert(offsetof(UMobileHUDButtonVisual, DefaultIcon) == 0x000250, "Member 'UMobileHUDButtonVisual::DefaultIcon' has a wrong offset!");
static_assert(offsetof(UMobileHUDButtonVisual, OuterSizeBox) == 0x000258, "Member 'UMobileHUDButtonVisual::OuterSizeBox' has a wrong offset!");
static_assert(offsetof(UMobileHUDButtonVisual, InnerSizeBox) == 0x000260, "Member 'UMobileHUDButtonVisual::InnerSizeBox' has a wrong offset!");
static_assert(offsetof(UMobileHUDButtonVisual, Image_Icon) == 0x000268, "Member 'UMobileHUDButtonVisual::Image_Icon' has a wrong offset!");

// Class FortniteUI.FortQuestScreen
// 0x0000 (0x0348 - 0x0348)
class UFortQuestScreen : public UFortActivatablePanel
{
public:
	void ProcessPendingSeenQuestItems();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQuestScreen">();
	}
	static class UFortQuestScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQuestScreen>();
	}
};
static_assert(alignof(UFortQuestScreen) == 0x000008, "Wrong alignment on UFortQuestScreen");
static_assert(sizeof(UFortQuestScreen) == 0x000348, "Wrong size on UFortQuestScreen");

// Class FortniteUI.RemoteControlledPawnExpirationWidget
// 0x0010 (0x0278 - 0x0268)
class URemoteControlledPawnExpirationWidget final : public UFortHUDElementWidget
{
public:
	class UImage*                                 ExpirationProgressImage;                           // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_270[0x8];                                      // 0x0270(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPawnChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RemoteControlledPawnExpirationWidget">();
	}
	static class URemoteControlledPawnExpirationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URemoteControlledPawnExpirationWidget>();
	}
};
static_assert(alignof(URemoteControlledPawnExpirationWidget) == 0x000008, "Wrong alignment on URemoteControlledPawnExpirationWidget");
static_assert(sizeof(URemoteControlledPawnExpirationWidget) == 0x000278, "Wrong size on URemoteControlledPawnExpirationWidget");
static_assert(offsetof(URemoteControlledPawnExpirationWidget, ExpirationProgressImage) == 0x000268, "Member 'URemoteControlledPawnExpirationWidget::ExpirationProgressImage' has a wrong offset!");

// Class FortniteUI.FortSeasonPassLevelInfo
// 0x0018 (0x0040 - 0x0028)
class UFortSeasonPassLevelInfo final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  FortPC;                                            // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAthenaSeasonItemDefinition*            SeasonData;                                        // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	bool ContainsChaseReward(EAthenaSeasonRewardTrack Track) const;
	int32 GetLevel() const;
	float GetLevelProgress() const;
	int32 GetNumRewardItems(EAthenaSeasonRewardTrack Track) const;
	TArray<class UFortItem*> GetRewardItems(EAthenaSeasonRewardTrack Track) const;
	int32 GetSeasonPassMaxLevel() const;
	bool IsFreeClaimed() const;
	bool IsFreeUnlocked() const;
	bool IsPaidClaimed() const;
	bool IsPaidUnlocked() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSeasonPassLevelInfo">();
	}
	static class UFortSeasonPassLevelInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSeasonPassLevelInfo>();
	}
};
static_assert(alignof(UFortSeasonPassLevelInfo) == 0x000008, "Wrong alignment on UFortSeasonPassLevelInfo");
static_assert(sizeof(UFortSeasonPassLevelInfo) == 0x000040, "Wrong size on UFortSeasonPassLevelInfo");
static_assert(offsetof(UFortSeasonPassLevelInfo, FortPC) == 0x000030, "Member 'UFortSeasonPassLevelInfo::FortPC' has a wrong offset!");
static_assert(offsetof(UFortSeasonPassLevelInfo, SeasonData) == 0x000038, "Member 'UFortSeasonPassLevelInfo::SeasonData' has a wrong offset!");

// Class FortniteUI.SeasonPassLevelPanel
// 0x0018 (0x0338 - 0x0320)
class USeasonPassLevelPanel final : public UCommonActivatablePanel
{
public:
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortSeasonPassLevelInfo*               LevelInfo;                                         // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnLockedStatusChanged(bool FreeUnlocked, bool PaidUnlocked);
	void OnSetup();
	void Setup(class UFortSeasonPassLevelInfo* Info);

	class UFortSeasonPassLevelInfo* GetLevelInfo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SeasonPassLevelPanel">();
	}
	static class USeasonPassLevelPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<USeasonPassLevelPanel>();
	}
};
static_assert(alignof(USeasonPassLevelPanel) == 0x000008, "Wrong alignment on USeasonPassLevelPanel");
static_assert(sizeof(USeasonPassLevelPanel) == 0x000338, "Wrong size on USeasonPassLevelPanel");
static_assert(offsetof(USeasonPassLevelPanel, LevelInfo) == 0x000330, "Member 'USeasonPassLevelPanel::LevelInfo' has a wrong offset!");

// Class FortniteUI.SeasonPassPageWidget
// 0x0018 (0x0250 - 0x0238)
class USeasonPassPageWidget : public UCommonUserWidget
{
public:
	uint8                                         Pad_238[0x18];                                     // 0x0238(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ContainsLevel(int32 Level);
	void NavigatePageLeft();
	void NavigatePageRight();
	void OnBattlePassChanged();
	void ScreenShown();
	bool ShouldPlayInto(int32 FirstLevel);

	int32 GetCurrentSeasonNumber() const;
	bool OwnsSeasonPass() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SeasonPassPageWidget">();
	}
	static class USeasonPassPageWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USeasonPassPageWidget>();
	}
};
static_assert(alignof(USeasonPassPageWidget) == 0x000008, "Wrong alignment on USeasonPassPageWidget");
static_assert(sizeof(USeasonPassPageWidget) == 0x000250, "Wrong size on USeasonPassPageWidget");

// Class FortniteUI.SeasonPassScreenBase
// 0x0070 (0x04B0 - 0x0440)
class USeasonPassScreenBase : public UFortActivatablePanelWithItemPreview
{
public:
	uint8                                         Pad_440[0x8];                                      // 0x0440(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaSeasonItemDefinition*            SeasonData;                                        // 0x0448(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class USeasonPassLevelWidget*>         LevelWidgets;                                      // 0x0450(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<int32, class UFortSeasonPassLevelInfo*>  LevelInfos;                                        // 0x0460(0x0050)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	TArray<class USeasonPassLevelWidget*> GenerateLevelWidgets(class UFortSeasonPassLevelInfo* LevelInfo);
	void NavigateToLevel(int32 Level);
	void OnLevelsGenerated();
	void OnNavigateToLevel(int32 Level);
	void OnNoCurrentSeason();
	void OnSeasonPassChanged();
	void OnSetGiftability(bool bIsGiftable);
	void ScrollNegative();
	void ScrollPositive();
	bool ShouldOpenAboutScreen();
	void UpdateStoreHasStarsNotification(bool bShowNotification);

	const TMap<int32, class UFortSeasonPassLevelInfo*> GetAllLevelInfos() const;
	class UFortSeasonPassLevelInfo* GetLevelInfo(int32 Level) const;
	struct FDateTime GetSeasonEndDate() const;
	int32 GetSeasonPassLevel() const;
	int32 GetSeasonPassLevelMax() const;
	bool OwnsSeasonPass() const;
	bool PurchaseAvailible() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SeasonPassScreenBase">();
	}
	static class USeasonPassScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USeasonPassScreenBase>();
	}
};
static_assert(alignof(USeasonPassScreenBase) == 0x000008, "Wrong alignment on USeasonPassScreenBase");
static_assert(sizeof(USeasonPassScreenBase) == 0x0004B0, "Wrong size on USeasonPassScreenBase");
static_assert(offsetof(USeasonPassScreenBase, SeasonData) == 0x000448, "Member 'USeasonPassScreenBase::SeasonData' has a wrong offset!");
static_assert(offsetof(USeasonPassScreenBase, LevelWidgets) == 0x000450, "Member 'USeasonPassScreenBase::LevelWidgets' has a wrong offset!");
static_assert(offsetof(USeasonPassScreenBase, LevelInfos) == 0x000460, "Member 'USeasonPassScreenBase::LevelInfos' has a wrong offset!");

// Class FortniteUI.SeasonRewardsGridWidget
// 0x0060 (0x0168 - 0x0108)
class USeasonRewardsGridWidget final : public UWidget
{
public:
	TSubclassOf<class UUserWidget>                ItemWidgetToCreate;                                // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemWidgetCreated;                               // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FMargin                                ItemPadding;                                       // 0x0120(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                ColumnPadding;                                     // 0x0130(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ScrollSpeed;                                       // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x24];                                     // 0x0144(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Populate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SeasonRewardsGridWidget">();
	}
	static class USeasonRewardsGridWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USeasonRewardsGridWidget>();
	}
};
static_assert(alignof(USeasonRewardsGridWidget) == 0x000008, "Wrong alignment on USeasonRewardsGridWidget");
static_assert(sizeof(USeasonRewardsGridWidget) == 0x000168, "Wrong size on USeasonRewardsGridWidget");
static_assert(offsetof(USeasonRewardsGridWidget, ItemWidgetToCreate) == 0x000108, "Member 'USeasonRewardsGridWidget::ItemWidgetToCreate' has a wrong offset!");
static_assert(offsetof(USeasonRewardsGridWidget, OnItemWidgetCreated) == 0x000110, "Member 'USeasonRewardsGridWidget::OnItemWidgetCreated' has a wrong offset!");
static_assert(offsetof(USeasonRewardsGridWidget, ItemPadding) == 0x000120, "Member 'USeasonRewardsGridWidget::ItemPadding' has a wrong offset!");
static_assert(offsetof(USeasonRewardsGridWidget, ColumnPadding) == 0x000130, "Member 'USeasonRewardsGridWidget::ColumnPadding' has a wrong offset!");
static_assert(offsetof(USeasonRewardsGridWidget, ScrollSpeed) == 0x000140, "Member 'USeasonRewardsGridWidget::ScrollSpeed' has a wrong offset!");

// Class FortniteUI.StoreToastRequest
// 0x00C0 (0x00E8 - 0x0028)
class UStoreToastRequest final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCatalogMessaging*                      CatalogMessaging;                                  // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0xA8];                                      // 0x0040(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginRequest();
	void CompleteRequest();
	bool IsRequestReady();
	bool ShouldBeginRequest();
	void SkipRequest();

	struct FStoreCallout GetToast() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StoreToastRequest">();
	}
	static class UStoreToastRequest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStoreToastRequest>();
	}
};
static_assert(alignof(UStoreToastRequest) == 0x000008, "Wrong alignment on UStoreToastRequest");
static_assert(sizeof(UStoreToastRequest) == 0x0000E8, "Wrong size on UStoreToastRequest");
static_assert(offsetof(UStoreToastRequest, CatalogMessaging) == 0x000038, "Member 'UStoreToastRequest::CatalogMessaging' has a wrong offset!");

// Class FortniteUI.TwoTeamScoreWidgetBase
// 0x0068 (0x02D0 - 0x0268)
class UTwoTeamScoreWidgetBase final : public UFortHUDElementWidget
{
public:
	uint8                                         Pad_268[0x28];                                     // 0x0268(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 PlayScoreProgressSoundPercentagesMild;             // 0x0290(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                 PlayScoreProgressSoundPercentagesMedium;           // 0x02A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                 PlayScoreProgressSoundPercentagesStrong;           // 0x02B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         PercentageScoreToPlayCountdown;                    // 0x02C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PercentageScoreToPlayFinalCountdown;               // 0x02C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ScoreCountdownSoundFrequency;                      // 0x02C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         LastViewedTeam;                                    // 0x02CC(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2CD[0x3];                                      // 0x02CD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCountdownTimerUpdate();
	void OnGamePhaseChanged(EAthenaGamePhase GamePhase);
	void OnHandleSpectatingChanged(class AFortPlayerStateZone* SpectatingTarget);
	void OnPlayScoreProgressSound(ETDMScoreProgressTypes ScoreProgressType, bool bIsLocalTeam);
	void OnUpdateTeamScore(int32 TeamIndex, const struct FTDMTeamScoreData& ScoreData);
	void OnUpdateTotalScore(const class FText& TotalScoreText);
	void UpdateAllUI();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TwoTeamScoreWidgetBase">();
	}
	static class UTwoTeamScoreWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTwoTeamScoreWidgetBase>();
	}
};
static_assert(alignof(UTwoTeamScoreWidgetBase) == 0x000008, "Wrong alignment on UTwoTeamScoreWidgetBase");
static_assert(sizeof(UTwoTeamScoreWidgetBase) == 0x0002D0, "Wrong size on UTwoTeamScoreWidgetBase");
static_assert(offsetof(UTwoTeamScoreWidgetBase, PlayScoreProgressSoundPercentagesMild) == 0x000290, "Member 'UTwoTeamScoreWidgetBase::PlayScoreProgressSoundPercentagesMild' has a wrong offset!");
static_assert(offsetof(UTwoTeamScoreWidgetBase, PlayScoreProgressSoundPercentagesMedium) == 0x0002A0, "Member 'UTwoTeamScoreWidgetBase::PlayScoreProgressSoundPercentagesMedium' has a wrong offset!");
static_assert(offsetof(UTwoTeamScoreWidgetBase, PlayScoreProgressSoundPercentagesStrong) == 0x0002B0, "Member 'UTwoTeamScoreWidgetBase::PlayScoreProgressSoundPercentagesStrong' has a wrong offset!");
static_assert(offsetof(UTwoTeamScoreWidgetBase, PercentageScoreToPlayCountdown) == 0x0002C0, "Member 'UTwoTeamScoreWidgetBase::PercentageScoreToPlayCountdown' has a wrong offset!");
static_assert(offsetof(UTwoTeamScoreWidgetBase, PercentageScoreToPlayFinalCountdown) == 0x0002C4, "Member 'UTwoTeamScoreWidgetBase::PercentageScoreToPlayFinalCountdown' has a wrong offset!");
static_assert(offsetof(UTwoTeamScoreWidgetBase, ScoreCountdownSoundFrequency) == 0x0002C8, "Member 'UTwoTeamScoreWidgetBase::ScoreCountdownSoundFrequency' has a wrong offset!");
static_assert(offsetof(UTwoTeamScoreWidgetBase, LastViewedTeam) == 0x0002CC, "Member 'UTwoTeamScoreWidgetBase::LastViewedTeam' has a wrong offset!");

// Class FortniteUI.WeaponOverheatWidget
// 0x0010 (0x0278 - 0x0268)
class UWeaponOverheatWidget final : public UFortHUDElementWidget
{
public:
	class UImage*                                 OverheatProgressImage;                             // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_270[0x8];                                      // 0x0270(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPawnChanged();
	void OnWeaponEquipped(class AFortWeapon* CurrentWeapon, class AFortWeapon* PrevWeapon);
	void OnWeaponUnEquipped();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WeaponOverheatWidget">();
	}
	static class UWeaponOverheatWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponOverheatWidget>();
	}
};
static_assert(alignof(UWeaponOverheatWidget) == 0x000008, "Wrong alignment on UWeaponOverheatWidget");
static_assert(sizeof(UWeaponOverheatWidget) == 0x000278, "Wrong size on UWeaponOverheatWidget");
static_assert(offsetof(UWeaponOverheatWidget, OverheatProgressImage) == 0x000268, "Member 'UWeaponOverheatWidget::OverheatProgressImage' has a wrong offset!");

}

