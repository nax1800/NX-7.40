#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EnemyPawn_Parent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass EnemyPawn_Parent.EnemyPawn_Parent_C
// 0x0600 (0x2540 - 0x1F40)
#pragma pack(push, 0x1)
class alignas(0x10) AEnemyPawn_Parent_C : public AFortAIPawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1F40(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCapsuleComponent*                      WeaponCapsuleCollision;                            // 0x1F48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Elemental_Layer_Audio_Loop;                        // 0x1F50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FadeMiniBossLightOutTL_Fade_2CE2533F4858E8E5F1A8D39F9CE6D9F4; // 0x1F58(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FadeMiniBossLightOutTL__Direction_2CE2533F4858E8E5F1A8D39F9CE6D9F4; // 0x1F5C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F5D[0x3];                                     // 0x1F5D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FadeMiniBossLightOutTL;                            // 0x1F60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Enemy_Spawn_Out_TL_ColorFadeOutTrack_999FBE184F147A4FE3025AB553DBFA9C; // 0x1F68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Enemy_Spawn_Out_TL_FadeInTrack_999FBE184F147A4FE3025AB553DBFA9C; // 0x1F6C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Enemy_Spawn_Out_TL__Direction_999FBE184F147A4FE3025AB553DBFA9C; // 0x1F70(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F71[0x7];                                     // 0x1F71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Enemy_Spawn_Out_TL;                                // 0x1F78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemySpawnInTL_MiniBossFadeLight_5C7376B04DFAE1465B97F1BB1B873D88; // 0x1F80(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemySpawnInTL_ColorFadeOutTrack_5C7376B04DFAE1465B97F1BB1B873D88; // 0x1F84(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemySpawnInTL_FadeInTrack_5C7376B04DFAE1465B97F1BB1B873D88; // 0x1F88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            EnemySpawnInTL__Direction_5C7376B04DFAE1465B97F1BB1B873D88; // 0x1F8C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F8D[0x3];                                     // 0x1F8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     EnemySpawnInTL;                                    // 0x1F90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Death_Effects;                                     // 0x1F98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        HQ_Death_Particle_System;                          // 0x1FA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeathFX_SpawnRateScale;                            // 0x1FA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HQ_DeathFX_MaxDistance;                            // 0x1FAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        LQ_Death_Particle_System;                          // 0x1FB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LQ_DeathFX_CylinderHeight;                         // 0x1FB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LQ_DeathFX_CylinderRadius;                         // 0x1FBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LQ_DeathFX_SpawnRateScale;                         // 0x1FC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LQ_PS_Socket_Attach;                               // 0x1FC4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Death_Socket;                                      // 0x1FCC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsePOCScaleAndMaterials;                           // 0x1FD4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          POCShouldOverrideMaterial;                         // 0x1FD5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          POCShouldOverrideMaterialValues;                   // 0x1FD6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FD7[0x1];                                     // 0x1FD7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     POCOverrideMaterial;                               // 0x1FD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           POCMaterialHairColor;                              // 0x1FE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           POCMaterialSkinColor;                              // 0x1FF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           POCMaterialPantColor;                              // 0x2000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           POCMaterialShirtColor;                             // 0x2010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          RandomStream;                                      // 0x2020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	float                                         PseudoRandomNetworkedFloat;                        // 0x2028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRandomColorVariation;                           // 0x202C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_202D[0x3];                                     // 0x202D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   MaleHuskHairColors;                                // 0x2030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FLinearColor>                   MaleHuskSkinColors;                                // 0x2040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FLinearColor>                   MaleHuskPantColors;                                // 0x2050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FLinearColor>                   MaleHuskShirtColors;                               // 0x2060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UCurveFloat*                            HieghtDistributionCurve;                           // 0x2070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomizeMeshScale;                                // 0x2078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2079[0x7];                                     // 0x2079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnParticlesTransform;                           // 0x2080(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Pumpkin_Head_MID;                                  // 0x20B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        SpawnParticles;                                    // 0x20B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CharacterElementalParticles;                       // 0x20C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowHeadshot;                                     // 0x20C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20C9[0x7];                                     // 0x20C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_RangedWeapon;                                   // 0x20D0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UParticleSystemComponent*               HeadshotParticleSystemComp;                        // 0x20F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Additive_Hit_React_Montage;                        // 0x20F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Death_Normal_Sound;                                // 0x2100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Elemental_Audio_Layer_Sound;                       // 0x2108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpecialEventHalloweenPumpkinHead;                  // 0x2110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2111[0x7];                                     // 0x2111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_NPCCharacterTypeHuskBasic;                      // 0x2118(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_SpecialEventHalloweenPumpkinHead;               // 0x2138(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         PumpkinHeadPercentage;                             // 0x2158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_215C[0x4];                                     // 0x215C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_SpecialEvent_Halloween_PumpkinHead;             // 0x2160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PumpkinHeadRotation;                               // 0x2168(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                PumpkinHeadScale;                                  // 0x2174(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PumpkinHeadOffset;                                 // 0x2180(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Headshot_FX_Socket;                                // 0x218C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2194[0x4];                                     // 0x2194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               SleepParticleSystemComp;                           // 0x2198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Husk_Sleeping_Sound;                               // 0x21A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        HuskSleepSound;                                    // 0x21A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               WakeUpParticleSystemComp;                          // 0x21B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sleeping;                                          // 0x21B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21B9[0x7];                                     // 0x21B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class USkeletalMeshComponent*, class UFXSkeletonMeshComponent_C*> AwakenFXSkeletalMeshes;                            // 0x21C0(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<class UStaticMeshComponent*, class UFXStaticMeshComponent_C*> AwakenFXStaticMeshes;                              // 0x2210(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         AwokenMaxDistance;                                 // 0x2260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AwakenDuration;                                    // 0x2264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DestroyAwakenFXTimer;                              // 0x2268(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class USkeletalMeshComponent*, class UFXSkeletonMeshComponent_C*> BuildingHitFXSkeletalMeshes;                       // 0x2270(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<class UStaticMeshComponent*, class UFXStaticMeshComponent_C*> BuildingHitFXStaticMeshes;                         // 0x22C0(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         BuildingHitDuration;                               // 0x2310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2314[0x4];                                     // 0x2314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DestroyBuildingHitFXTimer;                         // 0x2318(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFXSkeletonMeshComponent_C*             TempFXSkeletalMesh;                                // 0x2320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         RegisteredSkeletalMeshesForEffects;                // 0x2328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UStaticMeshComponent*>           RegisteredStaticMeshesForEffects;                  // 0x2338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          HasGlowColorsAssigned;                             // 0x2348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SpawnInTimelineCompletedSuccessfully;              // 0x2349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_234A[0x6];                                     // 0x234A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CharacterSpawnInSafetyCheckHandle;                 // 0x2350(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       Previous_MID;                                      // 0x2358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FVector                                FrozenHuskMeshScale;                               // 0x2368(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnFrozenHuskMesh;                               // 0x2374(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2375[0x3];                                     // 0x2375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        CharacterAmbientParticlesTemplate;                 // 0x2378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CharacterAmbientParticles;                         // 0x2380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 DuplicateCharacterMesh;                            // 0x2388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DuplicateCharacterMID;                             // 0x2390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BoneRefPosePosition;                               // 0x2398(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MiniBossSizeScale;                                 // 0x23A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   MiniBossLight;                                     // 0x23B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               MinibossPSComponent;                               // 0x23B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MiniBossLightIntensity;                            // 0x23C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterParticlesMaxDrawDistance;                 // 0x23C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Slow_Shackle_Scale;                                // 0x23C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23CC[0x4];                                     // 0x23CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPhysicalMaterial*>              Original_Phys_Material;                            // 0x23D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UParticleSystemComponent*>       Elemental_FXs;                                     // 0x23E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          IsMiniBoss;                                        // 0x23F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23F1[0x3];                                     // 0x23F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SizeScale_FireElemental;                           // 0x23F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SizeScale_FireElemental_Head;                      // 0x2400(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_240C[0x4];                                     // 0x240C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     DeathFX_MID_Index0;                                // 0x2410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Death_FX_MID_Index_1;                              // 0x2418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeathFX_Use_Strands;                               // 0x2420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2421[0x3];                                     // 0x2421(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DeathFX_EmissiveHot;                               // 0x2424(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Death_FX_Emissive_Soft_Color;                      // 0x2434(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeathFX_Change_Emissive;                           // 0x2444(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DeathFX_Customize_Visuals;                         // 0x2445(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2446[0x2];                                     // 0x2446(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Ice_HandL;                                         // 0x2448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Ice_HandR;                                         // 0x2458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Ice_HandL_Name;                                    // 0x2468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Ice_HandR_Name;                                    // 0x2470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ice_SpawnRateScale;                                // 0x2478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lightning_ElecFresExp;                             // 0x247C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Lightning_SizeScale;                               // 0x2480(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Lightning_WPOScale;                                // 0x248C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Lightning_WPOBias;                                 // 0x2498(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lightning_SpawnScaleRate;                          // 0x24A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       Previous_MID_AuxObjs;                              // 0x24A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UObject*>                        Auxillary_Objects;                                 // 0x24B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         Restoring_Array_Index;                             // 0x24C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24CC[0x4];                                     // 0x24CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        Duplicate_Auxillary_Objects;                       // 0x24D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	bool                                          Should_Use_Aux_Elemental_Particles;                // 0x24E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseHeadShotFX;                                     // 0x24E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24E2[0x6];                                     // 0x24E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Death_Dematerialize_Sound;                         // 0x24E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HeadShot_Sound;                                    // 0x24F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SleepingEnemyWakeStinger;                          // 0x24F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StopDeathFX_Delay;                                 // 0x2500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2504[0x4];                                     // 0x2504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        DeathParticleSystem_Additive;                      // 0x2508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeathParticleSystem_Additive_On_;                  // 0x2510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2511[0x7];                                     // 0x2511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               Additive_Death_Effects;                            // 0x2518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Death_Effects_ColorOvrride;                        // 0x2520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeathParticleSystem_Additive_Rate;                 // 0x2530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_EnemyPawn_Parent(int32 EntryPoint);
	void OnBuildingHitPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, const struct FGameplayEffectContextHandle& EffectContext, bool bPlayerPlaced);
	void DestroyBuildingHitEffect();
	void OnCheatUpdateSpecialEventGE(bool bShouldUseSpecialEventGE);
	void RestorePreviousMaterialDelay(float Delay_Amount);
	void RestorePreviousMaterialDelayCompleted();
	void OnEndSleepEffects();
	void DestroyAwakenEffect();
	void OnBeginSleepEffects();
	void AdditiveHitReactDelay();
	void OnDamagePlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void PawnUniqueIDSet();
	void OnStartedEncounterSpawn();
	void OnFinishedEncounterSpawn();
	void DebugEnemySpawnIn();
	void DespawnEnemy(const struct FVector& RiftLocationWS);
	void PostSpawnIn();
	void SpawnInSafetyCheck();
	void FadeMiniBossLightOut();
	void ManualEnemySpawnIn(const struct FVector& RiftLocationWS);
	void ManualDespawnEnemy(const struct FVector& RiftLocationWS);
	void BeginDeathFX();
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void CE_StopDeathFX();
	void ReceiveBeginPlay();
	void EnemySpawnInTL__Spawn__EventFunc();
	void EnemySpawnInTL__UpdateFunc();
	void EnemySpawnInTL__FinishedFunc();
	void Enemy_Spawn_Out_TL__UpdateFunc();
	void Enemy_Spawn_Out_TL__FinishedFunc();
	void FadeMiniBossLightOutTL__UpdateFunc();
	void FadeMiniBossLightOutTL__FinishedFunc();
	void UserConstructionScript();
	void EnemyDeathVisuals(bool* HQ);
	void StopDeathFX();
	void PickColorFromAnArrayOfColors(TArray<struct FLinearColor>& ArrayOfColors, struct FLinearColor* Color);
	void SetVectorParameterOnAllCharacterMIDs(class FName Parameter_Name, const struct FVector& Vector_Value, bool Propagate_to_Auxiliary_Meshes);
	void SetScalarParameterOnAllCharacterMIDs(class FName Parameter_Name, float Scalar_Value);
	void SetActiveElementalParticles(bool Active, bool Reset);
	void PlayAdditiveHitReacts(const struct FVector& Hit_Direction, class UAnimMontage* Anim_Montage);
	void OverrideMaterialAndCopyParametersOnCharacterElements(class UMaterialInterface* New_Material_To_Apply);
	void OverridePhysicalMaterialOnCharacterMesh(class UPhysicalMaterial* Physical_Material_Override);
	void SpawnParticleSystemOnCharacterMesh(class UParticleSystem* ParticleSystemTemplate, class UParticleSystemComponent* ParticleSystemComponentReferenceVar, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TArray<struct FParticleSysParam>& InstanceParameters, bool AutoActivate, bool AutoDestroy, bool AbsoluteLocation, bool AbsoluteRotation, bool AbsoluteScale, class UParticleSystemComponent** PSComponentReference);
	void CharacterSpawnInSafetyCheck();
	void RestorePreviousMaterialOnCharacterElements(float Delay_in_Seconds);
	void SpecialEventHalloweenPumpkinHeadHusk(bool ApplyPumpkinHeadMesh, bool DebugApplicationOrRemoval_);
	void CreateDuplicateCharacterElements(class UMaterialInterface* Material_to_Apply);
	void SetDuplicateCharacterMeshHiddenInGame(bool Hidden);
	void SetElementalParticlesHiddenInGame(bool Hidden);
	void TransformHitLocationWorldSpaceToPreskinnedLocalSpace(struct FVector* PreskinnedLS);
	void SetVectorParameterOnAllCharacterMIDsByMap(const TMap<class FName, struct FLinearColor>& Map, bool Propagate_to_Auxiliary_Meshes);
	void SetScalarParameterOnAllCharacterMIDsByMap(const TMap<class FName, float>& Map);
	void SpawnMinibossLight();
	void SetMinibossLightHiddenInGame(bool Hidden);
	void RestorePreviousPhysMaterialOnCharacterMesh(float Delay_in_Seconds);
	void DeleteDuplicateCharacterElements();
	void DynamicMaterialArraySetup(TArray<class UMaterialInterface*>& Array_to_Check, const TArray<class UMaterialInstanceDynamic*>& Array_to_Store, class UMaterialInterface* New_Material, class UPrimitiveComponent* Mesh_to_Assign_New_Material);
	void ApplyBuildingHitEffectToSkeletalMesh(class USkeletalMeshComponent* Param_Mesh);
	void ApplyBuildingHitEffectToStaticMesh(class UStaticMeshComponent* Param_Mesh);
	void RegisterEffectSkeletalMesh(class USkeletalMeshComponent* Param_Mesh);
	void RegisterEffectStaticMesh(class UStaticMeshComponent* Param_Mesh);
	void ApplyAwakenEffectToSkeletalMesh(class USkeletalMeshComponent* Param_Mesh);
	void ApplyAwakenEffectToStaticMesh(class UStaticMeshComponent* Param_Mesh);
	void DeregisterEffectStaticMesh(class UStaticMeshComponent* Param_Mesh);
	void DeregisterEffectSkeletalMesh(class USkeletalMeshComponent* Param_Mesh);
	void Orphaned(bool* IsOrphaned, class AFortPawn** AttachedPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EnemyPawn_Parent_C">();
	}
	static class AEnemyPawn_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEnemyPawn_Parent_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(AEnemyPawn_Parent_C) == 0x000010, "Wrong alignment on AEnemyPawn_Parent_C");
static_assert(sizeof(AEnemyPawn_Parent_C) == 0x002540, "Wrong size on AEnemyPawn_Parent_C");
static_assert(offsetof(AEnemyPawn_Parent_C, UberGraphFrame) == 0x001F40, "Member 'AEnemyPawn_Parent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, WeaponCapsuleCollision) == 0x001F48, "Member 'AEnemyPawn_Parent_C::WeaponCapsuleCollision' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Elemental_Layer_Audio_Loop) == 0x001F50, "Member 'AEnemyPawn_Parent_C::Elemental_Layer_Audio_Loop' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, FadeMiniBossLightOutTL_Fade_2CE2533F4858E8E5F1A8D39F9CE6D9F4) == 0x001F58, "Member 'AEnemyPawn_Parent_C::FadeMiniBossLightOutTL_Fade_2CE2533F4858E8E5F1A8D39F9CE6D9F4' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, FadeMiniBossLightOutTL__Direction_2CE2533F4858E8E5F1A8D39F9CE6D9F4) == 0x001F5C, "Member 'AEnemyPawn_Parent_C::FadeMiniBossLightOutTL__Direction_2CE2533F4858E8E5F1A8D39F9CE6D9F4' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, FadeMiniBossLightOutTL) == 0x001F60, "Member 'AEnemyPawn_Parent_C::FadeMiniBossLightOutTL' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Enemy_Spawn_Out_TL_ColorFadeOutTrack_999FBE184F147A4FE3025AB553DBFA9C) == 0x001F68, "Member 'AEnemyPawn_Parent_C::Enemy_Spawn_Out_TL_ColorFadeOutTrack_999FBE184F147A4FE3025AB553DBFA9C' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Enemy_Spawn_Out_TL_FadeInTrack_999FBE184F147A4FE3025AB553DBFA9C) == 0x001F6C, "Member 'AEnemyPawn_Parent_C::Enemy_Spawn_Out_TL_FadeInTrack_999FBE184F147A4FE3025AB553DBFA9C' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Enemy_Spawn_Out_TL__Direction_999FBE184F147A4FE3025AB553DBFA9C) == 0x001F70, "Member 'AEnemyPawn_Parent_C::Enemy_Spawn_Out_TL__Direction_999FBE184F147A4FE3025AB553DBFA9C' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Enemy_Spawn_Out_TL) == 0x001F78, "Member 'AEnemyPawn_Parent_C::Enemy_Spawn_Out_TL' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, EnemySpawnInTL_MiniBossFadeLight_5C7376B04DFAE1465B97F1BB1B873D88) == 0x001F80, "Member 'AEnemyPawn_Parent_C::EnemySpawnInTL_MiniBossFadeLight_5C7376B04DFAE1465B97F1BB1B873D88' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, EnemySpawnInTL_ColorFadeOutTrack_5C7376B04DFAE1465B97F1BB1B873D88) == 0x001F84, "Member 'AEnemyPawn_Parent_C::EnemySpawnInTL_ColorFadeOutTrack_5C7376B04DFAE1465B97F1BB1B873D88' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, EnemySpawnInTL_FadeInTrack_5C7376B04DFAE1465B97F1BB1B873D88) == 0x001F88, "Member 'AEnemyPawn_Parent_C::EnemySpawnInTL_FadeInTrack_5C7376B04DFAE1465B97F1BB1B873D88' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, EnemySpawnInTL__Direction_5C7376B04DFAE1465B97F1BB1B873D88) == 0x001F8C, "Member 'AEnemyPawn_Parent_C::EnemySpawnInTL__Direction_5C7376B04DFAE1465B97F1BB1B873D88' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, EnemySpawnInTL) == 0x001F90, "Member 'AEnemyPawn_Parent_C::EnemySpawnInTL' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Death_Effects) == 0x001F98, "Member 'AEnemyPawn_Parent_C::Death_Effects' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HQ_Death_Particle_System) == 0x001FA0, "Member 'AEnemyPawn_Parent_C::HQ_Death_Particle_System' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DeathFX_SpawnRateScale) == 0x001FA8, "Member 'AEnemyPawn_Parent_C::DeathFX_SpawnRateScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HQ_DeathFX_MaxDistance) == 0x001FAC, "Member 'AEnemyPawn_Parent_C::HQ_DeathFX_MaxDistance' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, LQ_Death_Particle_System) == 0x001FB0, "Member 'AEnemyPawn_Parent_C::LQ_Death_Particle_System' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, LQ_DeathFX_CylinderHeight) == 0x001FB8, "Member 'AEnemyPawn_Parent_C::LQ_DeathFX_CylinderHeight' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, LQ_DeathFX_CylinderRadius) == 0x001FBC, "Member 'AEnemyPawn_Parent_C::LQ_DeathFX_CylinderRadius' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, LQ_DeathFX_SpawnRateScale) == 0x001FC0, "Member 'AEnemyPawn_Parent_C::LQ_DeathFX_SpawnRateScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, LQ_PS_Socket_Attach) == 0x001FC4, "Member 'AEnemyPawn_Parent_C::LQ_PS_Socket_Attach' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Death_Socket) == 0x001FCC, "Member 'AEnemyPawn_Parent_C::Death_Socket' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, UsePOCScaleAndMaterials) == 0x001FD4, "Member 'AEnemyPawn_Parent_C::UsePOCScaleAndMaterials' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCShouldOverrideMaterial) == 0x001FD5, "Member 'AEnemyPawn_Parent_C::POCShouldOverrideMaterial' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCShouldOverrideMaterialValues) == 0x001FD6, "Member 'AEnemyPawn_Parent_C::POCShouldOverrideMaterialValues' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCOverrideMaterial) == 0x001FD8, "Member 'AEnemyPawn_Parent_C::POCOverrideMaterial' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCMaterialHairColor) == 0x001FE0, "Member 'AEnemyPawn_Parent_C::POCMaterialHairColor' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCMaterialSkinColor) == 0x001FF0, "Member 'AEnemyPawn_Parent_C::POCMaterialSkinColor' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCMaterialPantColor) == 0x002000, "Member 'AEnemyPawn_Parent_C::POCMaterialPantColor' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCMaterialShirtColor) == 0x002010, "Member 'AEnemyPawn_Parent_C::POCMaterialShirtColor' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, RandomStream) == 0x002020, "Member 'AEnemyPawn_Parent_C::RandomStream' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, PseudoRandomNetworkedFloat) == 0x002028, "Member 'AEnemyPawn_Parent_C::PseudoRandomNetworkedFloat' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, UseRandomColorVariation) == 0x00202C, "Member 'AEnemyPawn_Parent_C::UseRandomColorVariation' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MaleHuskHairColors) == 0x002030, "Member 'AEnemyPawn_Parent_C::MaleHuskHairColors' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MaleHuskSkinColors) == 0x002040, "Member 'AEnemyPawn_Parent_C::MaleHuskSkinColors' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MaleHuskPantColors) == 0x002050, "Member 'AEnemyPawn_Parent_C::MaleHuskPantColors' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MaleHuskShirtColors) == 0x002060, "Member 'AEnemyPawn_Parent_C::MaleHuskShirtColors' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HieghtDistributionCurve) == 0x002070, "Member 'AEnemyPawn_Parent_C::HieghtDistributionCurve' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, RandomizeMeshScale) == 0x002078, "Member 'AEnemyPawn_Parent_C::RandomizeMeshScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SpawnParticlesTransform) == 0x002080, "Member 'AEnemyPawn_Parent_C::SpawnParticlesTransform' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Pumpkin_Head_MID) == 0x0020B0, "Member 'AEnemyPawn_Parent_C::Pumpkin_Head_MID' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SpawnParticles) == 0x0020B8, "Member 'AEnemyPawn_Parent_C::SpawnParticles' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, CharacterElementalParticles) == 0x0020C0, "Member 'AEnemyPawn_Parent_C::CharacterElementalParticles' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, AllowHeadshot) == 0x0020C8, "Member 'AEnemyPawn_Parent_C::AllowHeadshot' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, TC_RangedWeapon) == 0x0020D0, "Member 'AEnemyPawn_Parent_C::TC_RangedWeapon' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HeadshotParticleSystemComp) == 0x0020F0, "Member 'AEnemyPawn_Parent_C::HeadshotParticleSystemComp' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Additive_Hit_React_Montage) == 0x0020F8, "Member 'AEnemyPawn_Parent_C::Additive_Hit_React_Montage' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Death_Normal_Sound) == 0x002100, "Member 'AEnemyPawn_Parent_C::Death_Normal_Sound' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Elemental_Audio_Layer_Sound) == 0x002108, "Member 'AEnemyPawn_Parent_C::Elemental_Audio_Layer_Sound' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SpecialEventHalloweenPumpkinHead) == 0x002110, "Member 'AEnemyPawn_Parent_C::SpecialEventHalloweenPumpkinHead' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, TC_NPCCharacterTypeHuskBasic) == 0x002118, "Member 'AEnemyPawn_Parent_C::TC_NPCCharacterTypeHuskBasic' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, TC_SpecialEventHalloweenPumpkinHead) == 0x002138, "Member 'AEnemyPawn_Parent_C::TC_SpecialEventHalloweenPumpkinHead' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, PumpkinHeadPercentage) == 0x002158, "Member 'AEnemyPawn_Parent_C::PumpkinHeadPercentage' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, GE_SpecialEvent_Halloween_PumpkinHead) == 0x002160, "Member 'AEnemyPawn_Parent_C::GE_SpecialEvent_Halloween_PumpkinHead' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, PumpkinHeadRotation) == 0x002168, "Member 'AEnemyPawn_Parent_C::PumpkinHeadRotation' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, PumpkinHeadScale) == 0x002174, "Member 'AEnemyPawn_Parent_C::PumpkinHeadScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, PumpkinHeadOffset) == 0x002180, "Member 'AEnemyPawn_Parent_C::PumpkinHeadOffset' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Headshot_FX_Socket) == 0x00218C, "Member 'AEnemyPawn_Parent_C::Headshot_FX_Socket' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SleepParticleSystemComp) == 0x002198, "Member 'AEnemyPawn_Parent_C::SleepParticleSystemComp' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Husk_Sleeping_Sound) == 0x0021A0, "Member 'AEnemyPawn_Parent_C::Husk_Sleeping_Sound' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HuskSleepSound) == 0x0021A8, "Member 'AEnemyPawn_Parent_C::HuskSleepSound' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, WakeUpParticleSystemComp) == 0x0021B0, "Member 'AEnemyPawn_Parent_C::WakeUpParticleSystemComp' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Sleeping) == 0x0021B8, "Member 'AEnemyPawn_Parent_C::Sleeping' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, AwakenFXSkeletalMeshes) == 0x0021C0, "Member 'AEnemyPawn_Parent_C::AwakenFXSkeletalMeshes' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, AwakenFXStaticMeshes) == 0x002210, "Member 'AEnemyPawn_Parent_C::AwakenFXStaticMeshes' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, AwokenMaxDistance) == 0x002260, "Member 'AEnemyPawn_Parent_C::AwokenMaxDistance' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, AwakenDuration) == 0x002264, "Member 'AEnemyPawn_Parent_C::AwakenDuration' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DestroyAwakenFXTimer) == 0x002268, "Member 'AEnemyPawn_Parent_C::DestroyAwakenFXTimer' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, BuildingHitFXSkeletalMeshes) == 0x002270, "Member 'AEnemyPawn_Parent_C::BuildingHitFXSkeletalMeshes' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, BuildingHitFXStaticMeshes) == 0x0022C0, "Member 'AEnemyPawn_Parent_C::BuildingHitFXStaticMeshes' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, BuildingHitDuration) == 0x002310, "Member 'AEnemyPawn_Parent_C::BuildingHitDuration' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DestroyBuildingHitFXTimer) == 0x002318, "Member 'AEnemyPawn_Parent_C::DestroyBuildingHitFXTimer' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, TempFXSkeletalMesh) == 0x002320, "Member 'AEnemyPawn_Parent_C::TempFXSkeletalMesh' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, RegisteredSkeletalMeshesForEffects) == 0x002328, "Member 'AEnemyPawn_Parent_C::RegisteredSkeletalMeshesForEffects' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, RegisteredStaticMeshesForEffects) == 0x002338, "Member 'AEnemyPawn_Parent_C::RegisteredStaticMeshesForEffects' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HasGlowColorsAssigned) == 0x002348, "Member 'AEnemyPawn_Parent_C::HasGlowColorsAssigned' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SpawnInTimelineCompletedSuccessfully) == 0x002349, "Member 'AEnemyPawn_Parent_C::SpawnInTimelineCompletedSuccessfully' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, CharacterSpawnInSafetyCheckHandle) == 0x002350, "Member 'AEnemyPawn_Parent_C::CharacterSpawnInSafetyCheckHandle' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Previous_MID) == 0x002358, "Member 'AEnemyPawn_Parent_C::Previous_MID' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, FrozenHuskMeshScale) == 0x002368, "Member 'AEnemyPawn_Parent_C::FrozenHuskMeshScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SpawnFrozenHuskMesh) == 0x002374, "Member 'AEnemyPawn_Parent_C::SpawnFrozenHuskMesh' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, CharacterAmbientParticlesTemplate) == 0x002378, "Member 'AEnemyPawn_Parent_C::CharacterAmbientParticlesTemplate' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, CharacterAmbientParticles) == 0x002380, "Member 'AEnemyPawn_Parent_C::CharacterAmbientParticles' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DuplicateCharacterMesh) == 0x002388, "Member 'AEnemyPawn_Parent_C::DuplicateCharacterMesh' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DuplicateCharacterMID) == 0x002390, "Member 'AEnemyPawn_Parent_C::DuplicateCharacterMID' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, BoneRefPosePosition) == 0x002398, "Member 'AEnemyPawn_Parent_C::BoneRefPosePosition' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MiniBossSizeScale) == 0x0023A4, "Member 'AEnemyPawn_Parent_C::MiniBossSizeScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MiniBossLight) == 0x0023B0, "Member 'AEnemyPawn_Parent_C::MiniBossLight' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MinibossPSComponent) == 0x0023B8, "Member 'AEnemyPawn_Parent_C::MinibossPSComponent' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MiniBossLightIntensity) == 0x0023C0, "Member 'AEnemyPawn_Parent_C::MiniBossLightIntensity' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, CharacterParticlesMaxDrawDistance) == 0x0023C4, "Member 'AEnemyPawn_Parent_C::CharacterParticlesMaxDrawDistance' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Slow_Shackle_Scale) == 0x0023C8, "Member 'AEnemyPawn_Parent_C::Slow_Shackle_Scale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Original_Phys_Material) == 0x0023D0, "Member 'AEnemyPawn_Parent_C::Original_Phys_Material' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Elemental_FXs) == 0x0023E0, "Member 'AEnemyPawn_Parent_C::Elemental_FXs' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, IsMiniBoss) == 0x0023F0, "Member 'AEnemyPawn_Parent_C::IsMiniBoss' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SizeScale_FireElemental) == 0x0023F4, "Member 'AEnemyPawn_Parent_C::SizeScale_FireElemental' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SizeScale_FireElemental_Head) == 0x002400, "Member 'AEnemyPawn_Parent_C::SizeScale_FireElemental_Head' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DeathFX_MID_Index0) == 0x002410, "Member 'AEnemyPawn_Parent_C::DeathFX_MID_Index0' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Death_FX_MID_Index_1) == 0x002418, "Member 'AEnemyPawn_Parent_C::Death_FX_MID_Index_1' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DeathFX_Use_Strands) == 0x002420, "Member 'AEnemyPawn_Parent_C::DeathFX_Use_Strands' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DeathFX_EmissiveHot) == 0x002424, "Member 'AEnemyPawn_Parent_C::DeathFX_EmissiveHot' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Death_FX_Emissive_Soft_Color) == 0x002434, "Member 'AEnemyPawn_Parent_C::Death_FX_Emissive_Soft_Color' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DeathFX_Change_Emissive) == 0x002444, "Member 'AEnemyPawn_Parent_C::DeathFX_Change_Emissive' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DeathFX_Customize_Visuals) == 0x002445, "Member 'AEnemyPawn_Parent_C::DeathFX_Customize_Visuals' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Ice_HandL) == 0x002448, "Member 'AEnemyPawn_Parent_C::Ice_HandL' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Ice_HandR) == 0x002458, "Member 'AEnemyPawn_Parent_C::Ice_HandR' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Ice_HandL_Name) == 0x002468, "Member 'AEnemyPawn_Parent_C::Ice_HandL_Name' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Ice_HandR_Name) == 0x002470, "Member 'AEnemyPawn_Parent_C::Ice_HandR_Name' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Ice_SpawnRateScale) == 0x002478, "Member 'AEnemyPawn_Parent_C::Ice_SpawnRateScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Lightning_ElecFresExp) == 0x00247C, "Member 'AEnemyPawn_Parent_C::Lightning_ElecFresExp' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Lightning_SizeScale) == 0x002480, "Member 'AEnemyPawn_Parent_C::Lightning_SizeScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Lightning_WPOScale) == 0x00248C, "Member 'AEnemyPawn_Parent_C::Lightning_WPOScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Lightning_WPOBias) == 0x002498, "Member 'AEnemyPawn_Parent_C::Lightning_WPOBias' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Lightning_SpawnScaleRate) == 0x0024A4, "Member 'AEnemyPawn_Parent_C::Lightning_SpawnScaleRate' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Previous_MID_AuxObjs) == 0x0024A8, "Member 'AEnemyPawn_Parent_C::Previous_MID_AuxObjs' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Auxillary_Objects) == 0x0024B8, "Member 'AEnemyPawn_Parent_C::Auxillary_Objects' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Restoring_Array_Index) == 0x0024C8, "Member 'AEnemyPawn_Parent_C::Restoring_Array_Index' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Duplicate_Auxillary_Objects) == 0x0024D0, "Member 'AEnemyPawn_Parent_C::Duplicate_Auxillary_Objects' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Should_Use_Aux_Elemental_Particles) == 0x0024E0, "Member 'AEnemyPawn_Parent_C::Should_Use_Aux_Elemental_Particles' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, UseHeadShotFX) == 0x0024E1, "Member 'AEnemyPawn_Parent_C::UseHeadShotFX' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Death_Dematerialize_Sound) == 0x0024E8, "Member 'AEnemyPawn_Parent_C::Death_Dematerialize_Sound' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HeadShot_Sound) == 0x0024F0, "Member 'AEnemyPawn_Parent_C::HeadShot_Sound' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SleepingEnemyWakeStinger) == 0x0024F8, "Member 'AEnemyPawn_Parent_C::SleepingEnemyWakeStinger' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, StopDeathFX_Delay) == 0x002500, "Member 'AEnemyPawn_Parent_C::StopDeathFX_Delay' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DeathParticleSystem_Additive) == 0x002508, "Member 'AEnemyPawn_Parent_C::DeathParticleSystem_Additive' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DeathParticleSystem_Additive_On_) == 0x002510, "Member 'AEnemyPawn_Parent_C::DeathParticleSystem_Additive_On_' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Additive_Death_Effects) == 0x002518, "Member 'AEnemyPawn_Parent_C::Additive_Death_Effects' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Death_Effects_ColorOvrride) == 0x002520, "Member 'AEnemyPawn_Parent_C::Death_Effects_ColorOvrride' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DeathParticleSystem_Additive_Rate) == 0x002530, "Member 'AEnemyPawn_Parent_C::DeathParticleSystem_Additive_Rate' has a wrong offset!");

}

