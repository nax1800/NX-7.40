#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MinigameMode_FiringRangeV2

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function MinigameMode_FiringRangeV2.MinigameMode_FiringRangeV2_C.ExecuteUbergraph_MinigameMode_FiringRangeV2
// 0x0004 (0x0004 - 0x0000)
struct MinigameMode_FiringRangeV2_C_ExecuteUbergraph_MinigameMode_FiringRangeV2 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinigameMode_FiringRangeV2_C_ExecuteUbergraph_MinigameMode_FiringRangeV2) == 0x000004, "Wrong alignment on MinigameMode_FiringRangeV2_C_ExecuteUbergraph_MinigameMode_FiringRangeV2");
static_assert(sizeof(MinigameMode_FiringRangeV2_C_ExecuteUbergraph_MinigameMode_FiringRangeV2) == 0x000004, "Wrong size on MinigameMode_FiringRangeV2_C_ExecuteUbergraph_MinigameMode_FiringRangeV2");
static_assert(offsetof(MinigameMode_FiringRangeV2_C_ExecuteUbergraph_MinigameMode_FiringRangeV2, EntryPoint) == 0x000000, "Member 'MinigameMode_FiringRangeV2_C_ExecuteUbergraph_MinigameMode_FiringRangeV2::EntryPoint' has a wrong offset!");

// Function MinigameMode_FiringRangeV2.MinigameMode_FiringRangeV2_C.GiftWeapons
// 0x00A8 (0x00A8 - 0x0000)
struct MinigameMode_FiringRangeV2_C_GiftWeapons final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortVolumeManager*                     CallFunc_GetVolumeManager_OutVolumeManager;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVolumeValidityResult                         CallFunc_GetVolumeManager_OutIsValid;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AController*>                    CallFunc_GetAllPlayersInVolume_ReturnValue;        // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  K2Node_DynamicCast_AsFort_Player_Controller;       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IFortInventoryOwnerInterface> CallFunc_GiveItemToInventoryOwner_InventoryOwner_CastInput; // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IFortInventoryOwnerInterface> CallFunc_GiveItemToInventoryOwner_InventoryOwner1_CastInput; // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IFortInventoryOwnerInterface> CallFunc_GiveItemToInventoryOwner_InventoryOwner2_CastInput; // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IFortInventoryOwnerInterface> CallFunc_GiveItemToInventoryOwner_InventoryOwner3_CastInput; // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IFortInventoryOwnerInterface> CallFunc_GiveItemToInventoryOwner_InventoryOwner4_CastInput; // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameMode_FiringRangeV2_C_GiftWeapons) == 0x000008, "Wrong alignment on MinigameMode_FiringRangeV2_C_GiftWeapons");
static_assert(sizeof(MinigameMode_FiringRangeV2_C_GiftWeapons) == 0x0000A8, "Wrong size on MinigameMode_FiringRangeV2_C_GiftWeapons");
static_assert(offsetof(MinigameMode_FiringRangeV2_C_GiftWeapons, Temp_int_Array_Index_Variable) == 0x000000, "Member 'MinigameMode_FiringRangeV2_C_GiftWeapons::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MinigameMode_FiringRangeV2_C_GiftWeapons, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'MinigameMode_FiringRangeV2_C_GiftWeapons::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MinigameMode_FiringRangeV2_C_GiftWeapons, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'MinigameMode_FiringRangeV2_C_GiftWeapons::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameMode_FiringRangeV2_C_GiftWeapons, CallFunc_GetVolumeManager_OutVolumeManager) == 0x000010, "Member 'MinigameMode_FiringRangeV2_C_GiftWeapons::CallFunc_GetVolumeManager_OutVolumeManager' has a wrong offset!");
static_assert(offsetof(MinigameMode_FiringRangeV2_C_GiftWeapons, CallFunc_GetVolumeManager_OutIsValid) == 0x000018, "Member 'MinigameMode_FiringRangeV2_C_GiftWeapons::CallFunc_GetVolumeManager_OutIsValid' has a wrong offset!");
static_assert(offsetof(MinigameMode_FiringRangeV2_C_GiftWeapons, CallFunc_GetAllPlayersInVolume_ReturnValue) == 0x000020, "Member 'MinigameMode_FiringRangeV2_C_GiftWeapons::CallFunc_GetAllPlayersInVolume_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameMode_FiringRangeV2_C_GiftWeapons, K2Node_SwitchEnum_CmpSuccess) == 0x000030, "Member 'MinigameMode_FiringRangeV2_C_GiftWeapons::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(MinigameMode_FiringRangeV2_C_GiftWeapons, CallFunc_Array_Get_Item) == 0x000038, "Member 'MinigameMode_FiringRangeV2_C_GiftWeapons::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinigameMode_FiringRangeV2_C_GiftWeapons, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'MinigameMode_FiringRangeV2_C_GiftWeapons::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameMode_FiringRangeV2_C_GiftWeapons, K2Node_DynamicCast_AsFort_Player_Controller) == 0x000048, "Member 'MinigameMode_FiringRangeV2_C_GiftWeapons::K2Node_DynamicCast_AsFort_Player_Controller' has a wrong offset!");
static_assert(offsetof(MinigameMode_FiringRangeV2_C_GiftWeapons, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'MinigameMode_FiringRangeV2_C_GiftWeapons::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MinigameMode_FiringRangeV2_C_GiftWeapons, CallFunc_Less_IntInt_ReturnValue) == 0x000051, "Member 'MinigameMode_FiringRangeV2_C_GiftWeapons::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameMode_FiringRangeV2_C_GiftWeapons, CallFunc_GiveItemToInventoryOwner_InventoryOwner_CastInput) == 0x000058, "Member 'MinigameMode_FiringRangeV2_C_GiftWeapons::CallFunc_GiveItemToInventoryOwner_InventoryOwner_CastInput' has a wrong offset!");
static_assert(offsetof(MinigameMode_FiringRangeV2_C_GiftWeapons, CallFunc_GiveItemToInventoryOwner_InventoryOwner1_CastInput) == 0x000068, "Member 'MinigameMode_FiringRangeV2_C_GiftWeapons::CallFunc_GiveItemToInventoryOwner_InventoryOwner1_CastInput' has a wrong offset!");
static_assert(offsetof(MinigameMode_FiringRangeV2_C_GiftWeapons, CallFunc_GiveItemToInventoryOwner_InventoryOwner2_CastInput) == 0x000078, "Member 'MinigameMode_FiringRangeV2_C_GiftWeapons::CallFunc_GiveItemToInventoryOwner_InventoryOwner2_CastInput' has a wrong offset!");
static_assert(offsetof(MinigameMode_FiringRangeV2_C_GiftWeapons, CallFunc_GiveItemToInventoryOwner_InventoryOwner3_CastInput) == 0x000088, "Member 'MinigameMode_FiringRangeV2_C_GiftWeapons::CallFunc_GiveItemToInventoryOwner_InventoryOwner3_CastInput' has a wrong offset!");
static_assert(offsetof(MinigameMode_FiringRangeV2_C_GiftWeapons, CallFunc_GiveItemToInventoryOwner_InventoryOwner4_CastInput) == 0x000098, "Member 'MinigameMode_FiringRangeV2_C_GiftWeapons::CallFunc_GiveItemToInventoryOwner_InventoryOwner4_CastInput' has a wrong offset!");

}

