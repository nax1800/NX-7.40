#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Prj_Athena_TNT

#include "Basic.hpp"

#include "B_Prj_Athena_Grenade_Base_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Prj_Athena_TNT.B_Prj_Athena_TNT_C
// 0x0060 (0x0888 - 0x0828)
class AB_Prj_Athena_TNT_C final : public AB_Prj_Athena_Grenade_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_B_Prj_Athena_TNT_C;                 // 0x0828(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       InteractCollision;                                 // 0x0830(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0838(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 TNTBundle;                                         // 0x0840(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         MaxCookTime;                                       // 0x0848(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84C[0x4];                                      // 0x084C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           FuseTimer;                                         // 0x0850(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         RemainingFuseTime;                                 // 0x0858(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Shockwave_Based_Explosion;                     // 0x085C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85D[0x3];                                      // 0x085D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Actual_Radius;                                     // 0x0860(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSimulationRunning;                                // 0x0864(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_865[0x3];                                      // 0x0865(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               TargetRotation;                                    // 0x0868(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         InterpSpeed;                                       // 0x0874(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LerpDuration;                                      // 0x0878(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_87C[0x4];                                      // 0x087C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           LerpTimer;                                         // 0x0880(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_B_Prj_Athena_TNT(int32 EntryPoint);
	void ReceiveDestroyed();
	void Lerp();
	void Event_OnVehicleDestroyed(class AActor* DestroyedActor);
	void Event_BuildingActorDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void BndEvt__ProjectileMovementComponent_K2Node_ComponentBoundEvent_1_OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult);
	void Event_StartFuse(float Time);
	void Spline_Point_Locations(const TArray<struct FVector>* Array);
	void MakeOrthogonalZ(const struct FRotator& InRotation, const struct FVector& Normal, struct FRotator* OutRotation);
	void OnRep_RemainingFuseTime();
	void ReceiveBeginPlay();
	void OnStop(const struct FHitResult& Hit);
	void OnExploded(const TArray<class AActor*>& HitActors, const TArray<struct FHitResult>& HitResults);
	void UserConstructionScript();
	void FuseEnded();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Prj_Athena_TNT_C">();
	}
	static class AB_Prj_Athena_TNT_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Prj_Athena_TNT_C>();
	}
};
static_assert(alignof(AB_Prj_Athena_TNT_C) == 0x000008, "Wrong alignment on AB_Prj_Athena_TNT_C");
static_assert(sizeof(AB_Prj_Athena_TNT_C) == 0x000888, "Wrong size on AB_Prj_Athena_TNT_C");
static_assert(offsetof(AB_Prj_Athena_TNT_C, UberGraphFrame_B_Prj_Athena_TNT_C) == 0x000828, "Member 'AB_Prj_Athena_TNT_C::UberGraphFrame_B_Prj_Athena_TNT_C' has a wrong offset!");
static_assert(offsetof(AB_Prj_Athena_TNT_C, InteractCollision) == 0x000830, "Member 'AB_Prj_Athena_TNT_C::InteractCollision' has a wrong offset!");
static_assert(offsetof(AB_Prj_Athena_TNT_C, Spline) == 0x000838, "Member 'AB_Prj_Athena_TNT_C::Spline' has a wrong offset!");
static_assert(offsetof(AB_Prj_Athena_TNT_C, TNTBundle) == 0x000840, "Member 'AB_Prj_Athena_TNT_C::TNTBundle' has a wrong offset!");
static_assert(offsetof(AB_Prj_Athena_TNT_C, MaxCookTime) == 0x000848, "Member 'AB_Prj_Athena_TNT_C::MaxCookTime' has a wrong offset!");
static_assert(offsetof(AB_Prj_Athena_TNT_C, FuseTimer) == 0x000850, "Member 'AB_Prj_Athena_TNT_C::FuseTimer' has a wrong offset!");
static_assert(offsetof(AB_Prj_Athena_TNT_C, RemainingFuseTime) == 0x000858, "Member 'AB_Prj_Athena_TNT_C::RemainingFuseTime' has a wrong offset!");
static_assert(offsetof(AB_Prj_Athena_TNT_C, Use_Shockwave_Based_Explosion) == 0x00085C, "Member 'AB_Prj_Athena_TNT_C::Use_Shockwave_Based_Explosion' has a wrong offset!");
static_assert(offsetof(AB_Prj_Athena_TNT_C, Actual_Radius) == 0x000860, "Member 'AB_Prj_Athena_TNT_C::Actual_Radius' has a wrong offset!");
static_assert(offsetof(AB_Prj_Athena_TNT_C, bSimulationRunning) == 0x000864, "Member 'AB_Prj_Athena_TNT_C::bSimulationRunning' has a wrong offset!");
static_assert(offsetof(AB_Prj_Athena_TNT_C, TargetRotation) == 0x000868, "Member 'AB_Prj_Athena_TNT_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(AB_Prj_Athena_TNT_C, InterpSpeed) == 0x000874, "Member 'AB_Prj_Athena_TNT_C::InterpSpeed' has a wrong offset!");
static_assert(offsetof(AB_Prj_Athena_TNT_C, LerpDuration) == 0x000878, "Member 'AB_Prj_Athena_TNT_C::LerpDuration' has a wrong offset!");
static_assert(offsetof(AB_Prj_Athena_TNT_C, LerpTimer) == 0x000880, "Member 'AB_Prj_Athena_TNT_C::LerpTimer' has a wrong offset!");

}

