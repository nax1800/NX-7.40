#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GCN_NPC_Fire

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function GCN_NPC_Fire.GCN_NPC_Fire_C.OnActive
// 0x00E0 (0x00E0 - 0x0000)
struct GCN_NPC_Fire_C_OnActive final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface; // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GCN_NPC_Fire_C_OnActive) == 0x000008, "Wrong alignment on GCN_NPC_Fire_C_OnActive");
static_assert(sizeof(GCN_NPC_Fire_C_OnActive) == 0x0000E0, "Wrong size on GCN_NPC_Fire_C_OnActive");
static_assert(offsetof(GCN_NPC_Fire_C_OnActive, MyTarget) == 0x000000, "Member 'GCN_NPC_Fire_C_OnActive::MyTarget' has a wrong offset!");
static_assert(offsetof(GCN_NPC_Fire_C_OnActive, Parameters) == 0x000008, "Member 'GCN_NPC_Fire_C_OnActive::Parameters' has a wrong offset!");
static_assert(offsetof(GCN_NPC_Fire_C_OnActive, ReturnValue) == 0x0000C0, "Member 'GCN_NPC_Fire_C_OnActive::ReturnValue' has a wrong offset!");
static_assert(offsetof(GCN_NPC_Fire_C_OnActive, CallFunc_IsDedicatedServer_ReturnValue) == 0x0000C1, "Member 'GCN_NPC_Fire_C_OnActive::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GCN_NPC_Fire_C_OnActive, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface) == 0x0000C8, "Member 'GCN_NPC_Fire_C_OnActive::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface' has a wrong offset!");
static_assert(offsetof(GCN_NPC_Fire_C_OnActive, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'GCN_NPC_Fire_C_OnActive::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GCN_NPC_Fire_C_OnActive, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x0000D9, "Member 'GCN_NPC_Fire_C_OnActive::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(GCN_NPC_Fire_C_OnActive, Temp_bool_Variable) == 0x0000DA, "Member 'GCN_NPC_Fire_C_OnActive::Temp_bool_Variable' has a wrong offset!");

// Function GCN_NPC_Fire.GCN_NPC_Fire_C.OnRemove
// 0x00C8 (0x00C8 - 0x0000)
struct GCN_NPC_Fire_C_OnRemove final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GCN_NPC_Fire_C_OnRemove) == 0x000008, "Wrong alignment on GCN_NPC_Fire_C_OnRemove");
static_assert(sizeof(GCN_NPC_Fire_C_OnRemove) == 0x0000C8, "Wrong size on GCN_NPC_Fire_C_OnRemove");
static_assert(offsetof(GCN_NPC_Fire_C_OnRemove, MyTarget) == 0x000000, "Member 'GCN_NPC_Fire_C_OnRemove::MyTarget' has a wrong offset!");
static_assert(offsetof(GCN_NPC_Fire_C_OnRemove, Parameters) == 0x000008, "Member 'GCN_NPC_Fire_C_OnRemove::Parameters' has a wrong offset!");
static_assert(offsetof(GCN_NPC_Fire_C_OnRemove, ReturnValue) == 0x0000C0, "Member 'GCN_NPC_Fire_C_OnRemove::ReturnValue' has a wrong offset!");
static_assert(offsetof(GCN_NPC_Fire_C_OnRemove, CallFunc_IsValid_ReturnValue) == 0x0000C1, "Member 'GCN_NPC_Fire_C_OnRemove::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

