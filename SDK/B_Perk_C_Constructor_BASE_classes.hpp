#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Perk_C_Constructor_BASE

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "StructRecyclingResource_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Perk_C_Constructor_BASE.B_Perk_C_Constructor_BASE_C
// 0x0580 (0x1518 - 0x0F98)
class AB_Perk_C_Constructor_BASE_C final : public AFortConstructorBASE
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0F98(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        BaseEnergyComponentC;                              // 0x0FA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        BaseEnergyComponentB;                              // 0x0FA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        BaseEnergyComponentA;                              // 0x0FB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_FeeltheBase_Chargup;                             // 0x0FB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FeelTheBaseTraceLocation;                          // 0x0FC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0FC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x0FD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere_Collision_For_Anim;                         // 0x0FD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_Base_Device;                                    // 0x0FE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortMiniMapComponent*                  FortMiniMap1;                                      // 0x0FE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Workbench_Ticking;                                 // 0x0FF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0FF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             MiniMapIcon;                                       // 0x1000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Minimap_View_Distance;                             // 0x1008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_100C[0x4];                                     // 0x100C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_Recycling;                                      // 0x1010(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         ConnectedWood;                                     // 0x1030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ConnectedStone;                                    // 0x1034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ConnectedMetal;                                    // 0x1038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_103C[0x4];                                     // 0x103C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortWorldItemDefinition*               Wood;                                              // 0x1040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWorldItemDefinition*               Stone;                                             // 0x1048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWorldItemDefinition*               Metal;                                             // 0x1050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnWood;                                         // 0x1058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SpawnStone;                                        // 0x1059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SpawnMetal;                                        // 0x105A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_105B[0x1];                                     // 0x105B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnMax;                                          // 0x105C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HyperThreadingMultiplier;                          // 0x1060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1064[0x4];                                     // 0x1064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_PowerModulation_T01;                            // 0x1068(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_PowerModulation_T01;                            // 0x1088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DefensiveIntegrationLevel;                         // 0x1090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1094[0x4];                                     // 0x1094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_LoftyArchitecture;                              // 0x1098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TC_LoftyArchitecture_T01;                          // 0x10A0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          BaseIsPlaced;                                      // 0x10C0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_10C1[0x3];                                     // 0x10C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumPlayersNearBase;                                // 0x10C4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BasePowerLevel;                                    // 0x10C8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalResourcesSpawned;                             // 0x10CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ResourceLimit;                                     // 0x10D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10D4[0x4];                                     // 0x10D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_FrozenCastle_T01;                               // 0x10D8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_FrozenCastle;                                   // 0x10F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TC_ContainmentUnit;                                // 0x1100(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_Grant_TriggerReflectDamage_FromBASEWall;        // 0x1120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TC_BASEMD_T01;                                     // 0x1128(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FStructRecyclingResource               StoredWood;                                        // 0x1148(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStructRecyclingResource               StoredStone;                                       // 0x1158(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStructRecyclingResource               StoredMetal;                                       // 0x1168(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HyperthreadingResourceLimit;                       // 0x1178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_117C[0x4];                                     // 0x117C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                ConstructorAbilitySystemComponent;                 // 0x1180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_OutgoingHealAmp;                                // 0x1188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Effect_Mesh_Comp;                                  // 0x1190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             Inner_MIDs_Friendly;                               // 0x1198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         Transition_Start_Delay;                            // 0x11A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11AC[0x4];                                     // 0x11AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             Outer_MIDs_Friendly;                               // 0x11B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_MegaBASE;                                       // 0x11C0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_BASEMD_T01;                                     // 0x11E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TC_FullyContained;                                 // 0x11E8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          InitialStaticMeshAnimationIsComplete;              // 0x1208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1209[0x7];                                     // 0x1209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             SoundResourcesCreated;                             // 0x1210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SoundResourcesCollected;                           // 0x1218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMeshComponent*>           EffectMeshArray;                                   // 0x1220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class ABuildingSMActor*>               BuildingActorArray;                                // 0x1230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         DelayBeforeShowingMeshes;                          // 0x1240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DelayDisabled;                                     // 0x1244(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1245[0x3];                                     // 0x1245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DelayedMeshedTimer;                                // 0x1248(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_TrapDamage;                                     // 0x1250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TC_SuperchargedTraps;                              // 0x1258(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_TrapReloadRate;                                 // 0x1278(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_TrapReloadRate;                                 // 0x1298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_Constructor_BASEOutgoingDamageMod;              // 0x12A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RecyclingTimer;                                    // 0x12A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12AC[0x4];                                     // 0x12AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_FeelTheBase;                                    // 0x12B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerPawn_Constructor_C*              ConstructorPawn;                                   // 0x12B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               FeelTheBasePowerLevel1;                            // 0x12C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               FeelTheBasePowerLevel2;                            // 0x12C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               FeelTheBasePowerLevel3;                            // 0x12D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             EnergyBuildASound;                                 // 0x12D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             EnergyBuildBSound;                                 // 0x12E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             EnergyBuildCSound;                                 // 0x12E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             EnergyStageTransitionSound;                        // 0x12F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsPlayingLoopA;                                   // 0x12F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12F9[0x7];                                     // 0x12F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_MegaBASE_T01;                                   // 0x1300(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_MegaBASE_T02;                                   // 0x1320(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         MegaBASE_AdditionalNodes_T01;                      // 0x1340(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         MegaBASE_AdditionalNodes_T02;                      // 0x1360(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_Recycling_T01;                                  // 0x1380(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_ElectrifiedFloors;                              // 0x13A0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_ElectrifiedFloors;                              // 0x13C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TC_FullyContained_T01;                             // 0x13C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          NewHeroSystem;                                     // 0x13D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13D1[0x7];                                     // 0x13D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_FullyContained_T01;                             // 0x13D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NoAddedNodes;                                      // 0x13E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13E4[0x4];                                     // 0x13E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_FeelTheBASE_T01;                                // 0x13E8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_PowerModulation_T02;                            // 0x1408(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_Power_Modulation_T02;                           // 0x1428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         RecyclingMultiplier;                               // 0x1430(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         T1Amount;                                          // 0x1450(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         T2Amount;                                          // 0x1470(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         T3Amount;                                          // 0x1490(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         MaximumResourceSpawned;                            // 0x14B0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         MaximumResourceLimit;                              // 0x14D0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_Grant_Trigger_FreezeOnHit;                      // 0x14F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TC_FrozenCastle_T02;                               // 0x14F8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_B_Perk_C_Constructor_BASE(int32 EntryPoint);
	void BndEvt__P_FeeltheBase_Chargup_K2Node_ComponentBoundEvent_0_ParticleBurstSignature__DelegateSignature(class FName EventName, float EmitterTime, int32 ParticleCount);
	void ResetFeelTheBaseGlow();
	void FeelTheBaseGlow(bool Stack1, bool Stack2, bool Stack3);
	void SaveOwner(class APlayerPawn_Constructor_C* Param_ConstructorPawn);
	void ApplyTrapEffects();
	void ShowHiddenMeshes();
	void BaseIsReadyToAnimate();
	void ResourcesCollected();
	void ResourcesCreated();
	void BlueprintOnInteract(const class AFortPawn* InteractingPawn);
	void StopBuildingActorVisuals(class ABuildingSMActor* BuildingActor, class UStaticMeshComponent* EffectMeshComp);
	void StartBuildingActorVisuals(class ABuildingSMActor* BuildingActor, class UStaticMeshComponent* EffectMeshComp);
	void AnimateLegs(bool LegsUp);
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_267_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_264_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Recycling();
	void OnPlaced(class UAbilitySystemComponent* InstigatorAbilitySystemComponent);
	void UserConstructionScript();
	void SetupBaseDefaultValues(class UAbilitySystemComponent* Ability_System_Component, int32* Param_NodesToAffect);
	void Setup_Base_Effect_Array(class UAbilitySystemComponent* Instigator_Ability_System, TArray<struct FBASEGameplayEffect>* BASEBuildingEffects, TArray<struct FBASEGameplayEffect>* BASEFriendlyEffects, TArray<struct FBASEGameplayEffect>* BASEHostileEffects);
	void SetupBuildingEffects(class UAbilitySystemComponent* Param_AbilitySystemComponent, TArray<struct FBASEGameplayEffect>* BuildingEffects);
	void SetupFriendlyEffects(class UAbilitySystemComponent* Param_AbilitySystemComponent, TArray<struct FBASEGameplayEffect>* FriendlyEffects);
	void SetupHostileEffects(class UAbilitySystemComponent* Param_AbilitySystemComponent, TArray<struct FBASEGameplayEffect>* HostileEffects);
	void RecycleResources();
	void OnRep_BaseIsPlaced();
	void SpawnResourceForRecycling(class UFortWorldItemDefinition* ItemDefinition, int32 AmountToSpawn, EFortResourceType Param_ResourceType);
	void AddResourceToStack(const struct FStructRecyclingResource& RecyclingResource, class UFortWorldItemDefinition* Stored_Resource, int32 AmountToSpawn, struct FStructRecyclingResource* SetValue);
	void OnRep_CollectResources();
	void SetDamageMultiplier();
	void SetBaseVisualGlow(class UAbilitySystemComponent* Param_AbilitySystemComponent);
	void BaseSelfApplyGameplaySpec(const struct FGameplayEffectSpecHandle& GE_Spec);
	void OnRep_InitialStaticMeshAnimationIsComplete();
	void GetTrapGEFromTag(const struct FGameplayTagContainer& InTag, class UClass** OutGE);
	void SetupTrapEffects(class UAbilitySystemComponent* AbilityComponent);
	void SetHealingMultiplier();
	void SpawnResourceWithAmount(class UFortWorldItemDefinition* ItemDefinition, int32 AmountToSpawn, EFortResourceType Param_ResourceType);
	void GetFeelTheBaseTraceLocation(struct FTransform* TraceLocation);
	void UpdateAudioCrossfade(class USoundBase* Sound);

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Perk_C_Constructor_BASE_C">();
	}
	static class AB_Perk_C_Constructor_BASE_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Perk_C_Constructor_BASE_C>();
	}
};
static_assert(alignof(AB_Perk_C_Constructor_BASE_C) == 0x000008, "Wrong alignment on AB_Perk_C_Constructor_BASE_C");
static_assert(sizeof(AB_Perk_C_Constructor_BASE_C) == 0x001518, "Wrong size on AB_Perk_C_Constructor_BASE_C");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, UberGraphFrame) == 0x000F98, "Member 'AB_Perk_C_Constructor_BASE_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, BaseEnergyComponentC) == 0x000FA0, "Member 'AB_Perk_C_Constructor_BASE_C::BaseEnergyComponentC' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, BaseEnergyComponentB) == 0x000FA8, "Member 'AB_Perk_C_Constructor_BASE_C::BaseEnergyComponentB' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, BaseEnergyComponentA) == 0x000FB0, "Member 'AB_Perk_C_Constructor_BASE_C::BaseEnergyComponentA' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, P_FeeltheBase_Chargup) == 0x000FB8, "Member 'AB_Perk_C_Constructor_BASE_C::P_FeeltheBase_Chargup' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, FeelTheBaseTraceLocation) == 0x000FC0, "Member 'AB_Perk_C_Constructor_BASE_C::FeelTheBaseTraceLocation' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, Box) == 0x000FC8, "Member 'AB_Perk_C_Constructor_BASE_C::Box' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, Capsule) == 0x000FD0, "Member 'AB_Perk_C_Constructor_BASE_C::Capsule' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, Sphere_Collision_For_Anim) == 0x000FD8, "Member 'AB_Perk_C_Constructor_BASE_C::Sphere_Collision_For_Anim' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, SK_Base_Device) == 0x000FE0, "Member 'AB_Perk_C_Constructor_BASE_C::SK_Base_Device' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, FortMiniMap1) == 0x000FE8, "Member 'AB_Perk_C_Constructor_BASE_C::FortMiniMap1' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, Workbench_Ticking) == 0x000FF0, "Member 'AB_Perk_C_Constructor_BASE_C::Workbench_Ticking' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, Root) == 0x000FF8, "Member 'AB_Perk_C_Constructor_BASE_C::Root' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, MiniMapIcon) == 0x001000, "Member 'AB_Perk_C_Constructor_BASE_C::MiniMapIcon' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, Minimap_View_Distance) == 0x001008, "Member 'AB_Perk_C_Constructor_BASE_C::Minimap_View_Distance' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, TC_Recycling) == 0x001010, "Member 'AB_Perk_C_Constructor_BASE_C::TC_Recycling' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, ConnectedWood) == 0x001030, "Member 'AB_Perk_C_Constructor_BASE_C::ConnectedWood' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, ConnectedStone) == 0x001034, "Member 'AB_Perk_C_Constructor_BASE_C::ConnectedStone' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, ConnectedMetal) == 0x001038, "Member 'AB_Perk_C_Constructor_BASE_C::ConnectedMetal' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, Wood) == 0x001040, "Member 'AB_Perk_C_Constructor_BASE_C::Wood' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, Stone) == 0x001048, "Member 'AB_Perk_C_Constructor_BASE_C::Stone' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, Metal) == 0x001050, "Member 'AB_Perk_C_Constructor_BASE_C::Metal' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, SpawnWood) == 0x001058, "Member 'AB_Perk_C_Constructor_BASE_C::SpawnWood' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, SpawnStone) == 0x001059, "Member 'AB_Perk_C_Constructor_BASE_C::SpawnStone' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, SpawnMetal) == 0x00105A, "Member 'AB_Perk_C_Constructor_BASE_C::SpawnMetal' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, SpawnMax) == 0x00105C, "Member 'AB_Perk_C_Constructor_BASE_C::SpawnMax' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, HyperThreadingMultiplier) == 0x001060, "Member 'AB_Perk_C_Constructor_BASE_C::HyperThreadingMultiplier' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, TC_PowerModulation_T01) == 0x001068, "Member 'AB_Perk_C_Constructor_BASE_C::TC_PowerModulation_T01' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, GE_PowerModulation_T01) == 0x001088, "Member 'AB_Perk_C_Constructor_BASE_C::GE_PowerModulation_T01' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, DefensiveIntegrationLevel) == 0x001090, "Member 'AB_Perk_C_Constructor_BASE_C::DefensiveIntegrationLevel' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, GE_LoftyArchitecture) == 0x001098, "Member 'AB_Perk_C_Constructor_BASE_C::GE_LoftyArchitecture' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, TC_LoftyArchitecture_T01) == 0x0010A0, "Member 'AB_Perk_C_Constructor_BASE_C::TC_LoftyArchitecture_T01' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, BaseIsPlaced) == 0x0010C0, "Member 'AB_Perk_C_Constructor_BASE_C::BaseIsPlaced' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, NumPlayersNearBase) == 0x0010C4, "Member 'AB_Perk_C_Constructor_BASE_C::NumPlayersNearBase' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, BasePowerLevel) == 0x0010C8, "Member 'AB_Perk_C_Constructor_BASE_C::BasePowerLevel' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, TotalResourcesSpawned) == 0x0010CC, "Member 'AB_Perk_C_Constructor_BASE_C::TotalResourcesSpawned' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, ResourceLimit) == 0x0010D0, "Member 'AB_Perk_C_Constructor_BASE_C::ResourceLimit' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, TC_FrozenCastle_T01) == 0x0010D8, "Member 'AB_Perk_C_Constructor_BASE_C::TC_FrozenCastle_T01' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, GE_FrozenCastle) == 0x0010F8, "Member 'AB_Perk_C_Constructor_BASE_C::GE_FrozenCastle' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, TC_ContainmentUnit) == 0x001100, "Member 'AB_Perk_C_Constructor_BASE_C::TC_ContainmentUnit' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, GE_Grant_TriggerReflectDamage_FromBASEWall) == 0x001120, "Member 'AB_Perk_C_Constructor_BASE_C::GE_Grant_TriggerReflectDamage_FromBASEWall' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, TC_BASEMD_T01) == 0x001128, "Member 'AB_Perk_C_Constructor_BASE_C::TC_BASEMD_T01' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, StoredWood) == 0x001148, "Member 'AB_Perk_C_Constructor_BASE_C::StoredWood' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, StoredStone) == 0x001158, "Member 'AB_Perk_C_Constructor_BASE_C::StoredStone' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, StoredMetal) == 0x001168, "Member 'AB_Perk_C_Constructor_BASE_C::StoredMetal' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, HyperthreadingResourceLimit) == 0x001178, "Member 'AB_Perk_C_Constructor_BASE_C::HyperthreadingResourceLimit' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, ConstructorAbilitySystemComponent) == 0x001180, "Member 'AB_Perk_C_Constructor_BASE_C::ConstructorAbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, GE_OutgoingHealAmp) == 0x001188, "Member 'AB_Perk_C_Constructor_BASE_C::GE_OutgoingHealAmp' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, Effect_Mesh_Comp) == 0x001190, "Member 'AB_Perk_C_Constructor_BASE_C::Effect_Mesh_Comp' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, Inner_MIDs_Friendly) == 0x001198, "Member 'AB_Perk_C_Constructor_BASE_C::Inner_MIDs_Friendly' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, Transition_Start_Delay) == 0x0011A8, "Member 'AB_Perk_C_Constructor_BASE_C::Transition_Start_Delay' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, Outer_MIDs_Friendly) == 0x0011B0, "Member 'AB_Perk_C_Constructor_BASE_C::Outer_MIDs_Friendly' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, TC_MegaBASE) == 0x0011C0, "Member 'AB_Perk_C_Constructor_BASE_C::TC_MegaBASE' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, GE_BASEMD_T01) == 0x0011E0, "Member 'AB_Perk_C_Constructor_BASE_C::GE_BASEMD_T01' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, TC_FullyContained) == 0x0011E8, "Member 'AB_Perk_C_Constructor_BASE_C::TC_FullyContained' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, InitialStaticMeshAnimationIsComplete) == 0x001208, "Member 'AB_Perk_C_Constructor_BASE_C::InitialStaticMeshAnimationIsComplete' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, SoundResourcesCreated) == 0x001210, "Member 'AB_Perk_C_Constructor_BASE_C::SoundResourcesCreated' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, SoundResourcesCollected) == 0x001218, "Member 'AB_Perk_C_Constructor_BASE_C::SoundResourcesCollected' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, EffectMeshArray) == 0x001220, "Member 'AB_Perk_C_Constructor_BASE_C::EffectMeshArray' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, BuildingActorArray) == 0x001230, "Member 'AB_Perk_C_Constructor_BASE_C::BuildingActorArray' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, DelayBeforeShowingMeshes) == 0x001240, "Member 'AB_Perk_C_Constructor_BASE_C::DelayBeforeShowingMeshes' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, DelayDisabled) == 0x001244, "Member 'AB_Perk_C_Constructor_BASE_C::DelayDisabled' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, DelayedMeshedTimer) == 0x001248, "Member 'AB_Perk_C_Constructor_BASE_C::DelayedMeshedTimer' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, GE_TrapDamage) == 0x001250, "Member 'AB_Perk_C_Constructor_BASE_C::GE_TrapDamage' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, TC_SuperchargedTraps) == 0x001258, "Member 'AB_Perk_C_Constructor_BASE_C::TC_SuperchargedTraps' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, TC_TrapReloadRate) == 0x001278, "Member 'AB_Perk_C_Constructor_BASE_C::TC_TrapReloadRate' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, GE_TrapReloadRate) == 0x001298, "Member 'AB_Perk_C_Constructor_BASE_C::GE_TrapReloadRate' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, GE_Constructor_BASEOutgoingDamageMod) == 0x0012A0, "Member 'AB_Perk_C_Constructor_BASE_C::GE_Constructor_BASEOutgoingDamageMod' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, RecyclingTimer) == 0x0012A8, "Member 'AB_Perk_C_Constructor_BASE_C::RecyclingTimer' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, GE_FeelTheBase) == 0x0012B0, "Member 'AB_Perk_C_Constructor_BASE_C::GE_FeelTheBase' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, ConstructorPawn) == 0x0012B8, "Member 'AB_Perk_C_Constructor_BASE_C::ConstructorPawn' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, FeelTheBasePowerLevel1) == 0x0012C0, "Member 'AB_Perk_C_Constructor_BASE_C::FeelTheBasePowerLevel1' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, FeelTheBasePowerLevel2) == 0x0012C8, "Member 'AB_Perk_C_Constructor_BASE_C::FeelTheBasePowerLevel2' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, FeelTheBasePowerLevel3) == 0x0012D0, "Member 'AB_Perk_C_Constructor_BASE_C::FeelTheBasePowerLevel3' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, EnergyBuildASound) == 0x0012D8, "Member 'AB_Perk_C_Constructor_BASE_C::EnergyBuildASound' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, EnergyBuildBSound) == 0x0012E0, "Member 'AB_Perk_C_Constructor_BASE_C::EnergyBuildBSound' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, EnergyBuildCSound) == 0x0012E8, "Member 'AB_Perk_C_Constructor_BASE_C::EnergyBuildCSound' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, EnergyStageTransitionSound) == 0x0012F0, "Member 'AB_Perk_C_Constructor_BASE_C::EnergyStageTransitionSound' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, bIsPlayingLoopA) == 0x0012F8, "Member 'AB_Perk_C_Constructor_BASE_C::bIsPlayingLoopA' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, TC_MegaBASE_T01) == 0x001300, "Member 'AB_Perk_C_Constructor_BASE_C::TC_MegaBASE_T01' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, TC_MegaBASE_T02) == 0x001320, "Member 'AB_Perk_C_Constructor_BASE_C::TC_MegaBASE_T02' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, MegaBASE_AdditionalNodes_T01) == 0x001340, "Member 'AB_Perk_C_Constructor_BASE_C::MegaBASE_AdditionalNodes_T01' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, MegaBASE_AdditionalNodes_T02) == 0x001360, "Member 'AB_Perk_C_Constructor_BASE_C::MegaBASE_AdditionalNodes_T02' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, TC_Recycling_T01) == 0x001380, "Member 'AB_Perk_C_Constructor_BASE_C::TC_Recycling_T01' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, TC_ElectrifiedFloors) == 0x0013A0, "Member 'AB_Perk_C_Constructor_BASE_C::TC_ElectrifiedFloors' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, GE_ElectrifiedFloors) == 0x0013C0, "Member 'AB_Perk_C_Constructor_BASE_C::GE_ElectrifiedFloors' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, TC_FullyContained_T01) == 0x0013C8, "Member 'AB_Perk_C_Constructor_BASE_C::TC_FullyContained_T01' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, NewHeroSystem) == 0x0013D0, "Member 'AB_Perk_C_Constructor_BASE_C::NewHeroSystem' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, GE_FullyContained_T01) == 0x0013D8, "Member 'AB_Perk_C_Constructor_BASE_C::GE_FullyContained_T01' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, NoAddedNodes) == 0x0013E0, "Member 'AB_Perk_C_Constructor_BASE_C::NoAddedNodes' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, TC_FeelTheBASE_T01) == 0x0013E8, "Member 'AB_Perk_C_Constructor_BASE_C::TC_FeelTheBASE_T01' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, TC_PowerModulation_T02) == 0x001408, "Member 'AB_Perk_C_Constructor_BASE_C::TC_PowerModulation_T02' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, GE_Power_Modulation_T02) == 0x001428, "Member 'AB_Perk_C_Constructor_BASE_C::GE_Power_Modulation_T02' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, RecyclingMultiplier) == 0x001430, "Member 'AB_Perk_C_Constructor_BASE_C::RecyclingMultiplier' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, T1Amount) == 0x001450, "Member 'AB_Perk_C_Constructor_BASE_C::T1Amount' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, T2Amount) == 0x001470, "Member 'AB_Perk_C_Constructor_BASE_C::T2Amount' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, T3Amount) == 0x001490, "Member 'AB_Perk_C_Constructor_BASE_C::T3Amount' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, MaximumResourceSpawned) == 0x0014B0, "Member 'AB_Perk_C_Constructor_BASE_C::MaximumResourceSpawned' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, MaximumResourceLimit) == 0x0014D0, "Member 'AB_Perk_C_Constructor_BASE_C::MaximumResourceLimit' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, GE_Grant_Trigger_FreezeOnHit) == 0x0014F0, "Member 'AB_Perk_C_Constructor_BASE_C::GE_Grant_Trigger_FreezeOnHit' has a wrong offset!");
static_assert(offsetof(AB_Perk_C_Constructor_BASE_C, TC_FrozenCastle_T02) == 0x0014F8, "Member 'AB_Perk_C_Constructor_BASE_C::TC_FrozenCastle_T02' has a wrong offset!");

}

