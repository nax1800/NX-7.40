#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimationSharing

#include "Basic.hpp"


namespace SDK::Params
{

// Function AnimationSharing.AnimSharingStateInstance.GetInstancedActors
// 0x0010 (0x0010 - 0x0000)
struct AnimSharingStateInstance_GetInstancedActors final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimSharingStateInstance_GetInstancedActors) == 0x000008, "Wrong alignment on AnimSharingStateInstance_GetInstancedActors");
static_assert(sizeof(AnimSharingStateInstance_GetInstancedActors) == 0x000010, "Wrong size on AnimSharingStateInstance_GetInstancedActors");
static_assert(offsetof(AnimSharingStateInstance_GetInstancedActors, Actors) == 0x000000, "Member 'AnimSharingStateInstance_GetInstancedActors::Actors' has a wrong offset!");

// Function AnimationSharing.AnimationSharingManager.AnimSharingEnabled
// 0x0001 (0x0001 - 0x0000)
struct AnimationSharingManager_AnimSharingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationSharingManager_AnimSharingEnabled) == 0x000001, "Wrong alignment on AnimationSharingManager_AnimSharingEnabled");
static_assert(sizeof(AnimationSharingManager_AnimSharingEnabled) == 0x000001, "Wrong size on AnimationSharingManager_AnimSharingEnabled");
static_assert(offsetof(AnimationSharingManager_AnimSharingEnabled, ReturnValue) == 0x000000, "Member 'AnimationSharingManager_AnimSharingEnabled::ReturnValue' has a wrong offset!");

// Function AnimationSharing.AnimationSharingStateProcessor.GetAnimationStateEnum
// 0x0008 (0x0008 - 0x0000)
struct AnimationSharingStateProcessor_GetAnimationStateEnum final
{
public:
	class UEnum*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationSharingStateProcessor_GetAnimationStateEnum) == 0x000008, "Wrong alignment on AnimationSharingStateProcessor_GetAnimationStateEnum");
static_assert(sizeof(AnimationSharingStateProcessor_GetAnimationStateEnum) == 0x000008, "Wrong size on AnimationSharingStateProcessor_GetAnimationStateEnum");
static_assert(offsetof(AnimationSharingStateProcessor_GetAnimationStateEnum, ReturnValue) == 0x000000, "Member 'AnimationSharingStateProcessor_GetAnimationStateEnum::ReturnValue' has a wrong offset!");

// Function AnimationSharing.AnimationSharingStateProcessor.ProcessActorState
// 0x0018 (0x0018 - 0x0000)
struct AnimationSharingStateProcessor_ProcessActorState final
{
public:
	int32                                         OutState;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InActor;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CurrentState;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OnDemandState;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldProcess;                                    // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationSharingStateProcessor_ProcessActorState) == 0x000008, "Wrong alignment on AnimationSharingStateProcessor_ProcessActorState");
static_assert(sizeof(AnimationSharingStateProcessor_ProcessActorState) == 0x000018, "Wrong size on AnimationSharingStateProcessor_ProcessActorState");
static_assert(offsetof(AnimationSharingStateProcessor_ProcessActorState, OutState) == 0x000000, "Member 'AnimationSharingStateProcessor_ProcessActorState::OutState' has a wrong offset!");
static_assert(offsetof(AnimationSharingStateProcessor_ProcessActorState, InActor) == 0x000008, "Member 'AnimationSharingStateProcessor_ProcessActorState::InActor' has a wrong offset!");
static_assert(offsetof(AnimationSharingStateProcessor_ProcessActorState, CurrentState) == 0x000010, "Member 'AnimationSharingStateProcessor_ProcessActorState::CurrentState' has a wrong offset!");
static_assert(offsetof(AnimationSharingStateProcessor_ProcessActorState, OnDemandState) == 0x000011, "Member 'AnimationSharingStateProcessor_ProcessActorState::OnDemandState' has a wrong offset!");
static_assert(offsetof(AnimationSharingStateProcessor_ProcessActorState, bShouldProcess) == 0x000012, "Member 'AnimationSharingStateProcessor_ProcessActorState::bShouldProcess' has a wrong offset!");

}

