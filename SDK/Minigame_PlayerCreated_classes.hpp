#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Minigame_PlayerCreated

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Minigame_PlayerCreated.Minigame_PlayerCreated_C
// 0x0018 (0x06F0 - 0x06D8)
class AMinigame_PlayerCreated_C final : public AFortMinigame
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         MaxTeams;                                          // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E4[0x4];                                      // 0x06E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonActivatablePanel*                ScoreboardPanel;                                   // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Minigame_PlayerCreated(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnClientExitVolume(class APlayerState* PlayerState, class AFortVolume* Param_Volume);
	void OnClientEnterVolume(class APlayerState* PlayerState, class AFortVolume* Param_Volume);
	void ReceiveBeginPlay();
	void HandleStateChanged(EFortMinigameState MinigameState);
	void HideScoreboardPanel();
	void ShowScoreboardPanel();
	void HandleMinigameWarmup();
	void OnComplete_D9496DB6400ADA561B9C749CD6D8B5BC(class UUserWidget* UserWidget);
	void UserConstructionScript();
	void AssignTeams();
	void ShouldShowScoreboard(class APlayerController* PlayerController, bool* bResult);
	void BindVolumeDelegates();
	void UnbindVolumeDelegates();
	void IsVolumeEventRelevant(class APlayerState* PlayerState, class AFortVolume* EventVolume, bool* bResult);
	void GetRandomlyOrderedParticipatingPlayers(TArray<class AFortPlayerState*>* RandomizedPlayers);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Minigame_PlayerCreated_C">();
	}
	static class AMinigame_PlayerCreated_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMinigame_PlayerCreated_C>();
	}
};
static_assert(alignof(AMinigame_PlayerCreated_C) == 0x000008, "Wrong alignment on AMinigame_PlayerCreated_C");
static_assert(sizeof(AMinigame_PlayerCreated_C) == 0x0006F0, "Wrong size on AMinigame_PlayerCreated_C");
static_assert(offsetof(AMinigame_PlayerCreated_C, UberGraphFrame) == 0x0006D8, "Member 'AMinigame_PlayerCreated_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMinigame_PlayerCreated_C, MaxTeams) == 0x0006E0, "Member 'AMinigame_PlayerCreated_C::MaxTeams' has a wrong offset!");
static_assert(offsetof(AMinigame_PlayerCreated_C, ScoreboardPanel) == 0x0006E8, "Member 'AMinigame_PlayerCreated_C::ScoreboardPanel' has a wrong offset!");

}

