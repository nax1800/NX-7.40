#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeBundleCategoryHeader

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "UMG_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ChallengeBundleCategoryHeader.ChallengeBundleCategoryHeader_C
// 0x00C8 (0x03F0 - 0x0328)
class UChallengeBundleCategoryHeader_C final : public UFortChallengeBundleWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 BattlePassImage;                                   // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               BattlePassImageContainer;                          // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                BoundBreakSpacer;                                  // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          BundleCategoryBorderCB;                            // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       BundleCategoryName;                                // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           ConfettiVB;                                        // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        EffectSwitcher;                                    // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonDateTimeTextBlock*               ExpirationDate;                                    // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                IconSpacer;                                        // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LockedIcon;                                        // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           NoEffect;                                          // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               VerticalSizeSB;                                    // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IconBreakBounds;                                   // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             StyleTable;                                        // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UClass*, class UUserWidget*>       EffectsWidgetsMap;                                 // 0x03A0(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void ExecuteUbergraph_ChallengeBundleCategoryHeader(int32 EntryPoint);
	void OnBundleUpdated();
	void PreConstruct(bool IsDesignTime);
	void UpdateBundle();
	void ApplyStyle(const struct FChallengeBundleCategoryHeaderStyleStruct& Style);
	void InitEffectsWidgets();
	void AddWidgetClassToMapAndSwitcher(class UClass* WidgetClass, TMap<class UClass*, class UUserWidget*>& WidgetMap, class UWidgetSwitcher*& WidgetSwitcher);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ChallengeBundleCategoryHeader_C">();
	}
	static class UChallengeBundleCategoryHeader_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeBundleCategoryHeader_C>();
	}
};
static_assert(alignof(UChallengeBundleCategoryHeader_C) == 0x000008, "Wrong alignment on UChallengeBundleCategoryHeader_C");
static_assert(sizeof(UChallengeBundleCategoryHeader_C) == 0x0003F0, "Wrong size on UChallengeBundleCategoryHeader_C");
static_assert(offsetof(UChallengeBundleCategoryHeader_C, UberGraphFrame) == 0x000328, "Member 'UChallengeBundleCategoryHeader_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UChallengeBundleCategoryHeader_C, BattlePassImage) == 0x000330, "Member 'UChallengeBundleCategoryHeader_C::BattlePassImage' has a wrong offset!");
static_assert(offsetof(UChallengeBundleCategoryHeader_C, BattlePassImageContainer) == 0x000338, "Member 'UChallengeBundleCategoryHeader_C::BattlePassImageContainer' has a wrong offset!");
static_assert(offsetof(UChallengeBundleCategoryHeader_C, BoundBreakSpacer) == 0x000340, "Member 'UChallengeBundleCategoryHeader_C::BoundBreakSpacer' has a wrong offset!");
static_assert(offsetof(UChallengeBundleCategoryHeader_C, BundleCategoryBorderCB) == 0x000348, "Member 'UChallengeBundleCategoryHeader_C::BundleCategoryBorderCB' has a wrong offset!");
static_assert(offsetof(UChallengeBundleCategoryHeader_C, BundleCategoryName) == 0x000350, "Member 'UChallengeBundleCategoryHeader_C::BundleCategoryName' has a wrong offset!");
static_assert(offsetof(UChallengeBundleCategoryHeader_C, ConfettiVB) == 0x000358, "Member 'UChallengeBundleCategoryHeader_C::ConfettiVB' has a wrong offset!");
static_assert(offsetof(UChallengeBundleCategoryHeader_C, EffectSwitcher) == 0x000360, "Member 'UChallengeBundleCategoryHeader_C::EffectSwitcher' has a wrong offset!");
static_assert(offsetof(UChallengeBundleCategoryHeader_C, ExpirationDate) == 0x000368, "Member 'UChallengeBundleCategoryHeader_C::ExpirationDate' has a wrong offset!");
static_assert(offsetof(UChallengeBundleCategoryHeader_C, IconSpacer) == 0x000370, "Member 'UChallengeBundleCategoryHeader_C::IconSpacer' has a wrong offset!");
static_assert(offsetof(UChallengeBundleCategoryHeader_C, LockedIcon) == 0x000378, "Member 'UChallengeBundleCategoryHeader_C::LockedIcon' has a wrong offset!");
static_assert(offsetof(UChallengeBundleCategoryHeader_C, NoEffect) == 0x000380, "Member 'UChallengeBundleCategoryHeader_C::NoEffect' has a wrong offset!");
static_assert(offsetof(UChallengeBundleCategoryHeader_C, VerticalSizeSB) == 0x000388, "Member 'UChallengeBundleCategoryHeader_C::VerticalSizeSB' has a wrong offset!");
static_assert(offsetof(UChallengeBundleCategoryHeader_C, IconBreakBounds) == 0x000390, "Member 'UChallengeBundleCategoryHeader_C::IconBreakBounds' has a wrong offset!");
static_assert(offsetof(UChallengeBundleCategoryHeader_C, StyleTable) == 0x000398, "Member 'UChallengeBundleCategoryHeader_C::StyleTable' has a wrong offset!");
static_assert(offsetof(UChallengeBundleCategoryHeader_C, EffectsWidgetsMap) == 0x0003A0, "Member 'UChallengeBundleCategoryHeader_C::EffectsWidgetsMap' has a wrong offset!");

}

