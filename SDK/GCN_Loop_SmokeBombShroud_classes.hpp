#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GCN_Loop_SmokeBombShroud

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GCN_Loop_SmokeBombShroud.GCN_Loop_SmokeBombShroud_C
// 0x0120 (0x09A0 - 0x0880)
class AGCN_Loop_SmokeBombShroud_C final : public AFortGameplayCueNotify_Loop
{
public:
	class AFortPlayerPawn*                        TargetPlayer;                                      // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExpirationSoundPeriod;                             // 0x0888(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VelocityInterp;                                    // 0x088C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystemComponent*>       AttachedFX;                                        // 0x0890(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class USkeletalMeshComponent*>         PlayerSkeletalMeshes;                              // 0x08A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          FriendlyPlayer;                                    // 0x08B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B1[0x7];                                      // 0x08B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ExpireTellDelayTimer;                              // 0x08B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ExpirationSoundTimer;                              // 0x08C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         VisbilityLevel;                                    // 0x08C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WalkVisMultiplier;                                 // 0x08CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SprintVisMultiplier;                               // 0x08D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinFriendlyOpacity;                                // 0x08D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InteractVisibility;                                // 0x08D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8DC[0x4];                                      // 0x08DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         DataDuration;                                      // 0x08E0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DataTellDuration;                                  // 0x0900(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DataWalkVisMult;                                   // 0x0920(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DataSprintVisMult;                                 // 0x0940(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DataFriendlyVisMult;                               // 0x0960(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DataShadowPlaneOpacity;                            // 0x0980(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void UserConstructionScript();
	void GetSkeletalMeshes();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GCN_Loop_SmokeBombShroud_C">();
	}
	static class AGCN_Loop_SmokeBombShroud_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGCN_Loop_SmokeBombShroud_C>();
	}
};
static_assert(alignof(AGCN_Loop_SmokeBombShroud_C) == 0x000008, "Wrong alignment on AGCN_Loop_SmokeBombShroud_C");
static_assert(sizeof(AGCN_Loop_SmokeBombShroud_C) == 0x0009A0, "Wrong size on AGCN_Loop_SmokeBombShroud_C");
static_assert(offsetof(AGCN_Loop_SmokeBombShroud_C, TargetPlayer) == 0x000880, "Member 'AGCN_Loop_SmokeBombShroud_C::TargetPlayer' has a wrong offset!");
static_assert(offsetof(AGCN_Loop_SmokeBombShroud_C, ExpirationSoundPeriod) == 0x000888, "Member 'AGCN_Loop_SmokeBombShroud_C::ExpirationSoundPeriod' has a wrong offset!");
static_assert(offsetof(AGCN_Loop_SmokeBombShroud_C, VelocityInterp) == 0x00088C, "Member 'AGCN_Loop_SmokeBombShroud_C::VelocityInterp' has a wrong offset!");
static_assert(offsetof(AGCN_Loop_SmokeBombShroud_C, AttachedFX) == 0x000890, "Member 'AGCN_Loop_SmokeBombShroud_C::AttachedFX' has a wrong offset!");
static_assert(offsetof(AGCN_Loop_SmokeBombShroud_C, PlayerSkeletalMeshes) == 0x0008A0, "Member 'AGCN_Loop_SmokeBombShroud_C::PlayerSkeletalMeshes' has a wrong offset!");
static_assert(offsetof(AGCN_Loop_SmokeBombShroud_C, FriendlyPlayer) == 0x0008B0, "Member 'AGCN_Loop_SmokeBombShroud_C::FriendlyPlayer' has a wrong offset!");
static_assert(offsetof(AGCN_Loop_SmokeBombShroud_C, ExpireTellDelayTimer) == 0x0008B8, "Member 'AGCN_Loop_SmokeBombShroud_C::ExpireTellDelayTimer' has a wrong offset!");
static_assert(offsetof(AGCN_Loop_SmokeBombShroud_C, ExpirationSoundTimer) == 0x0008C0, "Member 'AGCN_Loop_SmokeBombShroud_C::ExpirationSoundTimer' has a wrong offset!");
static_assert(offsetof(AGCN_Loop_SmokeBombShroud_C, VisbilityLevel) == 0x0008C8, "Member 'AGCN_Loop_SmokeBombShroud_C::VisbilityLevel' has a wrong offset!");
static_assert(offsetof(AGCN_Loop_SmokeBombShroud_C, WalkVisMultiplier) == 0x0008CC, "Member 'AGCN_Loop_SmokeBombShroud_C::WalkVisMultiplier' has a wrong offset!");
static_assert(offsetof(AGCN_Loop_SmokeBombShroud_C, SprintVisMultiplier) == 0x0008D0, "Member 'AGCN_Loop_SmokeBombShroud_C::SprintVisMultiplier' has a wrong offset!");
static_assert(offsetof(AGCN_Loop_SmokeBombShroud_C, MinFriendlyOpacity) == 0x0008D4, "Member 'AGCN_Loop_SmokeBombShroud_C::MinFriendlyOpacity' has a wrong offset!");
static_assert(offsetof(AGCN_Loop_SmokeBombShroud_C, InteractVisibility) == 0x0008D8, "Member 'AGCN_Loop_SmokeBombShroud_C::InteractVisibility' has a wrong offset!");
static_assert(offsetof(AGCN_Loop_SmokeBombShroud_C, DataDuration) == 0x0008E0, "Member 'AGCN_Loop_SmokeBombShroud_C::DataDuration' has a wrong offset!");
static_assert(offsetof(AGCN_Loop_SmokeBombShroud_C, DataTellDuration) == 0x000900, "Member 'AGCN_Loop_SmokeBombShroud_C::DataTellDuration' has a wrong offset!");
static_assert(offsetof(AGCN_Loop_SmokeBombShroud_C, DataWalkVisMult) == 0x000920, "Member 'AGCN_Loop_SmokeBombShroud_C::DataWalkVisMult' has a wrong offset!");
static_assert(offsetof(AGCN_Loop_SmokeBombShroud_C, DataSprintVisMult) == 0x000940, "Member 'AGCN_Loop_SmokeBombShroud_C::DataSprintVisMult' has a wrong offset!");
static_assert(offsetof(AGCN_Loop_SmokeBombShroud_C, DataFriendlyVisMult) == 0x000960, "Member 'AGCN_Loop_SmokeBombShroud_C::DataFriendlyVisMult' has a wrong offset!");
static_assert(offsetof(AGCN_Loop_SmokeBombShroud_C, DataShadowPlaneOpacity) == 0x000980, "Member 'AGCN_Loop_SmokeBombShroud_C::DataShadowPlaneOpacity' has a wrong offset!");

}

