#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_DefaultPlayer_InteractLockonConsumable

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_DefaultPlayer_InteractLockonConsumable.GA_DefaultPlayer_InteractLockonConsumable_C
// 0x0108 (0x0A40 - 0x0938)
class UGA_DefaultPlayer_InteractLockonConsumable_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0938(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveTimerLength;                                   // 0x0948(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartPos;                                          // 0x094C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LerpAlpha;                                         // 0x0958(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LerpSpeedMult;                                     // 0x095C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerForPawnAndControllerLerp;                     // 0x0960(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bFirstUpdate;                                      // 0x0968(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_969[0x3];                                      // 0x0969(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartingYaw;                                       // 0x096C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PrevYawDiffRemaining;                              // 0x0970(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_974[0x4];                                      // 0x0974(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  FortPlayerController;                              // 0x0978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsInitialized;                                    // 0x0980(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_981[0x7];                                      // 0x0981(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACBGA_Blade_Athena_C*                   TargetBladeActor;                                  // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortGameplayAbilityMontageInfo        MontagePullInfo;                                   // 0x0990(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         DesiredDistanceFromInteractiveItem;                // 0x09E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentPosition;                                   // 0x09EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DestinationPosition;                               // 0x09F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetYaw;                                         // 0x0A04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawDiffRemaining;                                  // 0x0A08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A0C[0x4];                                      // 0x0A0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraShake*                           CameraShake;                                       // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            GE_PullGCL;                                        // 0x0A18(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ScaleForVFXToHideRotationPop;                      // 0x0A20(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNeedToUnHolster;                                  // 0x0A2C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2D[0x3];                                      // 0x0A2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DisableCrouch;                                     // 0x0A30(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         StartSwordPullTime;                                // 0x0A38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_DefaultPlayer_InteractLockonConsumable(int32 EntryPoint);
	void ForceNetUpdate();
	void K2_ActivateAbility();
	void TimeoutAndDie();
	void StartCameraTransition();
	void InterpolateToPosition();
	void Triggered_32EFF48D4B67387E3E3673927A1B5E29(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_32EFF48D4B67387E3E3673927A1B5E29(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_32EFF48D4B67387E3E3673927A1B5E29(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void K2_OnEndAbility(bool bWasCancelled);
	void StartInteractSearch();
	void EndInteractSearch();
	void StartPullAnimation();
	void InitializePawnAndControllerRot(class AFortPlayerPawn* PawnAthena, bool* bInitialized);
	void StopCameraShakes();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_DefaultPlayer_InteractLockonConsumable_C">();
	}
	static class UGA_DefaultPlayer_InteractLockonConsumable_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_DefaultPlayer_InteractLockonConsumable_C>();
	}
};
static_assert(alignof(UGA_DefaultPlayer_InteractLockonConsumable_C) == 0x000008, "Wrong alignment on UGA_DefaultPlayer_InteractLockonConsumable_C");
static_assert(sizeof(UGA_DefaultPlayer_InteractLockonConsumable_C) == 0x000A40, "Wrong size on UGA_DefaultPlayer_InteractLockonConsumable_C");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, UberGraphFrame) == 0x000938, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, PlayerPawn) == 0x000940, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, MoveTimerLength) == 0x000948, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::MoveTimerLength' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, StartPos) == 0x00094C, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::StartPos' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, LerpAlpha) == 0x000958, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::LerpAlpha' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, LerpSpeedMult) == 0x00095C, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::LerpSpeedMult' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, TimerForPawnAndControllerLerp) == 0x000960, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::TimerForPawnAndControllerLerp' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, bFirstUpdate) == 0x000968, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::bFirstUpdate' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, StartingYaw) == 0x00096C, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::StartingYaw' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, PrevYawDiffRemaining) == 0x000970, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::PrevYawDiffRemaining' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, FortPlayerController) == 0x000978, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::FortPlayerController' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, bIsInitialized) == 0x000980, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::bIsInitialized' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, TargetBladeActor) == 0x000988, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::TargetBladeActor' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, MontagePullInfo) == 0x000990, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::MontagePullInfo' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, DesiredDistanceFromInteractiveItem) == 0x0009E8, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::DesiredDistanceFromInteractiveItem' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, CurrentPosition) == 0x0009EC, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::CurrentPosition' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, DestinationPosition) == 0x0009F8, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::DestinationPosition' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, TargetYaw) == 0x000A04, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::TargetYaw' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, YawDiffRemaining) == 0x000A08, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::YawDiffRemaining' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, CameraShake) == 0x000A10, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::CameraShake' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, GE_PullGCL) == 0x000A18, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::GE_PullGCL' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, ScaleForVFXToHideRotationPop) == 0x000A20, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::ScaleForVFXToHideRotationPop' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, bNeedToUnHolster) == 0x000A2C, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::bNeedToUnHolster' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, DisableCrouch) == 0x000A30, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::DisableCrouch' has a wrong offset!");
static_assert(offsetof(UGA_DefaultPlayer_InteractLockonConsumable_C, StartSwordPullTime) == 0x000A38, "Member 'UGA_DefaultPlayer_InteractLockonConsumable_C::StartSwordPullTime' has a wrong offset!");

}

